------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0e	    UPPAD_LIMIT =	14	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 0f	    CWAITCNT   =	15	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros
      2  10000 ????
      3  10000 ????						; Scanline padding macro
      4  10000 ????				       MAC	pad
      5  10000 ????
      6  10000 ????			    .SCANLINES SET	{1}	; Scanlines to essentially skip
      7  10000 ????
      8  10000 ????				       LDX	.SCANLINES
      9  10000 ????
     10  10000 ????			    .loop
     11  10000 ????				       STA	WSYNC
     12  10000 ????
     13  10000 ????				       DEX
     14  10000 ????				       BNE	.loop
     15  10000 ????
     16  10000 ????				       STA	WSYNC
     17  10000 ????
     18  10000 ????				       ENDM
     19  10000 ????
     20  10000 ????				       MAC	ina
     21  10000 ????				       CLC
     22  10000 ????				       ADC	#1
     23  10000 ????				       ENDM
     24  10000 ????
     25  10000 ????				       MAC	dea
     26  10000 ????				       SEC
     27  10000 ????				       SBC	#1
     28  10000 ????				       ENDM
     29  10000 ????
     30  10000 ????						; Precision delay macro
     31  10000 ????
     32  10000 ????				       MAC	delay
     33  10000 ????			    .CYCLES    SET	{1}
     34  10000 ????
     35  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     36  10000 ????				       NOP
     37  10000 ????			    .CYCLES    SET	.CYCLES - 2
     38  10000 ????				       ENDIF
     39  10000 ????
     40  10000 ????				       IF	[.CYCLES - 2] / 5
     41  10000 ????				       REPEAT	.CYCLES / 5
     42  10000 ????				       INC	DUMP
     43  10000 ????				       REPEND
     44  10000 ????			    .CYCLES    SET	.CYCLES % 5
     45  10000 ????				       ENDIF
     46  10000 ????
     47  10000 ????				       IF	.CYCLES % 3 == 1
     48  10000 ????				       NOP
     49  10000 ????			    .CYCLES    SET	.CYCLES - 2
     50  10000 ????				       ENDIF
     51  10000 ????
     52  10000 ????				       REPEAT	.CYCLES / 3
     53  10000 ????				       STA	DUMP
     54  10000 ????				       REPEND
     55  10000 ????
     56  10000 ????			    .CYCLES    SET	.CYCLES % 3
     57  10000 ????
     58  10000 ????				       REPEAT	.CYCLES / 2
     59  10000 ????				       NOP
     60  10000 ????				       REPEND
     61  10000 ????
     62  10000 ????			    .CYCLES    SET	.CYCLES % 2
     63  10000 ????
     64  10000 ????				       IF	.CYCLES
     65  10000 ????				       ERR
     66  10000 ????				       ENDIF
     67  10000 ????
     68  10000 ????				       ENDM
     69  10000 ????
     70  10000 ????						; Macro used to find the space used up in a certain section of ram
     71  10000 ????
     72  10000 ????				       MAC	usage_report
     73  10000 ????
     74  10000 ????			    NAM        SET	{1}	; Name of the section
     75  10000 ????			    SPOS       SET	{2}	; Start address of the section
     76  10000 ????			    EPOS       SET	{3}	; End address of the section
     77  10000 ????			    CPOS       SET	.	; The current position of the macro in the section
     78  10000 ????
     79  10000 ????			    CAP        SET	EPOS - SPOS	; Space available for data
     80  10000 ????			    TKUP       SET	CPOS - SPOS	; Space taken up by data
     81  10000 ????
     82  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d	;
     83  10000 ????
     84  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     85  10000 ????
     86  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   fordPressed DC	0
     57 U00b1		       00	   backPressed DC	0
     58 U00b2		       00	   leftPressed DC	0
     59 U00b3		       00	   rigtPressed DC	0
     60 U00b4
     61 U00b4		       00	   wallColour DC	0
     62 U00b5		       00	   shadowColour DC	0
     63 U00b6		       00	   drawingPlyr DC	0
     64 U00b7		       00	   direction  DC	0
     65 U00b8		       00	   spriteHeight DC	0
     66 U00b9		       00	   spritePosY DC	0
     67 U00ba		       00 00	   miniMapPtr DC.W	0
     68 U00bc		       00 00	   mapPtr     DC.W	0
     69 U00be		       00 00	   sprite     DC.W	0
     70 U00c0
      0 U00c0					      USAGE_REPORT	"RAM", $80, $100
      1 U00c0
      2 U00c0				   NAM	      SET	"RAM"
      3 U00c0				   SPOS       SET	$80
      4 U00c0				   EPOS       SET	$100
      5 U00c0				   CPOS       SET	.
      6 U00c0
      7 U00c0				   CAP	      SET	EPOS - SPOS
      8 U00c0				   TKUP       SET	CPOS - SPOS
      9 U00c0
     10 U00c0				   PCNT       SET	[TKUP * 100 / CAP]d
     11 U00c0
 50 % of your RAM is used up ( 64 / 128 ) bytes
     12 U00c0					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     13 U00c0
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c0					      INCLUDE	"include/pia_addr.h"
      1 U00c0							; PIA addresses
      2 U00c0
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   carl
      8  f078		       00		      DC	%00000000
      9  f079		       66		      DC	%01100110
     10  f07a		       24		      DC	%00100100
     11  f07b		       3c		      DC	%00111100
     12  f07c		       42		      DC	%01000010
     13  f07d		       bd		      DC	%10111101
     14  f07e		       c3		      DC	%11000011
     15  f07f		       81		      DC	%10000001
     16  f080		       a5		      DC	%10100101
     17  f081		       42		      DC	%01000010
     18  f082		       3c		      DC	%00111100
     19  f083
     20  f083				   miniMap_01
     21  f083		       e0 07		      DC.W	%0000011111100000
     22  f085		       bf fd		      DC.W	%1111110110111111
     23  f087		       80 01		      DC.W	%0000000110000000
     24  f089		       80 01		      DC.W	%0000000110000000
     25  f08b		       be bd		      DC.W	%1011110110111110
     26  f08d		       a2 a5		      DC.W	%1010010110100010
     27  f08f		       a2 a7		      DC.W	%1010011110100010
     28  f091		       e2 a7		      DC.W	%1010011111100010
     29  f093		       e2 a5		      DC.W	%1010010111100010
     30  f095		       be bd		      DC.W	%1011110110111110
     31  f097		       80 81		      DC.W	%1000000110000000
     32  f099		       80 81		      DC.W	%1000000110000000
     33  f09b		       bf fd		      DC.W	%1111110110111111
     34  f09d		       a0 05		      DC.W	%0000010110100000
     35  f09f		       a0 05		      DC.W	%0000010110100000
     36  f0a1		       e0 07		      DC.W	%0000011111100000
     37  f0a3
     38  f0a3				   map_01_load
     39  f0a3		       a9 d1		      LDA	#MAP_01_POS
     40  f0a5		       85 aa		      STA	playerPos
     41  f0a7		       a9 10		      LDA	#MAP_01_WDTH
     42  f0a9		       85 ab		      STA	mapWidth
     43  f0ab
     44  f0ab		       a9 00		      LDA	#<map_01
     45  f0ad		       85 bc		      STA	mapPtr
     46  f0af		       a9 f1		      LDA	#>map_01
     47  f0b1		       85 bd		      STA	mapPtr + 1
     48  f0b3
     49  f0b3		       a9 83		      LDA	#<miniMap_01
     50  f0b5		       85 ba		      STA	miniMapPtr
     51  f0b7		       a9 f0		      LDA	#>miniMap_01
     52  f0b9		       85 bb		      STA	miniMapPtr + 1
     53  f0bb		       60		      RTS
     54  f0bc
     55  f0bc
     56  f100		       00 00 00 00*	      ALIGN	256
     57  f100
     58  f100				   map_01
     59  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     60  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     61  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     62  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     63  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     64  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     65  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     66  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     67  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     68  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     69  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     70  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     71  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     72  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     73  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     74  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F800
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F800
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200
     10  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     11  f200
 25 % of your map space is used up ( 512 / 2048 ) bytes
     12  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     13  f200
     15  f200
     16  f800					      ORG	$F800
     17  f800
     18  f800				   start
     19  f800
     20  f800							; Initialize everything
     21  f800
------- FILE init.asm LEVEL 2 PASS 4
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800					      SUBROUTINE
      4  f800
      5  f800		       a2 ff		      LDX	#stack
      6  f802		       9a		      TXS
      7  f803
      8  f803		       a9 00		      LDA	#NULL
      9  f805
     10  f805		       d8		      CLD
     11  f806		       18		      CLC
     12  f807		       58		      CLI
     13  f808		       b8		      CLV
     14  f809
     15  f809		       a2 00		      LDX	#NULL
     16  f80b
     17  f80b				   .loop
     18  f80b
     19  f80b		       95 00		      STA	cleanStart,X
     20  f80d		       ca		      DEX
     21  f80e
     22  f80e		       d0 fb		      BNE	.loop
     23  f810
     24  f810		       20 a3 f0 	      JSR	map_01_load
     25  f813
     26  f813		       a5 ab		      LDA	mapWidth
     27  f815		       85 af		      STA	yLoss
     28  f817		       a9 01		      LDA	#ONE
     29  f819		       85 ac		      STA	xGain
     30  f81b
     31  f81b		       a9 86		      LDA	#WCOLU
     32  f81d		       85 b4		      STA	wallColour
     33  f81f		       a9 82		      LDA	#SCOLU
     34  f821		       85 b5		      STA	shadowColour
------- FILE main.asm
     23  f823
     24  f823		       a9 02		      LDA	#VSYNC_SET
     25  f825
     26  f825				   screenStart
     27  f825
     28  f825							; Start vsync (3 scanlines)
     29  f825		       85 00		      STA	VSYNC
     30  f827
     31  f827		       85 02		      STA	WSYNC
     32  f829		       85 02		      STA	WSYNC
     33  f82b		       a9 00		      LDA	#NULL
     34  f82d		       85 02		      STA	WSYNC
     35  f82f
     36  f82f		       85 00		      STA	VSYNC
     37  f831
     38  f831							; Render everything
     39  f831
     40  f831
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f831					      INCLUDE	"walrend.asm"
      1  f831							; VePseu's wall renderer
      2  f831
      3  f831		       a4 aa		      LDY	playerPos
      4  f833
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f833					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f833							; Peripheral vision rendering (54 cycles)
      2  f833
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f833					      INCLUDE	"include/ands_0.h"
      1  f833							; The AND constants for peripheral vision
      2  f833
      3  f833		       00 c0	   AND_W0S1P1 =	%11000000
      4  f833		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f833
      0  f833					      X_POS_LOS		; 24 cycles
      1  f833
      2  f833		       98		      TYA
      3  f834		       18		      CLC
      4  f835		       65 ad		      ADC	xLoss
      5  f837		       38		      SEC
      6  f838		       e5 ac		      SBC	xGain
      7  f83a		       a8		      TAY
      8  f83b
      6  f83b		       b1 bc		      LDA	(mapPtr),Y
      7  f83d		       29 c0		      AND	#AND_W0S1P1
      8  f83f		       85 9b		      STA	shadow1a
      9  f841
     10  f841		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f842		       18		      CLC
     12  f843		       65 ac		      ADC	xGain
     13  f845		       65 ac		      ADC	xGain
     14  f847		       38		      SEC
     15  f848		       e5 ad		      SBC	xLoss
     16  f84a		       e5 ad		      SBC	xLoss
     17  f84c		       a8		      TAY
     18  f84d
     19  f84d		       b1 bc		      LDA	(mapPtr),Y	; 10 cycles
     20  f84f		       29 03		      AND	#AND_W0S1P2
     21  f851		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f853
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f853					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f853							; Render the first layer (not that ugly) (86 cycles)
      2  f853
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f853					      INCLUDE	"include/ands_1.h"
      1  f853							; The AND constants for layer 1
      2  f853
      3  f853		       00 03	   AND_W1S1P1 =	%00000011
      4  f853		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f853
      0  f853					      Y_POS_ADV		; 30 cycles
      1  f853
      2  f853		       98		      TYA
      3  f854		       18		      CLC
      4  f855		       65 ae		      ADC	yGain
      5  f857		       38		      SEC
      6  f858		       e5 af		      SBC	yLoss
      7  f85a		       a8		      TAY
      8  f85b
      6  f85b		       b1 bc		      LDA	(mapPtr),Y
      7  f85d		       85 9e		      STA	shadow1d
      8  f85f		       05 9f		      ORA	shadow1e
      9  f861		       29 03		      AND	#AND_W1S1P1
     10  f863		       85 9f		      STA	shadow1e
     11  f865
      0  f865					      X_POS_LOS		; 22 cycles
      1  f865
      2  f865		       98		      TYA
      3  f866		       18		      CLC
      4  f867		       65 ad		      ADC	xLoss
      5  f869		       38		      SEC
      6  f86a		       e5 ac		      SBC	xGain
      7  f86c		       a8		      TAY
      8  f86d
     13  f86d		       b1 bc		      LDA	(mapPtr),Y
     14  f86f		       85 80		      STA	wall1
     15  f871
      0  f871					      X_POS_LOS		; 34 cycles
      1  f871
      2  f871		       98		      TYA
      3  f872		       18		      CLC
      4  f873		       65 ad		      ADC	xLoss
      5  f875		       38		      SEC
      6  f876		       e5 ac		      SBC	xGain
      7  f878		       a8		      TAY
      8  f879
     17  f879		       b1 bc		      LDA	(mapPtr),Y
     18  f87b		       aa		      TAX
     19  f87c		       05 9b		      ORA	shadow1a
     20  f87e		       85 9b		      STA	shadow1a
     21  f880		       8a		      TXA
     22  f881		       29 03		      AND	#AND_W1S1P2
     23  f883		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f885
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f885					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f885							; Render the second layer (186 cycles)
      2  f885
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f885					      INCLUDE	"include/ands_2.h"
      1  f885							; The AND constants for layer 2
      2  f885
      3  f885		       00 e0	   AND_W2S1P1 =	%11100000
      4  f885		       00 fc	   AND_W2S2P1 =	%11111100
      5  f885
      6  f885		       00 03	   AND_W2S0P1 =	%00000011
      7  f885		       00 04	   AND_W2S1P2 =	%00000100
      8  f885		       00 0c	   AND_W2S2P2 =	%00001100
      9  f885
     10  f885		       00 fc	   AND_W2S0P2 =	%11111100
     11  f885
     12  f885		       00 80	   AND_W2S1P3 =	%10000000
     13  f885		       00 c0	   AND_W2S2P3 =	%11000000
     14  f885
     15  f885		       00 01	   AND_W2S1P4 =	%00000001
     16  f885		       00 0f	   AND_W2S2P4 =	%00001111
     17  f885		       00 03	   AND_W2S1P5 =	%00000011
     18  f885		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f885
      0  f885					      Y_POS_ADV_AL		; 35 cycles
      1  f885
      2  f885		       98		      TYA
      3  f886		       18		      CLC
      4  f887		       65 ae		      ADC	yGain
      5  f889		       65 ad		      ADC	xLoss
      6  f88b		       38		      SEC
      7  f88c		       e5 af		      SBC	yLoss
      8  f88e		       e5 ac		      SBC	xGain
      9  f890		       a8		      TAY
     10  f891
      6  f891		       b1 bc		      LDA	(mapPtr),Y
      7  f893		       29 fc		      AND	#AND_W2S2P1
      8  f895		       85 a0		      STA	shadow2ab
      9  f897		       29 e0		      AND	#AND_W2S1P1
     10  f899		       85 91		      STA	shadow2aa
     11  f89b
      0  f89b					      X_POS_GAN		; 41 cycles
      1  f89b
      2  f89b		       98		      TYA
      3  f89c		       18		      CLC
      4  f89d		       65 ac		      ADC	xGain
      5  f89f		       38		      SEC
      6  f8a0		       e5 ad		      SBC	xLoss
      7  f8a2		       a8		      TAY
      8  f8a3
     13  f8a3		       b1 bc		      LDA	(mapPtr),Y
     14  f8a5		       aa		      TAX
     15  f8a6		       85 85		      STA	wall2a
     16  f8a8		       29 03		      AND	#AND_W2S0P1
     17  f8aa		       85 86		      STA	wall2b
     18  f8ac		       8a		      TXA
     19  f8ad		       29 0c		      AND	#AND_W2S2P2
     20  f8af		       85 a1		      STA	shadow2bb
     21  f8b1		       29 04		      AND	#AND_W2S1P2
     22  f8b3		       85 92		      STA	shadow2ba
     23  f8b5
      0  f8b5					      X_POS_GAN		; 30 cycles
      1  f8b5
      2  f8b5		       98		      TYA
      3  f8b6		       18		      CLC
      4  f8b7		       65 ac		      ADC	xGain
      5  f8b9		       38		      SEC
      6  f8ba		       e5 ad		      SBC	xLoss
      7  f8bc		       a8		      TAY
      8  f8bd
     25  f8bd		       b1 bc		      LDA	(mapPtr),Y
     26  f8bf		       85 87		      STA	wall2c
     27  f8c1		       29 fc		      AND	#AND_W2S0P2
     28  f8c3		       05 86		      ORA	wall2b
     29  f8c5		       85 86		      STA	wall2b
     30  f8c7
      0  f8c7					      X_POS_GAN		; 35 cycles
      1  f8c7
      2  f8c7		       98		      TYA
      3  f8c8		       18		      CLC
      4  f8c9		       65 ac		      ADC	xGain
      5  f8cb		       38		      SEC
      6  f8cc		       e5 ad		      SBC	xLoss
      7  f8ce		       a8		      TAY
      8  f8cf
     32  f8cf		       b1 bc		      LDA	(mapPtr),Y
     33  f8d1		       85 88		      STA	wall2d
     34  f8d3		       85 89		      STA	wall2e
     35  f8d5		       29 c0		      AND	#AND_W2S2P3
     36  f8d7		       85 a2		      STA	shadow2cb
     37  f8d9		       29 80		      AND	#AND_W2S1P3
     38  f8db		       85 93		      STA	shadow2ca
     39  f8dd
      0  f8dd					      X_POS_GAN		; 37 cycles
      1  f8dd
      2  f8dd		       98		      TYA
      3  f8de		       18		      CLC
      4  f8df		       65 ac		      ADC	xGain
      5  f8e1		       38		      SEC
      6  f8e2		       e5 ad		      SBC	xLoss
      7  f8e4		       a8		      TAY
      8  f8e5
     41  f8e5		       b1 bc		      LDA	(mapPtr),Y
     42  f8e7		       29 0f		      AND	#AND_W2S2P4
     43  f8e9		       85 a3		      STA	shadow2db
     44  f8eb		       29 03		      AND	#AND_W2S1P5
     45  f8ed		       85 95		      STA	shadow2ea
     46  f8ef		       85 a4		      STA	shadow2eb
     47  f8f1		       29 01		      AND	#AND_W2S1P4
     48  f8f3		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f8f5
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f8f5					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f8f5							; Render the third layer (it's really ugly, at 281 cycles)
      2  f8f5
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f8f5					      INCLUDE	"include/ands_3.h"
      1  f8f5							; The AND constants for render layer 3
      2  f8f5
      3  f8f5		       00 80	   AND_W3S1P1 =	%10000000
      4  f8f5		       00 c0	   AND_W3S2P1 =	%11000000
      5  f8f5
      6  f8f5		       00 fc	   AND_W3S0P1 =	%11111100
      7  f8f5		       00 02	   AND_W3S1P2 =	%00000010
      8  f8f5		       00 03	   AND_W3S2P2 =	%00000011
      9  f8f5
     10  f8f5		       00 03	   AND_W3S0P2 =	%00000011
     11  f8f5		       00 0f	   AND_W3S0P3 =	%00001111
     12  f8f5		       00 10	   AND_W3S1P3 =	%00010000
     13  f8f5		       00 30	   AND_W3S2P3 =	%00110000
     14  f8f5
     15  f8f5		       00 f0	   AND_W3S0P4 =	%11110000
     16  f8f5		       00 30	   AND_W3S0P5 =	%00110000
     17  f8f5
     18  f8f5		       00 c0	   AND_W3S0P6 =	%11000000
     19  f8f5		       00 f0	   AND_W3S0P7 =	%11110000
     20  f8f5		       00 20	   AND_W3S1P4 =	%00100000
     21  f8f5		       00 30	   AND_W3S2P4 =	%00110000
     22  f8f5
     23  f8f5		       00 0f	   AND_W3S0P8 =	%00001111
     24  f8f5		       00 03	   AND_W3S0P9 =	%00000011
     25  f8f5		       00 10	   AND_W3S1P5 =	%00010000
     26  f8f5		       00 30	   AND_W3S2P5 =	%00110000
     27  f8f5
     28  f8f5		       00 02	   AND_W3S1P6 =	%00000010
     29  f8f5		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f8f5
      0  f8f5					      Y_POS_ADV_AG		; 35 cycles
      1  f8f5
      2  f8f5		       98		      TYA
      3  f8f6		       18		      CLC
      4  f8f7		       65 ae		      ADC	yGain
      5  f8f9		       65 ac		      ADC	xGain
      6  f8fb		       38		      SEC
      7  f8fc		       e5 af		      SBC	yLoss
      8  f8fe		       e5 ad		      SBC	xLoss
      9  f900		       a8		      TAY
     10  f901
      6  f901		       b1 bc		      LDA	(mapPtr),Y
      7  f903		       29 03		      AND	#AND_W3S2P6
      8  f905		       85 a9		      STA	shadow3eb
      9  f907		       29 02		      AND	#AND_W3S1P6
     10  f909		       85 9a		      STA	shadow3ea
     11  f90b
      0  f90b					      X_POS_LOS		; 38 cycles
      1  f90b
      2  f90b		       98		      TYA
      3  f90c		       18		      CLC
      4  f90d		       65 ad		      ADC	xLoss
      5  f90f		       38		      SEC
      6  f910		       e5 ac		      SBC	xGain
      7  f912		       a8		      TAY
      8  f913
     13  f913		       b1 bc		      LDA	(mapPtr),Y
     14  f915		       aa		      TAX
     15  f916		       29 0f		      AND	#AND_W3S0P8
     16  f918		       85 8d		      STA	wall3d
     17  f91a		       29 03		      AND	#AND_W3S0P9
     18  f91c		       85 8e		      STA	wall3e
     19  f91e		       8a		      TXA
     20  f91f		       29 30		      AND	#AND_W3S2P5
     21  f921		       85 a8		      STA	shadow3db
     22  f923		       29 10		      AND	#AND_W3S1P5
     23  f925		       85 99		      STA	shadow3da
     24  f927
      0  f927					      X_POS_LOS		; 46 cycles
      1  f927
      2  f927		       98		      TYA
      3  f928		       18		      CLC
      4  f929		       65 ad		      ADC	xLoss
      5  f92b		       38		      SEC
      6  f92c		       e5 ac		      SBC	xGain
      7  f92e		       a8		      TAY
      8  f92f
     26  f92f		       b1 bc		      LDA	(mapPtr),Y
     27  f931		       aa		      TAX
     28  f932		       29 f0		      AND	#AND_W3S0P7
     29  f934		       05 8d		      ORA	wall3d
     30  f936		       85 8d		      STA	wall3d
     31  f938		       29 c0		      AND	#AND_W3S0P6
     32  f93a		       85 8c		      STA	wall3c
     33  f93c		       8a		      TXA
     34  f93d		       29 30		      AND	#AND_W3S2P4
     35  f93f		       85 a7		      STA	shadow3cb
     36  f941		       29 20		      AND	#AND_W3S1P4
     37  f943		       85 98		      STA	shadow3ca
     38  f945
      0  f945					      X_POS_LOS		; 32 cycles
      1  f945
      2  f945		       98		      TYA
      3  f946		       18		      CLC
      4  f947		       65 ad		      ADC	xLoss
      5  f949		       38		      SEC
      6  f94a		       e5 ac		      SBC	xGain
      7  f94c		       a8		      TAY
      8  f94d
     40  f94d		       b1 bc		      LDA	(mapPtr),Y
     41  f94f		       29 f0		      AND	#AND_W3S0P4
     42  f951		       85 8b		      STA	wall3b
     43  f953		       29 30		      AND	#AND_W3S0P5
     44  f955		       05 8c		      ORA	wall3c
     45  f957		       85 8c		      STA	wall3c
     46  f959
      0  f959					      X_POS_LOS		; 46 cycles
      1  f959
      2  f959		       98		      TYA
      3  f95a		       18		      CLC
      4  f95b		       65 ad		      ADC	xLoss
      5  f95d		       38		      SEC
      6  f95e		       e5 ac		      SBC	xGain
      7  f960		       a8		      TAY
      8  f961
     48  f961		       b1 bc		      LDA	(mapPtr),Y
     49  f963		       aa		      TAX
     50  f964		       29 0f		      AND	#AND_W3S0P3
     51  f966		       05 8b		      ORA	wall3b
     52  f968		       85 8b		      STA	wall3b
     53  f96a		       29 03		      AND	#AND_W3S0P2
     54  f96c		       85 8a		      STA	wall3a
     55  f96e		       8a		      TXA
     56  f96f		       29 30		      AND	#AND_W3S2P3
     57  f971		       85 a6		      STA	shadow3bb
     58  f973		       29 10		      AND	#AND_W3S1P3
     59  f975		       85 97		      STA	shadow3ba
     60  f977
      0  f977					      X_POS_LOS		; 41 cycles
      1  f977
      2  f977		       98		      TYA
      3  f978		       18		      CLC
      4  f979		       65 ad		      ADC	xLoss
      5  f97b		       38		      SEC
      6  f97c		       e5 ac		      SBC	xGain
      7  f97e		       a8		      TAY
      8  f97f
     62  f97f		       b1 bc		      LDA	(mapPtr),Y
     63  f981		       aa		      TAX
     64  f982		       29 fc		      AND	#AND_W3S0P1
     65  f984		       05 8a		      ORA	wall3a
     66  f986		       85 8a		      STA	wall3a
     67  f988		       8a		      TXA
     68  f989		       29 03		      AND	#AND_W3S2P2
     69  f98b		       85 a5		      STA	shadow3ab
     70  f98d		       29 02		      AND	#AND_W3S1P2
     71  f98f		       85 96		      STA	shadow3aa
     72  f991
      0  f991					      X_POS_LOS		; 35 cycles
      1  f991
      2  f991		       98		      TYA
      3  f992		       18		      CLC
      4  f993		       65 ad		      ADC	xLoss
      5  f995		       38		      SEC
      6  f996		       e5 ac		      SBC	xGain
      7  f998		       a8		      TAY
      8  f999
     74  f999		       b1 bc		      LDA	(mapPtr),Y
     75  f99b		       29 c0		      AND	#AND_W3S2P1
     76  f99d		       05 a5		      ORA	shadow3ab
     77  f99f		       85 a5		      STA	shadow3ab
     78  f9a1		       29 80		      AND	#AND_W3S1P1
     79  f9a3		       05 96		      ORA	shadow3aa
     80  f9a5		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9a7
     13  f9a7		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9a9					      INCLUDE	"scrend.asm"
      1  f9a9							; VePseu's screen renderer
      2  f9a9
      3  f9a9							; Remove the shadows incase only 1 wall is drawn
      4  f9a9
      5  f9a9					      SUBROUTINE
      6  f9a9
      7  f9a9		       a5 9b		      LDA	shadow1a	; 12 cycles
      8  f9ab		       05 80		      ORA	wall1
      9  f9ad		       45 80		      EOR	wall1
     10  f9af		       85 9b		      STA	shadow1a
     11  f9b1
     12  f9b1		       a5 9c		      LDA	shadow1b	; 12 cycles
     13  f9b3		       05 80		      ORA	wall1
     14  f9b5		       45 80		      EOR	wall1
     15  f9b7		       85 9c		      STA	shadow1b
     16  f9b9
     17  f9b9		       a5 9e		      LDA	shadow1d	; 12 cycles
     18  f9bb		       05 80		      ORA	wall1
     19  f9bd		       45 80		      EOR	wall1
     20  f9bf		       85 9e		      STA	shadow1d
     21  f9c1
     22  f9c1		       a5 9f		      LDA	shadow1e	; 12 cycles
     23  f9c3		       05 80		      ORA	wall1
     24  f9c5		       45 80		      EOR	wall1
     25  f9c7		       85 9f		      STA	shadow1e
     26  f9c9
     27  f9c9		       a5 80		      LDA	wall1	; Copy wall one to the four addresses preceding it (15 cycles)
     28  f9cb		       85 81		      STA	wall1+1
     29  f9cd		       85 82		      STA	wall1+2
     30  f9cf		       85 83		      STA	wall1+3
     31  f9d1		       85 84		      STA	wall1+4
     32  f9d3
     33  f9d3		       a2 00		      LDX	#INDEXINIT	; 2 cycles
     34  f9d5
     35  f9d5				   .loop		; Totals at 909 cycles
     36  f9d5
     37  f9d5		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     38  f9d7		       15 80		      ORA	wall1,X
     39  f9d9		       95 85		      STA	wall2a,X
     40  f9db
     41  f9db		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     42  f9dd		       15 9b		      ORA	shadow1a,X
     43  f9df		       95 91		      STA	shadow2aa,X
     44  f9e1
     45  f9e1		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     46  f9e3		       15 9b		      ORA	shadow1a,X
     47  f9e5		       95 a0		      STA	shadow2ab,X
     48  f9e7
     49  f9e7		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     50  f9e9		       15 9b		      ORA	shadow1a,X
     51  f9eb		       55 9b		      EOR	shadow1a,X
     52  f9ed		       95 85		      STA	wall2a,X
     53  f9ef
     54  f9ef		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     55  f9f1		       15 85		      ORA	wall2a,X
     56  f9f3		       55 85		      EOR	wall2a,X
     57  f9f5		       95 91		      STA	shadow2aa,X
     58  f9f7
     59  f9f7		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     60  f9f9		       15 85		      ORA	wall2a,X
     61  f9fb		       55 85		      EOR	wall2a,X
     62  f9fd		       95 a0		      STA	shadow2ab,X
     63  f9ff
     64  f9ff		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     65  fa00		       e0 0a		      CPX	#WALLCNT
     66  fa02		       d0 d1		      BNE	.loop
     67  fa04
     68  fa04		       a2 ff		      LDX	#FULLWALL
     69  fa06
     70  fa06		       8a		      TXA
     71  fa07		       45 a5		      EOR	shadow3ab
     72  fa09		       85 8f		      STA	wall4a
     73  fa0b
     74  fa0b		       8a		      TXA
     75  fa0c		       45 a6		      EOR	shadow3bb
     76  fa0e		       85 90		      STA	wall4b
     77  fa10
     78  fa10		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     43  fa12
     44  fa12
     45  fa12							; Pad!
     46  fa12
      0  fa12					      PAD	UPPAD_LIMIT
      1  fa12
      2  fa12				   .SCANLINES SET	UPPAD_LIMIT
      3  fa12
      4  fa12		       a6 0e		      LDX	.SCANLINES
      5  fa14
      6  fa14				   .loop
      7  fa14		       85 02		      STA	WSYNC
      8  fa16
      9  fa16		       ca		      DEX
     10  fa17		       d0 fb		      BNE	.loop
     11  fa19
     12  fa19		       85 02		      STA	WSYNC
     13  fa1b
     48  fa1b
     49  fa1b							; Draw everything
     50  fa1b
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa1b					      INCLUDE	"dispkern.asm"
      1  fa1b							; VePseu's display kernel
      2  fa1b
      3  fa1b		       4c 1e fa 	      JMP	drawStart
      4  fa1e
      5  fa1e							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa1e							;
      7  fa1e							; dc_w1s1.asm
      8  fa1e							; |   | |
      9  fa1e							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa1e							; |   |
     11  fa1e							; |   |- The wall it draws
     12  fa1e							; |
     13  fa1e							; |- Draw-code identifies
     14  fa1e							;
     15  fa1e							; See GLOSSARY.TXT for definitions of vague words
     16  fa1e
     17  fa1e				   drawStart
     18  fa1e
     19  fa1e		       a4 b9		      LDY	spritePosY	; The Y register is expected to hold the sprite's Y position
     20  fa20
     21  fa20							; Also note that if the sprite position = 0 then the sprite
     22  fa20							; will not be drawn
     23  fa20
     24  fa20
     25  fa20		       b8		      CLV		; The overflow flag is used to determine which half of the screen is
     26  fa21							; being drawn, allowing code to be easily re-used. This requires that
     27  fa21							; the overflow flag be set to zero at start, otherwise things won't turn
     28  fa21							; out so well...
     29  fa21
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa21					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa21							; The draw code for the 1st wall and shadow
      2  fa21
      3  fa21				   dc_w1s1    SUBROUTINE
      4  fa21
      5  fa21		       a2 00		      LDX	#INDEXINIT
      6  fa23		       4c 33 fa 	      JMP	.loop
      7  fa26
      8  fa26				   .noSprite_1
      9  fa26							; Depending on the location in the program the branch here might cross a
     10  fa26							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa26							; delay simply check if the page number (the MSB of the address) is
     12  fa26							; different between the branch and it's destination
     13  fa26					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa26					      DELAY	11
      1  fa26				   .CYCLES    SET	11
      2  fa26
      3  fa26					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa26		       ea		      NOP
      5  fa26				   .CYCLES    SET	.CYCLES - 2
      6  fa27					      ENDIF
      7  fa27
      8  fa27					      IF	[.CYCLES - 2] / 5
      9  fa27					      REPEAT	.CYCLES / 5
     10  fa27		       e6 30		      INC	DUMP
     11  fa29					      REPEND
     12  fa29				   .CYCLES    SET	.CYCLES % 5
     13  fa29					      ENDIF
     14  fa29
     15  fa29					      IF	.CYCLES % 3 == 1
     16  fa29		       ea		      NOP
     17  fa29				   .CYCLES    SET	.CYCLES - 2
     18  fa2a					      ENDIF
     19  fa2a
     20  fa2a				  -	      REPEAT	.CYCLES / 3
     21  fa2a				  -	      STA	DUMP
     22  fa2a					      REPEND
     23  fa2a
     24  fa2a				   .CYCLES    SET	.CYCLES % 3
     25  fa2a
     26  fa2a					      REPEAT	.CYCLES / 2
     27  fa2a		       ea		      NOP
     28  fa2b					      REPEND
     29  fa2b
     30  fa2b				   .CYCLES    SET	.CYCLES % 2
     31  fa2b
     32  fa2b				  -	      IF	.CYCLES
     33  fa2b				  -	      ERR
     34  fa2b					      ENDIF
     35  fa2b
     15  fa2b				  -	      ELSE
     16  fa2b				  -	      DELAY	10
     17  fa2b					      ENDIF
     18  fa2b		       4c 49 fa 	      JMP	.noSprite_ret
     19  fa2e
     20  fa2e				   .noSprite_2
     21  fa2e					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa2e					      DELAY	4
      1  fa2e				   .CYCLES    SET	4
      2  fa2e
      3  fa2e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa2e				  -	      NOP
      5  fa2e				  -.CYCLES    SET	.CYCLES - 2
      6  fa2e					      ENDIF
      7  fa2e
      8  fa2e				  -	      IF	[.CYCLES - 2] / 5
      9  fa2e				  -	      REPEAT	.CYCLES / 5
     10  fa2e				  -	      INC	DUMP
     11  fa2e				  -	      REPEND
     12  fa2e				  -.CYCLES    SET	.CYCLES % 5
     13  fa2e					      ENDIF
     14  fa2e
     15  fa2e					      IF	.CYCLES % 3 == 1
     16  fa2e		       ea		      NOP
     17  fa2e				   .CYCLES    SET	.CYCLES - 2
     18  fa2f					      ENDIF
     19  fa2f
     20  fa2f				  -	      REPEAT	.CYCLES / 3
     21  fa2f				  -	      STA	DUMP
     22  fa2f					      REPEND
     23  fa2f
     24  fa2f				   .CYCLES    SET	.CYCLES % 3
     25  fa2f
     26  fa2f					      REPEAT	.CYCLES / 2
     27  fa2f		       ea		      NOP
     28  fa30					      REPEND
     29  fa30
     30  fa30				   .CYCLES    SET	.CYCLES % 2
     31  fa30
     32  fa30				  -	      IF	.CYCLES
     33  fa30				  -	      ERR
     34  fa30					      ENDIF
     35  fa30
     23  fa30				  -	      ELSE
     24  fa30				  -	      DELAY	3
     25  fa30					      ENDIF
     26  fa30		       4c 49 fa 	      JMP	.noSprite_ret
     27  fa33
     28  fa33				   .loop
     29  fa33		       a5 b4		      LDA	wallColour
     30  fa35		       85 02		      STA	WSYNC
     31  fa37		       85 08		      STA	COLUPF
     32  fa39		       a5 80		      LDA	wall1
     33  fa3b		       85 0e		      STA	PF1
     34  fa3d		       98		      TYA
     35  fa3e				   .branchPoint_1
     36  fa3e		       f0 e6		      BEQ	.noSprite_1
     37  fa40		       88		      DEY
     38  fa41		       c4 b8		      CPY	spriteHeight
     39  fa43				   .branchPoint_2
     40  fa43		       b0 e9		      BCS	.noSprite_2
     41  fa45		       b1 be		      LDA	(sprite),Y
     42  fa47		       85 1b		      STA	GRP0
     43  fa49				   .noSprite_ret
     44  fa49		       a5 80		      LDA	wall1
     45  fa4b		       85 0f		      STA	PF2
      0  fa4d					      DELAY	6
      1  fa4d				   .CYCLES    SET	6
      2  fa4d
      3  fa4d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa4d				  -	      NOP
      5  fa4d				  -.CYCLES    SET	.CYCLES - 2
      6  fa4d					      ENDIF
      7  fa4d
      8  fa4d				  -	      IF	[.CYCLES - 2] / 5
      9  fa4d				  -	      REPEAT	.CYCLES / 5
     10  fa4d				  -	      INC	DUMP
     11  fa4d				  -	      REPEND
     12  fa4d				  -.CYCLES    SET	.CYCLES % 5
     13  fa4d					      ENDIF
     14  fa4d
     15  fa4d				  -	      IF	.CYCLES % 3 == 1
     16  fa4d				  -	      NOP
     17  fa4d				  -.CYCLES    SET	.CYCLES - 2
     18  fa4d					      ENDIF
     19  fa4d
     20  fa4d					      REPEAT	.CYCLES / 3
     21  fa4d		       85 30		      STA	DUMP
     20  fa4d					      REPEND
     21  fa4f		       85 30		      STA	DUMP
     22  fa51					      REPEND
     23  fa51
     24  fa51				   .CYCLES    SET	.CYCLES % 3
     25  fa51
     26  fa51				  -	      REPEAT	.CYCLES / 2
     27  fa51				  -	      NOP
     28  fa51					      REPEND
     29  fa51
     30  fa51				   .CYCLES    SET	.CYCLES % 2
     31  fa51
     32  fa51				  -	      IF	.CYCLES
     33  fa51				  -	      ERR
     34  fa51					      ENDIF
     35  fa51
     47  fa51		       85 0d		      STA	PF0
      0  fa53					      DELAY	19
      1  fa53				   .CYCLES    SET	19
      2  fa53
      3  fa53				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa53				  -	      NOP
      5  fa53				  -.CYCLES    SET	.CYCLES - 2
      6  fa53					      ENDIF
      7  fa53
      8  fa53					      IF	[.CYCLES - 2] / 5
      9  fa53					      REPEAT	.CYCLES / 5
     10  fa53		       e6 30		      INC	DUMP
      9  fa53					      REPEND
     10  fa55		       e6 30		      INC	DUMP
      9  fa55					      REPEND
     10  fa57		       e6 30		      INC	DUMP
     11  fa59					      REPEND
     12  fa59				   .CYCLES    SET	.CYCLES % 5
     13  fa59					      ENDIF
     14  fa59
     15  fa59					      IF	.CYCLES % 3 == 1
     16  fa59		       ea		      NOP
     17  fa59				   .CYCLES    SET	.CYCLES - 2
     18  fa5a					      ENDIF
     19  fa5a
     20  fa5a				  -	      REPEAT	.CYCLES / 3
     21  fa5a				  -	      STA	DUMP
     22  fa5a					      REPEND
     23  fa5a
     24  fa5a				   .CYCLES    SET	.CYCLES % 3
     25  fa5a
     26  fa5a					      REPEAT	.CYCLES / 2
     27  fa5a		       ea		      NOP
     28  fa5b					      REPEND
     29  fa5b
     30  fa5b				   .CYCLES    SET	.CYCLES % 2
     31  fa5b
     32  fa5b				  -	      IF	.CYCLES
     33  fa5b				  -	      ERR
     34  fa5b					      ENDIF
     35  fa5b
     49  fa5b		       a9 00		      LDA	#NULL
     50  fa5d		       85 0f		      STA	PF2
     51  fa5f		       85 0d		      STA	PF0
     52  fa61
     53  fa61		       85 02		      STA	WSYNC
     54  fa63		       a5 b5		      LDA	shadowColour
     55  fa65		       85 08		      STA	COLUPF
     56  fa67		       a5 9b		      LDA	shadow1a
     57  fa69		       3d 00 f0 	      AND	and_1a,X
     58  fa6c		       85 0e		      STA	PF1
     59  fa6e		       a5 9c		      LDA	shadow1b
     60  fa70		       3d 1e f0 	      AND	and_1b,X
     61  fa73		       85 0f		      STA	PF2
      0  fa75					      DELAY	9
      1  fa75				   .CYCLES    SET	9
      2  fa75
      3  fa75				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa75				  -	      NOP
      5  fa75				  -.CYCLES    SET	.CYCLES - 2
      6  fa75					      ENDIF
      7  fa75
      8  fa75					      IF	[.CYCLES - 2] / 5
      9  fa75					      REPEAT	.CYCLES / 5
     10  fa75		       e6 30		      INC	DUMP
     11  fa77					      REPEND
     12  fa77				   .CYCLES    SET	.CYCLES % 5
     13  fa77					      ENDIF
     14  fa77
     15  fa77					      IF	.CYCLES % 3 == 1
     16  fa77		       ea		      NOP
     17  fa77				   .CYCLES    SET	.CYCLES - 2
     18  fa78					      ENDIF
     19  fa78
     20  fa78				  -	      REPEAT	.CYCLES / 3
     21  fa78				  -	      STA	DUMP
     22  fa78					      REPEND
     23  fa78
     24  fa78				   .CYCLES    SET	.CYCLES % 3
     25  fa78
     26  fa78					      REPEAT	.CYCLES / 2
     27  fa78		       ea		      NOP
     28  fa79					      REPEND
     29  fa79
     30  fa79				   .CYCLES    SET	.CYCLES % 2
     31  fa79
     32  fa79				  -	      IF	.CYCLES
     33  fa79				  -	      ERR
     34  fa79					      ENDIF
     35  fa79
     63  fa79		       a5 9e		      LDA	shadow1d
     64  fa7b		       3d 3c f0 	      AND	and_1c,X
     65  fa7e		       85 0e		      STA	PF1
     66  fa80		       a5 9f		      LDA	shadow1e
     67  fa82		       3d 5a f0 	      AND	and_1d,X
     68  fa85		       85 0f		      STA	PF2
     69  fa87
     70  fa87		       e8		      INX
     71  fa88		       e0 1e		      CPX	#UPPRWALL_S
     72  fa8a		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  fa8c					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  fa8c							; The second wall and it's first shadow
      2  fa8c
      3  fa8c				   dc_w2s1    SUBROUTINE
      4  fa8c
      5  fa8c		       a2 03		      LDX	#PIXH
      6  fa8e		       4c 9e fa 	      JMP	.loop
      7  fa91
      8  fa91				   .noSprite_1
      9  fa91					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa91					      DELAY	11
      1  fa91				   .CYCLES    SET	11
      2  fa91
      3  fa91					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa91		       ea		      NOP
      5  fa91				   .CYCLES    SET	.CYCLES - 2
      6  fa92					      ENDIF
      7  fa92
      8  fa92					      IF	[.CYCLES - 2] / 5
      9  fa92					      REPEAT	.CYCLES / 5
     10  fa92		       e6 30		      INC	DUMP
     11  fa94					      REPEND
     12  fa94				   .CYCLES    SET	.CYCLES % 5
     13  fa94					      ENDIF
     14  fa94
     15  fa94					      IF	.CYCLES % 3 == 1
     16  fa94		       ea		      NOP
     17  fa94				   .CYCLES    SET	.CYCLES - 2
     18  fa95					      ENDIF
     19  fa95
     20  fa95				  -	      REPEAT	.CYCLES / 3
     21  fa95				  -	      STA	DUMP
     22  fa95					      REPEND
     23  fa95
     24  fa95				   .CYCLES    SET	.CYCLES % 3
     25  fa95
     26  fa95					      REPEAT	.CYCLES / 2
     27  fa95		       ea		      NOP
     28  fa96					      REPEND
     29  fa96
     30  fa96				   .CYCLES    SET	.CYCLES % 2
     31  fa96
     32  fa96				  -	      IF	.CYCLES
     33  fa96				  -	      ERR
     34  fa96					      ENDIF
     35  fa96
     11  fa96				  -	      ELSE
     12  fa96				  -	      DELAY	10
     13  fa96					      ENDIF
     14  fa96		       4c b4 fa 	      JMP	.noSprite_ret
     15  fa99
     16  fa99				   .noSprite_2
     17  fa99					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa99					      DELAY	4
      1  fa99				   .CYCLES    SET	4
      2  fa99
      3  fa99				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa99				  -	      NOP
      5  fa99				  -.CYCLES    SET	.CYCLES - 2
      6  fa99					      ENDIF
      7  fa99
      8  fa99				  -	      IF	[.CYCLES - 2] / 5
      9  fa99				  -	      REPEAT	.CYCLES / 5
     10  fa99				  -	      INC	DUMP
     11  fa99				  -	      REPEND
     12  fa99				  -.CYCLES    SET	.CYCLES % 5
     13  fa99					      ENDIF
     14  fa99
     15  fa99					      IF	.CYCLES % 3 == 1
     16  fa99		       ea		      NOP
     17  fa99				   .CYCLES    SET	.CYCLES - 2
     18  fa9a					      ENDIF
     19  fa9a
     20  fa9a				  -	      REPEAT	.CYCLES / 3
     21  fa9a				  -	      STA	DUMP
     22  fa9a					      REPEND
     23  fa9a
     24  fa9a				   .CYCLES    SET	.CYCLES % 3
     25  fa9a
     26  fa9a					      REPEAT	.CYCLES / 2
     27  fa9a		       ea		      NOP
     28  fa9b					      REPEND
     29  fa9b
     30  fa9b				   .CYCLES    SET	.CYCLES % 2
     31  fa9b
     32  fa9b				  -	      IF	.CYCLES
     33  fa9b				  -	      ERR
     34  fa9b					      ENDIF
     35  fa9b
     19  fa9b				  -	      ELSE
     20  fa9b				  -	      DELAY	3
     21  fa9b					      ENDIF
     22  fa9b		       4c b4 fa 	      JMP	.noSprite_ret
     23  fa9e
     24  fa9e				   .loop
     25  fa9e		       a5 b4		      LDA	wallColour
     26  faa0		       85 02		      STA	WSYNC
     27  faa2				   .joinIn
     28  faa2		       85 08		      STA	COLUPF
     29  faa4		       a5 85		      LDA	wall2a
     30  faa6		       85 0e		      STA	PF1
     31  faa8		       98		      TYA
     32  faa9				   .branchPoint_1
     33  faa9		       f0 e6		      BEQ	.noSprite_1
     34  faab		       88		      DEY
     35  faac		       c4 b8		      CPY	spriteHeight
     36  faae				   .branchPoint_2
     37  faae		       b0 e9		      BCS	.noSprite_2
     38  fab0		       b1 be		      LDA	(sprite),Y
     39  fab2		       85 1b		      STA	GRP0
     40  fab4				   .noSprite_ret
     41  fab4		       a5 86		      LDA	wall2b
     42  fab6		       85 0f		      STA	PF2
     43  fab8
     44  fab8		       a5 87		      LDA	wall2c
     45  faba		       85 0d		      STA	PF0
     46  fabc		       a5 88		      LDA	wall2d
     47  fabe		       85 0e		      STA	PF1
     48  fac0		       a5 89		      LDA	wall2e
     49  fac2		       85 0f		      STA	PF2
     50  fac4		       a9 00		      LDA	#NULL
      0  fac6					      DELAY	10
      1  fac6				   .CYCLES    SET	10
      2  fac6
      3  fac6				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fac6				  -	      NOP
      5  fac6				  -.CYCLES    SET	.CYCLES - 2
      6  fac6					      ENDIF
      7  fac6
      8  fac6					      IF	[.CYCLES - 2] / 5
      9  fac6					      REPEAT	.CYCLES / 5
     10  fac6		       e6 30		      INC	DUMP
      9  fac6					      REPEND
     10  fac8		       e6 30		      INC	DUMP
     11  faca					      REPEND
     12  faca				   .CYCLES    SET	.CYCLES % 5
     13  faca					      ENDIF
     14  faca
     15  faca				  -	      IF	.CYCLES % 3 == 1
     16  faca				  -	      NOP
     17  faca				  -.CYCLES    SET	.CYCLES - 2
     18  faca					      ENDIF
     19  faca
     20  faca				  -	      REPEAT	.CYCLES / 3
     21  faca				  -	      STA	DUMP
     22  faca					      REPEND
     23  faca
     24  faca				   .CYCLES    SET	.CYCLES % 3
     25  faca
     26  faca				  -	      REPEAT	.CYCLES / 2
     27  faca				  -	      NOP
     28  faca					      REPEND
     29  faca
     30  faca				   .CYCLES    SET	.CYCLES % 2
     31  faca
     32  faca				  -	      IF	.CYCLES
     33  faca				  -	      ERR
     34  faca					      ENDIF
     35  faca
     52  faca		       85 0f		      STA	PF2
     53  facc		       85 0d		      STA	PF0
     54  face
     55  face		       85 02		      STA	WSYNC	; Draw the shadow
     56  fad0		       a5 b5		      LDA	shadowColour
     57  fad2		       85 08		      STA	COLUPF
     58  fad4		       a5 91		      LDA	shadow2aa
     59  fad6		       05 9b		      ORA	shadow1a
     60  fad8		       85 0e		      STA	PF1
     61  fada		       a5 92		      LDA	shadow2ba
     62  fadc		       05 9c		      ORA	shadow1b
     63  fade		       85 0f		      STA	PF2
     64  fae0		       a5 93		      LDA	shadow2ca
     65  fae2		       85 0d		      STA	PF0
     66  fae4		       a5 94		      LDA	shadow2da
     67  fae6		       05 9e		      ORA	shadow1d
     68  fae8		       85 0e		      STA	PF1
     69  faea		       a5 95		      LDA	shadow2ea
     70  faec		       05 9f		      ORA	shadow1e
     71  faee		       85 0f		      STA	PF2
     72  faf0		       a9 00		      LDA	#NULL
     73  faf2		       85 0d		      STA	PF0
     74  faf4
     75  faf4		       ca		      DEX
     76  faf5		       d0 a7		      BNE	.loop
     77  faf7
     78  faf7		       50 03		      BVC	dc_w2s2_delayed
     79  faf9		       4c c3 fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fafc					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fafc							; The second wall and it's second shadow
      2  fafc
      3  fafc				   dc_w2s2_delayed
      0  fafc					      DELAY	2
      1  fafc				   .CYCLES    SET	2
      2  fafc
      3  fafc				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fafc				  -	      NOP
      5  fafc				  -.CYCLES    SET	.CYCLES - 2
      6  fafc					      ENDIF
      7  fafc
      8  fafc				  -	      IF	[.CYCLES - 2] / 5
      9  fafc				  -	      REPEAT	.CYCLES / 5
     10  fafc				  -	      INC	DUMP
     11  fafc				  -	      REPEND
     12  fafc				  -.CYCLES    SET	.CYCLES % 5
     13  fafc					      ENDIF
     14  fafc
     15  fafc				  -	      IF	.CYCLES % 3 == 1
     16  fafc				  -	      NOP
     17  fafc				  -.CYCLES    SET	.CYCLES - 2
     18  fafc					      ENDIF
     19  fafc
     20  fafc				  -	      REPEAT	.CYCLES / 3
     21  fafc				  -	      STA	DUMP
     22  fafc					      REPEND
     23  fafc
     24  fafc				   .CYCLES    SET	.CYCLES % 3
     25  fafc
     26  fafc					      REPEAT	.CYCLES / 2
     27  fafc		       ea		      NOP
     28  fafd					      REPEND
     29  fafd
     30  fafd				   .CYCLES    SET	.CYCLES % 2
     31  fafd
     32  fafd				  -	      IF	.CYCLES
     33  fafd				  -	      ERR
     34  fafd					      ENDIF
     35  fafd
      5  fafd				   dc_w2s2    SUBROUTINE
      6  fafd
      7  fafd		       a2 03		      LDX	#PIXH
      8  faff
      9  faff				   .loop
     10  faff		       a5 b4		      LDA	wallColour
     11  fb01		       85 02		      STA	WSYNC
     12  fb03		       85 08		      STA	COLUPF
     13  fb05		       a5 85		      LDA	wall2a
     14  fb07		       85 0e		      STA	PF1
     15  fb09		       98		      TYA
     16  fb0a				   .branchPoint_1
     17  fb0a		       f0 51		      BEQ	.noSprite_1
     18  fb0c		       88		      DEY
     19  fb0d		       c4 b8		      CPY	spriteHeight
     20  fb0f				   .branchPoint_2
     21  fb0f		       b0 54		      BCS	.noSprite_2
     22  fb11		       b1 be		      LDA	(sprite),Y
     23  fb13		       85 1b		      STA	GRP0
     24  fb15				   .noSprite_ret
     25  fb15		       a5 86		      LDA	wall2b
     26  fb17		       85 0f		      STA	PF2
     27  fb19
     28  fb19		       a5 87		      LDA	wall2c
     29  fb1b		       85 0d		      STA	PF0
     30  fb1d		       a5 88		      LDA	wall2d
     31  fb1f		       85 0e		      STA	PF1
     32  fb21		       a5 89		      LDA	wall2e
     33  fb23		       85 0f		      STA	PF2
     34  fb25		       a9 00		      LDA	#NULL
      0  fb27					      DELAY	10
      1  fb27				   .CYCLES    SET	10
      2  fb27
      3  fb27				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb27				  -	      NOP
      5  fb27				  -.CYCLES    SET	.CYCLES - 2
      6  fb27					      ENDIF
      7  fb27
      8  fb27					      IF	[.CYCLES - 2] / 5
      9  fb27					      REPEAT	.CYCLES / 5
     10  fb27		       e6 30		      INC	DUMP
      9  fb27					      REPEND
     10  fb29		       e6 30		      INC	DUMP
     11  fb2b					      REPEND
     12  fb2b				   .CYCLES    SET	.CYCLES % 5
     13  fb2b					      ENDIF
     14  fb2b
     15  fb2b				  -	      IF	.CYCLES % 3 == 1
     16  fb2b				  -	      NOP
     17  fb2b				  -.CYCLES    SET	.CYCLES - 2
     18  fb2b					      ENDIF
     19  fb2b
     20  fb2b				  -	      REPEAT	.CYCLES / 3
     21  fb2b				  -	      STA	DUMP
     22  fb2b					      REPEND
     23  fb2b
     24  fb2b				   .CYCLES    SET	.CYCLES % 3
     25  fb2b
     26  fb2b				  -	      REPEAT	.CYCLES / 2
     27  fb2b				  -	      NOP
     28  fb2b					      REPEND
     29  fb2b
     30  fb2b				   .CYCLES    SET	.CYCLES % 2
     31  fb2b
     32  fb2b				  -	      IF	.CYCLES
     33  fb2b				  -	      ERR
     34  fb2b					      ENDIF
     35  fb2b
     36  fb2b		       85 0f		      STA	PF2
     37  fb2d		       85 0d		      STA	PF0
     38  fb2f
     39  fb2f		       85 02		      STA	WSYNC	; Draw the shadow
     40  fb31		       a5 b5		      LDA	shadowColour
     41  fb33		       85 08		      STA	COLUPF
     42  fb35		       a5 a0		      LDA	shadow2ab
     43  fb37		       05 9b		      ORA	shadow1a
     44  fb39		       85 0e		      STA	PF1
     45  fb3b		       a5 a1		      LDA	shadow2bb
     46  fb3d		       05 9c		      ORA	shadow1b
     47  fb3f		       85 0f		      STA	PF2
     48  fb41		       a5 a2		      LDA	shadow2cb
     49  fb43		       85 0d		      STA	PF0
     50  fb45		       a5 a3		      LDA	shadow2db
     51  fb47		       05 9e		      ORA	shadow1d
     52  fb49		       85 0e		      STA	PF1
     53  fb4b		       a5 a4		      LDA	shadow2eb
     54  fb4d		       05 9f		      ORA	shadow1e
     55  fb4f		       85 0f		      STA	PF2
     56  fb51		       a9 00		      LDA	#NULL
     57  fb53		       85 0d		      STA	PF0
     58  fb55
     59  fb55		       ca		      DEX
     60  fb56		       d0 a7		      BNE	.loop
     61  fb58
     62  fb58		       50 10		      BVC	dc_w3s1_delayed
     63  fb5a		       4c 8c fa 	      JMP	dc_w2s1
     64  fb5d
     65  fb5d				   .noSprite_1
     66  fb5d					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb5d					      DELAY	11
      1  fb5d				   .CYCLES    SET	11
      2  fb5d
      3  fb5d					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb5d		       ea		      NOP
      5  fb5d				   .CYCLES    SET	.CYCLES - 2
      6  fb5e					      ENDIF
      7  fb5e
      8  fb5e					      IF	[.CYCLES - 2] / 5
      9  fb5e					      REPEAT	.CYCLES / 5
     10  fb5e		       e6 30		      INC	DUMP
     11  fb60					      REPEND
     12  fb60				   .CYCLES    SET	.CYCLES % 5
     13  fb60					      ENDIF
     14  fb60
     15  fb60					      IF	.CYCLES % 3 == 1
     16  fb60		       ea		      NOP
     17  fb60				   .CYCLES    SET	.CYCLES - 2
     18  fb61					      ENDIF
     19  fb61
     20  fb61				  -	      REPEAT	.CYCLES / 3
     21  fb61				  -	      STA	DUMP
     22  fb61					      REPEND
     23  fb61
     24  fb61				   .CYCLES    SET	.CYCLES % 3
     25  fb61
     26  fb61					      REPEAT	.CYCLES / 2
     27  fb61		       ea		      NOP
     28  fb62					      REPEND
     29  fb62
     30  fb62				   .CYCLES    SET	.CYCLES % 2
     31  fb62
     32  fb62				  -	      IF	.CYCLES
     33  fb62				  -	      ERR
     34  fb62					      ENDIF
     35  fb62
     68  fb62				  -	      ELSE
     69  fb62				  -	      DELAY	10
     70  fb62					      ENDIF
     71  fb62		       4c 15 fb 	      JMP	.noSprite_ret
     72  fb65
     73  fb65				   .noSprite_2
     74  fb65					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb65					      DELAY	4
      1  fb65				   .CYCLES    SET	4
      2  fb65
      3  fb65				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb65				  -	      NOP
      5  fb65				  -.CYCLES    SET	.CYCLES - 2
      6  fb65					      ENDIF
      7  fb65
      8  fb65				  -	      IF	[.CYCLES - 2] / 5
      9  fb65				  -	      REPEAT	.CYCLES / 5
     10  fb65				  -	      INC	DUMP
     11  fb65				  -	      REPEND
     12  fb65				  -.CYCLES    SET	.CYCLES % 5
     13  fb65					      ENDIF
     14  fb65
     15  fb65					      IF	.CYCLES % 3 == 1
     16  fb65		       ea		      NOP
     17  fb65				   .CYCLES    SET	.CYCLES - 2
     18  fb66					      ENDIF
     19  fb66
     20  fb66				  -	      REPEAT	.CYCLES / 3
     21  fb66				  -	      STA	DUMP
     22  fb66					      REPEND
     23  fb66
     24  fb66				   .CYCLES    SET	.CYCLES % 3
     25  fb66
     26  fb66					      REPEAT	.CYCLES / 2
     27  fb66		       ea		      NOP
     28  fb67					      REPEND
     29  fb67
     30  fb67				   .CYCLES    SET	.CYCLES % 2
     31  fb67
     32  fb67				  -	      IF	.CYCLES
     33  fb67				  -	      ERR
     34  fb67					      ENDIF
     35  fb67
     76  fb67				  -	      ELSE
     77  fb67				  -	      DELAY	3
     78  fb67					      ENDIF
     79  fb67		       4c 15 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb6a					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb6a							; The third wall and it's first shadow
      2  fb6a							; See GLOSSARY.TXT for definitions of vague words
      3  fb6a
      4  fb6a				   dc_w3s1_delayed
      0  fb6a					      DELAY	2
      1  fb6a				   .CYCLES    SET	2
      2  fb6a
      3  fb6a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb6a				  -	      NOP
      5  fb6a				  -.CYCLES    SET	.CYCLES - 2
      6  fb6a					      ENDIF
      7  fb6a
      8  fb6a				  -	      IF	[.CYCLES - 2] / 5
      9  fb6a				  -	      REPEAT	.CYCLES / 5
     10  fb6a				  -	      INC	DUMP
     11  fb6a				  -	      REPEND
     12  fb6a				  -.CYCLES    SET	.CYCLES % 5
     13  fb6a					      ENDIF
     14  fb6a
     15  fb6a				  -	      IF	.CYCLES % 3 == 1
     16  fb6a				  -	      NOP
     17  fb6a				  -.CYCLES    SET	.CYCLES - 2
     18  fb6a					      ENDIF
     19  fb6a
     20  fb6a				  -	      REPEAT	.CYCLES / 3
     21  fb6a				  -	      STA	DUMP
     22  fb6a					      REPEND
     23  fb6a
     24  fb6a				   .CYCLES    SET	.CYCLES % 3
     25  fb6a
     26  fb6a					      REPEAT	.CYCLES / 2
     27  fb6a		       ea		      NOP
     28  fb6b					      REPEND
     29  fb6b
     30  fb6b				   .CYCLES    SET	.CYCLES % 2
     31  fb6b
     32  fb6b				  -	      IF	.CYCLES
     33  fb6b				  -	      ERR
     34  fb6b					      ENDIF
     35  fb6b
      6  fb6b				   dc_w3s1    SUBROUTINE
      7  fb6b
      8  fb6b		       a2 03		      LDX	#PIXH
      9  fb6d
     10  fb6d				   .loop
     11  fb6d		       a5 b4		      LDA	wallColour
     12  fb6f		       85 02		      STA	WSYNC
     13  fb71		       85 08		      STA	COLUPF
     14  fb73		       a5 8a		      LDA	wall3a
     15  fb75		       85 0e		      STA	PF1
     16  fb77		       98		      TYA
     17  fb78				   .branchPoint_1
     18  fb78		       f0 53		      BEQ	.noSprite_1
     19  fb7a		       88		      DEY
     20  fb7b		       c4 b8		      CPY	spriteHeight
     21  fb7d				   .branchPoint_2
     22  fb7d		       b0 56		      BCS	.noSprite_2
     23  fb7f		       b1 be		      LDA	(sprite),Y
     24  fb81		       85 1b		      STA	GRP0
     25  fb83				   .noSprite_ret
     26  fb83		       a5 8b		      LDA	wall3b
     27  fb85		       85 0f		      STA	PF2
     28  fb87
     29  fb87		       a5 8c		      LDA	wall3c
     30  fb89		       85 0d		      STA	PF0
     31  fb8b		       a5 8d		      LDA	wall3d
     32  fb8d		       85 0e		      STA	PF1
     33  fb8f		       a5 8e		      LDA	wall3e
     34  fb91		       85 0f		      STA	PF2
     35  fb93		       a9 00		      LDA	#NULL
      0  fb95					      DELAY	10
      1  fb95				   .CYCLES    SET	10
      2  fb95
      3  fb95				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb95				  -	      NOP
      5  fb95				  -.CYCLES    SET	.CYCLES - 2
      6  fb95					      ENDIF
      7  fb95
      8  fb95					      IF	[.CYCLES - 2] / 5
      9  fb95					      REPEAT	.CYCLES / 5
     10  fb95		       e6 30		      INC	DUMP
      9  fb95					      REPEND
     10  fb97		       e6 30		      INC	DUMP
     11  fb99					      REPEND
     12  fb99				   .CYCLES    SET	.CYCLES % 5
     13  fb99					      ENDIF
     14  fb99
     15  fb99				  -	      IF	.CYCLES % 3 == 1
     16  fb99				  -	      NOP
     17  fb99				  -.CYCLES    SET	.CYCLES - 2
     18  fb99					      ENDIF
     19  fb99
     20  fb99				  -	      REPEAT	.CYCLES / 3
     21  fb99				  -	      STA	DUMP
     22  fb99					      REPEND
     23  fb99
     24  fb99				   .CYCLES    SET	.CYCLES % 3
     25  fb99
     26  fb99				  -	      REPEAT	.CYCLES / 2
     27  fb99				  -	      NOP
     28  fb99					      REPEND
     29  fb99
     30  fb99				   .CYCLES    SET	.CYCLES % 2
     31  fb99
     32  fb99				  -	      IF	.CYCLES
     33  fb99				  -	      ERR
     34  fb99					      ENDIF
     35  fb99
     37  fb99		       85 0f		      STA	PF2
     38  fb9b		       85 0d		      STA	PF0
     39  fb9d
     40  fb9d		       85 02		      STA	WSYNC	; Draw the shadow
     41  fb9f		       a5 b5		      LDA	shadowColour
     42  fba1		       85 08		      STA	COLUPF
     43  fba3		       a5 96		      LDA	shadow3aa
     44  fba5		       05 a0		      ORA	shadow2ab
     45  fba7		       85 0e		      STA	PF1
     46  fba9		       a5 97		      LDA	shadow3ba
     47  fbab		       05 a1		      ORA	shadow2bb
     48  fbad		       85 0f		      STA	PF2
     49  fbaf		       a5 98		      LDA	shadow3ca
     50  fbb1		       05 a2		      ORA	shadow2cb
     51  fbb3		       85 0d		      STA	PF0
     52  fbb5		       a5 99		      LDA	shadow3da
     53  fbb7		       05 a3		      ORA	shadow2db
     54  fbb9		       85 0e		      STA	PF1
     55  fbbb		       a5 9a		      LDA	shadow3ea
     56  fbbd		       05 a4		      ORA	shadow2eb
     57  fbbf		       85 0f		      STA	PF2
     58  fbc1		       a9 00		      LDA	#NULL
     59  fbc3		       85 0d		      STA	PF0
     60  fbc5
     61  fbc5		       ca		      DEX
     62  fbc6		       d0 a5		      BNE	.loop
     63  fbc8
     64  fbc8		       50 10		      BVC	dc_w3s2_delayed
     65  fbca		       4c fd fa 	      JMP	dc_w2s2
     66  fbcd
     67  fbcd				   .noSprite_1
     68  fbcd					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbcd					      DELAY	11
      1  fbcd				   .CYCLES    SET	11
      2  fbcd
      3  fbcd					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbcd		       ea		      NOP
      5  fbcd				   .CYCLES    SET	.CYCLES - 2
      6  fbce					      ENDIF
      7  fbce
      8  fbce					      IF	[.CYCLES - 2] / 5
      9  fbce					      REPEAT	.CYCLES / 5
     10  fbce		       e6 30		      INC	DUMP
     11  fbd0					      REPEND
     12  fbd0				   .CYCLES    SET	.CYCLES % 5
     13  fbd0					      ENDIF
     14  fbd0
     15  fbd0					      IF	.CYCLES % 3 == 1
     16  fbd0		       ea		      NOP
     17  fbd0				   .CYCLES    SET	.CYCLES - 2
     18  fbd1					      ENDIF
     19  fbd1
     20  fbd1				  -	      REPEAT	.CYCLES / 3
     21  fbd1				  -	      STA	DUMP
     22  fbd1					      REPEND
     23  fbd1
     24  fbd1				   .CYCLES    SET	.CYCLES % 3
     25  fbd1
     26  fbd1					      REPEAT	.CYCLES / 2
     27  fbd1		       ea		      NOP
     28  fbd2					      REPEND
     29  fbd2
     30  fbd2				   .CYCLES    SET	.CYCLES % 2
     31  fbd2
     32  fbd2				  -	      IF	.CYCLES
     33  fbd2				  -	      ERR
     34  fbd2					      ENDIF
     35  fbd2
     70  fbd2				  -	      ELSE
     71  fbd2				  -	      DELAY	10
     72  fbd2					      ENDIF
     73  fbd2		       4c 83 fb 	      JMP	.noSprite_ret
     74  fbd5
     75  fbd5				   .noSprite_2
     76  fbd5					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbd5					      DELAY	4
      1  fbd5				   .CYCLES    SET	4
      2  fbd5
      3  fbd5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbd5				  -	      NOP
      5  fbd5				  -.CYCLES    SET	.CYCLES - 2
      6  fbd5					      ENDIF
      7  fbd5
      8  fbd5				  -	      IF	[.CYCLES - 2] / 5
      9  fbd5				  -	      REPEAT	.CYCLES / 5
     10  fbd5				  -	      INC	DUMP
     11  fbd5				  -	      REPEND
     12  fbd5				  -.CYCLES    SET	.CYCLES % 5
     13  fbd5					      ENDIF
     14  fbd5
     15  fbd5					      IF	.CYCLES % 3 == 1
     16  fbd5		       ea		      NOP
     17  fbd5				   .CYCLES    SET	.CYCLES - 2
     18  fbd6					      ENDIF
     19  fbd6
     20  fbd6				  -	      REPEAT	.CYCLES / 3
     21  fbd6				  -	      STA	DUMP
     22  fbd6					      REPEND
     23  fbd6
     24  fbd6				   .CYCLES    SET	.CYCLES % 3
     25  fbd6
     26  fbd6					      REPEAT	.CYCLES / 2
     27  fbd6		       ea		      NOP
     28  fbd7					      REPEND
     29  fbd7
     30  fbd7				   .CYCLES    SET	.CYCLES % 2
     31  fbd7
     32  fbd7				  -	      IF	.CYCLES
     33  fbd7				  -	      ERR
     34  fbd7					      ENDIF
     35  fbd7
     78  fbd7				  -	      ELSE
     79  fbd7				  -	      DELAY	3
     80  fbd7					      ENDIF
     81  fbd7		       4c 83 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fbda					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fbda							; The third wall and it's second shadow
      2  fbda							; See GLOSSARY.TXT for definitions of vague words
      3  fbda
      4  fbda				   dc_w3s2_delayed
      0  fbda					      DELAY	2
      1  fbda				   .CYCLES    SET	2
      2  fbda
      3  fbda				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbda				  -	      NOP
      5  fbda				  -.CYCLES    SET	.CYCLES - 2
      6  fbda					      ENDIF
      7  fbda
      8  fbda				  -	      IF	[.CYCLES - 2] / 5
      9  fbda				  -	      REPEAT	.CYCLES / 5
     10  fbda				  -	      INC	DUMP
     11  fbda				  -	      REPEND
     12  fbda				  -.CYCLES    SET	.CYCLES % 5
     13  fbda					      ENDIF
     14  fbda
     15  fbda				  -	      IF	.CYCLES % 3 == 1
     16  fbda				  -	      NOP
     17  fbda				  -.CYCLES    SET	.CYCLES - 2
     18  fbda					      ENDIF
     19  fbda
     20  fbda				  -	      REPEAT	.CYCLES / 3
     21  fbda				  -	      STA	DUMP
     22  fbda					      REPEND
     23  fbda
     24  fbda				   .CYCLES    SET	.CYCLES % 3
     25  fbda
     26  fbda					      REPEAT	.CYCLES / 2
     27  fbda		       ea		      NOP
     28  fbdb					      REPEND
     29  fbdb
     30  fbdb				   .CYCLES    SET	.CYCLES % 2
     31  fbdb
     32  fbdb				  -	      IF	.CYCLES
     33  fbdb				  -	      ERR
     34  fbdb					      ENDIF
     35  fbdb
      6  fbdb				   dc_w3s2    SUBROUTINE
      7  fbdb
      8  fbdb		       a2 03		      LDX	#PIXH
      9  fbdd
     10  fbdd				   .loop
     11  fbdd		       a5 b4		      LDA	wallColour
     12  fbdf		       85 02		      STA	WSYNC
     13  fbe1				   .joinIn
     14  fbe1		       85 08		      STA	COLUPF
     15  fbe3		       a5 8a		      LDA	wall3a
     16  fbe5		       85 0e		      STA	PF1
     17  fbe7		       98		      TYA
     18  fbe8				   .branchPoint_1
     19  fbe8		       f0 53		      BEQ	.noSprite_1
     20  fbea		       88		      DEY
     21  fbeb		       c4 b8		      CPY	spriteHeight
     22  fbed				   .branchPoint_2
     23  fbed		       b0 55		      BCS	.noSprite_2
     24  fbef		       b1 be		      LDA	(sprite),Y
     25  fbf1		       85 1b		      STA	GRP0
     26  fbf3				   .noSprite_ret
     27  fbf3		       a5 8b		      LDA	wall3b
     28  fbf5		       85 0f		      STA	PF2
     29  fbf7
     30  fbf7		       a5 8c		      LDA	wall3c
     31  fbf9		       85 0d		      STA	PF0
     32  fbfb		       a5 8d		      LDA	wall3d
     33  fbfd		       85 0e		      STA	PF1
     34  fbff		       a5 8e		      LDA	wall3e
     35  fc01		       85 0f		      STA	PF2
     36  fc03		       a9 00		      LDA	#NULL
      0  fc05					      DELAY	10
      1  fc05				   .CYCLES    SET	10
      2  fc05
      3  fc05				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc05				  -	      NOP
      5  fc05				  -.CYCLES    SET	.CYCLES - 2
      6  fc05					      ENDIF
      7  fc05
      8  fc05					      IF	[.CYCLES - 2] / 5
      9  fc05					      REPEAT	.CYCLES / 5
     10  fc05		       e6 30		      INC	DUMP
      9  fc05					      REPEND
     10  fc07		       e6 30		      INC	DUMP
     11  fc09					      REPEND
     12  fc09				   .CYCLES    SET	.CYCLES % 5
     13  fc09					      ENDIF
     14  fc09
     15  fc09				  -	      IF	.CYCLES % 3 == 1
     16  fc09				  -	      NOP
     17  fc09				  -.CYCLES    SET	.CYCLES - 2
     18  fc09					      ENDIF
     19  fc09
     20  fc09				  -	      REPEAT	.CYCLES / 3
     21  fc09				  -	      STA	DUMP
     22  fc09					      REPEND
     23  fc09
     24  fc09				   .CYCLES    SET	.CYCLES % 3
     25  fc09
     26  fc09				  -	      REPEAT	.CYCLES / 2
     27  fc09				  -	      NOP
     28  fc09					      REPEND
     29  fc09
     30  fc09				   .CYCLES    SET	.CYCLES % 2
     31  fc09
     32  fc09				  -	      IF	.CYCLES
     33  fc09				  -	      ERR
     34  fc09					      ENDIF
     35  fc09
     38  fc09		       85 0f		      STA	PF2
     39  fc0b		       85 0d		      STA	PF0
     40  fc0d
     41  fc0d		       85 02		      STA	WSYNC	; Draw the shadow
     42  fc0f		       a5 b5		      LDA	shadowColour
     43  fc11		       85 08		      STA	COLUPF
     44  fc13		       a5 a5		      LDA	shadow3ab
     45  fc15		       05 a0		      ORA	shadow2ab
     46  fc17		       85 0e		      STA	PF1
     47  fc19		       a5 a6		      LDA	shadow3bb
     48  fc1b		       05 a1		      ORA	shadow2bb
     49  fc1d		       85 0f		      STA	PF2
     50  fc1f		       a5 a7		      LDA	shadow3cb
     51  fc21		       05 a2		      ORA	shadow2cb
     52  fc23		       85 0d		      STA	PF0
     53  fc25		       a5 a8		      LDA	shadow3db
     54  fc27		       05 a3		      ORA	shadow2db
     55  fc29		       85 0e		      STA	PF1
     56  fc2b		       a5 a9		      LDA	shadow3eb
     57  fc2d		       05 a4		      ORA	shadow2eb
     58  fc2f		       85 0f		      STA	PF2
     59  fc31		       a9 00		      LDA	#NULL
     60  fc33		       85 0d		      STA	PF0
     61  fc35
     62  fc35		       ca		      DEX
     63  fc36		       d0 a5		      BNE	.loop
     64  fc38
     65  fc38		       50 0f		      BVC	dc_w4s0_delayed
     66  fc3a		       4c 6b fb 	      JMP	dc_w3s1
     67  fc3d
     68  fc3d				   .noSprite_1
     69  fc3d				  -	      IF	>.branchPoint_1 == >.noSprite_1
     70  fc3d				  -	      DELAY	11
     71  fc3d					      ELSE
      0  fc3d					      DELAY	10
      1  fc3d				   .CYCLES    SET	10
      2  fc3d
      3  fc3d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc3d				  -	      NOP
      5  fc3d				  -.CYCLES    SET	.CYCLES - 2
      6  fc3d					      ENDIF
      7  fc3d
      8  fc3d					      IF	[.CYCLES - 2] / 5
      9  fc3d					      REPEAT	.CYCLES / 5
     10  fc3d		       e6 30		      INC	DUMP
      9  fc3d					      REPEND
     10  fc3f		       e6 30		      INC	DUMP
     11  fc41					      REPEND
     12  fc41				   .CYCLES    SET	.CYCLES % 5
     13  fc41					      ENDIF
     14  fc41
     15  fc41				  -	      IF	.CYCLES % 3 == 1
     16  fc41				  -	      NOP
     17  fc41				  -.CYCLES    SET	.CYCLES - 2
     18  fc41					      ENDIF
     19  fc41
     20  fc41				  -	      REPEAT	.CYCLES / 3
     21  fc41				  -	      STA	DUMP
     22  fc41					      REPEND
     23  fc41
     24  fc41				   .CYCLES    SET	.CYCLES % 3
     25  fc41
     26  fc41				  -	      REPEAT	.CYCLES / 2
     27  fc41				  -	      NOP
     28  fc41					      REPEND
     29  fc41
     30  fc41				   .CYCLES    SET	.CYCLES % 2
     31  fc41
     32  fc41				  -	      IF	.CYCLES
     33  fc41				  -	      ERR
     34  fc41					      ENDIF
     35  fc41
     73  fc41					      ENDIF
     74  fc41		       4c f3 fb 	      JMP	.noSprite_ret
     75  fc44
     76  fc44				   .noSprite_2
     77  fc44				  -	      IF	>.branchPoint_2 == >.noSprite_2
     78  fc44				  -	      DELAY	4
     79  fc44					      ELSE
      0  fc44					      DELAY	3
      1  fc44				   .CYCLES    SET	3
      2  fc44
      3  fc44				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc44				  -	      NOP
      5  fc44				  -.CYCLES    SET	.CYCLES - 2
      6  fc44					      ENDIF
      7  fc44
      8  fc44				  -	      IF	[.CYCLES - 2] / 5
      9  fc44				  -	      REPEAT	.CYCLES / 5
     10  fc44				  -	      INC	DUMP
     11  fc44				  -	      REPEND
     12  fc44				  -.CYCLES    SET	.CYCLES % 5
     13  fc44					      ENDIF
     14  fc44
     15  fc44				  -	      IF	.CYCLES % 3 == 1
     16  fc44				  -	      NOP
     17  fc44				  -.CYCLES    SET	.CYCLES - 2
     18  fc44					      ENDIF
     19  fc44
     20  fc44					      REPEAT	.CYCLES / 3
     21  fc44		       85 30		      STA	DUMP
     22  fc46					      REPEND
     23  fc46
     24  fc46				   .CYCLES    SET	.CYCLES % 3
     25  fc46
     26  fc46				  -	      REPEAT	.CYCLES / 2
     27  fc46				  -	      NOP
     28  fc46					      REPEND
     29  fc46
     30  fc46				   .CYCLES    SET	.CYCLES % 2
     31  fc46
     32  fc46				  -	      IF	.CYCLES
     33  fc46				  -	      ERR
     34  fc46					      ENDIF
     35  fc46
     81  fc46					      ENDIF
     82  fc46		       4c f3 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc49					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc49							; The fourth wall
      2  fc49
      3  fc49				   dc_w4s0_delayed
      4  fc49		       4c 50 fc 	      JMP	dc_w4s0
      5  fc4c
      6  fc4c				   dc_w4s0_switch
      7  fc4c		       a9 7f		      LDA	#$7F
      8  fc4e		       69 01		      ADC	#$01
      9  fc50
     10  fc50				   dc_w4s0    SUBROUTINE
     11  fc50
     12  fc50		       a2 03		      LDX	#PIXH
     13  fc52
     14  fc52				   .loop
     15  fc52		       a5 b4		      LDA	wallColour
     16  fc54		       85 02		      STA	WSYNC
     17  fc56				   .joinIn
     18  fc56		       85 08		      STA	COLUPF
     19  fc58		       a5 8f		      LDA	wall4a
     20  fc5a		       85 0e		      STA	PF1
     21  fc5c		       98		      TYA
     22  fc5d				   .branchPoint_1
     23  fc5d		       f0 57		      BEQ	.noSprite_1
     24  fc5f		       88		      DEY
     25  fc60		       c4 b8		      CPY	spriteHeight
     26  fc62				   .branchPoint_2
     27  fc62		       b0 5a		      BCS	.noSprite_2
     28  fc64		       b1 be		      LDA	(sprite),Y
     29  fc66		       85 1b		      STA	GRP0
     30  fc68				   .noSprite_ret
     31  fc68		       a5 90		      LDA	wall4b
     32  fc6a		       85 0f		      STA	PF2
     33  fc6c
     34  fc6c		       a9 ff		      LDA	#FULLWALL
     35  fc6e		       45 a7		      EOR	shadow3cb
     36  fc70		       85 0d		      STA	PF0
     37  fc72		       a9 ff		      LDA	#FULLWALL
     38  fc74		       45 a8		      EOR	shadow3db
     39  fc76		       85 0e		      STA	PF1
     40  fc78		       a9 ff		      LDA	#FULLWALL
     41  fc7a		       45 a9		      EOR	shadow3eb
     42  fc7c		       85 0f		      STA	PF2
     43  fc7e		       a9 00		      LDA	#NULL
      0  fc80					      DELAY	4
      1  fc80				   .CYCLES    SET	4
      2  fc80
      3  fc80				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc80				  -	      NOP
      5  fc80				  -.CYCLES    SET	.CYCLES - 2
      6  fc80					      ENDIF
      7  fc80
      8  fc80				  -	      IF	[.CYCLES - 2] / 5
      9  fc80				  -	      REPEAT	.CYCLES / 5
     10  fc80				  -	      INC	DUMP
     11  fc80				  -	      REPEND
     12  fc80				  -.CYCLES    SET	.CYCLES % 5
     13  fc80					      ENDIF
     14  fc80
     15  fc80					      IF	.CYCLES % 3 == 1
     16  fc80		       ea		      NOP
     17  fc80				   .CYCLES    SET	.CYCLES - 2
     18  fc81					      ENDIF
     19  fc81
     20  fc81				  -	      REPEAT	.CYCLES / 3
     21  fc81				  -	      STA	DUMP
     22  fc81					      REPEND
     23  fc81
     24  fc81				   .CYCLES    SET	.CYCLES % 3
     25  fc81
     26  fc81					      REPEAT	.CYCLES / 2
     27  fc81		       ea		      NOP
     28  fc82					      REPEND
     29  fc82
     30  fc82				   .CYCLES    SET	.CYCLES % 2
     31  fc82
     32  fc82				  -	      IF	.CYCLES
     33  fc82				  -	      ERR
     34  fc82					      ENDIF
     35  fc82
     45  fc82		       85 0f		      STA	PF2
     46  fc84		       85 0d		      STA	PF0
     47  fc86
     48  fc86		       85 02		      STA	WSYNC	; Draw the shadow
     49  fc88		       a5 b5		      LDA	shadowColour
     50  fc8a		       85 08		      STA	COLUPF
     51  fc8c		       a5 a5		      LDA	shadow3ab
     52  fc8e		       05 a0		      ORA	shadow2ab
     53  fc90		       85 0e		      STA	PF1
     54  fc92		       a5 a6		      LDA	shadow3bb
     55  fc94		       05 a1		      ORA	shadow2bb
     56  fc96		       85 0f		      STA	PF2
     57  fc98		       a5 a7		      LDA	shadow3cb
     58  fc9a		       05 a2		      ORA	shadow2cb
     59  fc9c		       85 0d		      STA	PF0
     60  fc9e		       a5 a8		      LDA	shadow3db
     61  fca0		       05 a3		      ORA	shadow2db
     62  fca2		       85 0e		      STA	PF1
     63  fca4		       a5 a9		      LDA	shadow3eb
     64  fca6		       05 a4		      ORA	shadow2eb
     65  fca8		       85 0f		      STA	PF2
     66  fcaa		       a9 00		      LDA	#NULL
     67  fcac		       85 0d		      STA	PF0
     68  fcae
     69  fcae		       ca		      DEX
     70  fcaf		       d0 a1		      BNE	.loop
     71  fcb1
     72  fcb1		       50 99		      BVC	dc_w4s0_switch
     73  fcb3		       4c db fb 	      JMP	dc_w3s2
     74  fcb6
     75  fcb6				   .noSprite_1
     76  fcb6					      IF	>.branchPoint_1 == >.noSprite_1
      0  fcb6					      DELAY	11
      1  fcb6				   .CYCLES    SET	11
      2  fcb6
      3  fcb6					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcb6		       ea		      NOP
      5  fcb6				   .CYCLES    SET	.CYCLES - 2
      6  fcb7					      ENDIF
      7  fcb7
      8  fcb7					      IF	[.CYCLES - 2] / 5
      9  fcb7					      REPEAT	.CYCLES / 5
     10  fcb7		       e6 30		      INC	DUMP
     11  fcb9					      REPEND
     12  fcb9				   .CYCLES    SET	.CYCLES % 5
     13  fcb9					      ENDIF
     14  fcb9
     15  fcb9					      IF	.CYCLES % 3 == 1
     16  fcb9		       ea		      NOP
     17  fcb9				   .CYCLES    SET	.CYCLES - 2
     18  fcba					      ENDIF
     19  fcba
     20  fcba				  -	      REPEAT	.CYCLES / 3
     21  fcba				  -	      STA	DUMP
     22  fcba					      REPEND
     23  fcba
     24  fcba				   .CYCLES    SET	.CYCLES % 3
     25  fcba
     26  fcba					      REPEAT	.CYCLES / 2
     27  fcba		       ea		      NOP
     28  fcbb					      REPEND
     29  fcbb
     30  fcbb				   .CYCLES    SET	.CYCLES % 2
     31  fcbb
     32  fcbb				  -	      IF	.CYCLES
     33  fcbb				  -	      ERR
     34  fcbb					      ENDIF
     35  fcbb
     78  fcbb				  -	      ELSE
     79  fcbb				  -	      DELAY	10
     80  fcbb					      ENDIF
     81  fcbb		       4c 68 fc 	      JMP	.noSprite_ret
     82  fcbe
     83  fcbe				   .noSprite_2
     84  fcbe					      IF	>.branchPoint_2 == >.noSprite_2
      0  fcbe					      DELAY	4
      1  fcbe				   .CYCLES    SET	4
      2  fcbe
      3  fcbe				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcbe				  -	      NOP
      5  fcbe				  -.CYCLES    SET	.CYCLES - 2
      6  fcbe					      ENDIF
      7  fcbe
      8  fcbe				  -	      IF	[.CYCLES - 2] / 5
      9  fcbe				  -	      REPEAT	.CYCLES / 5
     10  fcbe				  -	      INC	DUMP
     11  fcbe				  -	      REPEND
     12  fcbe				  -.CYCLES    SET	.CYCLES % 5
     13  fcbe					      ENDIF
     14  fcbe
     15  fcbe					      IF	.CYCLES % 3 == 1
     16  fcbe		       ea		      NOP
     17  fcbe				   .CYCLES    SET	.CYCLES - 2
     18  fcbf					      ENDIF
     19  fcbf
     20  fcbf				  -	      REPEAT	.CYCLES / 3
     21  fcbf				  -	      STA	DUMP
     22  fcbf					      REPEND
     23  fcbf
     24  fcbf				   .CYCLES    SET	.CYCLES % 3
     25  fcbf
     26  fcbf					      REPEAT	.CYCLES / 2
     27  fcbf		       ea		      NOP
     28  fcc0					      REPEND
     29  fcc0
     30  fcc0				   .CYCLES    SET	.CYCLES % 2
     31  fcc0
     32  fcc0				  -	      IF	.CYCLES
     33  fcc0				  -	      ERR
     34  fcc0					      ENDIF
     35  fcc0
     86  fcc0				  -	      ELSE
     87  fcc0				  -	      DELAY	3
     88  fcc0					      ENDIF
     89  fcc0		       4c 68 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     36  fcc3
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fcc3					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fcc3							; The draw code for the 1st wall and  it's second shadow
      2  fcc3
      3  fcc3				   dc_w1s2    SUBROUTINE
      4  fcc3
      5  fcc3		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fcc5
      7  fcc5				   .loop
      8  fcc5		       a5 b4		      LDA	wallColour
      9  fcc7		       85 02		      STA	WSYNC
     10  fcc9		       85 08		      STA	COLUPF
     11  fccb		       a5 80		      LDA	wall1
     12  fccd		       85 0e		      STA	PF1
     13  fccf		       98		      TYA
     14  fcd0				   .branchPoint_1
     15  fcd0		       f0 53		      BEQ	.noSprite_1
     16  fcd2		       88		      DEY
     17  fcd3		       c4 b8		      CPY	spriteHeight
     18  fcd5				   .branchPoint_2
     19  fcd5		       b0 55		      BCS	.noSprite_2
     20  fcd7		       b1 be		      LDA	(sprite),Y
     21  fcd9		       85 1b		      STA	GRP0
     22  fcdb				   .noSprite_ret
     23  fcdb		       a5 80		      LDA	wall1
     24  fcdd		       85 0f		      STA	PF2
      0  fcdf					      DELAY	6
      1  fcdf				   .CYCLES    SET	6
      2  fcdf
      3  fcdf				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcdf				  -	      NOP
      5  fcdf				  -.CYCLES    SET	.CYCLES - 2
      6  fcdf					      ENDIF
      7  fcdf
      8  fcdf				  -	      IF	[.CYCLES - 2] / 5
      9  fcdf				  -	      REPEAT	.CYCLES / 5
     10  fcdf				  -	      INC	DUMP
     11  fcdf				  -	      REPEND
     12  fcdf				  -.CYCLES    SET	.CYCLES % 5
     13  fcdf					      ENDIF
     14  fcdf
     15  fcdf				  -	      IF	.CYCLES % 3 == 1
     16  fcdf				  -	      NOP
     17  fcdf				  -.CYCLES    SET	.CYCLES - 2
     18  fcdf					      ENDIF
     19  fcdf
     20  fcdf					      REPEAT	.CYCLES / 3
     21  fcdf		       85 30		      STA	DUMP
     20  fcdf					      REPEND
     21  fce1		       85 30		      STA	DUMP
     22  fce3					      REPEND
     23  fce3
     24  fce3				   .CYCLES    SET	.CYCLES % 3
     25  fce3
     26  fce3				  -	      REPEAT	.CYCLES / 2
     27  fce3				  -	      NOP
     28  fce3					      REPEND
     29  fce3
     30  fce3				   .CYCLES    SET	.CYCLES % 2
     31  fce3
     32  fce3				  -	      IF	.CYCLES
     33  fce3				  -	      ERR
     34  fce3					      ENDIF
     35  fce3
     26  fce3		       85 0d		      STA	PF0
      0  fce5					      DELAY	19
      1  fce5				   .CYCLES    SET	19
      2  fce5
      3  fce5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce5				  -	      NOP
      5  fce5				  -.CYCLES    SET	.CYCLES - 2
      6  fce5					      ENDIF
      7  fce5
      8  fce5					      IF	[.CYCLES - 2] / 5
      9  fce5					      REPEAT	.CYCLES / 5
     10  fce5		       e6 30		      INC	DUMP
      9  fce5					      REPEND
     10  fce7		       e6 30		      INC	DUMP
      9  fce7					      REPEND
     10  fce9		       e6 30		      INC	DUMP
     11  fceb					      REPEND
     12  fceb				   .CYCLES    SET	.CYCLES % 5
     13  fceb					      ENDIF
     14  fceb
     15  fceb					      IF	.CYCLES % 3 == 1
     16  fceb		       ea		      NOP
     17  fceb				   .CYCLES    SET	.CYCLES - 2
     18  fcec					      ENDIF
     19  fcec
     20  fcec				  -	      REPEAT	.CYCLES / 3
     21  fcec				  -	      STA	DUMP
     22  fcec					      REPEND
     23  fcec
     24  fcec				   .CYCLES    SET	.CYCLES % 3
     25  fcec
     26  fcec					      REPEAT	.CYCLES / 2
     27  fcec		       ea		      NOP
     28  fced					      REPEND
     29  fced
     30  fced				   .CYCLES    SET	.CYCLES % 2
     31  fced
     32  fced				  -	      IF	.CYCLES
     33  fced				  -	      ERR
     34  fced					      ENDIF
     35  fced
     28  fced		       a9 00		      LDA	#NULL
     29  fcef		       85 0f		      STA	PF2
     30  fcf1		       85 0d		      STA	PF0
     31  fcf3
     32  fcf3		       85 02		      STA	WSYNC
     33  fcf5		       a5 b5		      LDA	shadowColour
     34  fcf7		       85 08		      STA	COLUPF
     35  fcf9		       a5 9b		      LDA	shadow1a
     36  fcfb		       3d 00 f0 	      AND	and_1a,X
     37  fcfe		       85 0e		      STA	PF1
     38  fd00		       a5 9c		      LDA	shadow1b
     39  fd02		       3d 1e f0 	      AND	and_1b,X
     40  fd05		       85 0f		      STA	PF2
      0  fd07					      DELAY	9
      1  fd07				   .CYCLES    SET	9
      2  fd07
      3  fd07				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd07				  -	      NOP
      5  fd07				  -.CYCLES    SET	.CYCLES - 2
      6  fd07					      ENDIF
      7  fd07
      8  fd07					      IF	[.CYCLES - 2] / 5
      9  fd07					      REPEAT	.CYCLES / 5
     10  fd07		       e6 30		      INC	DUMP
     11  fd09					      REPEND
     12  fd09				   .CYCLES    SET	.CYCLES % 5
     13  fd09					      ENDIF
     14  fd09
     15  fd09					      IF	.CYCLES % 3 == 1
     16  fd09		       ea		      NOP
     17  fd09				   .CYCLES    SET	.CYCLES - 2
     18  fd0a					      ENDIF
     19  fd0a
     20  fd0a				  -	      REPEAT	.CYCLES / 3
     21  fd0a				  -	      STA	DUMP
     22  fd0a					      REPEND
     23  fd0a
     24  fd0a				   .CYCLES    SET	.CYCLES % 3
     25  fd0a
     26  fd0a					      REPEAT	.CYCLES / 2
     27  fd0a		       ea		      NOP
     28  fd0b					      REPEND
     29  fd0b
     30  fd0b				   .CYCLES    SET	.CYCLES % 2
     31  fd0b
     32  fd0b				  -	      IF	.CYCLES
     33  fd0b				  -	      ERR
     34  fd0b					      ENDIF
     35  fd0b
     42  fd0b		       a5 9e		      LDA	shadow1d
     43  fd0d		       3d 3c f0 	      AND	and_1c,X
     44  fd10		       85 0e		      STA	PF1
     45  fd12		       a5 9f		      LDA	shadow1e
     46  fd14		       3d 5a f0 	      AND	and_1d,X
     47  fd17		       85 0f		      STA	PF2
     48  fd19
     49  fd19		       a9 00		      LDA	#NULL
     50  fd1b		       85 1b		      STA	GRP0
     51  fd1d
     52  fd1d		       ca		      DEX
     53  fd1e		       e0 06		      CPX	#LOWRWALL_S
     54  fd20		       d0 a3		      BNE	.loop
     55  fd22
     56  fd22		       4c 31 fd 	      JMP	dc_wallsEnd
     57  fd25
     58  fd25				   .noSprite_1
     59  fd25				  -	      IF	>.branchPoint_1 == >.noSprite_1
     60  fd25				  -	      DELAY	11
     61  fd25					      ELSE
      0  fd25					      DELAY	10
      1  fd25				   .CYCLES    SET	10
      2  fd25
      3  fd25				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd25				  -	      NOP
      5  fd25				  -.CYCLES    SET	.CYCLES - 2
      6  fd25					      ENDIF
      7  fd25
      8  fd25					      IF	[.CYCLES - 2] / 5
      9  fd25					      REPEAT	.CYCLES / 5
     10  fd25		       e6 30		      INC	DUMP
      9  fd25					      REPEND
     10  fd27		       e6 30		      INC	DUMP
     11  fd29					      REPEND
     12  fd29				   .CYCLES    SET	.CYCLES % 5
     13  fd29					      ENDIF
     14  fd29
     15  fd29				  -	      IF	.CYCLES % 3 == 1
     16  fd29				  -	      NOP
     17  fd29				  -.CYCLES    SET	.CYCLES - 2
     18  fd29					      ENDIF
     19  fd29
     20  fd29				  -	      REPEAT	.CYCLES / 3
     21  fd29				  -	      STA	DUMP
     22  fd29					      REPEND
     23  fd29
     24  fd29				   .CYCLES    SET	.CYCLES % 3
     25  fd29
     26  fd29				  -	      REPEAT	.CYCLES / 2
     27  fd29				  -	      NOP
     28  fd29					      REPEND
     29  fd29
     30  fd29				   .CYCLES    SET	.CYCLES % 2
     31  fd29
     32  fd29				  -	      IF	.CYCLES
     33  fd29				  -	      ERR
     34  fd29					      ENDIF
     35  fd29
     63  fd29					      ENDIF
     64  fd29		       4c db fc 	      JMP	.noSprite_ret
     65  fd2c
     66  fd2c				   .noSprite_2
     67  fd2c				  -	      IF	>.branchPoint_2 == >.noSprite_2
     68  fd2c				  -	      DELAY	4
     69  fd2c					      ELSE
      0  fd2c					      DELAY	3
      1  fd2c				   .CYCLES    SET	3
      2  fd2c
      3  fd2c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd2c				  -	      NOP
      5  fd2c				  -.CYCLES    SET	.CYCLES - 2
      6  fd2c					      ENDIF
      7  fd2c
      8  fd2c				  -	      IF	[.CYCLES - 2] / 5
      9  fd2c				  -	      REPEAT	.CYCLES / 5
     10  fd2c				  -	      INC	DUMP
     11  fd2c				  -	      REPEND
     12  fd2c				  -.CYCLES    SET	.CYCLES % 5
     13  fd2c					      ENDIF
     14  fd2c
     15  fd2c				  -	      IF	.CYCLES % 3 == 1
     16  fd2c				  -	      NOP
     17  fd2c				  -.CYCLES    SET	.CYCLES - 2
     18  fd2c					      ENDIF
     19  fd2c
     20  fd2c					      REPEAT	.CYCLES / 3
     21  fd2c		       85 30		      STA	DUMP
     22  fd2e					      REPEND
     23  fd2e
     24  fd2e				   .CYCLES    SET	.CYCLES % 3
     25  fd2e
     26  fd2e				  -	      REPEAT	.CYCLES / 2
     27  fd2e				  -	      NOP
     28  fd2e					      REPEND
     29  fd2e
     30  fd2e				   .CYCLES    SET	.CYCLES % 2
     31  fd2e
     32  fd2e				  -	      IF	.CYCLES
     33  fd2e				  -	      ERR
     34  fd2e					      ENDIF
     35  fd2e
     71  fd2e					      ENDIF
     72  fd2e		       4c db fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     38  fd31
     39  fd31				   dc_wallsEnd		; once we've finished drawing the walls we draw the minimap ( or
     40  fd31							; hud, if that feature is added any time soon).
     41  fd31
     42  fd31		       b8		      CLV		; always best to leave the overflow flag at zero...
     43  fd32
     44  fd32		       a9 00		      LDA	#NULL	; Also nice to make sure the playfields are clear...
     45  fd34		       85 0e		      STA	PF1
     46  fd36		       85 0f		      STA	PF2
     47  fd38
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd38					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd38							; Draws the compass to the screen
      2  fd38							; See GLOSSARY.TXT for definitions of vague words
      3  fd38
      4  fd38				   mmDraw
      5  fd38
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd38					      INCLUDE	"drawCode/mmRender.asm"
      1  fd38							; Render the minimap
      2  fd38
      3  fd38				   mmRender   SUBROUTINE
      4  fd38		       a9 00		      LDA	#NULL
      5  fd3a							; Set the colour of the player
      6  fd3a		       a9 cc		      LDA	#PLYRCOLU
      7  fd3c		       85 08		      STA	COLUPF
      8  fd3e							; Set the colour of the map
      9  fd3e		       a9 0e		      LDA	#MAPCOLU
     10  fd40		       85 06		      STA	COLUP0
     11  fd42		       85 07		      STA	COLUP1
     12  fd44							; Get the player's position and translate it into horizontal movement
     13  fd44		       a9 08		      LDA	#%00001000
     14  fd46		       18		      CLC
     15  fd47		       38		      SEC
     16  fd48		       e5 aa		      SBC	playerPos
     17  fd4a		       0a		      ASL
     18  fd4b		       0a		      ASL
     19  fd4c		       0a		      ASL
     20  fd4d		       0a		      ASL
     21  fd4e		       85 24		      STA	HMBL
     22  fd50
     23  fd50							; Set the map's position to the right values
     24  fd50		       a9 00		      LDA	#HADJ_A
     25  fd52		       85 20		      STA	HMP0
     26  fd54		       a9 10		      LDA	#HADJ_B
     27  fd56		       85 21		      STA	HMP1
     28  fd58
     29  fd58		       85 02		      STA	WSYNC
     30  fd5a		       a2 07		      LDX	#HWAIT
     31  fd5c
     32  fd5c				   .wait1
     33  fd5c		       ca		      DEX
     34  fd5d		       d0 fd		      BNE	.wait1
      0  fd5f					      DELAY	HDELAY1
      1  fd5f				   .CYCLES    SET	HDELAY1
      2  fd5f
      3  fd5f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd5f				  -	      NOP
      5  fd5f				  -.CYCLES    SET	.CYCLES - 2
      6  fd5f					      ENDIF
      7  fd5f
      8  fd5f				  -	      IF	[.CYCLES - 2] / 5
      9  fd5f				  -	      REPEAT	.CYCLES / 5
     10  fd5f				  -	      INC	DUMP
     11  fd5f				  -	      REPEND
     12  fd5f				  -.CYCLES    SET	.CYCLES % 5
     13  fd5f					      ENDIF
     14  fd5f
     15  fd5f				  -	      IF	.CYCLES % 3 == 1
     16  fd5f				  -	      NOP
     17  fd5f				  -.CYCLES    SET	.CYCLES - 2
     18  fd5f					      ENDIF
     19  fd5f
     20  fd5f					      REPEAT	.CYCLES / 3
     21  fd5f		       85 30		      STA	DUMP
     22  fd61					      REPEND
     23  fd61
     24  fd61				   .CYCLES    SET	.CYCLES % 3
     25  fd61
     26  fd61					      REPEAT	.CYCLES / 2
     27  fd61		       ea		      NOP
     28  fd62					      REPEND
     29  fd62
     30  fd62				   .CYCLES    SET	.CYCLES % 2
     31  fd62
     32  fd62				  -	      IF	.CYCLES
     33  fd62				  -	      ERR
     34  fd62					      ENDIF
     35  fd62
     36  fd62		       85 10		      STA	RESP0
     37  fd64		       85 11		      STA	RESP1
     38  fd66
     39  fd66		       a5 aa		      LDA	playerPos
     40  fd68
     41  fd68		       85 02		      STA	WSYNC
     42  fd6a		       a2 07		      LDX	#HWAIT
     43  fd6c
     44  fd6c				   .wait2
     45  fd6c		       ca		      DEX
     46  fd6d		       d0 fd		      BNE	.wait2
      0  fd6f					      DELAY	HDELAY2
      1  fd6f				   .CYCLES    SET	HDELAY2
      2  fd6f
      3  fd6f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd6f				  -	      NOP
      5  fd6f				  -.CYCLES    SET	.CYCLES - 2
      6  fd6f					      ENDIF
      7  fd6f
      8  fd6f					      IF	[.CYCLES - 2] / 5
      9  fd6f					      REPEAT	.CYCLES / 5
     10  fd6f		       e6 30		      INC	DUMP
     11  fd71					      REPEND
     12  fd71				   .CYCLES    SET	.CYCLES % 5
     13  fd71					      ENDIF
     14  fd71
     15  fd71				  -	      IF	.CYCLES % 3 == 1
     16  fd71				  -	      NOP
     17  fd71				  -.CYCLES    SET	.CYCLES - 2
     18  fd71					      ENDIF
     19  fd71
     20  fd71					      REPEAT	.CYCLES / 3
     21  fd71		       85 30		      STA	DUMP
     22  fd73					      REPEND
     23  fd73
     24  fd73				   .CYCLES    SET	.CYCLES % 3
     25  fd73
     26  fd73				  -	      REPEAT	.CYCLES / 2
     27  fd73				  -	      NOP
     28  fd73					      REPEND
     29  fd73
     30  fd73				   .CYCLES    SET	.CYCLES % 2
     31  fd73
     32  fd73				  -	      IF	.CYCLES
     33  fd73				  -	      ERR
     34  fd73					      ENDIF
     35  fd73
     48  fd73		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      7  fd75
      8  fd75					      SUBROUTINE		; The preceeding code declares it's own subroutine
      9  fd75
     10  fd75		       a0 00		      LDY	#NULL
     11  fd77		       84 1b		      STY	GRP0
     12  fd79		       84 1c		      STY	GRP1
     13  fd7b		       84 02		      STY	WSYNC
     14  fd7d		       84 2a		      STY	HMOVE
     15  fd7f
     16  fd7f		       a6 aa		      LDX	playerPos
     17  fd81
     18  fd81				   .loop
     19  fd81		       85 02		      STA	WSYNC
     20  fd83
     21  fd83		       b1 ba		      LDA	(miniMapPtr),Y
     22  fd85		       85 1b		      STA	GRP0
     23  fd87		       c8		      INY
     24  fd88		       b1 ba		      LDA	(miniMapPtr),Y
     25  fd8a		       85 1c		      STA	GRP1
     26  fd8c		       c8		      INY
     27  fd8d
     28  fd8d		       8a		      TXA
     29  fd8e		       38		      SEC
     30  fd8f		       e5 ab		      SBC	mapWidth
     31  fd91		       aa		      TAX
     32  fd92		       29 f0		      AND	#$F0
     33  fd94
     34  fd94		       d0 0a		      BNE	.noDraw
     35  fd96
     36  fd96		       a9 02		      LDA	#2
     37  fd98		       85 1f		      STA	ENABL
     38  fd9a		       85 b6		      STA	drawingPlyr
     39  fd9c		       a9 01		      LDA	#1
     40  fd9e		       85 27		      STA	VDELBL
     41  fda0
     42  fda0				   .noDraw
     43  fda0
     44  fda0		       a5 b6		      LDA	drawingPlyr
     45  fda2		       85 1f		      STA	ENABL
     46  fda4		       a9 00		      LDA	#NULL
     47  fda6		       85 b6		      STA	drawingPlyr
     48  fda8		       c0 20		      CPY	#MMSIZE
     49  fdaa		       d0 d5		      BNE	.loop
     50  fdac
     51  fdac		       a9 00		      LDA	#NULL
     52  fdae		       85 1f		      STA	ENABL
     53  fdb0
     54  fdb0		       85 02		      STA	WSYNC
     55  fdb2
     56  fdb2		       a9 00		      LDA	#NULL
     57  fdb4		       85 1b		      STA	GRP0
     58  fdb6		       85 1c		      STA	GRP1
     59  fdb8		       85 06		      STA	COLUP0
     60  fdba		       85 07		      STA	COLUP1
------- FILE dispkern.asm
------- FILE main.asm
     52  fdbc
     53  fdbc							; Start VBLANK
     54  fdbc
     55  fdbc		       a9 c2		      LDA	#VBLANK_SET
     56  fdbe		       85 01		      STA	VBLANK
     57  fdc0
     58  fdc0							; Process input
     59  fdc0
------- FILE input.asm LEVEL 2 PASS 4
      0  fdc0					      INCLUDE	"input.asm"
      1  fdc0							; VePseu's controller input
      2  fdc0
      3  fdc0		       85 02		      STA	WSYNC
      4  fdc2
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fdc2					      INCLUDE	"ctrlCode/cin1.asm"
      1  fdc2					      SUBROUTINE
      2  fdc2
      3  fdc2		       ad 80 02 	      LDA	SWCHA
      4  fdc5		       29 10		      AND	#FFORD
      5  fdc7		       d0 22		      BNE	.noPress
      6  fdc9
      7  fdc9		       a5 aa		      LDA	playerPos
      8  fdcb		       38		      SEC
      9  fdcc		       e5 af		      SBC	yLoss
     10  fdce		       18		      CLC
     11  fdcf		       65 ae		      ADC	yGain
     12  fdd1		       a8		      TAY
     13  fdd2
     14  fdd2		       b1 bc		      LDA	(mapPtr),Y
     15  fdd4		       d0 19		      BNE	.end
     16  fdd6
     17  fdd6		       a5 b0		      LDA	fordPressed
     18  fdd8		       d0 09		      BNE	.wait
     19  fdda
     20  fdda		       84 aa		      STY	playerPos
     21  fddc		       a9 0f		      LDA	#CWAITCNT
     22  fdde		       85 b0		      STA	fordPressed
     23  fde0		       4c ef fd 	      JMP	.end
     24  fde3
     25  fde3				   .wait
      0  fde3					      DEA
      1  fde3		       38		      SEC
      2  fde4		       e9 01		      SBC	#1
     27  fde6		       85 b0		      STA	fordPressed
     28  fde8		       4c ef fd 	      JMP	.end
     29  fdeb
     30  fdeb				   .noPress
     31  fdeb		       a9 00		      LDA	#NULL
     32  fded		       85 b0		      STA	fordPressed
     33  fdef
     34  fdef				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fdef					      INCLUDE	"ctrlCode/cin2.asm"
      1  fdef					      SUBROUTINE
      2  fdef
      3  fdef		       85 02		      STA	WSYNC
      4  fdf1		       ad 80 02 	      LDA	SWCHA
      5  fdf4		       29 20		      AND	#FBACK
      6  fdf6		       d0 22		      BNE	.noPress
      7  fdf8
      8  fdf8		       a5 aa		      LDA	playerPos
      9  fdfa		       38		      SEC
     10  fdfb		       e5 ae		      SBC	yGain
     11  fdfd		       18		      CLC
     12  fdfe		       65 af		      ADC	yLoss
     13  fe00		       a8		      TAY
     14  fe01
     15  fe01		       b1 bc		      LDA	(mapPtr),Y
     16  fe03		       d0 19		      BNE	.end
     17  fe05
     18  fe05		       a5 b1		      LDA	backPressed
     19  fe07		       d0 09		      BNE	.wait
     20  fe09
     21  fe09		       84 aa		      STY	playerPos
     22  fe0b		       a9 0f		      LDA	#CWAITCNT
     23  fe0d		       85 b1		      STA	backPressed
     24  fe0f		       4c 1e fe 	      JMP	.end
     25  fe12
     26  fe12				   .wait
      0  fe12					      DEA
      1  fe12		       38		      SEC
      2  fe13		       e9 01		      SBC	#1
     28  fe15		       85 b1		      STA	backPressed
     29  fe17		       4c 1e fe 	      JMP	.end
     30  fe1a
     31  fe1a				   .noPress
     32  fe1a		       a9 00		      LDA	#NULL
     33  fe1c		       85 b1		      STA	backPressed
     34  fe1e
     35  fe1e				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fe1e					      INCLUDE	"ctrlCode/cin3.asm"
      1  fe1e					      SUBROUTINE
      2  fe1e
      3  fe1e		       85 02		      STA	WSYNC
      4  fe20
      5  fe20		       a6 b3		      LDX	rigtPressed
      6  fe22		       d0 16		      BNE	.wait
      7  fe24
      8  fe24		       ad 80 02 	      LDA	SWCHA
      9  fe27		       29 80		      AND	#FLEFT
     10  fe29		       d0 15		      BNE	.noPress
     11  fe2b
     12  fe2b		       a6 b7		      LDX	direction
     13  fe2d		       e8		      INX
     14  fe2e		       8a		      TXA
     15  fe2f		       29 03		      AND	#%11
     16  fe31
     17  fe31		       85 b7		      STA	direction
     18  fe33
     19  fe33		       a9 0f		      LDA	#CWAITCNT
     20  fe35		       85 b3		      STA	rigtPressed
     21  fe37		       4c 42 fe 	      JMP	.end
     22  fe3a
     23  fe3a				   .wait
     24  fe3a		       ca		      DEX
     25  fe3b		       86 b3		      STX	rigtPressed
     26  fe3d		       4c 42 fe 	      JMP	.end
     27  fe40
     28  fe40				   .noPress
     29  fe40		       86 b3		      STX	rigtPressed
     30  fe42
     31  fe42				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fe42					      INCLUDE	"ctrlCode/cin4.asm"
      1  fe42					      SUBROUTINE
      2  fe42
      3  fe42		       85 02		      STA	WSYNC
      4  fe44
      5  fe44		       a6 b2		      LDX	leftPressed
      6  fe46		       d0 16		      BNE	.wait
      7  fe48
      8  fe48		       ad 80 02 	      LDA	SWCHA
      9  fe4b		       29 40		      AND	#FRIGT
     10  fe4d		       d0 15		      BNE	.noPress
     11  fe4f
     12  fe4f		       a6 b7		      LDX	direction
     13  fe51		       ca		      DEX
     14  fe52		       8a		      TXA
     15  fe53		       29 03		      AND	#%11
     16  fe55
     17  fe55		       85 b7		      STA	direction
     18  fe57
     19  fe57		       a9 0f		      LDA	#CWAITCNT
     20  fe59		       85 b2		      STA	leftPressed
     21  fe5b		       4c 66 fe 	      JMP	.end
     22  fe5e
     23  fe5e				   .wait
     24  fe5e		       ca		      DEX
     25  fe5f		       86 b2		      STX	leftPressed
     26  fe61		       4c 66 fe 	      JMP	CDIR1
     27  fe64
     28  fe64				   .noPress
     29  fe64		       86 b2		      STX	leftPressed
     30  fe66
     31  fe66				   .end
------- FILE input.asm
      9  fe66
     10  fe66				   CDIR1
     11  fe66		       85 02		      STA	WSYNC
     12  fe68		       a5 b7		      LDA	direction
     13  fe6a		       c9 00		      CMP	#DNORTH
     14  fe6c		       d0 15		      BNE	CDIR2
     15  fe6e
     16  fe6e		       a9 86		      LDA	#WCOLU
     17  fe70		       85 b4		      STA	wallColour
     18  fe72		       a9 82		      LDA	#SCOLU
     19  fe74		       85 b5		      STA	shadowColour
     20  fe76
     21  fe76		       a5 ab		      LDA	mapWidth
     22  fe78		       85 af		      STA	yLoss
     23  fe7a		       a2 01		      LDX	#ONE
     24  fe7c		       86 ac		      STX	xGain
     25  fe7e		       ca		      DEX
     26  fe7f		       86 ae		      STX	yGain
     27  fe81		       86 ad		      STX	xLoss
     28  fe83
     29  fe83				   CDIR2
     30  fe83		       a5 b7		      LDA	direction
     31  fe85		       c9 02		      CMP	#DSOUTH
     32  fe87		       d0 15		      BNE	CDIR3
     33  fe89
     34  fe89		       a9 86		      LDA	#WCOLU
     35  fe8b		       85 b4		      STA	wallColour
     36  fe8d		       a9 82		      LDA	#SCOLU
     37  fe8f		       85 b5		      STA	shadowColour
     38  fe91
     39  fe91		       a5 ab		      LDA	mapWidth
     40  fe93		       85 ae		      STA	yGain
     41  fe95		       a2 01		      LDX	#ONE
     42  fe97		       86 ad		      STX	xLoss
     43  fe99		       ca		      DEX
     44  fe9a		       86 af		      STX	yLoss
     45  fe9c		       86 ac		      STX	xGain
     46  fe9e
     47  fe9e				   CDIR3
     48  fe9e		       a5 b7		      LDA	direction
     49  fea0		       c9 01		      CMP	#DWEST
     50  fea2		       d0 15		      BNE	CDIR4
     51  fea4
     52  fea4		       a9 82		      LDA	#SCOLU
     53  fea6		       85 b4		      STA	wallColour
     54  fea8		       a9 86		      LDA	#WCOLU
     55  feaa		       85 b5		      STA	shadowColour
     56  feac
     57  feac		       a5 ab		      LDA	mapWidth
     58  feae		       85 ac		      STA	xGain
     59  feb0		       a2 01		      LDX	#ONE
     60  feb2		       86 ae		      STX	yGain
     61  feb4		       ca		      DEX
     62  feb5		       86 af		      STX	yLoss
     63  feb7		       86 ad		      STX	xLoss
     64  feb9
     65  feb9				   CDIR4
     66  feb9		       a5 b7		      LDA	direction
     67  febb		       c9 03		      CMP	#DEAST
     68  febd		       d0 15		      BNE	CEND
     69  febf
     70  febf		       a9 82		      LDA	#SCOLU
     71  fec1		       85 b4		      STA	wallColour
     72  fec3		       a9 86		      LDA	#WCOLU
     73  fec5		       85 b5		      STA	shadowColour
     74  fec7
     75  fec7		       a5 ab		      LDA	mapWidth
     76  fec9		       85 ad		      STA	xLoss
     77  fecb		       a2 01		      LDX	#ONE
     78  fecd		       86 af		      STX	yLoss
     79  fecf		       ca		      DEX
     80  fed0		       86 ae		      STX	yGain
     81  fed2		       86 ac		      STX	xGain
     82  fed4
     83  fed4				   CEND
     84  fed4		       85 02		      STA	WSYNC
------- FILE main.asm
     61  fed6
     62  fed6							; Pad again
     63  fed6
     64  fed6		       a2 1c		      LDX	#LOPAD_LIMIT
     65  fed8
     66  fed8				   lowerPad
     67  fed8		       85 02		      STA	WSYNC
     68  feda
     69  feda		       ca		      DEX
     70  fedb		       d0 fb		      BNE	lowerPad
     71  fedd
     72  fedd							; Get everything ready for VSYNC
     73  fedd
     74  fedd		       86 01		      STX	VBLANK
     75  fedf		       a9 02		      LDA	#VSYNC_SET
     76  fee1		       85 02		      STA	WSYNC
     77  fee3		       4c 25 f8 	      JMP	screenStart
     78  fee6
     79  fee6							; Tell us how many bytes we have used up
     80  fee6
      0  fee6					      USAGE_REPORT	"ROM", $F800, $FFFA
      1  fee6
      2  fee6				   NAM	      SET	"ROM"
      3  fee6				   SPOS       SET	$F800
      4  fee6				   EPOS       SET	$FFFA
      5  fee6				   CPOS       SET	.
      6  fee6
      7  fee6				   CAP	      SET	EPOS - SPOS
      8  fee6				   TKUP       SET	CPOS - SPOS
      9  fee6
     10  fee6				   PCNT       SET	[TKUP * 100 / CAP]d
     11  fee6
 86 % of your ROM is used up ( 1766 / 2042 ) bytes
     12  fee6					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     13  fee6
     82  fee6
     83  fffa					      ORG	$FFFA
     84  fffa
     85  fffa		       00 f8		      DC.W	start	; Something
     86  fffc		       00 f8		      DC.W	start	; Entrypoint
     87  fffe		       25 f8		      DC.W	screenStart	; Something else
     88  10000
     89  10000					       END
