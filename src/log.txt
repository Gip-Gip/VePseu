------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
      3 U028a ????				      SEG.U	addresses
      4 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	x_pos_gan
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	xGain
     17 U028a ????				      SEC
     18 U028a ????				      SBC	xLoss
     19 U028a ????				      TAY
     20 U028a ????
     21 U028a ????				      ENDM		; 14 cycles
     22 U028a ????
     23 U028a ????				      MAC	x_pos_los
     24 U028a ????
     25 U028a ????				      TYA
     26 U028a ????				      CLC
     27 U028a ????				      ADC	xLoss
     28 U028a ????				      SEC
     29 U028a ????				      SBC	xGain
     30 U028a ????				      TAY
     31 U028a ????
     32 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   shift      DC	0
     49 U00ab		       00	   playerPos  DC	0
     50 U00ac		       00	   mapWidth   DC	0
     51 U00ad		       00	   xGain      DC	0
     52 U00ae		       00	   xLoss      DC	0
     53 U00af		       00	   yGain      DC	0
     54 U00b0		       00	   yLoss      DC	0
     55 U00b1		       00	   fordPressed DC	0
     56 U00b2		       00	   backPressed DC	0
     57 U00b3		       00	   leftPressed DC	0
     58 U00b4		       00	   rigtPressed DC	0
     59 U00b5		       00	   wallColour DC	0
     60 U00b6		       00	   shadowColour DC	0
     61 U00b7		       00	   horzPos_mA DC	0
     62 U00b8		       00	   horzPos_mB DC	0
     63 U00b9		       00	   horzPos_plyr DC	0
     64 U00ba		       00	   drawingPlyr DC	0
     65 U00bb		       00	   direction  DC	0
     66 U00bc		       00	   spriteHeight DC	0
     67 U00bd		       00	   halfJump   DC	0
     68 U00be		       00 00	   miniMapPtr DC.W	0
     69 U00c0		       00 00	   mapPtr     DC.W	0
     70 U00c2		       00 00	   sprite     DC.W	0
     71 U00c4		       00	   foo	      DC	0
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c5					      INCLUDE	"include/pia_addr.h"
      1 U00c5							; PIA addresses
      2 U00c5
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
------- FILE include/defs.h LEVEL 3 PASS 4
      0 U028a					      INCLUDE	"include/defs.h"
      1 U028a					      MAC	ina
      2 U028a					      CLC
      3 U028a					      ADC	#1
      4 U028a					      ENDM
      5 U028a
      6 U028a					      MAC	dea
      7 U028a					      SEC
      8 U028a					      SBC	#1
      9 U028a					      ENDM
     10 U028a
     11 U028a					      MAC	delay
     12 U028a				   .CYCLES    SET	{1}
     13 U028a
     14 U028a					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
     15 U028a					      NOP
     16 U028a				   .CYCLES    SET	.CYCLES - 2
     17 U028a					      ENDIF
     18 U028a
     19 U028a					      IF	[.CYCLES - 2] / 5
     20 U028a					      REPEAT	.CYCLES / 5
     21 U028a					      INC	foo
     22 U028a					      REPEND
     23 U028a				   .CYCLES    SET	.CYCLES % 5
     24 U028a					      ENDIF
     25 U028a
     26 U028a					      IF	.CYCLES % 3 == 1
     27 U028a					      NOP
     28 U028a				   .CYCLES    SET	.CYCLES - 2
     29 U028a					      ENDIF
     30 U028a
     31 U028a					      REPEAT	.CYCLES / 3
     32 U028a					      STA	DUMP
     33 U028a					      REPEND
     34 U028a
     35 U028a				   .CYCLES    SET	.CYCLES % 3
     36 U028a
     37 U028a					      REPEAT	.CYCLES / 2
     38 U028a					      NOP
     39 U028a					      REPEND
     40 U028a
     41 U028a				   .CYCLES    SET	.CYCLES % 2
     42 U028a
     43 U028a					      IF	.CYCLES
     44 U028a					      ERR
     45 U028a					      ENDIF
     46 U028a
     47 U028a					      ENDM
     48 U028a
     49 U028a		       00 00	   NULL       =	0	; The value of NULL
     50 U028a		       00 01	   ONE	      =	1	; The value of one
     51 U028a
     52 U028a		       00 0a	   WALLCNT    =	10	; The number of walls to render in scrend
     53 U028a
     54 U028a		       00 03	   PIXH       =	3	; The height of each pixel, in scanlines (x2)
     55 U028a
     56 U028a		       00 1e	   UPPRWALL_S =	30
     57 U028a		       00 06	   LOWRWALL_S =	6
     58 U028a
     59 U028a		       00 00	   HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     60 U028a		       00 10	   HADJ_B     =	$10
     61 U028a
     62 U028a		       00 07	   HWAIT      =	7	; The horizontal wait for the minimap
     63 U028a		       00 05	   HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     64 U028a		       00 08	   HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     65 U028a
     66 U028a		       00 86	   WCOLU      =	$86	; The initial colour of walls
     67 U028a		       00 82	   SCOLU      =	$82	; The initial colour of shadows
     68 U028a		       00 0e	   MAPCOLU    =	$0E	; The colour of the map on the minimap
     69 U028a		       00 cc	   PLYRCOLU   =	$CC	; The colour of the player on the minimap
     70 U028a
     71 U028a		       00 c2	   VBLANK_SET =	%11000010	; The value to push to the vblank register
     72 U028a		       00 02	   VSYNC_SET  =	2	; The value to push to the vsync register
     73 U028a
     74 U028a		       00 00	   INDEXINIT  =	0	; The value to initialize indexes to
     75 U028a
     76 U028a		       00 0e	   UPPAD_LIMIT =	14	; The upper pad amount
     77 U028a		       00 1a	   LOPAD_LIMIT =	26	; The lower pad amount
     78 U028a
     79 U028a		       00 ff	   FULLWALL   =	$FF
     80 U028a
     81 U028a		       00 10	   FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     82 U028a		       00 20	   FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     83 U028a		       00 80	   FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     84 U028a		       00 40	   FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     85 U028a		       00 80	   ITRIG      =	%10000000	; The bit set when the trigger is set
     86 U028a
     87 U028a		       00 01	   LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     88 U028a
     89 U028a		       00 00	   cleanStart =	0	; The value to initialize X to in clearLoop
     90 U028a		       00 00	   cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     91 U028a
     92 U028a		       00 ff	   stack      =	$FF	; The address of the stack
     93 U028a
     94 U028a		       00 0f	   CWAITCNT   =	#15	; The amount of frames to wait before input is repeated
     95 U028a
     96 U028a		       00 00	   DNORTH     =	0	; The possible directions
     97 U028a		       00 02	   DSOUTH     =	2
     98 U028a		       00 01	   DWEST      =	1
     99 U028a		       00 03	   DEAST      =	3
------- FILE include/vepseu.h
     11 U028a
     12 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   jerry
      8  f078		       00		      DC	%00000000
      9  f079		       42		      DC	%01000010
     10  f07a		       42		      DC	%01000010
     11  f07b		       42		      DC	%01000010
     12  f07c		       42		      DC	%01000010
     13  f07d		       42		      DC	%01000010
     14  f07e		       42		      DC	%01000010
     15  f07f		       42		      DC	%01000010
     16  f080		       42		      DC	%01000010
     17  f081		       42		      DC	%01000010
     18  f082		       42		      DC	%01000010
     19  f083		       42		      DC	%01000010
     20  f084		       ff		      DC	%11111111
     21  f085		       81		      DC	%10000001
     22  f086		       89		      DC	%10001001
     23  f087		       81		      DC	%10000001
     24  f088		       89		      DC	%10001001
     25  f089		       81		      DC	%10000001
     26  f08a		       89		      DC	%10001001
     27  f08b		       81		      DC	%10000001
     28  f08c		       89		      DC	%10001001
     29  f08d		       81		      DC	%10000001
     30  f08e		       99		      DC	%10011001
     31  f08f		       a5		      DC	%10100101
     32  f090		       42		      DC	%01000010
     33  f091		       42		      DC	%01000010
     34  f092		       6a		      DC	%01101010
     35  f093		       42		      DC	%01000010
     36  f094		       99		      DC	%10011001
     37  f095		       a5		      DC	%10100101
     38  f096		       c3		      DC	%11000011
     39  f097
     40  f097				   miniMap_01
     41  f097		       e0 07		      DC.W	%0000011111100000
     42  f099		       bf fd		      DC.W	%1111110110111111
     43  f09b		       80 01		      DC.W	%0000000110000000
     44  f09d		       80 01		      DC.W	%0000000110000000
     45  f09f		       be bd		      DC.W	%1011110110111110
     46  f0a1		       a2 a5		      DC.W	%1010010110100010
     47  f0a3		       a2 a7		      DC.W	%1010011110100010
     48  f0a5		       e2 a7		      DC.W	%1010011111100010
     49  f0a7		       e2 a5		      DC.W	%1010010111100010
     50  f0a9		       be bd		      DC.W	%1011110110111110
     51  f0ab		       80 81		      DC.W	%1000000110000000
     52  f0ad		       80 81		      DC.W	%1000000110000000
     53  f0af		       bf fd		      DC.W	%1111110110111111
     54  f0b1		       a0 05		      DC.W	%0000010110100000
     55  f0b3		       a0 05		      DC.W	%0000010110100000
     56  f0b5		       e0 07		      DC.W	%0000011111100000
     57  f0b7
     58  f0b7				   map_01_load
     59  f0b7		       a9 d1		      LDA	#MAP_01_POS
     60  f0b9		       85 ab		      STA	playerPos
     61  f0bb		       a9 10		      LDA	#MAP_01_WDTH
     62  f0bd		       85 ac		      STA	mapWidth
     63  f0bf
     64  f0bf		       a9 00		      LDA	#<map_01
     65  f0c1		       85 c0		      STA	mapPtr
     66  f0c3		       a9 f1		      LDA	#>map_01
     67  f0c5		       85 c1		      STA	mapPtr + 1
     68  f0c7
     69  f0c7		       a9 97		      LDA	#<miniMap_01
     70  f0c9		       85 be		      STA	miniMapPtr
     71  f0cb		       a9 f0		      LDA	#>miniMap_01
     72  f0cd		       85 bf		      STA	miniMapPtr + 1
     73  f0cf		       60		      RTS
     74  f0d0
     75  f0d0
     76  f100		       00 00 00 00*	      ALIGN	256
     77  f100
     78  f100				   map_01
     79  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     80  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     81  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     82  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     83  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     84  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     85  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     86  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     87  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     88  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     89  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     90  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     91  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     92  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     93  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     94  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
     14  f800					      ORG	$F800
     15  f800
     16  f800		       60		      RTS
     17  f801
     18  f801				   start
     19  f801
     20  f801							; Initialize everything
     21  f801
------- FILE init.asm LEVEL 2 PASS 4
      0  f801					      INCLUDE	"init.asm"
      1  f801							; VePseu's init file
      2  f801
      3  f801		       a2 ff		      LDX	#stack
      4  f803		       9a		      TXS
      5  f804
      6  f804		       a9 00		      LDA	#NULL
      7  f806
      8  f806		       d8		      CLD
      9  f807		       18		      CLC
     10  f808		       58		      CLI
     11  f809		       b8		      CLV
     12  f80a
     13  f80a		       a2 00		      LDX	#INDEXINIT
     14  f80c
     15  f80c				   cleanLoop
     16  f80c
     17  f80c		       95 00		      STA	cleanStart,X
     18  f80e		       e8		      INX
     19  f80f
     20  f80f		       e0 00		      CPX	#cleanEnd
     21  f811		       d0 f9		      BNE	cleanLoop
     22  f813
     23  f813		       20 b7 f0 	      JSR	map_01_load
     24  f816
     25  f816		       a5 ac		      LDA	mapWidth
     26  f818		       85 b0		      STA	yLoss
     27  f81a		       a9 01		      LDA	#ONE
     28  f81c		       85 ad		      STA	xGain
     29  f81e		       a9 00		      LDA	#NULL
     30  f820		       85 af		      STA	yGain
     31  f822		       85 ae		      STA	xLoss
     32  f824
     33  f824		       a9 86		      LDA	#WCOLU
     34  f826		       85 b5		      STA	wallColour
     35  f828		       a9 82		      LDA	#SCOLU
     36  f82a		       85 b6		      STA	shadowColour
------- FILE main.asm
     23  f82c
     24  f82c		       a9 02		      LDA	#VSYNC_SET
     25  f82e
     26  f82e				   screenStart
     27  f82e
     28  f82e							; Start vsync (3 scanlines)
     29  f82e		       85 00		      STA	VSYNC
     30  f830
     31  f830		       85 02		      STA	WSYNC
     32  f832		       85 02		      STA	WSYNC
     33  f834		       a9 00		      LDA	#NULL
     34  f836		       85 02		      STA	WSYNC
     35  f838
     36  f838		       85 00		      STA	VSYNC
     37  f83a
     38  f83a							; Render everything (23 scanlines) (491 bytes)
     39  f83a
     40  f83a
     41  f83a				   za
     42  f83a
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f83a					      INCLUDE	"walrend.asm"	; 9 scanlines
      1  f83a							; VePseu's wall renderer
      2  f83a
      3  f83a		       a4 ab		      LDY	playerPos
      4  f83c
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f83c					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f83c							; Peripheral vision rendering (54 cycles)
      2  f83c
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f83c					      INCLUDE	"include/ands_0.h"
      1  f83c							; The AND constants for peripheral vision
      2  f83c
      3  f83c		       00 c0	   AND_W0S1P1 =	%11000000
      4  f83c		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f83c
      0  f83c					      X_POS_LOS		; 24 cycles
      1  f83c
      2  f83c		       98		      TYA
      3  f83d		       18		      CLC
      4  f83e		       65 ae		      ADC	xLoss
      5  f840		       38		      SEC
      6  f841		       e5 ad		      SBC	xGain
      7  f843		       a8		      TAY
      8  f844
      6  f844		       b1 c0		      LDA	(mapPtr),Y
      7  f846		       29 c0		      AND	#AND_W0S1P1
      8  f848		       85 9b		      STA	shadow1a
      9  f84a
     10  f84a		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f84b		       18		      CLC
     12  f84c		       65 ad		      ADC	xGain
     13  f84e		       65 ad		      ADC	xGain
     14  f850		       38		      SEC
     15  f851		       e5 ae		      SBC	xLoss
     16  f853		       e5 ae		      SBC	xLoss
     17  f855		       a8		      TAY
     18  f856
     19  f856		       b1 c0		      LDA	(mapPtr),Y	; 10 cycles
     20  f858		       29 03		      AND	#AND_W0S1P2
     21  f85a		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f85c
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f85c					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f85c							; Render the first layer (not that ugly) (86 cycles)
      2  f85c
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f85c					      INCLUDE	"include/ands_1.h"
      1  f85c							; The AND constants for layer 1
      2  f85c
      3  f85c		       00 03	   AND_W1S1P1 =	%00000011
      4  f85c		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f85c
      0  f85c					      Y_POS_ADV		; 30 cycles
      1  f85c
      2  f85c		       98		      TYA
      3  f85d		       18		      CLC
      4  f85e		       65 af		      ADC	yGain
      5  f860		       38		      SEC
      6  f861		       e5 b0		      SBC	yLoss
      7  f863		       a8		      TAY
      8  f864
      6  f864		       b1 c0		      LDA	(mapPtr),Y
      7  f866		       85 9e		      STA	shadow1d
      8  f868		       05 9f		      ORA	shadow1e
      9  f86a		       29 03		      AND	#AND_W1S1P1
     10  f86c		       85 9f		      STA	shadow1e
     11  f86e
      0  f86e					      X_POS_LOS		; 22 cycles
      1  f86e
      2  f86e		       98		      TYA
      3  f86f		       18		      CLC
      4  f870		       65 ae		      ADC	xLoss
      5  f872		       38		      SEC
      6  f873		       e5 ad		      SBC	xGain
      7  f875		       a8		      TAY
      8  f876
     13  f876		       b1 c0		      LDA	(mapPtr),Y
     14  f878		       85 80		      STA	wall1
     15  f87a
      0  f87a					      X_POS_LOS		; 34 cycles
      1  f87a
      2  f87a		       98		      TYA
      3  f87b		       18		      CLC
      4  f87c		       65 ae		      ADC	xLoss
      5  f87e		       38		      SEC
      6  f87f		       e5 ad		      SBC	xGain
      7  f881		       a8		      TAY
      8  f882
     17  f882		       b1 c0		      LDA	(mapPtr),Y
     18  f884		       aa		      TAX
     19  f885		       05 9b		      ORA	shadow1a
     20  f887		       85 9b		      STA	shadow1a
     21  f889		       8a		      TXA
     22  f88a		       29 03		      AND	#AND_W1S1P2
     23  f88c		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f88e
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f88e					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f88e							; Render the second layer (186 cycles)
      2  f88e
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f88e					      INCLUDE	"include/ands_2.h"
      1  f88e							; The AND constants for layer 2
      2  f88e
      3  f88e		       00 e0	   AND_W2S1P1 =	%11100000
      4  f88e		       00 fc	   AND_W2S2P1 =	%11111100
      5  f88e
      6  f88e		       00 03	   AND_W2S0P1 =	%00000011
      7  f88e		       00 04	   AND_W2S1P2 =	%00000100
      8  f88e		       00 0c	   AND_W2S2P2 =	%00001100
      9  f88e
     10  f88e		       00 fc	   AND_W2S0P2 =	%11111100
     11  f88e
     12  f88e		       00 80	   AND_W2S1P3 =	%10000000
     13  f88e		       00 c0	   AND_W2S2P3 =	%11000000
     14  f88e
     15  f88e		       00 01	   AND_W2S1P4 =	%00000001
     16  f88e		       00 0f	   AND_W2S2P4 =	%00001111
     17  f88e		       00 03	   AND_W2S1P5 =	%00000011
     18  f88e		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f88e
      0  f88e					      Y_POS_ADV		; 14 cycles
      1  f88e
      2  f88e		       98		      TYA
      3  f88f		       18		      CLC
      4  f890		       65 af		      ADC	yGain
      5  f892		       38		      SEC
      6  f893		       e5 b0		      SBC	yLoss
      7  f895		       a8		      TAY
      8  f896
      6  f896
      0  f896					      X_POS_LOS		; 29 cycles
      1  f896
      2  f896		       98		      TYA
      3  f897		       18		      CLC
      4  f898		       65 ae		      ADC	xLoss
      5  f89a		       38		      SEC
      6  f89b		       e5 ad		      SBC	xGain
      7  f89d		       a8		      TAY
      8  f89e
      8  f89e		       b1 c0		      LDA	(mapPtr),Y
      9  f8a0		       29 fc		      AND	#AND_W2S2P1
     10  f8a2		       85 a0		      STA	shadow2ab
     11  f8a4		       29 e0		      AND	#AND_W2S1P1
     12  f8a6		       85 91		      STA	shadow2aa
     13  f8a8
      0  f8a8					      X_POS_GAN		; 41 cycles
      1  f8a8
      2  f8a8		       98		      TYA
      3  f8a9		       18		      CLC
      4  f8aa		       65 ad		      ADC	xGain
      5  f8ac		       38		      SEC
      6  f8ad		       e5 ae		      SBC	xLoss
      7  f8af		       a8		      TAY
      8  f8b0
     15  f8b0		       b1 c0		      LDA	(mapPtr),Y
     16  f8b2		       aa		      TAX
     17  f8b3		       85 85		      STA	wall2a
     18  f8b5		       29 03		      AND	#AND_W2S0P1
     19  f8b7		       85 86		      STA	wall2b
     20  f8b9		       8a		      TXA
     21  f8ba		       29 0c		      AND	#AND_W2S2P2
     22  f8bc		       85 a1		      STA	shadow2bb
     23  f8be		       29 04		      AND	#AND_W2S1P2
     24  f8c0		       85 92		      STA	shadow2ba
     25  f8c2
      0  f8c2					      X_POS_GAN		; 30 cycles
      1  f8c2
      2  f8c2		       98		      TYA
      3  f8c3		       18		      CLC
      4  f8c4		       65 ad		      ADC	xGain
      5  f8c6		       38		      SEC
      6  f8c7		       e5 ae		      SBC	xLoss
      7  f8c9		       a8		      TAY
      8  f8ca
     27  f8ca		       b1 c0		      LDA	(mapPtr),Y
     28  f8cc		       85 87		      STA	wall2c
     29  f8ce		       29 fc		      AND	#AND_W2S0P2
     30  f8d0		       05 86		      ORA	wall2b
     31  f8d2		       85 86		      STA	wall2b
     32  f8d4
      0  f8d4					      X_POS_GAN		; 35 cycles
      1  f8d4
      2  f8d4		       98		      TYA
      3  f8d5		       18		      CLC
      4  f8d6		       65 ad		      ADC	xGain
      5  f8d8		       38		      SEC
      6  f8d9		       e5 ae		      SBC	xLoss
      7  f8db		       a8		      TAY
      8  f8dc
     34  f8dc		       b1 c0		      LDA	(mapPtr),Y
     35  f8de		       85 88		      STA	wall2d
     36  f8e0		       85 89		      STA	wall2e
     37  f8e2		       29 c0		      AND	#AND_W2S2P3
     38  f8e4		       85 a2		      STA	shadow2cb
     39  f8e6		       29 80		      AND	#AND_W2S1P3
     40  f8e8		       85 93		      STA	shadow2ca
     41  f8ea
      0  f8ea					      X_POS_GAN		; 37 cycles
      1  f8ea
      2  f8ea		       98		      TYA
      3  f8eb		       18		      CLC
      4  f8ec		       65 ad		      ADC	xGain
      5  f8ee		       38		      SEC
      6  f8ef		       e5 ae		      SBC	xLoss
      7  f8f1		       a8		      TAY
      8  f8f2
     43  f8f2		       b1 c0		      LDA	(mapPtr),Y
     44  f8f4		       29 0f		      AND	#AND_W2S2P4
     45  f8f6		       85 a3		      STA	shadow2db
     46  f8f8		       29 03		      AND	#AND_W2S1P5
     47  f8fa		       85 95		      STA	shadow2ea
     48  f8fc		       85 a4		      STA	shadow2eb
     49  f8fe		       29 01		      AND	#AND_W2S1P4
     50  f900		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f902
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f902					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f902							; Render the third layer (it's really ugly, at 281 cycles)
      2  f902
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f902					      INCLUDE	"include/ands_3.h"
      1  f902							; The AND constants for render layer 3
      2  f902
      3  f902		       00 80	   AND_W3S1P1 =	%10000000
      4  f902		       00 c0	   AND_W3S2P1 =	%11000000
      5  f902
      6  f902		       00 fc	   AND_W3S0P1 =	%11111100
      7  f902		       00 02	   AND_W3S1P2 =	%00000010
      8  f902		       00 03	   AND_W3S2P2 =	%00000011
      9  f902
     10  f902		       00 03	   AND_W3S0P2 =	%00000011
     11  f902		       00 0f	   AND_W3S0P3 =	%00001111
     12  f902		       00 10	   AND_W3S1P3 =	%00010000
     13  f902		       00 30	   AND_W3S2P3 =	%00110000
     14  f902
     15  f902		       00 f0	   AND_W3S0P4 =	%11110000
     16  f902		       00 30	   AND_W3S0P5 =	%00110000
     17  f902
     18  f902		       00 c0	   AND_W3S0P6 =	%11000000
     19  f902		       00 f0	   AND_W3S0P7 =	%11110000
     20  f902		       00 20	   AND_W3S1P4 =	%00100000
     21  f902		       00 30	   AND_W3S2P4 =	%00110000
     22  f902
     23  f902		       00 0f	   AND_W3S0P8 =	%00001111
     24  f902		       00 03	   AND_W3S0P9 =	%00000011
     25  f902		       00 10	   AND_W3S1P5 =	%00010000
     26  f902		       00 30	   AND_W3S2P5 =	%00110000
     27  f902
     28  f902		       00 02	   AND_W3S1P6 =	%00000010
     29  f902		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f902
      0  f902					      Y_POS_ADV		; 14 cycles
      1  f902
      2  f902		       98		      TYA
      3  f903		       18		      CLC
      4  f904		       65 af		      ADC	yGain
      5  f906		       38		      SEC
      6  f907		       e5 b0		      SBC	yLoss
      7  f909		       a8		      TAY
      8  f90a
      6  f90a
      0  f90a					      X_POS_GAN		; 29 cycles
      1  f90a
      2  f90a		       98		      TYA
      3  f90b		       18		      CLC
      4  f90c		       65 ad		      ADC	xGain
      5  f90e		       38		      SEC
      6  f90f		       e5 ae		      SBC	xLoss
      7  f911		       a8		      TAY
      8  f912
      8  f912		       b1 c0		      LDA	(mapPtr),Y
      9  f914		       29 03		      AND	#AND_W3S2P6
     10  f916		       85 a9		      STA	shadow3eb
     11  f918		       29 02		      AND	#AND_W3S1P6
     12  f91a		       85 9a		      STA	shadow3ea
     13  f91c
      0  f91c					      X_POS_LOS		; 38 cycles
      1  f91c
      2  f91c		       98		      TYA
      3  f91d		       18		      CLC
      4  f91e		       65 ae		      ADC	xLoss
      5  f920		       38		      SEC
      6  f921		       e5 ad		      SBC	xGain
      7  f923		       a8		      TAY
      8  f924
     15  f924		       b1 c0		      LDA	(mapPtr),Y
     16  f926		       aa		      TAX
     17  f927		       29 0f		      AND	#AND_W3S0P8
     18  f929		       85 8d		      STA	wall3d
     19  f92b		       29 03		      AND	#AND_W3S0P9
     20  f92d		       85 8e		      STA	wall3e
     21  f92f		       8a		      TXA
     22  f930		       29 30		      AND	#AND_W3S2P5
     23  f932		       85 a8		      STA	shadow3db
     24  f934		       29 10		      AND	#AND_W3S1P5
     25  f936		       85 99		      STA	shadow3da
     26  f938
      0  f938					      X_POS_LOS		; 46 cycles
      1  f938
      2  f938		       98		      TYA
      3  f939		       18		      CLC
      4  f93a		       65 ae		      ADC	xLoss
      5  f93c		       38		      SEC
      6  f93d		       e5 ad		      SBC	xGain
      7  f93f		       a8		      TAY
      8  f940
     28  f940		       b1 c0		      LDA	(mapPtr),Y
     29  f942		       aa		      TAX
     30  f943		       29 f0		      AND	#AND_W3S0P7
     31  f945		       05 8d		      ORA	wall3d
     32  f947		       85 8d		      STA	wall3d
     33  f949		       29 c0		      AND	#AND_W3S0P6
     34  f94b		       85 8c		      STA	wall3c
     35  f94d		       8a		      TXA
     36  f94e		       29 30		      AND	#AND_W3S2P4
     37  f950		       85 a7		      STA	shadow3cb
     38  f952		       29 20		      AND	#AND_W3S1P4
     39  f954		       85 98		      STA	shadow3ca
     40  f956
      0  f956					      X_POS_LOS		; 32 cycles
      1  f956
      2  f956		       98		      TYA
      3  f957		       18		      CLC
      4  f958		       65 ae		      ADC	xLoss
      5  f95a		       38		      SEC
      6  f95b		       e5 ad		      SBC	xGain
      7  f95d		       a8		      TAY
      8  f95e
     42  f95e		       b1 c0		      LDA	(mapPtr),Y
     43  f960		       29 f0		      AND	#AND_W3S0P4
     44  f962		       85 8b		      STA	wall3b
     45  f964		       29 30		      AND	#AND_W3S0P5
     46  f966		       05 8c		      ORA	wall3c
     47  f968		       85 8c		      STA	wall3c
     48  f96a
      0  f96a					      X_POS_LOS		; 46 cycles
      1  f96a
      2  f96a		       98		      TYA
      3  f96b		       18		      CLC
      4  f96c		       65 ae		      ADC	xLoss
      5  f96e		       38		      SEC
      6  f96f		       e5 ad		      SBC	xGain
      7  f971		       a8		      TAY
      8  f972
     50  f972		       b1 c0		      LDA	(mapPtr),Y
     51  f974		       aa		      TAX
     52  f975		       29 0f		      AND	#AND_W3S0P3
     53  f977		       05 8b		      ORA	wall3b
     54  f979		       85 8b		      STA	wall3b
     55  f97b		       29 03		      AND	#AND_W3S0P2
     56  f97d		       85 8a		      STA	wall3a
     57  f97f		       8a		      TXA
     58  f980		       29 30		      AND	#AND_W3S2P3
     59  f982		       85 a6		      STA	shadow3bb
     60  f984		       29 10		      AND	#AND_W3S1P3
     61  f986		       85 97		      STA	shadow3ba
     62  f988
      0  f988					      X_POS_LOS		; 41 cycles
      1  f988
      2  f988		       98		      TYA
      3  f989		       18		      CLC
      4  f98a		       65 ae		      ADC	xLoss
      5  f98c		       38		      SEC
      6  f98d		       e5 ad		      SBC	xGain
      7  f98f		       a8		      TAY
      8  f990
     64  f990		       b1 c0		      LDA	(mapPtr),Y
     65  f992		       aa		      TAX
     66  f993		       29 fc		      AND	#AND_W3S0P1
     67  f995		       05 8a		      ORA	wall3a
     68  f997		       85 8a		      STA	wall3a
     69  f999		       8a		      TXA
     70  f99a		       29 03		      AND	#AND_W3S2P2
     71  f99c		       85 a5		      STA	shadow3ab
     72  f99e		       29 02		      AND	#AND_W3S1P2
     73  f9a0		       85 96		      STA	shadow3aa
     74  f9a2
      0  f9a2					      X_POS_LOS		; 35 cycles
      1  f9a2
      2  f9a2		       98		      TYA
      3  f9a3		       18		      CLC
      4  f9a4		       65 ae		      ADC	xLoss
      5  f9a6		       38		      SEC
      6  f9a7		       e5 ad		      SBC	xGain
      7  f9a9		       a8		      TAY
      8  f9aa
     76  f9aa		       b1 c0		      LDA	(mapPtr),Y
     77  f9ac		       29 c0		      AND	#AND_W3S2P1
     78  f9ae		       05 a5		      ORA	shadow3ab
     79  f9b0		       85 a5		      STA	shadow3ab
     80  f9b2		       29 80		      AND	#AND_W3S1P1
     81  f9b4		       05 96		      ORA	shadow3aa
     82  f9b6		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9b8
     13  f9b8		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
     44  f9ba
     45  f9ba				   zb
     46  f9ba
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9ba					      INCLUDE	"scrend.asm"	; 14 Scanlines
      1  f9ba							; VePseu's screen renderer
      2  f9ba
      3  f9ba							; Remove the shadows incase only 1 wall is drawn
      4  f9ba
      5  f9ba		       a5 9b		      LDA	shadow1a	; 12 cycles
      6  f9bc		       05 80		      ORA	wall1
      7  f9be		       45 80		      EOR	wall1
      8  f9c0		       85 9b		      STA	shadow1a
      9  f9c2
     10  f9c2		       a5 9c		      LDA	shadow1b	; 12 cycles
     11  f9c4		       05 80		      ORA	wall1
     12  f9c6		       45 80		      EOR	wall1
     13  f9c8		       85 9c		      STA	shadow1b
     14  f9ca
     15  f9ca		       a5 9e		      LDA	shadow1d	; 12 cycles
     16  f9cc		       05 80		      ORA	wall1
     17  f9ce		       45 80		      EOR	wall1
     18  f9d0		       85 9e		      STA	shadow1d
     19  f9d2
     20  f9d2		       a5 9f		      LDA	shadow1e	; 12 cycles
     21  f9d4		       05 80		      ORA	wall1
     22  f9d6		       45 80		      EOR	wall1
     23  f9d8		       85 9f		      STA	shadow1e
     24  f9da
     25  f9da		       a5 80		      LDA	wall1	; Copy wall one to the four addresses preceding it (15 cycles)
     26  f9dc		       85 81		      STA	wall1+1
     27  f9de		       85 82		      STA	wall1+2
     28  f9e0		       85 83		      STA	wall1+3
     29  f9e2		       85 84		      STA	wall1+4
     30  f9e4
     31  f9e4		       a2 00		      LDX	#INDEXINIT	; 2 cycles
     32  f9e6
     33  f9e6				   scrRendLoop		; Totals at 909 cycles
     34  f9e6
     35  f9e6		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     36  f9e8		       15 80		      ORA	wall1,X
     37  f9ea		       95 85		      STA	wall2a,X
     38  f9ec
     39  f9ec		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     40  f9ee		       15 9b		      ORA	shadow1a,X
     41  f9f0		       95 91		      STA	shadow2aa,X
     42  f9f2
     43  f9f2		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     44  f9f4		       15 9b		      ORA	shadow1a,X
     45  f9f6		       95 a0		      STA	shadow2ab,X
     46  f9f8
     47  f9f8		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     48  f9fa		       15 9b		      ORA	shadow1a,X
     49  f9fc		       55 9b		      EOR	shadow1a,X
     50  f9fe		       95 85		      STA	wall2a,X
     51  fa00
     52  fa00		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     53  fa02		       15 85		      ORA	wall2a,X
     54  fa04		       55 85		      EOR	wall2a,X
     55  fa06		       95 91		      STA	shadow2aa,X
     56  fa08
     57  fa08		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     58  fa0a		       15 85		      ORA	wall2a,X
     59  fa0c		       55 85		      EOR	wall2a,X
     60  fa0e		       95 a0		      STA	shadow2ab,X
     61  fa10
     62  fa10		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     63  fa11		       e0 0a		      CPX	#WALLCNT
     64  fa13		       d0 d1		      BNE	scrRendLoop
     65  fa15
     66  fa15		       a9 ff		      LDA	#FULLWALL
     67  fa17		       45 a5		      EOR	shadow3ab
     68  fa19		       85 8f		      STA	wall4a
     69  fa1b
     70  fa1b		       a9 ff		      LDA	#FULLWALL
     71  fa1d		       45 a6		      EOR	shadow3bb
     72  fa1f		       85 90		      STA	wall4b
     73  fa21
     74  fa21		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     48  fa23
     49  fa23		       a9 78		      LDA	#<jerry
     50  fa25		       85 c2		      STA	sprite
     51  fa27		       a9 f0		      LDA	#>jerry
     52  fa29		       85 c3		      STA	sprite+1
     53  fa2b		       a9 0c		      LDA	#$0C
     54  fa2d		       85 06		      STA	COLUP0
     55  fa2f
     56  fa2f		       a9 1f		      LDA	#31
     57  fa31		       85 bc		      STA	spriteHeight
     58  fa33
     59  fa33							; Pad!
     60  fa33
     61  fa33		       a2 0e		      LDX	#UPPAD_LIMIT
     62  fa35
     63  fa35				   upperPad
     64  fa35		       85 02		      STA	WSYNC
     65  fa37
     66  fa37		       ca		      DEX
     67  fa38		       d0 fb		      BNE	upperPad
     68  fa3a
     69  fa3a		       85 02		      STA	WSYNC
     70  fa3c
     71  fa3c							; Draw everything (956 bytes)
     72  fa3c
     73  fa3c		       a0 00		      LDY	#0
     74  fa3e
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa3e					      INCLUDE	"dispkern.asm"	; 186 scanlines
      1  fa3e							; VePseu's display kernel
      2  fa3e
      3  fa3e		       4c 41 fa 	      JMP	drawStart
      4  fa41
      5  fa41							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa41							;
      7  fa41							; dc_w1s1.asm
      8  fa41							; |   | |
      9  fa41							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa41							; |   |
     11  fa41							; |   |- The wall it draws
     12  fa41							; |
     13  fa41							; |- Draw-code identifies
     14  fa41
     15  fa41				   drawStart
     16  fa41
     17  fa41		       b8		      CLV
     18  fa42
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa42					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa42							; The draw code for the 1st wall and shadow
      2  fa42
      3  fa42				   dc_w1s1    SUBROUTINE
      4  fa42
      5  fa42		       a2 00		      LDX	#INDEXINIT
      6  fa44		       4c 54 fa 	      JMP	.loop
      7  fa47
      8  fa47				   .noSprite_1
      9  fa47							; Depending on the location in the program the branch here might cross a
     10  fa47							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa47							; delay simply check if the page number (the MSB of the address) is
     12  fa47							; different between the branch and it's destination
     13  fa47					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa47					      DELAY	11
      1  fa47				   .CYCLES    SET	11
      2  fa47
      3  fa47					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa47		       ea		      NOP
      5  fa47				   .CYCLES    SET	.CYCLES - 2
      6  fa48					      ENDIF
      7  fa48
      8  fa48					      IF	[.CYCLES - 2] / 5
      9  fa48					      REPEAT	.CYCLES / 5
     10  fa48		       e6 c4		      INC	foo
     11  fa4a					      REPEND
     12  fa4a				   .CYCLES    SET	.CYCLES % 5
     13  fa4a					      ENDIF
     14  fa4a
     15  fa4a					      IF	.CYCLES % 3 == 1
     16  fa4a		       ea		      NOP
     17  fa4a				   .CYCLES    SET	.CYCLES - 2
     18  fa4b					      ENDIF
     19  fa4b
     20  fa4b				  -	      REPEAT	.CYCLES / 3
     21  fa4b				  -	      STA	DUMP
     22  fa4b					      REPEND
     23  fa4b
     24  fa4b				   .CYCLES    SET	.CYCLES % 3
     25  fa4b
     26  fa4b					      REPEAT	.CYCLES / 2
     27  fa4b		       ea		      NOP
     28  fa4c					      REPEND
     29  fa4c
     30  fa4c				   .CYCLES    SET	.CYCLES % 2
     31  fa4c
     32  fa4c				  -	      IF	.CYCLES
     33  fa4c				  -	      ERR
     34  fa4c					      ENDIF
     35  fa4c
     15  fa4c				  -	      ELSE
     16  fa4c				  -	      DELAY	10
     17  fa4c					      ENDIF
     18  fa4c		       4c 6a fa 	      JMP	.noSprite_ret
     19  fa4f
     20  fa4f				   .noSprite_2
     21  fa4f					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa4f					      DELAY	4
      1  fa4f				   .CYCLES    SET	4
      2  fa4f
      3  fa4f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa4f				  -	      NOP
      5  fa4f				  -.CYCLES    SET	.CYCLES - 2
      6  fa4f					      ENDIF
      7  fa4f
      8  fa4f				  -	      IF	[.CYCLES - 2] / 5
      9  fa4f				  -	      REPEAT	.CYCLES / 5
     10  fa4f				  -	      INC	foo
     11  fa4f				  -	      REPEND
     12  fa4f				  -.CYCLES    SET	.CYCLES % 5
     13  fa4f					      ENDIF
     14  fa4f
     15  fa4f					      IF	.CYCLES % 3 == 1
     16  fa4f		       ea		      NOP
     17  fa4f				   .CYCLES    SET	.CYCLES - 2
     18  fa50					      ENDIF
     19  fa50
     20  fa50				  -	      REPEAT	.CYCLES / 3
     21  fa50				  -	      STA	DUMP
     22  fa50					      REPEND
     23  fa50
     24  fa50				   .CYCLES    SET	.CYCLES % 3
     25  fa50
     26  fa50					      REPEAT	.CYCLES / 2
     27  fa50		       ea		      NOP
     28  fa51					      REPEND
     29  fa51
     30  fa51				   .CYCLES    SET	.CYCLES % 2
     31  fa51
     32  fa51				  -	      IF	.CYCLES
     33  fa51				  -	      ERR
     34  fa51					      ENDIF
     35  fa51
     23  fa51				  -	      ELSE
     24  fa51				  -	      DELAY	3
     25  fa51					      ENDIF
     26  fa51		       4c 6a fa 	      JMP	.noSprite_ret
     27  fa54
     28  fa54				   .loop
     29  fa54		       a5 b5		      LDA	wallColour
     30  fa56		       85 02		      STA	WSYNC
     31  fa58		       85 08		      STA	COLUPF
     32  fa5a		       a5 80		      LDA	wall1
     33  fa5c		       85 0e		      STA	PF1
     34  fa5e		       98		      TYA
     35  fa5f				   .branchPoint_1
     36  fa5f		       f0 e6		      BEQ	.noSprite_1
     37  fa61		       88		      DEY
     38  fa62		       c4 bc		      CPY	spriteHeight
     39  fa64				   .branchPoint_2
     40  fa64		       b0 e9		      BCS	.noSprite_2
     41  fa66		       b1 c2		      LDA	(sprite),Y
     42  fa68		       85 1b		      STA	GRP0
     43  fa6a				   .noSprite_ret
     44  fa6a		       a5 80		      LDA	wall1
     45  fa6c		       85 0f		      STA	PF2
      0  fa6e					      DELAY	6
      1  fa6e				   .CYCLES    SET	6
      2  fa6e
      3  fa6e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa6e				  -	      NOP
      5  fa6e				  -.CYCLES    SET	.CYCLES - 2
      6  fa6e					      ENDIF
      7  fa6e
      8  fa6e				  -	      IF	[.CYCLES - 2] / 5
      9  fa6e				  -	      REPEAT	.CYCLES / 5
     10  fa6e				  -	      INC	foo
     11  fa6e				  -	      REPEND
     12  fa6e				  -.CYCLES    SET	.CYCLES % 5
     13  fa6e					      ENDIF
     14  fa6e
     15  fa6e				  -	      IF	.CYCLES % 3 == 1
     16  fa6e				  -	      NOP
     17  fa6e				  -.CYCLES    SET	.CYCLES - 2
     18  fa6e					      ENDIF
     19  fa6e
     20  fa6e					      REPEAT	.CYCLES / 3
     21  fa6e		       85 30		      STA	DUMP
     20  fa6e					      REPEND
     21  fa70		       85 30		      STA	DUMP
     22  fa72					      REPEND
     23  fa72
     24  fa72				   .CYCLES    SET	.CYCLES % 3
     25  fa72
     26  fa72				  -	      REPEAT	.CYCLES / 2
     27  fa72				  -	      NOP
     28  fa72					      REPEND
     29  fa72
     30  fa72				   .CYCLES    SET	.CYCLES % 2
     31  fa72
     32  fa72				  -	      IF	.CYCLES
     33  fa72				  -	      ERR
     34  fa72					      ENDIF
     35  fa72
     47  fa72		       85 0d		      STA	PF0
      0  fa74					      DELAY	19
      1  fa74				   .CYCLES    SET	19
      2  fa74
      3  fa74				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa74				  -	      NOP
      5  fa74				  -.CYCLES    SET	.CYCLES - 2
      6  fa74					      ENDIF
      7  fa74
      8  fa74					      IF	[.CYCLES - 2] / 5
      9  fa74					      REPEAT	.CYCLES / 5
     10  fa74		       e6 c4		      INC	foo
      9  fa74					      REPEND
     10  fa76		       e6 c4		      INC	foo
      9  fa76					      REPEND
     10  fa78		       e6 c4		      INC	foo
     11  fa7a					      REPEND
     12  fa7a				   .CYCLES    SET	.CYCLES % 5
     13  fa7a					      ENDIF
     14  fa7a
     15  fa7a					      IF	.CYCLES % 3 == 1
     16  fa7a		       ea		      NOP
     17  fa7a				   .CYCLES    SET	.CYCLES - 2
     18  fa7b					      ENDIF
     19  fa7b
     20  fa7b				  -	      REPEAT	.CYCLES / 3
     21  fa7b				  -	      STA	DUMP
     22  fa7b					      REPEND
     23  fa7b
     24  fa7b				   .CYCLES    SET	.CYCLES % 3
     25  fa7b
     26  fa7b					      REPEAT	.CYCLES / 2
     27  fa7b		       ea		      NOP
     28  fa7c					      REPEND
     29  fa7c
     30  fa7c				   .CYCLES    SET	.CYCLES % 2
     31  fa7c
     32  fa7c				  -	      IF	.CYCLES
     33  fa7c				  -	      ERR
     34  fa7c					      ENDIF
     35  fa7c
     49  fa7c		       a9 00		      LDA	#NULL
     50  fa7e		       85 0f		      STA	PF2
     51  fa80		       85 0d		      STA	PF0
     52  fa82
     53  fa82		       85 02		      STA	WSYNC
     54  fa84		       a5 b6		      LDA	shadowColour
     55  fa86		       85 08		      STA	COLUPF
     56  fa88		       a5 9b		      LDA	shadow1a
     57  fa8a		       3d 00 f0 	      AND	and_1a,X
     58  fa8d		       85 0e		      STA	PF1
     59  fa8f		       a5 9c		      LDA	shadow1b
     60  fa91		       3d 1e f0 	      AND	and_1b,X
     61  fa94		       85 0f		      STA	PF2
      0  fa96					      DELAY	9
      1  fa96				   .CYCLES    SET	9
      2  fa96
      3  fa96				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa96				  -	      NOP
      5  fa96				  -.CYCLES    SET	.CYCLES - 2
      6  fa96					      ENDIF
      7  fa96
      8  fa96					      IF	[.CYCLES - 2] / 5
      9  fa96					      REPEAT	.CYCLES / 5
     10  fa96		       e6 c4		      INC	foo
     11  fa98					      REPEND
     12  fa98				   .CYCLES    SET	.CYCLES % 5
     13  fa98					      ENDIF
     14  fa98
     15  fa98					      IF	.CYCLES % 3 == 1
     16  fa98		       ea		      NOP
     17  fa98				   .CYCLES    SET	.CYCLES - 2
     18  fa99					      ENDIF
     19  fa99
     20  fa99				  -	      REPEAT	.CYCLES / 3
     21  fa99				  -	      STA	DUMP
     22  fa99					      REPEND
     23  fa99
     24  fa99				   .CYCLES    SET	.CYCLES % 3
     25  fa99
     26  fa99					      REPEAT	.CYCLES / 2
     27  fa99		       ea		      NOP
     28  fa9a					      REPEND
     29  fa9a
     30  fa9a				   .CYCLES    SET	.CYCLES % 2
     31  fa9a
     32  fa9a				  -	      IF	.CYCLES
     33  fa9a				  -	      ERR
     34  fa9a					      ENDIF
     35  fa9a
     63  fa9a		       a5 9e		      LDA	shadow1d
     64  fa9c		       3d 3c f0 	      AND	and_1c,X
     65  fa9f		       85 0e		      STA	PF1
     66  faa1		       a5 9f		      LDA	shadow1e
     67  faa3		       3d 5a f0 	      AND	and_1d,X
     68  faa6		       85 0f		      STA	PF2
     69  faa8
     70  faa8		       a9 00		      LDA	#NULL
     71  faaa		       85 1b		      STA	GRP0
     72  faac
     73  faac		       e8		      INX
     74  faad		       e0 1e		      CPX	#UPPRWALL_S
     75  faaf		       d0 a3		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  fab1					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  fab1							; The second wall and it's first shadow
      2  fab1
      3  fab1				   dc_w2s1    SUBROUTINE
      4  fab1
      5  fab1		       a2 03		      LDX	#PIXH
      6  fab3		       a5 b5		      LDA	wallColour
      0  fab5					      DELAY	2
      1  fab5				   .CYCLES    SET	2
      2  fab5
      3  fab5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab5				  -	      NOP
      5  fab5				  -.CYCLES    SET	.CYCLES - 2
      6  fab5					      ENDIF
      7  fab5
      8  fab5				  -	      IF	[.CYCLES - 2] / 5
      9  fab5				  -	      REPEAT	.CYCLES / 5
     10  fab5				  -	      INC	foo
     11  fab5				  -	      REPEND
     12  fab5				  -.CYCLES    SET	.CYCLES % 5
     13  fab5					      ENDIF
     14  fab5
     15  fab5				  -	      IF	.CYCLES % 3 == 1
     16  fab5				  -	      NOP
     17  fab5				  -.CYCLES    SET	.CYCLES - 2
     18  fab5					      ENDIF
     19  fab5
     20  fab5				  -	      REPEAT	.CYCLES / 3
     21  fab5				  -	      STA	DUMP
     22  fab5					      REPEND
     23  fab5
     24  fab5				   .CYCLES    SET	.CYCLES % 3
     25  fab5
     26  fab5					      REPEAT	.CYCLES / 2
     27  fab5		       ea		      NOP
     28  fab6					      REPEND
     29  fab6
     30  fab6				   .CYCLES    SET	.CYCLES % 2
     31  fab6
     32  fab6				  -	      IF	.CYCLES
     33  fab6				  -	      ERR
     34  fab6					      ENDIF
     35  fab6
      8  fab6		       4c ca fa 	      JMP	.joinIn
      9  fab9
     10  fab9				   .noSprite_1
     11  fab9					      IF	>.branchPoint_1 == >.noSprite_1
      0  fab9					      DELAY	11
      1  fab9				   .CYCLES    SET	11
      2  fab9
      3  fab9					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab9		       ea		      NOP
      5  fab9				   .CYCLES    SET	.CYCLES - 2
      6  faba					      ENDIF
      7  faba
      8  faba					      IF	[.CYCLES - 2] / 5
      9  faba					      REPEAT	.CYCLES / 5
     10  faba		       e6 c4		      INC	foo
     11  fabc					      REPEND
     12  fabc				   .CYCLES    SET	.CYCLES % 5
     13  fabc					      ENDIF
     14  fabc
     15  fabc					      IF	.CYCLES % 3 == 1
     16  fabc		       ea		      NOP
     17  fabc				   .CYCLES    SET	.CYCLES - 2
     18  fabd					      ENDIF
     19  fabd
     20  fabd				  -	      REPEAT	.CYCLES / 3
     21  fabd				  -	      STA	DUMP
     22  fabd					      REPEND
     23  fabd
     24  fabd				   .CYCLES    SET	.CYCLES % 3
     25  fabd
     26  fabd					      REPEAT	.CYCLES / 2
     27  fabd		       ea		      NOP
     28  fabe					      REPEND
     29  fabe
     30  fabe				   .CYCLES    SET	.CYCLES % 2
     31  fabe
     32  fabe				  -	      IF	.CYCLES
     33  fabe				  -	      ERR
     34  fabe					      ENDIF
     35  fabe
     13  fabe				  -	      ELSE
     14  fabe				  -	      DELAY	10
     15  fabe					      ENDIF
     16  fabe		       4c dc fa 	      JMP	.noSprite_ret
     17  fac1
     18  fac1				   .noSprite_2
     19  fac1					      IF	>.branchPoint_2 == >.noSprite_2
      0  fac1					      DELAY	4
      1  fac1				   .CYCLES    SET	4
      2  fac1
      3  fac1				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fac1				  -	      NOP
      5  fac1				  -.CYCLES    SET	.CYCLES - 2
      6  fac1					      ENDIF
      7  fac1
      8  fac1				  -	      IF	[.CYCLES - 2] / 5
      9  fac1				  -	      REPEAT	.CYCLES / 5
     10  fac1				  -	      INC	foo
     11  fac1				  -	      REPEND
     12  fac1				  -.CYCLES    SET	.CYCLES % 5
     13  fac1					      ENDIF
     14  fac1
     15  fac1					      IF	.CYCLES % 3 == 1
     16  fac1		       ea		      NOP
     17  fac1				   .CYCLES    SET	.CYCLES - 2
     18  fac2					      ENDIF
     19  fac2
     20  fac2				  -	      REPEAT	.CYCLES / 3
     21  fac2				  -	      STA	DUMP
     22  fac2					      REPEND
     23  fac2
     24  fac2				   .CYCLES    SET	.CYCLES % 3
     25  fac2
     26  fac2					      REPEAT	.CYCLES / 2
     27  fac2		       ea		      NOP
     28  fac3					      REPEND
     29  fac3
     30  fac3				   .CYCLES    SET	.CYCLES % 2
     31  fac3
     32  fac3				  -	      IF	.CYCLES
     33  fac3				  -	      ERR
     34  fac3					      ENDIF
     35  fac3
     21  fac3				  -	      ELSE
     22  fac3				  -	      DELAY	3
     23  fac3					      ENDIF
     24  fac3		       4c dc fa 	      JMP	.noSprite_ret
     25  fac6
     26  fac6				   .loop
     27  fac6		       a5 b5		      LDA	wallColour
     28  fac8		       85 02		      STA	WSYNC
     29  faca				   .joinIn
     30  faca		       85 08		      STA	COLUPF
     31  facc		       a5 85		      LDA	wall2a
     32  face		       85 0e		      STA	PF1
     33  fad0		       98		      TYA
     34  fad1				   .branchPoint_1
     35  fad1		       f0 e6		      BEQ	.noSprite_1
     36  fad3		       88		      DEY
     37  fad4		       c4 bc		      CPY	spriteHeight
     38  fad6				   .branchPoint_2
     39  fad6		       b0 e9		      BCS	.noSprite_2
     40  fad8		       b1 c2		      LDA	(sprite),Y
     41  fada		       85 1b		      STA	GRP0
     42  fadc				   .noSprite_ret
     43  fadc		       a5 86		      LDA	wall2b
     44  fade		       85 0f		      STA	PF2
     45  fae0
     46  fae0		       a5 87		      LDA	wall2c
     47  fae2		       85 0d		      STA	PF0
     48  fae4		       a5 88		      LDA	wall2d
     49  fae6		       85 0e		      STA	PF1
     50  fae8		       a5 89		      LDA	wall2e
     51  faea		       85 0f		      STA	PF2
     52  faec		       a9 00		      LDA	#NULL
      0  faee					      DELAY	10
      1  faee				   .CYCLES    SET	10
      2  faee
      3  faee				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faee				  -	      NOP
      5  faee				  -.CYCLES    SET	.CYCLES - 2
      6  faee					      ENDIF
      7  faee
      8  faee					      IF	[.CYCLES - 2] / 5
      9  faee					      REPEAT	.CYCLES / 5
     10  faee		       e6 c4		      INC	foo
      9  faee					      REPEND
     10  faf0		       e6 c4		      INC	foo
     11  faf2					      REPEND
     12  faf2				   .CYCLES    SET	.CYCLES % 5
     13  faf2					      ENDIF
     14  faf2
     15  faf2				  -	      IF	.CYCLES % 3 == 1
     16  faf2				  -	      NOP
     17  faf2				  -.CYCLES    SET	.CYCLES - 2
     18  faf2					      ENDIF
     19  faf2
     20  faf2				  -	      REPEAT	.CYCLES / 3
     21  faf2				  -	      STA	DUMP
     22  faf2					      REPEND
     23  faf2
     24  faf2				   .CYCLES    SET	.CYCLES % 3
     25  faf2
     26  faf2				  -	      REPEAT	.CYCLES / 2
     27  faf2				  -	      NOP
     28  faf2					      REPEND
     29  faf2
     30  faf2				   .CYCLES    SET	.CYCLES % 2
     31  faf2
     32  faf2				  -	      IF	.CYCLES
     33  faf2				  -	      ERR
     34  faf2					      ENDIF
     35  faf2
     54  faf2		       85 0f		      STA	PF2
     55  faf4		       85 0d		      STA	PF0
     56  faf6
     57  faf6		       85 02		      STA	WSYNC	; Draw the shadow
     58  faf8		       a5 b6		      LDA	shadowColour
     59  fafa		       85 08		      STA	COLUPF
     60  fafc		       a5 91		      LDA	shadow2aa
     61  fafe		       05 9b		      ORA	shadow1a
     62  fb00		       85 0e		      STA	PF1
     63  fb02		       a5 92		      LDA	shadow2ba
     64  fb04		       05 9c		      ORA	shadow1b
     65  fb06		       85 0f		      STA	PF2
     66  fb08		       a5 93		      LDA	shadow2ca
     67  fb0a		       85 0d		      STA	PF0
     68  fb0c		       a5 94		      LDA	shadow2da
     69  fb0e		       05 9e		      ORA	shadow1d
     70  fb10		       85 0e		      STA	PF1
     71  fb12		       a5 95		      LDA	shadow2ea
     72  fb14		       05 9f		      ORA	shadow1e
     73  fb16		       85 0f		      STA	PF2
     74  fb18		       a9 00		      LDA	#NULL
     75  fb1a		       85 0d		      STA	PF0
     76  fb1c
     77  fb1c		       ca		      DEX
     78  fb1d		       d0 a7		      BNE	.loop
     79  fb1f
     80  fb1f		       50 03		      BVC	dc_w2s2_delayed
     81  fb21		       4c ee fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fb24					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fb24							; The second wall and it's second shadow
      2  fb24
      3  fb24				   dc_w2s2_delayed
      0  fb24					      DELAY	2
      1  fb24				   .CYCLES    SET	2
      2  fb24
      3  fb24				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb24				  -	      NOP
      5  fb24				  -.CYCLES    SET	.CYCLES - 2
      6  fb24					      ENDIF
      7  fb24
      8  fb24				  -	      IF	[.CYCLES - 2] / 5
      9  fb24				  -	      REPEAT	.CYCLES / 5
     10  fb24				  -	      INC	foo
     11  fb24				  -	      REPEND
     12  fb24				  -.CYCLES    SET	.CYCLES % 5
     13  fb24					      ENDIF
     14  fb24
     15  fb24				  -	      IF	.CYCLES % 3 == 1
     16  fb24				  -	      NOP
     17  fb24				  -.CYCLES    SET	.CYCLES - 2
     18  fb24					      ENDIF
     19  fb24
     20  fb24				  -	      REPEAT	.CYCLES / 3
     21  fb24				  -	      STA	DUMP
     22  fb24					      REPEND
     23  fb24
     24  fb24				   .CYCLES    SET	.CYCLES % 3
     25  fb24
     26  fb24					      REPEAT	.CYCLES / 2
     27  fb24		       ea		      NOP
     28  fb25					      REPEND
     29  fb25
     30  fb25				   .CYCLES    SET	.CYCLES % 2
     31  fb25
     32  fb25				  -	      IF	.CYCLES
     33  fb25				  -	      ERR
     34  fb25					      ENDIF
     35  fb25
      5  fb25				   dc_w2s2    SUBROUTINE
      6  fb25
      7  fb25		       a2 03		      LDX	#PIXH
      8  fb27
      9  fb27				   .loop
     10  fb27		       a5 b5		      LDA	wallColour
     11  fb29		       85 02		      STA	WSYNC
     12  fb2b		       85 08		      STA	COLUPF
     13  fb2d		       a5 85		      LDA	wall2a
     14  fb2f		       85 0e		      STA	PF1
     15  fb31		       98		      TYA
     16  fb32				   .branchPoint_1
     17  fb32		       f0 53		      BEQ	.noSprite_1
     18  fb34		       88		      DEY
     19  fb35		       c4 bc		      CPY	spriteHeight
     20  fb37				   .branchPoint_2
     21  fb37		       b0 56		      BCS	.noSprite_2
     22  fb39		       b1 c2		      LDA	(sprite),Y
     23  fb3b		       85 1b		      STA	GRP0
     24  fb3d				   .noSprite_ret
     25  fb3d		       a5 86		      LDA	wall2b
     26  fb3f		       85 0f		      STA	PF2
     27  fb41
     28  fb41		       a5 87		      LDA	wall2c
     29  fb43		       85 0d		      STA	PF0
     30  fb45		       a5 88		      LDA	wall2d
     31  fb47		       85 0e		      STA	PF1
     32  fb49		       a5 89		      LDA	wall2e
     33  fb4b		       85 0f		      STA	PF2
     34  fb4d		       a9 00		      LDA	#NULL
      0  fb4f					      DELAY	10
      1  fb4f				   .CYCLES    SET	10
      2  fb4f
      3  fb4f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb4f				  -	      NOP
      5  fb4f				  -.CYCLES    SET	.CYCLES - 2
      6  fb4f					      ENDIF
      7  fb4f
      8  fb4f					      IF	[.CYCLES - 2] / 5
      9  fb4f					      REPEAT	.CYCLES / 5
     10  fb4f		       e6 c4		      INC	foo
      9  fb4f					      REPEND
     10  fb51		       e6 c4		      INC	foo
     11  fb53					      REPEND
     12  fb53				   .CYCLES    SET	.CYCLES % 5
     13  fb53					      ENDIF
     14  fb53
     15  fb53				  -	      IF	.CYCLES % 3 == 1
     16  fb53				  -	      NOP
     17  fb53				  -.CYCLES    SET	.CYCLES - 2
     18  fb53					      ENDIF
     19  fb53
     20  fb53				  -	      REPEAT	.CYCLES / 3
     21  fb53				  -	      STA	DUMP
     22  fb53					      REPEND
     23  fb53
     24  fb53				   .CYCLES    SET	.CYCLES % 3
     25  fb53
     26  fb53				  -	      REPEAT	.CYCLES / 2
     27  fb53				  -	      NOP
     28  fb53					      REPEND
     29  fb53
     30  fb53				   .CYCLES    SET	.CYCLES % 2
     31  fb53
     32  fb53				  -	      IF	.CYCLES
     33  fb53				  -	      ERR
     34  fb53					      ENDIF
     35  fb53
     36  fb53		       85 0f		      STA	PF2
     37  fb55		       85 0d		      STA	PF0
     38  fb57
     39  fb57		       85 02		      STA	WSYNC	; Draw the shadow
     40  fb59		       a5 b6		      LDA	shadowColour
     41  fb5b		       85 08		      STA	COLUPF
     42  fb5d		       a5 a0		      LDA	shadow2ab
     43  fb5f		       05 9b		      ORA	shadow1a
     44  fb61		       85 0e		      STA	PF1
     45  fb63		       a5 a1		      LDA	shadow2bb
     46  fb65		       05 9c		      ORA	shadow1b
     47  fb67		       85 0f		      STA	PF2
     48  fb69		       a5 a2		      LDA	shadow2cb
     49  fb6b		       85 0d		      STA	PF0
     50  fb6d		       a5 a3		      LDA	shadow2db
     51  fb6f		       05 9e		      ORA	shadow1d
     52  fb71		       85 0e		      STA	PF1
     53  fb73		       a5 a4		      LDA	shadow2eb
     54  fb75		       05 9f		      ORA	shadow1e
     55  fb77		       85 0f		      STA	PF2
     56  fb79		       a9 00		      LDA	#NULL
     57  fb7b		       85 0d		      STA	PF0
     58  fb7d
     59  fb7d		       ca		      DEX
     60  fb7e		       d0 a7		      BNE	.loop
     61  fb80
     62  fb80		       50 12		      BVC	dc_w3s1_delayed
      0  fb82					      DELAY	4
      1  fb82				   .CYCLES    SET	4
      2  fb82
      3  fb82				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb82				  -	      NOP
      5  fb82				  -.CYCLES    SET	.CYCLES - 2
      6  fb82					      ENDIF
      7  fb82
      8  fb82				  -	      IF	[.CYCLES - 2] / 5
      9  fb82				  -	      REPEAT	.CYCLES / 5
     10  fb82				  -	      INC	foo
     11  fb82				  -	      REPEND
     12  fb82				  -.CYCLES    SET	.CYCLES % 5
     13  fb82					      ENDIF
     14  fb82
     15  fb82					      IF	.CYCLES % 3 == 1
     16  fb82		       ea		      NOP
     17  fb82				   .CYCLES    SET	.CYCLES - 2
     18  fb83					      ENDIF
     19  fb83
     20  fb83				  -	      REPEAT	.CYCLES / 3
     21  fb83				  -	      STA	DUMP
     22  fb83					      REPEND
     23  fb83
     24  fb83				   .CYCLES    SET	.CYCLES % 3
     25  fb83
     26  fb83					      REPEAT	.CYCLES / 2
     27  fb83		       ea		      NOP
     28  fb84					      REPEND
     29  fb84
     30  fb84				   .CYCLES    SET	.CYCLES % 2
     31  fb84
     32  fb84				  -	      IF	.CYCLES
     33  fb84				  -	      ERR
     34  fb84					      ENDIF
     35  fb84
     64  fb84		       4c b1 fa 	      JMP	dc_w2s1
     65  fb87
     66  fb87				   .noSprite_1
     67  fb87					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb87					      DELAY	11
      1  fb87				   .CYCLES    SET	11
      2  fb87
      3  fb87					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb87		       ea		      NOP
      5  fb87				   .CYCLES    SET	.CYCLES - 2
      6  fb88					      ENDIF
      7  fb88
      8  fb88					      IF	[.CYCLES - 2] / 5
      9  fb88					      REPEAT	.CYCLES / 5
     10  fb88		       e6 c4		      INC	foo
     11  fb8a					      REPEND
     12  fb8a				   .CYCLES    SET	.CYCLES % 5
     13  fb8a					      ENDIF
     14  fb8a
     15  fb8a					      IF	.CYCLES % 3 == 1
     16  fb8a		       ea		      NOP
     17  fb8a				   .CYCLES    SET	.CYCLES - 2
     18  fb8b					      ENDIF
     19  fb8b
     20  fb8b				  -	      REPEAT	.CYCLES / 3
     21  fb8b				  -	      STA	DUMP
     22  fb8b					      REPEND
     23  fb8b
     24  fb8b				   .CYCLES    SET	.CYCLES % 3
     25  fb8b
     26  fb8b					      REPEAT	.CYCLES / 2
     27  fb8b		       ea		      NOP
     28  fb8c					      REPEND
     29  fb8c
     30  fb8c				   .CYCLES    SET	.CYCLES % 2
     31  fb8c
     32  fb8c				  -	      IF	.CYCLES
     33  fb8c				  -	      ERR
     34  fb8c					      ENDIF
     35  fb8c
     69  fb8c				  -	      ELSE
     70  fb8c				  -	      DELAY	10
     71  fb8c					      ENDIF
     72  fb8c		       4c 3d fb 	      JMP	.noSprite_ret
     73  fb8f
     74  fb8f				   .noSprite_2
     75  fb8f					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb8f					      DELAY	4
      1  fb8f				   .CYCLES    SET	4
      2  fb8f
      3  fb8f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb8f				  -	      NOP
      5  fb8f				  -.CYCLES    SET	.CYCLES - 2
      6  fb8f					      ENDIF
      7  fb8f
      8  fb8f				  -	      IF	[.CYCLES - 2] / 5
      9  fb8f				  -	      REPEAT	.CYCLES / 5
     10  fb8f				  -	      INC	foo
     11  fb8f				  -	      REPEND
     12  fb8f				  -.CYCLES    SET	.CYCLES % 5
     13  fb8f					      ENDIF
     14  fb8f
     15  fb8f					      IF	.CYCLES % 3 == 1
     16  fb8f		       ea		      NOP
     17  fb8f				   .CYCLES    SET	.CYCLES - 2
     18  fb90					      ENDIF
     19  fb90
     20  fb90				  -	      REPEAT	.CYCLES / 3
     21  fb90				  -	      STA	DUMP
     22  fb90					      REPEND
     23  fb90
     24  fb90				   .CYCLES    SET	.CYCLES % 3
     25  fb90
     26  fb90					      REPEAT	.CYCLES / 2
     27  fb90		       ea		      NOP
     28  fb91					      REPEND
     29  fb91
     30  fb91				   .CYCLES    SET	.CYCLES % 2
     31  fb91
     32  fb91				  -	      IF	.CYCLES
     33  fb91				  -	      ERR
     34  fb91					      ENDIF
     35  fb91
     77  fb91				  -	      ELSE
     78  fb91				  -	      DELAY	3
     79  fb91					      ENDIF
     80  fb91		       4c 3d fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb94					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb94							; The third wall and it's first shadow
      2  fb94
      3  fb94				   dc_w3s1_delayed
      0  fb94					      DELAY	2
      1  fb94				   .CYCLES    SET	2
      2  fb94
      3  fb94				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb94				  -	      NOP
      5  fb94				  -.CYCLES    SET	.CYCLES - 2
      6  fb94					      ENDIF
      7  fb94
      8  fb94				  -	      IF	[.CYCLES - 2] / 5
      9  fb94				  -	      REPEAT	.CYCLES / 5
     10  fb94				  -	      INC	foo
     11  fb94				  -	      REPEND
     12  fb94				  -.CYCLES    SET	.CYCLES % 5
     13  fb94					      ENDIF
     14  fb94
     15  fb94				  -	      IF	.CYCLES % 3 == 1
     16  fb94				  -	      NOP
     17  fb94				  -.CYCLES    SET	.CYCLES - 2
     18  fb94					      ENDIF
     19  fb94
     20  fb94				  -	      REPEAT	.CYCLES / 3
     21  fb94				  -	      STA	DUMP
     22  fb94					      REPEND
     23  fb94
     24  fb94				   .CYCLES    SET	.CYCLES % 3
     25  fb94
     26  fb94					      REPEAT	.CYCLES / 2
     27  fb94		       ea		      NOP
     28  fb95					      REPEND
     29  fb95
     30  fb95				   .CYCLES    SET	.CYCLES % 2
     31  fb95
     32  fb95				  -	      IF	.CYCLES
     33  fb95				  -	      ERR
     34  fb95					      ENDIF
     35  fb95
      5  fb95				   dc_w3s1    SUBROUTINE
      6  fb95
      7  fb95		       a2 03		      LDX	#PIXH
      8  fb97
      9  fb97				   .loop
     10  fb97		       a5 b5		      LDA	wallColour
     11  fb99		       85 02		      STA	WSYNC
     12  fb9b		       85 08		      STA	COLUPF
     13  fb9d		       a5 8a		      LDA	wall3a
     14  fb9f		       85 0e		      STA	PF1
     15  fba1		       98		      TYA
     16  fba2				   .branchPoint_1
     17  fba2		       f0 53		      BEQ	.noSprite_1
     18  fba4		       88		      DEY
     19  fba5		       c4 bc		      CPY	spriteHeight
     20  fba7				   .branchPoint_2
     21  fba7		       b0 56		      BCS	.noSprite_2
     22  fba9		       b1 c2		      LDA	(sprite),Y
     23  fbab		       85 1b		      STA	GRP0
     24  fbad				   .noSprite_ret
     25  fbad		       a5 8b		      LDA	wall3b
     26  fbaf		       85 0f		      STA	PF2
     27  fbb1
     28  fbb1		       a5 8c		      LDA	wall3c
     29  fbb3		       85 0d		      STA	PF0
     30  fbb5		       a5 8d		      LDA	wall3d
     31  fbb7		       85 0e		      STA	PF1
     32  fbb9		       a5 8e		      LDA	wall3e
     33  fbbb		       85 0f		      STA	PF2
     34  fbbd		       a9 00		      LDA	#NULL
      0  fbbf					      DELAY	10
      1  fbbf				   .CYCLES    SET	10
      2  fbbf
      3  fbbf				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbbf				  -	      NOP
      5  fbbf				  -.CYCLES    SET	.CYCLES - 2
      6  fbbf					      ENDIF
      7  fbbf
      8  fbbf					      IF	[.CYCLES - 2] / 5
      9  fbbf					      REPEAT	.CYCLES / 5
     10  fbbf		       e6 c4		      INC	foo
      9  fbbf					      REPEND
     10  fbc1		       e6 c4		      INC	foo
     11  fbc3					      REPEND
     12  fbc3				   .CYCLES    SET	.CYCLES % 5
     13  fbc3					      ENDIF
     14  fbc3
     15  fbc3				  -	      IF	.CYCLES % 3 == 1
     16  fbc3				  -	      NOP
     17  fbc3				  -.CYCLES    SET	.CYCLES - 2
     18  fbc3					      ENDIF
     19  fbc3
     20  fbc3				  -	      REPEAT	.CYCLES / 3
     21  fbc3				  -	      STA	DUMP
     22  fbc3					      REPEND
     23  fbc3
     24  fbc3				   .CYCLES    SET	.CYCLES % 3
     25  fbc3
     26  fbc3				  -	      REPEAT	.CYCLES / 2
     27  fbc3				  -	      NOP
     28  fbc3					      REPEND
     29  fbc3
     30  fbc3				   .CYCLES    SET	.CYCLES % 2
     31  fbc3
     32  fbc3				  -	      IF	.CYCLES
     33  fbc3				  -	      ERR
     34  fbc3					      ENDIF
     35  fbc3
     36  fbc3		       85 0f		      STA	PF2
     37  fbc5		       85 0d		      STA	PF0
     38  fbc7
     39  fbc7		       85 02		      STA	WSYNC	; Draw the shadow
     40  fbc9		       a5 b6		      LDA	shadowColour
     41  fbcb		       85 08		      STA	COLUPF
     42  fbcd		       a5 96		      LDA	shadow3aa
     43  fbcf		       05 a0		      ORA	shadow2ab
     44  fbd1		       85 0e		      STA	PF1
     45  fbd3		       a5 97		      LDA	shadow3ba
     46  fbd5		       05 a1		      ORA	shadow2bb
     47  fbd7		       85 0f		      STA	PF2
     48  fbd9		       a5 98		      LDA	shadow3ca
     49  fbdb		       05 a2		      ORA	shadow2cb
     50  fbdd		       85 0d		      STA	PF0
     51  fbdf		       a5 99		      LDA	shadow3da
     52  fbe1		       05 a3		      ORA	shadow2db
     53  fbe3		       85 0e		      STA	PF1
     54  fbe5		       a5 9a		      LDA	shadow3ea
     55  fbe7		       05 a4		      ORA	shadow2eb
     56  fbe9		       85 0f		      STA	PF2
     57  fbeb		       a9 00		      LDA	#NULL
     58  fbed		       85 0d		      STA	PF0
     59  fbef
     60  fbef		       ca		      DEX
     61  fbf0		       d0 a5		      BNE	.loop
     62  fbf2
     63  fbf2		       50 10		      BVC	dc_w3s2_delayed
     64  fbf4		       4c 25 fb 	      JMP	dc_w2s2
     65  fbf7
     66  fbf7				   .noSprite_1
     67  fbf7					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbf7					      DELAY	11
      1  fbf7				   .CYCLES    SET	11
      2  fbf7
      3  fbf7					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbf7		       ea		      NOP
      5  fbf7				   .CYCLES    SET	.CYCLES - 2
      6  fbf8					      ENDIF
      7  fbf8
      8  fbf8					      IF	[.CYCLES - 2] / 5
      9  fbf8					      REPEAT	.CYCLES / 5
     10  fbf8		       e6 c4		      INC	foo
     11  fbfa					      REPEND
     12  fbfa				   .CYCLES    SET	.CYCLES % 5
     13  fbfa					      ENDIF
     14  fbfa
     15  fbfa					      IF	.CYCLES % 3 == 1
     16  fbfa		       ea		      NOP
     17  fbfa				   .CYCLES    SET	.CYCLES - 2
     18  fbfb					      ENDIF
     19  fbfb
     20  fbfb				  -	      REPEAT	.CYCLES / 3
     21  fbfb				  -	      STA	DUMP
     22  fbfb					      REPEND
     23  fbfb
     24  fbfb				   .CYCLES    SET	.CYCLES % 3
     25  fbfb
     26  fbfb					      REPEAT	.CYCLES / 2
     27  fbfb		       ea		      NOP
     28  fbfc					      REPEND
     29  fbfc
     30  fbfc				   .CYCLES    SET	.CYCLES % 2
     31  fbfc
     32  fbfc				  -	      IF	.CYCLES
     33  fbfc				  -	      ERR
     34  fbfc					      ENDIF
     35  fbfc
     69  fbfc				  -	      ELSE
     70  fbfc				  -	      DELAY	10
     71  fbfc					      ENDIF
     72  fbfc		       4c ad fb 	      JMP	.noSprite_ret
     73  fbff
     74  fbff				   .noSprite_2
     75  fbff					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbff					      DELAY	3
      1  fbff				   .CYCLES    SET	3
      2  fbff
      3  fbff				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbff				  -	      NOP
      5  fbff				  -.CYCLES    SET	.CYCLES - 2
      6  fbff					      ENDIF
      7  fbff
      8  fbff				  -	      IF	[.CYCLES - 2] / 5
      9  fbff				  -	      REPEAT	.CYCLES / 5
     10  fbff				  -	      INC	foo
     11  fbff				  -	      REPEND
     12  fbff				  -.CYCLES    SET	.CYCLES % 5
     13  fbff					      ENDIF
     14  fbff
     15  fbff				  -	      IF	.CYCLES % 3 == 1
     16  fbff				  -	      NOP
     17  fbff				  -.CYCLES    SET	.CYCLES - 2
     18  fbff					      ENDIF
     19  fbff
     20  fbff					      REPEAT	.CYCLES / 3
     21  fbff		       85 30		      STA	DUMP
     22  fc01					      REPEND
     23  fc01
     24  fc01				   .CYCLES    SET	.CYCLES % 3
     25  fc01
     26  fc01				  -	      REPEAT	.CYCLES / 2
     27  fc01				  -	      NOP
     28  fc01					      REPEND
     29  fc01
     30  fc01				   .CYCLES    SET	.CYCLES % 2
     31  fc01
     32  fc01				  -	      IF	.CYCLES
     33  fc01				  -	      ERR
     34  fc01					      ENDIF
     35  fc01
     77  fc01				  -	      ELSE
     78  fc01				  -	      DELAY	4
     79  fc01					      ENDIF
     80  fc01		       4c ad fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fc04					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fc04							; The third wall and it's second shadow
      2  fc04
      3  fc04				   dc_w3s2_delayed
      0  fc04					      DELAY	2
      1  fc04				   .CYCLES    SET	2
      2  fc04
      3  fc04				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc04				  -	      NOP
      5  fc04				  -.CYCLES    SET	.CYCLES - 2
      6  fc04					      ENDIF
      7  fc04
      8  fc04				  -	      IF	[.CYCLES - 2] / 5
      9  fc04				  -	      REPEAT	.CYCLES / 5
     10  fc04				  -	      INC	foo
     11  fc04				  -	      REPEND
     12  fc04				  -.CYCLES    SET	.CYCLES % 5
     13  fc04					      ENDIF
     14  fc04
     15  fc04				  -	      IF	.CYCLES % 3 == 1
     16  fc04				  -	      NOP
     17  fc04				  -.CYCLES    SET	.CYCLES - 2
     18  fc04					      ENDIF
     19  fc04
     20  fc04				  -	      REPEAT	.CYCLES / 3
     21  fc04				  -	      STA	DUMP
     22  fc04					      REPEND
     23  fc04
     24  fc04				   .CYCLES    SET	.CYCLES % 3
     25  fc04
     26  fc04					      REPEAT	.CYCLES / 2
     27  fc04		       ea		      NOP
     28  fc05					      REPEND
     29  fc05
     30  fc05				   .CYCLES    SET	.CYCLES % 2
     31  fc05
     32  fc05				  -	      IF	.CYCLES
     33  fc05				  -	      ERR
     34  fc05					      ENDIF
     35  fc05
      5  fc05				   dc_w3s2    SUBROUTINE
      6  fc05
      7  fc05		       a2 03		      LDX	#PIXH
      8  fc07
      9  fc07				   .loop
     10  fc07		       a5 b5		      LDA	wallColour
     11  fc09		       85 02		      STA	WSYNC
     12  fc0b				   .joinIn
     13  fc0b		       85 08		      STA	COLUPF
     14  fc0d		       a5 8a		      LDA	wall3a
     15  fc0f		       85 0e		      STA	PF1
     16  fc11		       98		      TYA
     17  fc12				   .branchPoint_1
     18  fc12		       f0 53		      BEQ	.noSprite_1
     19  fc14		       88		      DEY
     20  fc15		       c4 bc		      CPY	spriteHeight
     21  fc17				   .branchPoint_2
     22  fc17		       b0 56		      BCS	.noSprite_2
     23  fc19		       b1 c2		      LDA	(sprite),Y
     24  fc1b		       85 1b		      STA	GRP0
     25  fc1d				   .noSprite_ret
     26  fc1d		       a5 8b		      LDA	wall3b
     27  fc1f		       85 0f		      STA	PF2
     28  fc21
     29  fc21		       a5 8c		      LDA	wall3c
     30  fc23		       85 0d		      STA	PF0
     31  fc25		       a5 8d		      LDA	wall3d
     32  fc27		       85 0e		      STA	PF1
     33  fc29		       a5 8e		      LDA	wall3e
     34  fc2b		       85 0f		      STA	PF2
     35  fc2d		       a9 00		      LDA	#NULL
      0  fc2f					      DELAY	10
      1  fc2f				   .CYCLES    SET	10
      2  fc2f
      3  fc2f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc2f				  -	      NOP
      5  fc2f				  -.CYCLES    SET	.CYCLES - 2
      6  fc2f					      ENDIF
      7  fc2f
      8  fc2f					      IF	[.CYCLES - 2] / 5
      9  fc2f					      REPEAT	.CYCLES / 5
     10  fc2f		       e6 c4		      INC	foo
      9  fc2f					      REPEND
     10  fc31		       e6 c4		      INC	foo
     11  fc33					      REPEND
     12  fc33				   .CYCLES    SET	.CYCLES % 5
     13  fc33					      ENDIF
     14  fc33
     15  fc33				  -	      IF	.CYCLES % 3 == 1
     16  fc33				  -	      NOP
     17  fc33				  -.CYCLES    SET	.CYCLES - 2
     18  fc33					      ENDIF
     19  fc33
     20  fc33				  -	      REPEAT	.CYCLES / 3
     21  fc33				  -	      STA	DUMP
     22  fc33					      REPEND
     23  fc33
     24  fc33				   .CYCLES    SET	.CYCLES % 3
     25  fc33
     26  fc33				  -	      REPEAT	.CYCLES / 2
     27  fc33				  -	      NOP
     28  fc33					      REPEND
     29  fc33
     30  fc33				   .CYCLES    SET	.CYCLES % 2
     31  fc33
     32  fc33				  -	      IF	.CYCLES
     33  fc33				  -	      ERR
     34  fc33					      ENDIF
     35  fc33
     37  fc33		       85 0f		      STA	PF2
     38  fc35		       85 0d		      STA	PF0
     39  fc37
     40  fc37		       85 02		      STA	WSYNC	; Draw the shadow
     41  fc39		       a5 b6		      LDA	shadowColour
     42  fc3b		       85 08		      STA	COLUPF
     43  fc3d		       a5 a5		      LDA	shadow3ab
     44  fc3f		       05 a0		      ORA	shadow2ab
     45  fc41		       85 0e		      STA	PF1
     46  fc43		       a5 a6		      LDA	shadow3bb
     47  fc45		       05 a1		      ORA	shadow2bb
     48  fc47		       85 0f		      STA	PF2
     49  fc49		       a5 a7		      LDA	shadow3cb
     50  fc4b		       05 a2		      ORA	shadow2cb
     51  fc4d		       85 0d		      STA	PF0
     52  fc4f		       a5 a8		      LDA	shadow3db
     53  fc51		       05 a3		      ORA	shadow2db
     54  fc53		       85 0e		      STA	PF1
     55  fc55		       a5 a9		      LDA	shadow3eb
     56  fc57		       05 a4		      ORA	shadow2eb
     57  fc59		       85 0f		      STA	PF2
     58  fc5b		       a9 00		      LDA	#NULL
     59  fc5d		       85 0d		      STA	PF0
     60  fc5f
     61  fc5f		       ca		      DEX
     62  fc60		       d0 a5		      BNE	.loop
     63  fc62
     64  fc62		       50 10		      BVC	dc_w4s0_delayed
     65  fc64		       4c 95 fb 	      JMP	dc_w3s1
     66  fc67
     67  fc67				   .noSprite_1
     68  fc67					      IF	>.branchPoint_1 == >.noSprite_1
      0  fc67					      DELAY	11
      1  fc67				   .CYCLES    SET	11
      2  fc67
      3  fc67					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc67		       ea		      NOP
      5  fc67				   .CYCLES    SET	.CYCLES - 2
      6  fc68					      ENDIF
      7  fc68
      8  fc68					      IF	[.CYCLES - 2] / 5
      9  fc68					      REPEAT	.CYCLES / 5
     10  fc68		       e6 c4		      INC	foo
     11  fc6a					      REPEND
     12  fc6a				   .CYCLES    SET	.CYCLES % 5
     13  fc6a					      ENDIF
     14  fc6a
     15  fc6a					      IF	.CYCLES % 3 == 1
     16  fc6a		       ea		      NOP
     17  fc6a				   .CYCLES    SET	.CYCLES - 2
     18  fc6b					      ENDIF
     19  fc6b
     20  fc6b				  -	      REPEAT	.CYCLES / 3
     21  fc6b				  -	      STA	DUMP
     22  fc6b					      REPEND
     23  fc6b
     24  fc6b				   .CYCLES    SET	.CYCLES % 3
     25  fc6b
     26  fc6b					      REPEAT	.CYCLES / 2
     27  fc6b		       ea		      NOP
     28  fc6c					      REPEND
     29  fc6c
     30  fc6c				   .CYCLES    SET	.CYCLES % 2
     31  fc6c
     32  fc6c				  -	      IF	.CYCLES
     33  fc6c				  -	      ERR
     34  fc6c					      ENDIF
     35  fc6c
     70  fc6c				  -	      ELSE
     71  fc6c				  -	      DELAY	10
     72  fc6c					      ENDIF
     73  fc6c		       4c 1d fc 	      JMP	.noSprite_ret
     74  fc6f
     75  fc6f				   .noSprite_2
     76  fc6f					      IF	>.branchPoint_2 == >.noSprite_2
      0  fc6f					      DELAY	4
      1  fc6f				   .CYCLES    SET	4
      2  fc6f
      3  fc6f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc6f				  -	      NOP
      5  fc6f				  -.CYCLES    SET	.CYCLES - 2
      6  fc6f					      ENDIF
      7  fc6f
      8  fc6f				  -	      IF	[.CYCLES - 2] / 5
      9  fc6f				  -	      REPEAT	.CYCLES / 5
     10  fc6f				  -	      INC	foo
     11  fc6f				  -	      REPEND
     12  fc6f				  -.CYCLES    SET	.CYCLES % 5
     13  fc6f					      ENDIF
     14  fc6f
     15  fc6f					      IF	.CYCLES % 3 == 1
     16  fc6f		       ea		      NOP
     17  fc6f				   .CYCLES    SET	.CYCLES - 2
     18  fc70					      ENDIF
     19  fc70
     20  fc70				  -	      REPEAT	.CYCLES / 3
     21  fc70				  -	      STA	DUMP
     22  fc70					      REPEND
     23  fc70
     24  fc70				   .CYCLES    SET	.CYCLES % 3
     25  fc70
     26  fc70					      REPEAT	.CYCLES / 2
     27  fc70		       ea		      NOP
     28  fc71					      REPEND
     29  fc71
     30  fc71				   .CYCLES    SET	.CYCLES % 2
     31  fc71
     32  fc71				  -	      IF	.CYCLES
     33  fc71				  -	      ERR
     34  fc71					      ENDIF
     35  fc71
     78  fc71				  -	      ELSE
     79  fc71				  -	      DELAY	3
     80  fc71					      ENDIF
     81  fc71		       4c 1d fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc74					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc74							; The fourth wall
      2  fc74
      3  fc74				   dc_w4s0_delayed
      4  fc74		       4c 7b fc 	      JMP	dc_w4s0
      5  fc77
      6  fc77				   dc_w4s0_switch
      7  fc77		       a9 7f		      LDA	#$7F
      8  fc79		       69 01		      ADC	#$01
      9  fc7b
     10  fc7b				   dc_w4s0    SUBROUTINE
     11  fc7b
     12  fc7b		       a2 03		      LDX	#PIXH
     13  fc7d
     14  fc7d				   .loop
     15  fc7d		       a5 b5		      LDA	wallColour
     16  fc7f		       85 02		      STA	WSYNC
     17  fc81				   .joinIn
     18  fc81		       85 08		      STA	COLUPF
     19  fc83		       a5 8f		      LDA	wall4a
     20  fc85		       85 0e		      STA	PF1
     21  fc87		       98		      TYA
     22  fc88				   .branchPoint_1
     23  fc88		       f0 57		      BEQ	.noSprite_1
     24  fc8a		       88		      DEY
     25  fc8b		       c4 bc		      CPY	spriteHeight
     26  fc8d				   .branchPoint_2
     27  fc8d		       b0 5a		      BCS	.noSprite_2
     28  fc8f		       b1 c2		      LDA	(sprite),Y
     29  fc91		       85 1b		      STA	GRP0
     30  fc93				   .noSprite_ret
     31  fc93		       a5 90		      LDA	wall4b
     32  fc95		       85 0f		      STA	PF2
     33  fc97
     34  fc97		       a9 ff		      LDA	#FULLWALL
     35  fc99		       45 a7		      EOR	shadow3cb
     36  fc9b		       85 0d		      STA	PF0
     37  fc9d		       a9 ff		      LDA	#FULLWALL
     38  fc9f		       45 a8		      EOR	shadow3db
     39  fca1		       85 0e		      STA	PF1
     40  fca3		       a9 ff		      LDA	#FULLWALL
     41  fca5		       45 a9		      EOR	shadow3eb
     42  fca7		       85 0f		      STA	PF2
     43  fca9		       a9 00		      LDA	#NULL
      0  fcab					      DELAY	4
      1  fcab				   .CYCLES    SET	4
      2  fcab
      3  fcab				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcab				  -	      NOP
      5  fcab				  -.CYCLES    SET	.CYCLES - 2
      6  fcab					      ENDIF
      7  fcab
      8  fcab				  -	      IF	[.CYCLES - 2] / 5
      9  fcab				  -	      REPEAT	.CYCLES / 5
     10  fcab				  -	      INC	foo
     11  fcab				  -	      REPEND
     12  fcab				  -.CYCLES    SET	.CYCLES % 5
     13  fcab					      ENDIF
     14  fcab
     15  fcab					      IF	.CYCLES % 3 == 1
     16  fcab		       ea		      NOP
     17  fcab				   .CYCLES    SET	.CYCLES - 2
     18  fcac					      ENDIF
     19  fcac
     20  fcac				  -	      REPEAT	.CYCLES / 3
     21  fcac				  -	      STA	DUMP
     22  fcac					      REPEND
     23  fcac
     24  fcac				   .CYCLES    SET	.CYCLES % 3
     25  fcac
     26  fcac					      REPEAT	.CYCLES / 2
     27  fcac		       ea		      NOP
     28  fcad					      REPEND
     29  fcad
     30  fcad				   .CYCLES    SET	.CYCLES % 2
     31  fcad
     32  fcad				  -	      IF	.CYCLES
     33  fcad				  -	      ERR
     34  fcad					      ENDIF
     35  fcad
     45  fcad		       85 0f		      STA	PF2
     46  fcaf		       85 0d		      STA	PF0
     47  fcb1
     48  fcb1		       85 02		      STA	WSYNC	; Draw the shadow
     49  fcb3		       a5 b6		      LDA	shadowColour
     50  fcb5		       85 08		      STA	COLUPF
     51  fcb7		       a5 a5		      LDA	shadow3ab
     52  fcb9		       05 a0		      ORA	shadow2ab
     53  fcbb		       85 0e		      STA	PF1
     54  fcbd		       a5 a6		      LDA	shadow3bb
     55  fcbf		       05 a1		      ORA	shadow2bb
     56  fcc1		       85 0f		      STA	PF2
     57  fcc3		       a5 a7		      LDA	shadow3cb
     58  fcc5		       05 a2		      ORA	shadow2cb
     59  fcc7		       85 0d		      STA	PF0
     60  fcc9		       a5 a8		      LDA	shadow3db
     61  fccb		       05 a3		      ORA	shadow2db
     62  fccd		       85 0e		      STA	PF1
     63  fccf		       a5 a9		      LDA	shadow3eb
     64  fcd1		       05 a4		      ORA	shadow2eb
     65  fcd3		       85 0f		      STA	PF2
     66  fcd5		       a9 00		      LDA	#NULL
     67  fcd7		       85 0d		      STA	PF0
     68  fcd9
     69  fcd9		       ca		      DEX
     70  fcda		       d0 a1		      BNE	.loop
     71  fcdc
     72  fcdc		       50 99		      BVC	dc_w4s0_switch
     73  fcde		       4c 05 fc 	      JMP	dc_w3s2
     74  fce1
     75  fce1				   .noSprite_1
     76  fce1					      IF	>.branchPoint_1 == >.noSprite_1
      0  fce1					      DELAY	11
      1  fce1				   .CYCLES    SET	11
      2  fce1
      3  fce1					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce1		       ea		      NOP
      5  fce1				   .CYCLES    SET	.CYCLES - 2
      6  fce2					      ENDIF
      7  fce2
      8  fce2					      IF	[.CYCLES - 2] / 5
      9  fce2					      REPEAT	.CYCLES / 5
     10  fce2		       e6 c4		      INC	foo
     11  fce4					      REPEND
     12  fce4				   .CYCLES    SET	.CYCLES % 5
     13  fce4					      ENDIF
     14  fce4
     15  fce4					      IF	.CYCLES % 3 == 1
     16  fce4		       ea		      NOP
     17  fce4				   .CYCLES    SET	.CYCLES - 2
     18  fce5					      ENDIF
     19  fce5
     20  fce5				  -	      REPEAT	.CYCLES / 3
     21  fce5				  -	      STA	DUMP
     22  fce5					      REPEND
     23  fce5
     24  fce5				   .CYCLES    SET	.CYCLES % 3
     25  fce5
     26  fce5					      REPEAT	.CYCLES / 2
     27  fce5		       ea		      NOP
     28  fce6					      REPEND
     29  fce6
     30  fce6				   .CYCLES    SET	.CYCLES % 2
     31  fce6
     32  fce6				  -	      IF	.CYCLES
     33  fce6				  -	      ERR
     34  fce6					      ENDIF
     35  fce6
     78  fce6				  -	      ELSE
     79  fce6				  -	      DELAY	10
     80  fce6					      ENDIF
     81  fce6		       4c 93 fc 	      JMP	.noSprite_ret
     82  fce9
     83  fce9				   .noSprite_2
     84  fce9					      IF	>.branchPoint_2 == >.noSprite_2
      0  fce9					      DELAY	4
      1  fce9				   .CYCLES    SET	4
      2  fce9
      3  fce9				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce9				  -	      NOP
      5  fce9				  -.CYCLES    SET	.CYCLES - 2
      6  fce9					      ENDIF
      7  fce9
      8  fce9				  -	      IF	[.CYCLES - 2] / 5
      9  fce9				  -	      REPEAT	.CYCLES / 5
     10  fce9				  -	      INC	foo
     11  fce9				  -	      REPEND
     12  fce9				  -.CYCLES    SET	.CYCLES % 5
     13  fce9					      ENDIF
     14  fce9
     15  fce9					      IF	.CYCLES % 3 == 1
     16  fce9		       ea		      NOP
     17  fce9				   .CYCLES    SET	.CYCLES - 2
     18  fcea					      ENDIF
     19  fcea
     20  fcea				  -	      REPEAT	.CYCLES / 3
     21  fcea				  -	      STA	DUMP
     22  fcea					      REPEND
     23  fcea
     24  fcea				   .CYCLES    SET	.CYCLES % 3
     25  fcea
     26  fcea					      REPEAT	.CYCLES / 2
     27  fcea		       ea		      NOP
     28  fceb					      REPEND
     29  fceb
     30  fceb				   .CYCLES    SET	.CYCLES % 2
     31  fceb
     32  fceb				  -	      IF	.CYCLES
     33  fceb				  -	      ERR
     34  fceb					      ENDIF
     35  fceb
     86  fceb				  -	      ELSE
     87  fceb				  -	      DELAY	3
     88  fceb					      ENDIF
     89  fceb		       4c 93 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     25  fcee
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fcee					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fcee							; The draw code for the 1st wall and  it's second shadow
      2  fcee
      3  fcee				   dc_w1s2    SUBROUTINE
      4  fcee
      5  fcee		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fcf0
      7  fcf0				   .loop
      8  fcf0		       a5 b5		      LDA	wallColour
      9  fcf2		       85 02		      STA	WSYNC
     10  fcf4		       85 08		      STA	COLUPF
     11  fcf6		       a5 80		      LDA	wall1
     12  fcf8		       85 0e		      STA	PF1
     13  fcfa		       98		      TYA
     14  fcfb				   .branchPoint_1
     15  fcfb		       f0 53		      BEQ	.noSprite_1
     16  fcfd		       88		      DEY
     17  fcfe		       c4 bc		      CPY	spriteHeight
     18  fd00				   .branchPoint_2
     19  fd00		       b0 55		      BCS	.noSprite_2
     20  fd02		       b1 c2		      LDA	(sprite),Y
     21  fd04		       85 1b		      STA	GRP0
     22  fd06				   .noSprite_ret
     23  fd06		       a5 80		      LDA	wall1
     24  fd08		       85 0f		      STA	PF2
      0  fd0a					      DELAY	6
      1  fd0a				   .CYCLES    SET	6
      2  fd0a
      3  fd0a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd0a				  -	      NOP
      5  fd0a				  -.CYCLES    SET	.CYCLES - 2
      6  fd0a					      ENDIF
      7  fd0a
      8  fd0a				  -	      IF	[.CYCLES - 2] / 5
      9  fd0a				  -	      REPEAT	.CYCLES / 5
     10  fd0a				  -	      INC	foo
     11  fd0a				  -	      REPEND
     12  fd0a				  -.CYCLES    SET	.CYCLES % 5
     13  fd0a					      ENDIF
     14  fd0a
     15  fd0a				  -	      IF	.CYCLES % 3 == 1
     16  fd0a				  -	      NOP
     17  fd0a				  -.CYCLES    SET	.CYCLES - 2
     18  fd0a					      ENDIF
     19  fd0a
     20  fd0a					      REPEAT	.CYCLES / 3
     21  fd0a		       85 30		      STA	DUMP
     20  fd0a					      REPEND
     21  fd0c		       85 30		      STA	DUMP
     22  fd0e					      REPEND
     23  fd0e
     24  fd0e				   .CYCLES    SET	.CYCLES % 3
     25  fd0e
     26  fd0e				  -	      REPEAT	.CYCLES / 2
     27  fd0e				  -	      NOP
     28  fd0e					      REPEND
     29  fd0e
     30  fd0e				   .CYCLES    SET	.CYCLES % 2
     31  fd0e
     32  fd0e				  -	      IF	.CYCLES
     33  fd0e				  -	      ERR
     34  fd0e					      ENDIF
     35  fd0e
     26  fd0e		       85 0d		      STA	PF0
      0  fd10					      DELAY	19
      1  fd10				   .CYCLES    SET	19
      2  fd10
      3  fd10				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd10				  -	      NOP
      5  fd10				  -.CYCLES    SET	.CYCLES - 2
      6  fd10					      ENDIF
      7  fd10
      8  fd10					      IF	[.CYCLES - 2] / 5
      9  fd10					      REPEAT	.CYCLES / 5
     10  fd10		       e6 c4		      INC	foo
      9  fd10					      REPEND
     10  fd12		       e6 c4		      INC	foo
      9  fd12					      REPEND
     10  fd14		       e6 c4		      INC	foo
     11  fd16					      REPEND
     12  fd16				   .CYCLES    SET	.CYCLES % 5
     13  fd16					      ENDIF
     14  fd16
     15  fd16					      IF	.CYCLES % 3 == 1
     16  fd16		       ea		      NOP
     17  fd16				   .CYCLES    SET	.CYCLES - 2
     18  fd17					      ENDIF
     19  fd17
     20  fd17				  -	      REPEAT	.CYCLES / 3
     21  fd17				  -	      STA	DUMP
     22  fd17					      REPEND
     23  fd17
     24  fd17				   .CYCLES    SET	.CYCLES % 3
     25  fd17
     26  fd17					      REPEAT	.CYCLES / 2
     27  fd17		       ea		      NOP
     28  fd18					      REPEND
     29  fd18
     30  fd18				   .CYCLES    SET	.CYCLES % 2
     31  fd18
     32  fd18				  -	      IF	.CYCLES
     33  fd18				  -	      ERR
     34  fd18					      ENDIF
     35  fd18
     28  fd18		       a9 00		      LDA	#NULL
     29  fd1a		       85 0f		      STA	PF2
     30  fd1c		       85 0d		      STA	PF0
     31  fd1e
     32  fd1e		       85 02		      STA	WSYNC
     33  fd20		       a5 b6		      LDA	shadowColour
     34  fd22		       85 08		      STA	COLUPF
     35  fd24		       a5 9b		      LDA	shadow1a
     36  fd26		       3d 00 f0 	      AND	and_1a,X
     37  fd29		       85 0e		      STA	PF1
     38  fd2b		       a5 9c		      LDA	shadow1b
     39  fd2d		       3d 1e f0 	      AND	and_1b,X
     40  fd30		       85 0f		      STA	PF2
      0  fd32					      DELAY	9
      1  fd32				   .CYCLES    SET	9
      2  fd32
      3  fd32				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd32				  -	      NOP
      5  fd32				  -.CYCLES    SET	.CYCLES - 2
      6  fd32					      ENDIF
      7  fd32
      8  fd32					      IF	[.CYCLES - 2] / 5
      9  fd32					      REPEAT	.CYCLES / 5
     10  fd32		       e6 c4		      INC	foo
     11  fd34					      REPEND
     12  fd34				   .CYCLES    SET	.CYCLES % 5
     13  fd34					      ENDIF
     14  fd34
     15  fd34					      IF	.CYCLES % 3 == 1
     16  fd34		       ea		      NOP
     17  fd34				   .CYCLES    SET	.CYCLES - 2
     18  fd35					      ENDIF
     19  fd35
     20  fd35				  -	      REPEAT	.CYCLES / 3
     21  fd35				  -	      STA	DUMP
     22  fd35					      REPEND
     23  fd35
     24  fd35				   .CYCLES    SET	.CYCLES % 3
     25  fd35
     26  fd35					      REPEAT	.CYCLES / 2
     27  fd35		       ea		      NOP
     28  fd36					      REPEND
     29  fd36
     30  fd36				   .CYCLES    SET	.CYCLES % 2
     31  fd36
     32  fd36				  -	      IF	.CYCLES
     33  fd36				  -	      ERR
     34  fd36					      ENDIF
     35  fd36
     42  fd36		       a5 9e		      LDA	shadow1d
     43  fd38		       3d 3c f0 	      AND	and_1c,X
     44  fd3b		       85 0e		      STA	PF1
     45  fd3d		       a5 9f		      LDA	shadow1e
     46  fd3f		       3d 5a f0 	      AND	and_1d,X
     47  fd42		       85 0f		      STA	PF2
     48  fd44
     49  fd44		       a9 00		      LDA	#NULL
     50  fd46		       85 1b		      STA	GRP0
     51  fd48
     52  fd48		       ca		      DEX
     53  fd49		       e0 06		      CPX	#LOWRWALL_S
     54  fd4b		       d0 a3		      BNE	.loop
     55  fd4d
     56  fd4d		       4c 5c fd 	      JMP	dc_wallsEnd
     57  fd50
     58  fd50				   .noSprite_1
     59  fd50				  -	      IF	>.branchPoint_1 == >.noSprite_1
     60  fd50				  -	      DELAY	11
     61  fd50					      ELSE
      0  fd50					      DELAY	10
      1  fd50				   .CYCLES    SET	10
      2  fd50
      3  fd50				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd50				  -	      NOP
      5  fd50				  -.CYCLES    SET	.CYCLES - 2
      6  fd50					      ENDIF
      7  fd50
      8  fd50					      IF	[.CYCLES - 2] / 5
      9  fd50					      REPEAT	.CYCLES / 5
     10  fd50		       e6 c4		      INC	foo
      9  fd50					      REPEND
     10  fd52		       e6 c4		      INC	foo
     11  fd54					      REPEND
     12  fd54				   .CYCLES    SET	.CYCLES % 5
     13  fd54					      ENDIF
     14  fd54
     15  fd54				  -	      IF	.CYCLES % 3 == 1
     16  fd54				  -	      NOP
     17  fd54				  -.CYCLES    SET	.CYCLES - 2
     18  fd54					      ENDIF
     19  fd54
     20  fd54				  -	      REPEAT	.CYCLES / 3
     21  fd54				  -	      STA	DUMP
     22  fd54					      REPEND
     23  fd54
     24  fd54				   .CYCLES    SET	.CYCLES % 3
     25  fd54
     26  fd54				  -	      REPEAT	.CYCLES / 2
     27  fd54				  -	      NOP
     28  fd54					      REPEND
     29  fd54
     30  fd54				   .CYCLES    SET	.CYCLES % 2
     31  fd54
     32  fd54				  -	      IF	.CYCLES
     33  fd54				  -	      ERR
     34  fd54					      ENDIF
     35  fd54
     63  fd54					      ENDIF
     64  fd54		       4c 06 fd 	      JMP	.noSprite_ret
     65  fd57
     66  fd57				   .noSprite_2
     67  fd57					      IF	>.branchPoint_2 == >.noSprite_2
      0  fd57					      DELAY	4
      1  fd57				   .CYCLES    SET	4
      2  fd57
      3  fd57				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd57				  -	      NOP
      5  fd57				  -.CYCLES    SET	.CYCLES - 2
      6  fd57					      ENDIF
      7  fd57
      8  fd57				  -	      IF	[.CYCLES - 2] / 5
      9  fd57				  -	      REPEAT	.CYCLES / 5
     10  fd57				  -	      INC	foo
     11  fd57				  -	      REPEND
     12  fd57				  -.CYCLES    SET	.CYCLES % 5
     13  fd57					      ENDIF
     14  fd57
     15  fd57					      IF	.CYCLES % 3 == 1
     16  fd57		       ea		      NOP
     17  fd57				   .CYCLES    SET	.CYCLES - 2
     18  fd58					      ENDIF
     19  fd58
     20  fd58				  -	      REPEAT	.CYCLES / 3
     21  fd58				  -	      STA	DUMP
     22  fd58					      REPEND
     23  fd58
     24  fd58				   .CYCLES    SET	.CYCLES % 3
     25  fd58
     26  fd58					      REPEAT	.CYCLES / 2
     27  fd58		       ea		      NOP
     28  fd59					      REPEND
     29  fd59
     30  fd59				   .CYCLES    SET	.CYCLES % 2
     31  fd59
     32  fd59				  -	      IF	.CYCLES
     33  fd59				  -	      ERR
     34  fd59					      ENDIF
     35  fd59
     69  fd59				  -	      ELSE
     70  fd59				  -	      DELAY	3
     71  fd59					      ENDIF
     72  fd59		       4c 06 fd 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     27  fd5c
     28  fd5c				   dc_wallsEnd
     29  fd5c
     30  fd5c		       b8		      CLV
     31  fd5d
     32  fd5d		       a9 00		      LDA	#NULL
     33  fd5f		       85 0e		      STA	PF1
     34  fd61		       85 0f		      STA	PF2
     35  fd63
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd63					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd63							; Draws the compass to the screen
      2  fd63
      3  fd63				   mmDraw
      4  fd63
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd63					      INCLUDE	"drawCode/mmRender.asm"
      1  fd63							; Render the minimap
      2  fd63
      3  fd63				   mmRender   SUBROUTINE
      4  fd63							; Set the colour of the player
      5  fd63		       a9 cc		      LDA	#PLYRCOLU
      6  fd65		       85 08		      STA	COLUPF
      7  fd67							; Set the colour of the map
      8  fd67		       a9 0e		      LDA	#MAPCOLU
      9  fd69		       85 06		      STA	COLUP0
     10  fd6b		       85 07		      STA	COLUP1
     11  fd6d							; Get the player's position and translate it into horizontal movement
     12  fd6d		       a9 08		      LDA	#%00001000
     13  fd6f		       18		      CLC
     14  fd70		       38		      SEC
     15  fd71		       e5 ab		      SBC	playerPos
     16  fd73		       0a		      ASL
     17  fd74		       0a		      ASL
     18  fd75		       0a		      ASL
     19  fd76		       0a		      ASL
     20  fd77		       85 b9		      STA	horzPos_plyr
     21  fd79
     22  fd79							; Set the map's position to the right values
     23  fd79		       a9 00		      LDA	#HADJ_A
     24  fd7b		       85 b7		      STA	horzPos_mA
     25  fd7d		       a9 10		      LDA	#HADJ_B
     26  fd7f		       85 b8		      STA	horzPos_mB
     27  fd81
     28  fd81		       85 02		      STA	WSYNC
     29  fd83		       a2 07		      LDX	#HWAIT
     30  fd85
     31  fd85				   .wait1
     32  fd85		       ca		      DEX
     33  fd86		       d0 fd		      BNE	.wait1
      0  fd88					      DELAY	HDELAY1
      1  fd88				   .CYCLES    SET	HDELAY1
      2  fd88
      3  fd88				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd88				  -	      NOP
      5  fd88				  -.CYCLES    SET	.CYCLES - 2
      6  fd88					      ENDIF
      7  fd88
      8  fd88				  -	      IF	[.CYCLES - 2] / 5
      9  fd88				  -	      REPEAT	.CYCLES / 5
     10  fd88				  -	      INC	foo
     11  fd88				  -	      REPEND
     12  fd88				  -.CYCLES    SET	.CYCLES % 5
     13  fd88					      ENDIF
     14  fd88
     15  fd88				  -	      IF	.CYCLES % 3 == 1
     16  fd88				  -	      NOP
     17  fd88				  -.CYCLES    SET	.CYCLES - 2
     18  fd88					      ENDIF
     19  fd88
     20  fd88					      REPEAT	.CYCLES / 3
     21  fd88		       85 30		      STA	DUMP
     22  fd8a					      REPEND
     23  fd8a
     24  fd8a				   .CYCLES    SET	.CYCLES % 3
     25  fd8a
     26  fd8a					      REPEAT	.CYCLES / 2
     27  fd8a		       ea		      NOP
     28  fd8b					      REPEND
     29  fd8b
     30  fd8b				   .CYCLES    SET	.CYCLES % 2
     31  fd8b
     32  fd8b				  -	      IF	.CYCLES
     33  fd8b				  -	      ERR
     34  fd8b					      ENDIF
     35  fd8b
     35  fd8b		       85 10		      STA	RESP0
     36  fd8d		       85 11		      STA	RESP1
     37  fd8f
     38  fd8f		       a5 ab		      LDA	playerPos
     39  fd91
     40  fd91		       85 02		      STA	WSYNC
     41  fd93		       a2 07		      LDX	#HWAIT
     42  fd95
     43  fd95				   .wait2
     44  fd95		       ca		      DEX
     45  fd96		       d0 fd		      BNE	.wait2
      0  fd98					      DELAY	HDELAY2
      1  fd98				   .CYCLES    SET	HDELAY2
      2  fd98
      3  fd98				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd98				  -	      NOP
      5  fd98				  -.CYCLES    SET	.CYCLES - 2
      6  fd98					      ENDIF
      7  fd98
      8  fd98					      IF	[.CYCLES - 2] / 5
      9  fd98					      REPEAT	.CYCLES / 5
     10  fd98		       e6 c4		      INC	foo
     11  fd9a					      REPEND
     12  fd9a				   .CYCLES    SET	.CYCLES % 5
     13  fd9a					      ENDIF
     14  fd9a
     15  fd9a				  -	      IF	.CYCLES % 3 == 1
     16  fd9a				  -	      NOP
     17  fd9a				  -.CYCLES    SET	.CYCLES - 2
     18  fd9a					      ENDIF
     19  fd9a
     20  fd9a					      REPEAT	.CYCLES / 3
     21  fd9a		       85 30		      STA	DUMP
     22  fd9c					      REPEND
     23  fd9c
     24  fd9c				   .CYCLES    SET	.CYCLES % 3
     25  fd9c
     26  fd9c				  -	      REPEAT	.CYCLES / 2
     27  fd9c				  -	      NOP
     28  fd9c					      REPEND
     29  fd9c
     30  fd9c				   .CYCLES    SET	.CYCLES % 2
     31  fd9c
     32  fd9c				  -	      IF	.CYCLES
     33  fd9c				  -	      ERR
     34  fd9c					      ENDIF
     35  fd9c
     47  fd9c		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      6  fd9e
      7  fd9e					      SUBROUTINE		; The preceeding file declares it's own subroutine
      8  fd9e
      9  fd9e							; Load the player's position
     10  fd9e
     11  fd9e		       a5 b9		      LDA	horzPos_plyr
     12  fda0		       85 24		      STA	HMBL
     13  fda2		       a5 b7		      LDA	horzPos_mA
     14  fda4		       85 20		      STA	HMP0
     15  fda6		       a5 b8		      LDA	horzPos_mB
     16  fda8		       85 21		      STA	HMP1
     17  fdaa
     18  fdaa		       a9 00		      LDA	#NULL
     19  fdac		       85 1b		      STA	GRP0
     20  fdae		       85 1c		      STA	GRP1
     21  fdb0		       85 02		      STA	WSYNC
     22  fdb2		       85 2a		      STA	HMOVE
     23  fdb4
     24  fdb4		       a0 00		      LDY	#INDEXINIT
     25  fdb6		       a6 ab		      LDX	playerPos
     26  fdb8
     27  fdb8				   .loop
     28  fdb8		       85 02		      STA	WSYNC
     29  fdba
     30  fdba		       b1 be		      LDA	(miniMapPtr),Y
     31  fdbc		       85 1b		      STA	GRP0
     32  fdbe		       c8		      INY
     33  fdbf		       b1 be		      LDA	(miniMapPtr),Y
     34  fdc1		       85 1c		      STA	GRP1
     35  fdc3		       c8		      INY
     36  fdc4
     37  fdc4		       8a		      TXA
     38  fdc5		       38		      SEC
     39  fdc6		       e5 ac		      SBC	mapWidth
     40  fdc8		       aa		      TAX
     41  fdc9		       29 f0		      AND	#%11110000
     42  fdcb
     43  fdcb		       c9 00		      CMP	#0
     44  fdcd		       d0 0a		      BNE	.noDraw
     45  fdcf
     46  fdcf		       a9 02		      LDA	#2
     47  fdd1		       85 1f		      STA	ENABL
     48  fdd3		       85 ba		      STA	drawingPlyr
     49  fdd5		       a9 01		      LDA	#1
     50  fdd7		       85 27		      STA	VDELBL
     51  fdd9
     52  fdd9				   .noDraw
     53  fdd9
     54  fdd9		       a5 ba		      LDA	drawingPlyr
     55  fddb		       85 1f		      STA	ENABL
     56  fddd		       a9 00		      LDA	#0
     57  fddf		       85 ba		      STA	drawingPlyr
     58  fde1		       c0 20		      CPY	#32
     59  fde3		       d0 d3		      BNE	.loop
     60  fde5
     61  fde5		       a9 00		      LDA	#0
     62  fde7		       85 1f		      STA	ENABL
     63  fde9
     64  fde9		       85 02		      STA	WSYNC
     65  fdeb
     66  fdeb		       a9 00		      LDA	#NULL
     67  fded		       85 1b		      STA	GRP0
     68  fdef		       85 1c		      STA	GRP1
     69  fdf1		       85 06		      STA	COLUP0
     70  fdf3		       85 07		      STA	COLUP1
------- FILE dispkern.asm
     37  fdf5
     38  fdf5		       4c f8 fd 	      JMP	stop
     39  fdf8
     40  fdf8				   stop
     41  fdf8
     42  fdf8
     43  fdf8		       85 09		      STA	COLUBK
------- FILE main.asm
     76  fdfa
     77  fdfa							; Start VBLANK
     78  fdfa
     79  fdfa		       a9 c2		      LDA	#VBLANK_SET
     80  fdfc		       85 01		      STA	VBLANK
     81  fdfe
     82  fdfe							; Process input
     83  fdfe
------- FILE input.asm LEVEL 2 PASS 4
      0  fdfe					      INCLUDE	"input.asm"
      1  fdfe							; VePseu's controller input
      2  fdfe
      3  fdfe		       85 02		      STA	WSYNC
      4  fe00
      5  fe00		       ad 80 02 	      LDA	SWCHA
      6  fe03		       29 10		      AND	#FFORD
      7  fe05		       d0 26		      BNE	CIN1_NOPRESS
      8  fe07
      9  fe07		       a5 ab		      LDA	playerPos
     10  fe09		       38		      SEC
     11  fe0a		       e5 b0		      SBC	yLoss
     12  fe0c		       18		      CLC
     13  fe0d		       65 af		      ADC	yGain
     14  fe0f		       a8		      TAY
     15  fe10
     16  fe10		       b1 c0		      LDA	(mapPtr),Y
     17  fe12		       c9 00		      CMP	#NULL
     18  fe14		       d0 1b		      BNE	CIN2
     19  fe16
     20  fe16		       a5 b1		      LDA	fordPressed
     21  fe18		       c9 00		      CMP	#NULL
     22  fe1a		       d0 09		      BNE	CIN1_WAIT
     23  fe1c
     24  fe1c		       84 ab		      STY	playerPos
     25  fe1e		       a9 0f		      LDA	#CWAITCNT
     26  fe20		       85 b1		      STA	fordPressed
     27  fe22		       4c 31 fe 	      JMP	CIN2
     28  fe25
     29  fe25				   CIN1_WAIT
      0  fe25					      DEA
      1  fe25		       38		      SEC
      2  fe26		       e9 01		      SBC	#1
     31  fe28		       85 b1		      STA	fordPressed
     32  fe2a		       4c 31 fe 	      JMP	CIN2
     33  fe2d
     34  fe2d				   CIN1_NOPRESS
     35  fe2d		       a9 00		      LDA	#NULL
     36  fe2f		       85 b1		      STA	fordPressed
     37  fe31
     38  fe31				   CIN2
     39  fe31		       85 02		      STA	WSYNC
     40  fe33		       ad 80 02 	      LDA	SWCHA
     41  fe36		       29 20		      AND	#FBACK
     42  fe38		       d0 26		      BNE	CIN2_NOPRESS
     43  fe3a
     44  fe3a		       a5 ab		      LDA	playerPos
     45  fe3c		       38		      SEC
     46  fe3d		       e5 af		      SBC	yGain
     47  fe3f		       18		      CLC
     48  fe40		       65 b0		      ADC	yLoss
     49  fe42		       a8		      TAY
     50  fe43
     51  fe43		       b1 c0		      LDA	(mapPtr),Y
     52  fe45		       c9 00		      CMP	#NULL
     53  fe47		       d0 1b		      BNE	CIN3
     54  fe49
     55  fe49		       a5 b2		      LDA	backPressed
     56  fe4b		       c9 00		      CMP	#NULL
     57  fe4d		       d0 09		      BNE	CIN2_WAIT
     58  fe4f
     59  fe4f		       84 ab		      STY	playerPos
     60  fe51		       a9 0f		      LDA	#CWAITCNT
     61  fe53		       85 b2		      STA	backPressed
     62  fe55		       4c 64 fe 	      JMP	CIN3
     63  fe58
     64  fe58				   CIN2_WAIT
      0  fe58					      DEA
      1  fe58		       38		      SEC
      2  fe59		       e9 01		      SBC	#1
     66  fe5b		       85 b2		      STA	backPressed
     67  fe5d		       4c 64 fe 	      JMP	CIN3
     68  fe60
     69  fe60				   CIN2_NOPRESS
     70  fe60		       a9 00		      LDA	#NULL
     71  fe62		       85 b2		      STA	backPressed
     72  fe64
     73  fe64				   CIN3
     74  fe64		       85 02		      STA	WSYNC
     75  fe66		       ad 80 02 	      LDA	SWCHA
     76  fe69		       29 80		      AND	#FLEFT
     77  fe6b		       d0 1c		      BNE	CIN3_NOPRESS
     78  fe6d
     79  fe6d		       a5 bb		      LDA	direction
      0  fe6f					      INA
      1  fe6f		       18		      CLC
      2  fe70		       69 01		      ADC	#1
     81  fe72		       29 03		      AND	#%00000011
     82  fe74
     83  fe74		       a6 b4		      LDX	rigtPressed
     84  fe76		       e0 00		      CPX	#NULL
     85  fe78		       d0 09		      BNE	CIN3_WAIT
     86  fe7a
     87  fe7a		       85 bb		      STA	direction
     88  fe7c
     89  fe7c		       a9 0f		      LDA	#CWAITCNT
     90  fe7e		       85 b4		      STA	rigtPressed
     91  fe80		       4c 8d fe 	      JMP	CIN4
     92  fe83
     93  fe83				   CIN3_WAIT
     94  fe83		       ca		      DEX
     95  fe84		       86 b4		      STX	rigtPressed
     96  fe86		       4c 8d fe 	      JMP	CIN4
     97  fe89
     98  fe89				   CIN3_NOPRESS
     99  fe89		       a9 00		      LDA	#NULL
    100  fe8b		       85 b4		      STA	rigtPressed
    101  fe8d
    102  fe8d				   CIN4
    103  fe8d		       85 02		      STA	WSYNC
    104  fe8f		       ad 80 02 	      LDA	SWCHA
    105  fe92		       29 40		      AND	#FRIGT
    106  fe94		       d0 1c		      BNE	CIN4_NOPRESS
    107  fe96
    108  fe96		       a5 bb		      LDA	direction
      0  fe98					      DEA
      1  fe98		       38		      SEC
      2  fe99		       e9 01		      SBC	#1
    110  fe9b		       29 03		      AND	#%00000011
    111  fe9d
    112  fe9d		       a6 b3		      LDX	leftPressed
    113  fe9f		       e0 00		      CPX	#NULL
    114  fea1		       d0 09		      BNE	CIN4_WAIT
    115  fea3
    116  fea3		       85 bb		      STA	direction
    117  fea5
    118  fea5		       a9 0f		      LDA	#CWAITCNT
    119  fea7		       85 b3		      STA	leftPressed
    120  fea9		       4c b6 fe 	      JMP	CDIR1
    121  feac
    122  feac				   CIN4_WAIT
    123  feac		       ca		      DEX
    124  fead		       86 b3		      STX	leftPressed
    125  feaf		       4c b6 fe 	      JMP	CDIR1
    126  feb2
    127  feb2				   CIN4_NOPRESS
    128  feb2		       a9 00		      LDA	#NULL
    129  feb4		       85 b3		      STA	leftPressed
    130  feb6
    131  feb6				   CDIR1
    132  feb6		       85 02		      STA	WSYNC
    133  feb8		       a5 bb		      LDA	direction
    134  feba		       c9 00		      CMP	#DNORTH
    135  febc		       d0 16		      BNE	CDIR2
    136  febe
    137  febe		       a5 ac		      LDA	mapWidth
    138  fec0		       85 b0		      STA	yLoss
    139  fec2		       a9 01		      LDA	#ONE
    140  fec4		       85 ad		      STA	xGain
    141  fec6		       a9 86		      LDA	#WCOLU
    142  fec8		       85 b5		      STA	wallColour
    143  feca		       a9 82		      LDA	#SCOLU
    144  fecc		       85 b6		      STA	shadowColour
    145  fece		       a9 00		      LDA	#NULL
    146  fed0		       85 af		      STA	yGain
    147  fed2		       85 ae		      STA	xLoss
    148  fed4
    149  fed4				   CDIR2
    150  fed4		       a5 bb		      LDA	direction
    151  fed6		       c9 02		      CMP	#DSOUTH
    152  fed8		       d0 16		      BNE	CDIR3
    153  feda
    154  feda		       a5 ac		      LDA	mapWidth
    155  fedc		       85 af		      STA	yGain
    156  fede		       a9 01		      LDA	#ONE
    157  fee0		       85 ae		      STA	xLoss
    158  fee2		       a9 86		      LDA	#WCOLU
    159  fee4		       85 b5		      STA	wallColour
    160  fee6		       a9 82		      LDA	#SCOLU
    161  fee8		       85 b6		      STA	shadowColour
    162  feea		       a9 00		      LDA	#NULL
    163  feec		       85 b0		      STA	yLoss
    164  feee		       85 ad		      STA	xGain
    165  fef0
    166  fef0				   CDIR3
    167  fef0		       a5 bb		      LDA	direction
    168  fef2		       c9 01		      CMP	#DWEST
    169  fef4		       d0 16		      BNE	CDIR4
    170  fef6
    171  fef6		       a5 ac		      LDA	mapWidth
    172  fef8		       85 ad		      STA	xGain
    173  fefa		       a9 01		      LDA	#ONE
    174  fefc		       85 af		      STA	yGain
    175  fefe		       a9 82		      LDA	#SCOLU
    176  ff00		       85 b5		      STA	wallColour
    177  ff02		       a9 86		      LDA	#WCOLU
    178  ff04		       85 b6		      STA	shadowColour
    179  ff06		       a9 00		      LDA	#NULL
    180  ff08		       85 b0		      STA	yLoss
    181  ff0a		       85 ae		      STA	xLoss
    182  ff0c
    183  ff0c				   CDIR4
    184  ff0c		       a5 bb		      LDA	direction
    185  ff0e		       c9 03		      CMP	#DEAST
    186  ff10		       d0 16		      BNE	CEND
    187  ff12
    188  ff12		       a5 ac		      LDA	mapWidth
    189  ff14		       85 ae		      STA	xLoss
    190  ff16		       a9 01		      LDA	#ONE
    191  ff18		       85 b0		      STA	yLoss
    192  ff1a		       a9 82		      LDA	#SCOLU
    193  ff1c		       85 b5		      STA	wallColour
    194  ff1e		       a9 86		      LDA	#WCOLU
    195  ff20		       85 b6		      STA	shadowColour
    196  ff22		       a9 00		      LDA	#NULL
    197  ff24		       85 af		      STA	yGain
    198  ff26		       85 ad		      STA	xGain
    199  ff28
    200  ff28				   CEND
    201  ff28		       85 02		      STA	WSYNC
------- FILE main.asm
     85  ff2a
     86  ff2a							; Pad again
     87  ff2a
     88  ff2a		       a2 1a		      LDX	#LOPAD_LIMIT
     89  ff2c
     90  ff2c				   lowerPad
     91  ff2c		       85 02		      STA	WSYNC
     92  ff2e
     93  ff2e		       ca		      DEX
     94  ff2f		       d0 fb		      BNE	lowerPad
     95  ff31
     96  ff31							; Get everything ready for VSYNC
     97  ff31
     98  ff31		       86 01		      STX	VBLANK
     99  ff33		       a9 02		      LDA	#VSYNC_SET
    100  ff35		       85 02		      STA	WSYNC
    101  ff37		       4c 2e f8 	      JMP	screenStart
    102  ff3a
    103  ff3a							; Tell us how many bytes we have used up
    104  ff3a
 99 % of your rom has been used up ( 3904 / 4096 bytes)
    105  ff3a					      ECHO	[. * 100 / $FFFA]d, "% of your rom has been used up (", [. - $EFFA]d, "/ 4096 bytes)"
    106  ff3a
    107  fffa					      ORG	$FFFA
    108  fffa
    109  fffa		       01 f8		      DC.W	start	; Something
    110  fffc		       01 f8		      DC.W	start	; Entrypoint
    111  fffe		       2e f8		      DC.W	screenStart	; Something else
    112  10000
    113  10000					       END
