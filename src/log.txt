------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0f	    UPPAD_LIMIT =	15	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 19	    CWAITCNT   =	25	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
     56  10000 ????
     57  10000 ????		00 07	    PLAYER_STEPV =	7	; The volume of the player's steps
     58  10000 ????		00 02	    PLAYER_STEPS =	2
     59  10000 ????		00 06	    PLAYER_TURNS =	6
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros & stuff
      2  10000 ????
      3  10000 ????						; Scanline padding macro
      4  10000 ????				       MAC	pad
      5  10000 ????
      6  10000 ????			    .SCANLINES SET	{1}	; Scanlines to essentially skip
      7  10000 ????
      8  10000 ????				       LDX	#.SCANLINES
      9  10000 ????
     10  10000 ????			    .loop
     11  10000 ????				       STA	WSYNC
     12  10000 ????
     13  10000 ????				       DEX
     14  10000 ????				       BNE	.loop
     15  10000 ????
     16  10000 ????				       ENDM
     17  10000 ????
     18  10000 ????						; Precision delay macro
     19  10000 ????
     20  10000 ????				       MAC	delay
     21  10000 ????			    .CYCLES    SET	{1}
     22  10000 ????
     23  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     24  10000 ????				       NOP
     25  10000 ????			    .CYCLES    SET	.CYCLES - 2
     26  10000 ????				       ENDIF
     27  10000 ????
     28  10000 ????				       IF	[.CYCLES - 2] / 5
     29  10000 ????				       REPEAT	.CYCLES / 5
     30  10000 ????				       INC	DUMP
     31  10000 ????				       REPEND
     32  10000 ????			    .CYCLES    SET	.CYCLES % 5
     33  10000 ????				       ENDIF
     34  10000 ????
     35  10000 ????				       IF	.CYCLES % 3 == 1
     36  10000 ????				       NOP
     37  10000 ????			    .CYCLES    SET	.CYCLES - 2
     38  10000 ????				       ENDIF
     39  10000 ????
     40  10000 ????				       REPEAT	.CYCLES / 3
     41  10000 ????				       STA	DUMP
     42  10000 ????				       REPEND
     43  10000 ????
     44  10000 ????			    .CYCLES    SET	.CYCLES % 3
     45  10000 ????
     46  10000 ????				       REPEAT	.CYCLES / 2
     47  10000 ????				       NOP
     48  10000 ????				       REPEND
     49  10000 ????
     50  10000 ????			    .CYCLES    SET	.CYCLES % 2
     51  10000 ????
     52  10000 ????				       IF	.CYCLES
     53  10000 ????				       ERR
     54  10000 ????				       ENDIF
     55  10000 ????
     56  10000 ????				       ENDM
     57  10000 ????
     58  10000 ????						; Macro used to find the space used up in a certain section of ram
     59  10000 ????
     60  10000 ????				       MAC	usage_report
     61  10000 ????
     62  10000 ????			    NAM        SET	{1}	; Name of the section
     63  10000 ????			    SPOS       SET	{2}	; Start address of the section
     64  10000 ????			    EPOS       SET	{3}	; End address of the section
     65  10000 ????			    CPOS       SET	.	; The current position of the macro in the section
     66  10000 ????
     67  10000 ????			    CAP        SET	EPOS - SPOS	; Space that exists
     68  10000 ????			    TKUP       SET	CPOS - SPOS	; Space taken up by data
     69  10000 ????
     70  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d	; Percent of space taken by data, converted to
     71  10000 ????						; a string so the following line doesn't exceed
     72  10000 ????						; 80 characters
     73  10000 ????
     74  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     75  10000 ????				       ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
     76  10000 ????				       ECHO	""
     77  10000 ????
     78  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   fordPressed DC	0
     57 U00b1		       00	   backPressed DC	0
     58 U00b2		       00	   leftPressed DC	0
     59 U00b3		       00	   rigtPressed DC	0
     60 U00b4
     61 U00b4		       00	   wallColour DC	0
     62 U00b5		       00	   shadowColour DC	0
     63 U00b6		       00	   drawingPlyr DC	0
     64 U00b7
     65 U00b7		       00 00	   miniMapPtr DC.W	0
     66 U00b9		       00 00	   mapPtr     DC.W	0
     67 U00bb
     68 U00bb				   sprite
     69 U00bb		       00	   spriteAddrH DC	0
     70 U00bc		       00	   spriteAddrL DC	0
     71 U00bd
     72 U00bd		       00	   spriteHeight DC	0
     73 U00be		       00	   spritePosY DC	0
     74 U00bf
     75 U00bf		       00	   stepVol    DC	0
     76 U00c0		       00	   stepSnd    DC	0
     77 U00c1
      0 U00c1					      USAGE_REPORT	"RAM", $80, $100
      1 U00c1
      2 U00c1				   NAM	      SET	"RAM"
      3 U00c1				   SPOS       SET	$80
      4 U00c1				   EPOS       SET	$100
      5 U00c1				   CPOS       SET	.
      6 U00c1
      7 U00c1				   CAP	      SET	EPOS - SPOS
      8 U00c1				   TKUP       SET	CPOS - SPOS
      9 U00c1
     10 U00c1				   PCNT       SET	[TKUP * 100 / CAP]d
     11 U00c1
     12 U00c1
     13 U00c1
 50 % of your RAM is used up ( 65 / 128  bytes )
     14 U00c1					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  RAM ,  63 bytes are free
     15 U00c1					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16 U00c1					      ECHO	""
     17 U00c1
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c1					      INCLUDE	"include/pia_addr.h"
      1 U00c1							; PIA addresses
      2 U00c1
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE map.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1	; Player's position
      4  f000		       00 10	   MAP_01_WDTH =	$10	; Map 1's width
      5  f000		       01 00	   MAP_01_SZ  =	$100	; Map 1's size in bytes
      6  f000
      7  f000				   miniMap_01
      8  f000		       e0 07		      DC.W	%0000011111100000
      9  f002		       bf fd		      DC.W	%1111110110111111
     10  f004		       80 01		      DC.W	%0000000110000000
     11  f006		       80 01		      DC.W	%0000000110000000
     12  f008		       be bd		      DC.W	%1011110110111110
     13  f00a		       a2 a5		      DC.W	%1010010110100010
     14  f00c		       a2 a7		      DC.W	%1010011110100010
     15  f00e		       e2 a7		      DC.W	%1010011111100010
     16  f010		       e2 a5		      DC.W	%1010010111100010
     17  f012		       be bd		      DC.W	%1011110110111110
     18  f014		       80 81		      DC.W	%1000000110000000
     19  f016		       80 81		      DC.W	%1000000110000000
     20  f018		       bf fd		      DC.W	%1111110110111111
     21  f01a		       a0 05		      DC.W	%0000010110100000
     22  f01c		       a0 05		      DC.W	%0000010110100000
     23  f01e		       e0 07		      DC.W	%0000011111100000
     24  f020
     25  f020				   map_01_load
     26  f020		       a9 d1		      LDA	#MAP_01_POS
     27  f022		       85 aa		      STA	playerPos
     28  f024		       a9 10		      LDA	#MAP_01_WDTH
     29  f026		       85 ab		      STA	mapWidth
     30  f028		       85 af		      STA	yLoss
     31  f02a		       a9 01		      LDA	#ONE
     32  f02c		       85 ac		      STA	xGain
     33  f02e		       a9 00		      LDA	#NULL
     34  f030		       85 ad		      STA	xLoss
     35  f032		       85 ae		      STA	yGain
     36  f034
     37  f034		       a9 00		      LDA	#<map_01
     38  f036		       85 b9		      STA	mapPtr
     39  f038		       a9 f1		      LDA	#>map_01
     40  f03a		       85 ba		      STA	mapPtr + 1
     41  f03c
     42  f03c		       a9 00		      LDA	#<miniMap_01
     43  f03e		       85 b7		      STA	miniMapPtr
     44  f040		       a9 f0		      LDA	#>miniMap_01
     45  f042		       85 b8		      STA	miniMapPtr + 1
     46  f044		       60		      RTS
     47  f045
     48  f045
     49  f100		       00 00 00 00*	      ALIGN	256
     50  f100
     51  f100				   map_01
     52  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     53  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     54  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     55  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     56  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     57  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     58  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     59  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     60  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     61  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     62  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     63  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     64  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     65  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     66  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     67  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     12  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F600
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F600
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200
     10  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     11  f200
     12  f200
     13  f200
 33 % of your map space is used up ( 512 / 1536  bytes )
     14  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  map space ,  1024 bytes are free
     15  f200					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16  f200					      ECHO	""
     17  f200
     14  f200
     15  f600					      ORG	$F600
     16  f600
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f600					      INCLUDE	"andtable.asm"
      1  f600							; The AND-tables for the shadows
      2  f600
      3  f600				   and_1a
      4  f600		       80		      DC	%10000000
      5  f601		       80		      DC	%10000000
      6  f602		       80		      DC	%10000000
      7  f603		       c0		      DC	%11000000
      8  f604		       c0		      DC	%11000000
      9  f605		       c0		      DC	%11000000
     10  f606		       e0		      DC	%11100000
     11  f607		       e0		      DC	%11100000
     12  f608		       e0		      DC	%11100000
     13  f609		       f0		      DC	%11110000
     14  f60a		       f0		      DC	%11110000
     15  f60b		       f0		      DC	%11110000
     16  f60c		       f8		      DC	%11111000
     17  f60d		       f8		      DC	%11111000
     18  f60e		       f8		      DC	%11111000
     19  f60f		       fc		      DC	%11111100
     20  f610		       fc		      DC	%11111100
     21  f611		       fc		      DC	%11111100
     22  f612		       fe		      DC	%11111110
     23  f613		       fe		      DC	%11111110
     24  f614		       fe		      DC	%11111110
     25  f615		       ff		      DC	%11111111
     26  f616		       ff		      DC	%11111111
     27  f617		       ff		      DC	%11111111
     28  f618		       ff		      DC	%11111111
     29  f619		       ff		      DC	%11111111
     30  f61a		       ff		      DC	%11111111
     31  f61b		       ff		      DC	%11111111
     32  f61c		       ff		      DC	%11111111
     33  f61d		       ff		      DC	%11111111
     34  f61e
     35  f61e				   and_1b
     36  f61e		       00		      DC	%00000000
     37  f61f		       00		      DC	%00000000
     38  f620		       00		      DC	%00000000
     39  f621		       00		      DC	%00000000
     40  f622		       00		      DC	%00000000
     41  f623		       00		      DC	%00000000
     42  f624		       00		      DC	%00000000
     43  f625		       00		      DC	%00000000
     44  f626		       00		      DC	%00000000
     45  f627		       00		      DC	%00000000
     46  f628		       00		      DC	%00000000
     47  f629		       00		      DC	%00000000
     48  f62a		       00		      DC	%00000000
     49  f62b		       00		      DC	%00000000
     50  f62c		       00		      DC	%00000000
     51  f62d		       00		      DC	%00000000
     52  f62e		       00		      DC	%00000000
     53  f62f		       00		      DC	%00000000
     54  f630		       00		      DC	%00000000
     55  f631		       00		      DC	%00000000
     56  f632		       00		      DC	%00000000
     57  f633		       00		      DC	%00000000
     58  f634		       00		      DC	%00000000
     59  f635		       00		      DC	%00000000
     60  f636		       01		      DC	%00000001
     61  f637		       01		      DC	%00000001
     62  f638		       01		      DC	%00000001
     63  f639		       03		      DC	%00000011
     64  f63a		       03		      DC	%00000011
     65  f63b		       03		      DC	%00000011
     66  f63c
     67  f63c				   and_1c
     68  f63c		       00		      DC	%00000000
     69  f63d		       00		      DC	%00000000
     70  f63e		       00		      DC	%00000000
     71  f63f		       00		      DC	%00000000
     72  f640		       00		      DC	%00000000
     73  f641		       00		      DC	%00000000
     74  f642		       01		      DC	%00000001
     75  f643		       01		      DC	%00000001
     76  f644		       01		      DC	%00000001
     77  f645		       03		      DC	%00000011
     78  f646		       03		      DC	%00000011
     79  f647		       03		      DC	%00000011
     80  f648		       07		      DC	%00000111
     81  f649		       07		      DC	%00000111
     82  f64a		       07		      DC	%00000111
     83  f64b		       0f		      DC	%00001111
     84  f64c		       0f		      DC	%00001111
     85  f64d		       0f		      DC	%00001111
     86  f64e		       1f		      DC	%00011111
     87  f64f		       1f		      DC	%00011111
     88  f650		       1f		      DC	%00011111
     89  f651		       3f		      DC	%00111111
     90  f652		       3f		      DC	%00111111
     91  f653		       3f		      DC	%00111111
     92  f654		       7f		      DC	%01111111
     93  f655		       7f		      DC	%01111111
     94  f656		       7f		      DC	%01111111
     95  f657		       ff		      DC	%11111111
     96  f658		       ff		      DC	%11111111
     97  f659		       ff		      DC	%11111111
     98  f65a
     99  f65a				   and_1d
    100  f65a		       02		      DC	%00000010
    101  f65b		       02		      DC	%00000010
    102  f65c		       02		      DC	%00000010
    103  f65d		       03		      DC	%00000011
    104  f65e		       03		      DC	%00000011
    105  f65f		       03		      DC	%00000011
    106  f660		       03		      DC	%00000011
    107  f661		       03		      DC	%00000011
    108  f662		       03		      DC	%00000011
    109  f663		       03		      DC	%00000011
    110  f664		       03		      DC	%00000011
    111  f665		       03		      DC	%00000011
    112  f666		       03		      DC	%00000011
    113  f667		       03		      DC	%00000011
    114  f668		       03		      DC	%00000011
    115  f669		       03		      DC	%00000011
    116  f66a		       03		      DC	%00000011
    117  f66b		       03		      DC	%00000011
    118  f66c		       03		      DC	%00000011
    119  f66d		       03		      DC	%00000011
    120  f66e		       03		      DC	%00000011
    121  f66f		       03		      DC	%00000011
    122  f670		       03		      DC	%00000011
    123  f671		       03		      DC	%00000011
    124  f672		       03		      DC	%00000011
    125  f673		       03		      DC	%00000011
    126  f674		       03		      DC	%00000011
    127  f675		       03		      DC	%00000011
    128  f676		       03		      DC	%00000011
    129  f677		       03		      DC	%00000011
------- FILE main.asm
------- FILE gamecode.asm LEVEL 2 PASS 4
      0  f678					      INCLUDE	"gamecode.asm"
      1  f678				   carl
      2  f678		       00		      DC	%00000000
      3  f679		       66		      DC	%01100110
      4  f67a		       24		      DC	%00100100
      5  f67b		       3c		      DC	%00111100
      6  f67c		       42		      DC	%01000010
      7  f67d		       bd		      DC	%10111101
      8  f67e		       c3		      DC	%11000011
      9  f67f		       81		      DC	%10000001
     10  f680		       a5		      DC	%10100101
     11  f681		       42		      DC	%01000010
     12  f682		       3c		      DC	%00111100
     13  f683
     14  f683				   carlH      SET	. - carl
------- FILE main.asm
     19  f683
     20  f683				   start
     21  f683
     22  f683							; Initialize everything
     23  f683
------- FILE init.asm LEVEL 2 PASS 4
      0  f683					      INCLUDE	"init.asm"
      1  f683							; VePseu's init file
      2  f683
      3  f683					      SUBROUTINE
      4  f683
      5  f683		       a2 ff		      LDX	#stack
      6  f685		       9a		      TXS
      7  f686
      8  f686		       a9 00		      LDA	#NULL
      9  f688		       aa		      TAX
     10  f689
     11  f689		       d8		      CLD
     12  f68a		       18		      CLC
     13  f68b		       58		      CLI
     14  f68c		       b8		      CLV
     15  f68d
     16  f68d				   .loop
     17  f68d
     18  f68d		       95 00		      STA	cleanStart,X
     19  f68f		       ca		      DEX
     20  f690
     21  f690		       d0 fb		      BNE	.loop
     22  f692
     23  f692		       20 20 f0 	      JSR	map_01_load
     24  f695
     25  f695		       a9 86		      LDA	#WCOLU
     26  f697		       85 b4		      STA	wallColour
     27  f699		       a9 82		      LDA	#SCOLU
     28  f69b		       85 b5		      STA	shadowColour
     29  f69d
     30  f69d		       a9 02		      LDA	#2
     31  f69f		       85 17		      STA	AUDF0
------- FILE main.asm
     25  f6a1
     26  f6a1		       a9 02		      LDA	#VSYNC_SET
     27  f6a3
     28  f6a3				   screenStart
     29  f6a3
     30  f6a3							; Start vsync (3 scanlines)
     31  f6a3		       85 00		      STA	VSYNC
     32  f6a5
     33  f6a5		       85 02		      STA	WSYNC
     34  f6a7		       85 02		      STA	WSYNC
     35  f6a9		       a9 00		      LDA	#NULL
     36  f6ab		       85 02		      STA	WSYNC
     37  f6ad
     38  f6ad		       85 00		      STA	VSYNC
     39  f6af
     40  f6af							; Render everything
     41  f6af
     42  f6af
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f6af					      INCLUDE	"walrend.asm"
      1  f6af							; VePseu's wall renderer
      2  f6af
      3  f6af		       a4 aa		      LDY	playerPos
      4  f6b1
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f6b1					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f6b1							; Peripheral vision rendering (54 cycles)
      2  f6b1
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f6b1					      INCLUDE	"include/ands_0.h"
      1  f6b1							; The AND constants for peripheral vision
      2  f6b1
      3  f6b1		       00 c0	   AND_W0S1P1 =	%11000000
      4  f6b1		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f6b1
      0  f6b1					      X_POS_LOS		; 24 cycles
      1  f6b1
      2  f6b1		       98		      TYA
      3  f6b2		       18		      CLC
      4  f6b3		       65 ad		      ADC	xLoss
      5  f6b5		       38		      SEC
      6  f6b6		       e5 ac		      SBC	xGain
      7  f6b8		       a8		      TAY
      8  f6b9
      6  f6b9		       b1 b9		      LDA	(mapPtr),Y
      7  f6bb		       29 c0		      AND	#AND_W0S1P1
      8  f6bd		       85 9b		      STA	shadow1a
      9  f6bf
     10  f6bf		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f6c0		       18		      CLC
     12  f6c1		       65 ac		      ADC	xGain
     13  f6c3		       65 ac		      ADC	xGain
     14  f6c5		       38		      SEC
     15  f6c6		       e5 ad		      SBC	xLoss
     16  f6c8		       e5 ad		      SBC	xLoss
     17  f6ca		       a8		      TAY
     18  f6cb
     19  f6cb		       b1 b9		      LDA	(mapPtr),Y	; 10 cycles
     20  f6cd		       29 03		      AND	#AND_W0S1P2
     21  f6cf		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f6d1
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f6d1					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f6d1							; Render the first layer (not that ugly) (86 cycles)
      2  f6d1
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f6d1					      INCLUDE	"include/ands_1.h"
      1  f6d1							; The AND constants for layer 1
      2  f6d1
      3  f6d1		       00 03	   AND_W1S1P1 =	%00000011
      4  f6d1		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f6d1
      0  f6d1					      Y_POS_ADV		; 30 cycles
      1  f6d1
      2  f6d1		       98		      TYA
      3  f6d2		       18		      CLC
      4  f6d3		       65 ae		      ADC	yGain
      5  f6d5		       38		      SEC
      6  f6d6		       e5 af		      SBC	yLoss
      7  f6d8		       a8		      TAY
      8  f6d9
      6  f6d9		       b1 b9		      LDA	(mapPtr),Y
      7  f6db		       85 9e		      STA	shadow1d
      8  f6dd
      0  f6dd					      X_POS_LOS		; 22 cycles
      1  f6dd
      2  f6dd		       98		      TYA
      3  f6de		       18		      CLC
      4  f6df		       65 ad		      ADC	xLoss
      5  f6e1		       38		      SEC
      6  f6e2		       e5 ac		      SBC	xGain
      7  f6e4		       a8		      TAY
      8  f6e5
     10  f6e5		       b1 b9		      LDA	(mapPtr),Y
     11  f6e7		       85 80		      STA	wall1
     12  f6e9		       85 81		      STA	wall1+1
     13  f6eb		       85 82		      STA	wall1+2
     14  f6ed		       85 83		      STA	wall1+3
     15  f6ef		       85 84		      STA	wall1+4
     16  f6f1
     17  f6f1		       a5 9e		      LDA	shadow1d
     18  f6f3		       aa		      TAX
     19  f6f4		       05 80		      ORA	wall1
     20  f6f6		       45 80		      EOR	wall1
     21  f6f8		       85 9e		      STA	shadow1d
     22  f6fa		       8a		      TXA
     23  f6fb		       05 9f		      ORA	shadow1e
     24  f6fd		       05 80		      ORA	wall1
     25  f6ff		       45 80		      EOR	wall1
     26  f701		       29 03		      AND	#AND_W1S1P2
     27  f703		       85 9f		      STA	shadow1e
     28  f705
      0  f705					      X_POS_LOS		; 34 cycles
      1  f705
      2  f705		       98		      TYA
      3  f706		       18		      CLC
      4  f707		       65 ad		      ADC	xLoss
      5  f709		       38		      SEC
      6  f70a		       e5 ac		      SBC	xGain
      7  f70c		       a8		      TAY
      8  f70d
     30  f70d		       b1 b9		      LDA	(mapPtr),Y
     31  f70f		       05 80		      ORA	wall1
     32  f711		       aa		      TAX
     33  f712		       05 9b		      ORA	shadow1a
     34  f714		       45 80		      EOR	wall1
     35  f716		       85 9b		      STA	shadow1a
     36  f718		       8a		      TXA
     37  f719		       45 80		      EOR	wall1
     38  f71b		       29 03		      AND	#AND_W1S1P2
     39  f71d		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f71f
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f71f					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f71f							; Render the second layer (186 cycles)
      2  f71f
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f71f					      INCLUDE	"include/ands_2.h"
      1  f71f							; The AND constants for layer 2
      2  f71f
      3  f71f		       00 e0	   AND_W2S1P1 =	%11100000
      4  f71f		       00 fc	   AND_W2S2P1 =	%11111100
      5  f71f
      6  f71f		       00 03	   AND_W2S0P1 =	%00000011
      7  f71f		       00 04	   AND_W2S1P2 =	%00000100
      8  f71f		       00 0c	   AND_W2S2P2 =	%00001100
      9  f71f
     10  f71f		       00 fc	   AND_W2S0P2 =	%11111100
     11  f71f
     12  f71f		       00 80	   AND_W2S1P3 =	%10000000
     13  f71f		       00 c0	   AND_W2S2P3 =	%11000000
     14  f71f
     15  f71f		       00 01	   AND_W2S1P4 =	%00000001
     16  f71f		       00 0f	   AND_W2S2P4 =	%00001111
     17  f71f		       00 03	   AND_W2S1P5 =	%00000011
     18  f71f		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f71f
      0  f71f					      Y_POS_ADV_AL		; 35 cycles
      1  f71f
      2  f71f		       98		      TYA
      3  f720		       18		      CLC
      4  f721		       65 ae		      ADC	yGain
      5  f723		       65 ad		      ADC	xLoss
      6  f725		       38		      SEC
      7  f726		       e5 af		      SBC	yLoss
      8  f728		       e5 ac		      SBC	xGain
      9  f72a		       a8		      TAY
     10  f72b
      6  f72b		       b1 b9		      LDA	(mapPtr),Y
      7  f72d		       29 fc		      AND	#AND_W2S2P1
      8  f72f		       85 a0		      STA	shadow2ab
      9  f731		       29 e0		      AND	#AND_W2S1P1
     10  f733		       85 91		      STA	shadow2aa
     11  f735
      0  f735					      X_POS_GAN		; 41 cycles
      1  f735
      2  f735		       98		      TYA
      3  f736		       18		      CLC
      4  f737		       65 ac		      ADC	xGain
      5  f739		       38		      SEC
      6  f73a		       e5 ad		      SBC	xLoss
      7  f73c		       a8		      TAY
      8  f73d
     13  f73d		       b1 b9		      LDA	(mapPtr),Y
     14  f73f		       aa		      TAX
     15  f740		       85 85		      STA	wall2a
     16  f742		       29 03		      AND	#AND_W2S0P1
     17  f744		       85 86		      STA	wall2b
     18  f746		       8a		      TXA
     19  f747		       29 0c		      AND	#AND_W2S2P2
     20  f749		       85 a1		      STA	shadow2bb
     21  f74b		       29 04		      AND	#AND_W2S1P2
     22  f74d		       85 92		      STA	shadow2ba
     23  f74f
      0  f74f					      X_POS_GAN		; 30 cycles
      1  f74f
      2  f74f		       98		      TYA
      3  f750		       18		      CLC
      4  f751		       65 ac		      ADC	xGain
      5  f753		       38		      SEC
      6  f754		       e5 ad		      SBC	xLoss
      7  f756		       a8		      TAY
      8  f757
     25  f757		       b1 b9		      LDA	(mapPtr),Y
     26  f759		       85 87		      STA	wall2c
     27  f75b		       29 fc		      AND	#AND_W2S0P2
     28  f75d		       05 86		      ORA	wall2b
     29  f75f		       85 86		      STA	wall2b
     30  f761
      0  f761					      X_POS_GAN		; 35 cycles
      1  f761
      2  f761		       98		      TYA
      3  f762		       18		      CLC
      4  f763		       65 ac		      ADC	xGain
      5  f765		       38		      SEC
      6  f766		       e5 ad		      SBC	xLoss
      7  f768		       a8		      TAY
      8  f769
     32  f769		       b1 b9		      LDA	(mapPtr),Y
     33  f76b		       85 88		      STA	wall2d
     34  f76d		       85 89		      STA	wall2e
     35  f76f		       29 c0		      AND	#AND_W2S2P3
     36  f771		       85 a2		      STA	shadow2cb
     37  f773		       29 80		      AND	#AND_W2S1P3
     38  f775		       85 93		      STA	shadow2ca
     39  f777
      0  f777					      X_POS_GAN		; 37 cycles
      1  f777
      2  f777		       98		      TYA
      3  f778		       18		      CLC
      4  f779		       65 ac		      ADC	xGain
      5  f77b		       38		      SEC
      6  f77c		       e5 ad		      SBC	xLoss
      7  f77e		       a8		      TAY
      8  f77f
     41  f77f		       b1 b9		      LDA	(mapPtr),Y
     42  f781		       29 0f		      AND	#AND_W2S2P4
     43  f783		       85 a3		      STA	shadow2db
     44  f785		       29 03		      AND	#AND_W2S1P5
     45  f787		       85 95		      STA	shadow2ea
     46  f789		       85 a4		      STA	shadow2eb
     47  f78b		       29 01		      AND	#AND_W2S1P4
     48  f78d		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f78f
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f78f					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f78f							; Render the third layer (it's really ugly, at 281 cycles)
      2  f78f
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f78f					      INCLUDE	"include/ands_3.h"
      1  f78f							; The AND constants for render layer 3
      2  f78f
      3  f78f		       00 80	   AND_W3S1P1 =	%10000000
      4  f78f		       00 c0	   AND_W3S2P1 =	%11000000
      5  f78f
      6  f78f		       00 fc	   AND_W3S0P1 =	%11111100
      7  f78f		       00 02	   AND_W3S1P2 =	%00000010
      8  f78f		       00 03	   AND_W3S2P2 =	%00000011
      9  f78f
     10  f78f		       00 03	   AND_W3S0P2 =	%00000011
     11  f78f		       00 0f	   AND_W3S0P3 =	%00001111
     12  f78f		       00 10	   AND_W3S1P3 =	%00010000
     13  f78f		       00 30	   AND_W3S2P3 =	%00110000
     14  f78f
     15  f78f		       00 f0	   AND_W3S0P4 =	%11110000
     16  f78f		       00 30	   AND_W3S0P5 =	%00110000
     17  f78f
     18  f78f		       00 c0	   AND_W3S0P6 =	%11000000
     19  f78f		       00 f0	   AND_W3S0P7 =	%11110000
     20  f78f		       00 20	   AND_W3S1P4 =	%00100000
     21  f78f		       00 30	   AND_W3S2P4 =	%00110000
     22  f78f
     23  f78f		       00 0f	   AND_W3S0P8 =	%00001111
     24  f78f		       00 03	   AND_W3S0P9 =	%00000011
     25  f78f		       00 10	   AND_W3S1P5 =	%00010000
     26  f78f		       00 30	   AND_W3S2P5 =	%00110000
     27  f78f
     28  f78f		       00 02	   AND_W3S1P6 =	%00000010
     29  f78f		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f78f
      0  f78f					      Y_POS_ADV_AG		; 35 cycles
      1  f78f
      2  f78f		       98		      TYA
      3  f790		       18		      CLC
      4  f791		       65 ae		      ADC	yGain
      5  f793		       65 ac		      ADC	xGain
      6  f795		       38		      SEC
      7  f796		       e5 af		      SBC	yLoss
      8  f798		       e5 ad		      SBC	xLoss
      9  f79a		       a8		      TAY
     10  f79b
      6  f79b		       b1 b9		      LDA	(mapPtr),Y
      7  f79d		       29 03		      AND	#AND_W3S2P6
      8  f79f		       85 a9		      STA	shadow3eb
      9  f7a1		       29 02		      AND	#AND_W3S1P6
     10  f7a3		       85 9a		      STA	shadow3ea
     11  f7a5
      0  f7a5					      X_POS_LOS		; 38 cycles
      1  f7a5
      2  f7a5		       98		      TYA
      3  f7a6		       18		      CLC
      4  f7a7		       65 ad		      ADC	xLoss
      5  f7a9		       38		      SEC
      6  f7aa		       e5 ac		      SBC	xGain
      7  f7ac		       a8		      TAY
      8  f7ad
     13  f7ad		       b1 b9		      LDA	(mapPtr),Y
     14  f7af		       aa		      TAX
     15  f7b0		       29 0f		      AND	#AND_W3S0P8
     16  f7b2		       85 8d		      STA	wall3d
     17  f7b4		       29 03		      AND	#AND_W3S0P9
     18  f7b6		       85 8e		      STA	wall3e
     19  f7b8		       8a		      TXA
     20  f7b9		       29 30		      AND	#AND_W3S2P5
     21  f7bb		       85 a8		      STA	shadow3db
     22  f7bd		       29 10		      AND	#AND_W3S1P5
     23  f7bf		       85 99		      STA	shadow3da
     24  f7c1
      0  f7c1					      X_POS_LOS		; 46 cycles
      1  f7c1
      2  f7c1		       98		      TYA
      3  f7c2		       18		      CLC
      4  f7c3		       65 ad		      ADC	xLoss
      5  f7c5		       38		      SEC
      6  f7c6		       e5 ac		      SBC	xGain
      7  f7c8		       a8		      TAY
      8  f7c9
     26  f7c9		       b1 b9		      LDA	(mapPtr),Y
     27  f7cb		       aa		      TAX
     28  f7cc		       29 f0		      AND	#AND_W3S0P7
     29  f7ce		       05 8d		      ORA	wall3d
     30  f7d0		       85 8d		      STA	wall3d
     31  f7d2		       29 c0		      AND	#AND_W3S0P6
     32  f7d4		       85 8c		      STA	wall3c
     33  f7d6		       8a		      TXA
     34  f7d7		       29 30		      AND	#AND_W3S2P4
     35  f7d9		       85 a7		      STA	shadow3cb
     36  f7db		       29 20		      AND	#AND_W3S1P4
     37  f7dd		       85 98		      STA	shadow3ca
     38  f7df
      0  f7df					      X_POS_LOS		; 32 cycles
      1  f7df
      2  f7df		       98		      TYA
      3  f7e0		       18		      CLC
      4  f7e1		       65 ad		      ADC	xLoss
      5  f7e3		       38		      SEC
      6  f7e4		       e5 ac		      SBC	xGain
      7  f7e6		       a8		      TAY
      8  f7e7
     40  f7e7		       b1 b9		      LDA	(mapPtr),Y
     41  f7e9		       29 f0		      AND	#AND_W3S0P4
     42  f7eb		       85 8b		      STA	wall3b
     43  f7ed		       29 30		      AND	#AND_W3S0P5
     44  f7ef		       05 8c		      ORA	wall3c
     45  f7f1		       85 8c		      STA	wall3c
     46  f7f3
      0  f7f3					      X_POS_LOS		; 46 cycles
      1  f7f3
      2  f7f3		       98		      TYA
      3  f7f4		       18		      CLC
      4  f7f5		       65 ad		      ADC	xLoss
      5  f7f7		       38		      SEC
      6  f7f8		       e5 ac		      SBC	xGain
      7  f7fa		       a8		      TAY
      8  f7fb
     48  f7fb		       b1 b9		      LDA	(mapPtr),Y
     49  f7fd		       aa		      TAX
     50  f7fe		       29 0f		      AND	#AND_W3S0P3
     51  f800		       05 8b		      ORA	wall3b
     52  f802		       85 8b		      STA	wall3b
     53  f804		       29 03		      AND	#AND_W3S0P2
     54  f806		       85 8a		      STA	wall3a
     55  f808		       8a		      TXA
     56  f809		       29 30		      AND	#AND_W3S2P3
     57  f80b		       85 a6		      STA	shadow3bb
     58  f80d		       29 10		      AND	#AND_W3S1P3
     59  f80f		       85 97		      STA	shadow3ba
     60  f811
      0  f811					      X_POS_LOS		; 41 cycles
      1  f811
      2  f811		       98		      TYA
      3  f812		       18		      CLC
      4  f813		       65 ad		      ADC	xLoss
      5  f815		       38		      SEC
      6  f816		       e5 ac		      SBC	xGain
      7  f818		       a8		      TAY
      8  f819
     62  f819		       b1 b9		      LDA	(mapPtr),Y
     63  f81b		       aa		      TAX
     64  f81c		       29 fc		      AND	#AND_W3S0P1
     65  f81e		       05 8a		      ORA	wall3a
     66  f820		       85 8a		      STA	wall3a
     67  f822		       8a		      TXA
     68  f823		       29 03		      AND	#AND_W3S2P2
     69  f825		       85 a5		      STA	shadow3ab
     70  f827		       29 02		      AND	#AND_W3S1P2
     71  f829		       85 96		      STA	shadow3aa
     72  f82b
      0  f82b					      X_POS_LOS		; 35 cycles
      1  f82b
      2  f82b		       98		      TYA
      3  f82c		       18		      CLC
      4  f82d		       65 ad		      ADC	xLoss
      5  f82f		       38		      SEC
      6  f830		       e5 ac		      SBC	xGain
      7  f832		       a8		      TAY
      8  f833
     74  f833		       b1 b9		      LDA	(mapPtr),Y
     75  f835		       29 c0		      AND	#AND_W3S2P1
     76  f837		       05 a5		      ORA	shadow3ab
     77  f839		       85 a5		      STA	shadow3ab
     78  f83b		       29 80		      AND	#AND_W3S1P1
     79  f83d		       05 96		      ORA	shadow3aa
     80  f83f		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f841
     13  f841		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f843					      INCLUDE	"scrend.asm"
      1  f843							; VePseu's screen renderer
      2  f843
      3  f843					      SUBROUTINE
      4  f843
      5  f843		       a2 00		      LDX	#INDEXINIT	; 2 cycles
      6  f845
      7  f845				   .loop		; Totals at 909 cycles
      8  f845
      9  f845		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     10  f847		       15 80		      ORA	wall1,X
     11  f849		       15 9b		      ORA	shadow1a,X
     12  f84b		       55 9b		      EOR	shadow1a,X
     13  f84d		       95 85		      STA	wall2a,X
     14  f84f
     15  f84f		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     16  f851		       15 9b		      ORA	shadow1a,X
     17  f853		       15 85		      ORA	wall2a,X
     18  f855		       55 85		      EOR	wall2a,X
     19  f857		       95 91		      STA	shadow2aa,X
     20  f859
     21  f859		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     22  f85b		       15 9b		      ORA	shadow1a,X
     23  f85d		       15 85		      ORA	wall2a,X
     24  f85f		       55 85		      EOR	wall2a,X
     25  f861		       95 a0		      STA	shadow2ab,X
     26  f863
     27  f863		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     28  f864		       e0 0a		      CPX	#WALLCNT
     29  f866		       d0 dd		      BNE	.loop
     30  f868
     31  f868		       a2 ff		      LDX	#FULLWALL
     32  f86a
     33  f86a		       8a		      TXA
     34  f86b		       45 a5		      EOR	shadow3ab
     35  f86d		       85 8f		      STA	wall4a
     36  f86f
     37  f86f		       8a		      TXA
     38  f870		       45 a6		      EOR	shadow3bb
     39  f872		       85 90		      STA	wall4b
     40  f874
     41  f874		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     45  f876
     46  f876
     47  f876							; Tell the draw code to draw carl...
     48  f876
     49  f876		       a9 78		      LDA	#<carl
     50  f878		       85 bb		      STA	spriteAddrH
     51  f87a		       a9 f6		      LDA	#>carl
     52  f87c		       85 bc		      STA	spriteAddrL
     53  f87e		       a9 0b		      LDA	#carlH
     54  f880		       85 bd		      STA	spriteHeight
     55  f882
     56  f882		       a9 0e		      LDA	#14	; Color him...
     57  f884		       85 06		      STA	COLUP0
     58  f886
     59  f886		       a6 be		      LDX	spritePosY	; And roll him accross the screen for some reason
     60  f888		       e8		      INX
     61  f889							;STX spritePosY
     62  f889
     63  f889							; Pad!
     64  f889
      0  f889					      PAD	UPPAD_LIMIT + 2
      1  f889
      2  f889				   .SCANLINES SET	UPPAD_LIMIT + 2
      3  f889
      4  f889		       a2 11		      LDX	#.SCANLINES
      5  f88b
      6  f88b				   .loop
      7  f88b		       85 02		      STA	WSYNC
      8  f88d
      9  f88d		       ca		      DEX
     10  f88e		       d0 fb		      BNE	.loop
     11  f890
     66  f890
     67  f890							; Draw everything
     68  f890
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  f890					      INCLUDE	"dispkern.asm"
      1  f890							; VePseu's display kernel
      2  f890
      3  f890		       4c 93 f8 	      JMP	drawStart
      4  f893
      5  f893							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  f893							;
      7  f893							; dc_w1s1.asm
      8  f893							; |   | |
      9  f893							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  f893							; |   |
     11  f893							; |   |- The wall it draws
     12  f893							; |
     13  f893							; |- Draw-code identifies
     14  f893							;
     15  f893							; See GLOSSARY.TXT for definitions of vague words
     16  f893
     17  f893				   drawStart
     18  f893
     19  f893		       a4 be		      LDY	spritePosY	; The Y register is expected to hold the sprite's Y position
     20  f895
     21  f895							; Also note that if the sprite position = 0 then the sprite
     22  f895							; will not be drawn
     23  f895
     24  f895
     25  f895		       b8		      CLV		; The overflow flag is used to determine which half of the screen is
     26  f896							; being drawn, allowing code to be easily re-used. This requires that
     27  f896							; the overflow flag be set to zero at start, otherwise things won't turn
     28  f896							; out so well...
     29  f896
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  f896					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  f896							; The draw code for the 1st wall and shadow
      2  f896
      3  f896				   dc_w1s1    SUBROUTINE
      4  f896
      5  f896		       a2 00		      LDX	#INDEXINIT
      6  f898		       4c a8 f8 	      JMP	.loop
      7  f89b
      8  f89b				   .noSprite_1
      9  f89b							; Depending on the location in the program the branch here might cross a
     10  f89b							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  f89b							; delay simply check if the page number (the MSB of the address) is
     12  f89b							; different between the branch and it's destination
     13  f89b					      IF	>.branchPoint_1 == >.noSprite_1
      0  f89b					      DELAY	11
      1  f89b				   .CYCLES    SET	11
      2  f89b
      3  f89b					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f89b		       ea		      NOP
      5  f89b				   .CYCLES    SET	.CYCLES - 2
      6  f89c					      ENDIF
      7  f89c
      8  f89c					      IF	[.CYCLES - 2] / 5
      9  f89c					      REPEAT	.CYCLES / 5
     10  f89c		       e6 30		      INC	DUMP
     11  f89e					      REPEND
     12  f89e				   .CYCLES    SET	.CYCLES % 5
     13  f89e					      ENDIF
     14  f89e
     15  f89e					      IF	.CYCLES % 3 == 1
     16  f89e		       ea		      NOP
     17  f89e				   .CYCLES    SET	.CYCLES - 2
     18  f89f					      ENDIF
     19  f89f
     20  f89f				  -	      REPEAT	.CYCLES / 3
     21  f89f				  -	      STA	DUMP
     22  f89f					      REPEND
     23  f89f
     24  f89f				   .CYCLES    SET	.CYCLES % 3
     25  f89f
     26  f89f					      REPEAT	.CYCLES / 2
     27  f89f		       ea		      NOP
     28  f8a0					      REPEND
     29  f8a0
     30  f8a0				   .CYCLES    SET	.CYCLES % 2
     31  f8a0
     32  f8a0				  -	      IF	.CYCLES
     33  f8a0				  -	      ERR
     34  f8a0					      ENDIF
     35  f8a0
     15  f8a0				  -	      ELSE
     16  f8a0				  -	      DELAY	10
     17  f8a0					      ENDIF
     18  f8a0		       4c be f8 	      JMP	.noSprite_ret
     19  f8a3
     20  f8a3				   .noSprite_2
     21  f8a3					      IF	>.branchPoint_2 == >.noSprite_2
      0  f8a3					      DELAY	4
      1  f8a3				   .CYCLES    SET	4
      2  f8a3
      3  f8a3				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8a3				  -	      NOP
      5  f8a3				  -.CYCLES    SET	.CYCLES - 2
      6  f8a3					      ENDIF
      7  f8a3
      8  f8a3				  -	      IF	[.CYCLES - 2] / 5
      9  f8a3				  -	      REPEAT	.CYCLES / 5
     10  f8a3				  -	      INC	DUMP
     11  f8a3				  -	      REPEND
     12  f8a3				  -.CYCLES    SET	.CYCLES % 5
     13  f8a3					      ENDIF
     14  f8a3
     15  f8a3					      IF	.CYCLES % 3 == 1
     16  f8a3		       ea		      NOP
     17  f8a3				   .CYCLES    SET	.CYCLES - 2
     18  f8a4					      ENDIF
     19  f8a4
     20  f8a4				  -	      REPEAT	.CYCLES / 3
     21  f8a4				  -	      STA	DUMP
     22  f8a4					      REPEND
     23  f8a4
     24  f8a4				   .CYCLES    SET	.CYCLES % 3
     25  f8a4
     26  f8a4					      REPEAT	.CYCLES / 2
     27  f8a4		       ea		      NOP
     28  f8a5					      REPEND
     29  f8a5
     30  f8a5				   .CYCLES    SET	.CYCLES % 2
     31  f8a5
     32  f8a5				  -	      IF	.CYCLES
     33  f8a5				  -	      ERR
     34  f8a5					      ENDIF
     35  f8a5
     23  f8a5				  -	      ELSE
     24  f8a5				  -	      DELAY	3
     25  f8a5					      ENDIF
     26  f8a5		       4c be f8 	      JMP	.noSprite_ret
     27  f8a8
     28  f8a8				   .loop
     29  f8a8		       a5 b4		      LDA	wallColour
     30  f8aa		       85 02		      STA	WSYNC
     31  f8ac		       85 08		      STA	COLUPF
     32  f8ae		       a5 80		      LDA	wall1
     33  f8b0		       85 0e		      STA	PF1
     34  f8b2		       98		      TYA
     35  f8b3
     36  f8b3		       f0 e6		      BEQ	.noSprite_1
     37  f8b5				   .branchPoint_1
     38  f8b5		       88		      DEY
     39  f8b6		       c4 bd		      CPY	spriteHeight
     40  f8b8
     41  f8b8		       b0 e9		      BCS	.noSprite_2
     42  f8ba				   .branchPoint_2
     43  f8ba		       b1 bb		      LDA	(sprite),Y
     44  f8bc		       85 1b		      STA	GRP0
     45  f8be
     46  f8be				   .noSprite_ret
     47  f8be		       a5 80		      LDA	wall1
     48  f8c0		       85 0f		      STA	PF2
      0  f8c2					      DELAY	6
      1  f8c2				   .CYCLES    SET	6
      2  f8c2
      3  f8c2				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8c2				  -	      NOP
      5  f8c2				  -.CYCLES    SET	.CYCLES - 2
      6  f8c2					      ENDIF
      7  f8c2
      8  f8c2				  -	      IF	[.CYCLES - 2] / 5
      9  f8c2				  -	      REPEAT	.CYCLES / 5
     10  f8c2				  -	      INC	DUMP
     11  f8c2				  -	      REPEND
     12  f8c2				  -.CYCLES    SET	.CYCLES % 5
     13  f8c2					      ENDIF
     14  f8c2
     15  f8c2				  -	      IF	.CYCLES % 3 == 1
     16  f8c2				  -	      NOP
     17  f8c2				  -.CYCLES    SET	.CYCLES - 2
     18  f8c2					      ENDIF
     19  f8c2
     20  f8c2					      REPEAT	.CYCLES / 3
     21  f8c2		       85 30		      STA	DUMP
     20  f8c2					      REPEND
     21  f8c4		       85 30		      STA	DUMP
     22  f8c6					      REPEND
     23  f8c6
     24  f8c6				   .CYCLES    SET	.CYCLES % 3
     25  f8c6
     26  f8c6				  -	      REPEAT	.CYCLES / 2
     27  f8c6				  -	      NOP
     28  f8c6					      REPEND
     29  f8c6
     30  f8c6				   .CYCLES    SET	.CYCLES % 2
     31  f8c6
     32  f8c6				  -	      IF	.CYCLES
     33  f8c6				  -	      ERR
     34  f8c6					      ENDIF
     35  f8c6
     50  f8c6		       85 0d		      STA	PF0
      0  f8c8					      DELAY	19
      1  f8c8				   .CYCLES    SET	19
      2  f8c8
      3  f8c8				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8c8				  -	      NOP
      5  f8c8				  -.CYCLES    SET	.CYCLES - 2
      6  f8c8					      ENDIF
      7  f8c8
      8  f8c8					      IF	[.CYCLES - 2] / 5
      9  f8c8					      REPEAT	.CYCLES / 5
     10  f8c8		       e6 30		      INC	DUMP
      9  f8c8					      REPEND
     10  f8ca		       e6 30		      INC	DUMP
      9  f8ca					      REPEND
     10  f8cc		       e6 30		      INC	DUMP
     11  f8ce					      REPEND
     12  f8ce				   .CYCLES    SET	.CYCLES % 5
     13  f8ce					      ENDIF
     14  f8ce
     15  f8ce					      IF	.CYCLES % 3 == 1
     16  f8ce		       ea		      NOP
     17  f8ce				   .CYCLES    SET	.CYCLES - 2
     18  f8cf					      ENDIF
     19  f8cf
     20  f8cf				  -	      REPEAT	.CYCLES / 3
     21  f8cf				  -	      STA	DUMP
     22  f8cf					      REPEND
     23  f8cf
     24  f8cf				   .CYCLES    SET	.CYCLES % 3
     25  f8cf
     26  f8cf					      REPEAT	.CYCLES / 2
     27  f8cf		       ea		      NOP
     28  f8d0					      REPEND
     29  f8d0
     30  f8d0				   .CYCLES    SET	.CYCLES % 2
     31  f8d0
     32  f8d0				  -	      IF	.CYCLES
     33  f8d0				  -	      ERR
     34  f8d0					      ENDIF
     35  f8d0
     52  f8d0		       a9 00		      LDA	#NULL
     53  f8d2		       85 0f		      STA	PF2
     54  f8d4		       85 0d		      STA	PF0
     55  f8d6
     56  f8d6		       85 02		      STA	WSYNC
     57  f8d8		       a5 b5		      LDA	shadowColour
     58  f8da		       85 08		      STA	COLUPF
     59  f8dc		       a5 9b		      LDA	shadow1a
     60  f8de		       3d 00 f6 	      AND	and_1a,X
     61  f8e1		       85 0e		      STA	PF1
     62  f8e3		       a5 9c		      LDA	shadow1b
     63  f8e5		       3d 1e f6 	      AND	and_1b,X
     64  f8e8		       85 0f		      STA	PF2
      0  f8ea					      DELAY	9
      1  f8ea				   .CYCLES    SET	9
      2  f8ea
      3  f8ea				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8ea				  -	      NOP
      5  f8ea				  -.CYCLES    SET	.CYCLES - 2
      6  f8ea					      ENDIF
      7  f8ea
      8  f8ea					      IF	[.CYCLES - 2] / 5
      9  f8ea					      REPEAT	.CYCLES / 5
     10  f8ea		       e6 30		      INC	DUMP
     11  f8ec					      REPEND
     12  f8ec				   .CYCLES    SET	.CYCLES % 5
     13  f8ec					      ENDIF
     14  f8ec
     15  f8ec					      IF	.CYCLES % 3 == 1
     16  f8ec		       ea		      NOP
     17  f8ec				   .CYCLES    SET	.CYCLES - 2
     18  f8ed					      ENDIF
     19  f8ed
     20  f8ed				  -	      REPEAT	.CYCLES / 3
     21  f8ed				  -	      STA	DUMP
     22  f8ed					      REPEND
     23  f8ed
     24  f8ed				   .CYCLES    SET	.CYCLES % 3
     25  f8ed
     26  f8ed					      REPEAT	.CYCLES / 2
     27  f8ed		       ea		      NOP
     28  f8ee					      REPEND
     29  f8ee
     30  f8ee				   .CYCLES    SET	.CYCLES % 2
     31  f8ee
     32  f8ee				  -	      IF	.CYCLES
     33  f8ee				  -	      ERR
     34  f8ee					      ENDIF
     35  f8ee
     66  f8ee		       a5 9e		      LDA	shadow1d
     67  f8f0		       3d 3c f6 	      AND	and_1c,X
     68  f8f3		       85 0e		      STA	PF1
     69  f8f5		       a5 9f		      LDA	shadow1e
     70  f8f7		       3d 5a f6 	      AND	and_1d,X
     71  f8fa		       85 0f		      STA	PF2
     72  f8fc
     73  f8fc		       e8		      INX
     74  f8fd		       e0 1e		      CPX	#UPPRWALL_S
     75  f8ff		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  f901					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  f901							; The second wall and it's first shadow
      2  f901
      3  f901				   dc_w2s1    SUBROUTINE
      4  f901
      5  f901		       a2 03		      LDX	#PIXH
      6  f903		       4c 13 f9 	      JMP	.loop
      7  f906
      8  f906				   .noSprite_1
      9  f906					      IF	>.branchPoint_1 == >.noSprite_1
      0  f906					      DELAY	11
      1  f906				   .CYCLES    SET	11
      2  f906
      3  f906					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f906		       ea		      NOP
      5  f906				   .CYCLES    SET	.CYCLES - 2
      6  f907					      ENDIF
      7  f907
      8  f907					      IF	[.CYCLES - 2] / 5
      9  f907					      REPEAT	.CYCLES / 5
     10  f907		       e6 30		      INC	DUMP
     11  f909					      REPEND
     12  f909				   .CYCLES    SET	.CYCLES % 5
     13  f909					      ENDIF
     14  f909
     15  f909					      IF	.CYCLES % 3 == 1
     16  f909		       ea		      NOP
     17  f909				   .CYCLES    SET	.CYCLES - 2
     18  f90a					      ENDIF
     19  f90a
     20  f90a				  -	      REPEAT	.CYCLES / 3
     21  f90a				  -	      STA	DUMP
     22  f90a					      REPEND
     23  f90a
     24  f90a				   .CYCLES    SET	.CYCLES % 3
     25  f90a
     26  f90a					      REPEAT	.CYCLES / 2
     27  f90a		       ea		      NOP
     28  f90b					      REPEND
     29  f90b
     30  f90b				   .CYCLES    SET	.CYCLES % 2
     31  f90b
     32  f90b				  -	      IF	.CYCLES
     33  f90b				  -	      ERR
     34  f90b					      ENDIF
     35  f90b
     11  f90b				  -	      ELSE
     12  f90b				  -	      DELAY	10
     13  f90b					      ENDIF
     14  f90b		       4c 29 f9 	      JMP	.noSprite_ret
     15  f90e
     16  f90e				   .noSprite_2
     17  f90e					      IF	>.branchPoint_2 == >.noSprite_2
      0  f90e					      DELAY	4
      1  f90e				   .CYCLES    SET	4
      2  f90e
      3  f90e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f90e				  -	      NOP
      5  f90e				  -.CYCLES    SET	.CYCLES - 2
      6  f90e					      ENDIF
      7  f90e
      8  f90e				  -	      IF	[.CYCLES - 2] / 5
      9  f90e				  -	      REPEAT	.CYCLES / 5
     10  f90e				  -	      INC	DUMP
     11  f90e				  -	      REPEND
     12  f90e				  -.CYCLES    SET	.CYCLES % 5
     13  f90e					      ENDIF
     14  f90e
     15  f90e					      IF	.CYCLES % 3 == 1
     16  f90e		       ea		      NOP
     17  f90e				   .CYCLES    SET	.CYCLES - 2
     18  f90f					      ENDIF
     19  f90f
     20  f90f				  -	      REPEAT	.CYCLES / 3
     21  f90f				  -	      STA	DUMP
     22  f90f					      REPEND
     23  f90f
     24  f90f				   .CYCLES    SET	.CYCLES % 3
     25  f90f
     26  f90f					      REPEAT	.CYCLES / 2
     27  f90f		       ea		      NOP
     28  f910					      REPEND
     29  f910
     30  f910				   .CYCLES    SET	.CYCLES % 2
     31  f910
     32  f910				  -	      IF	.CYCLES
     33  f910				  -	      ERR
     34  f910					      ENDIF
     35  f910
     19  f910				  -	      ELSE
     20  f910				  -	      DELAY	3
     21  f910					      ENDIF
     22  f910		       4c 29 f9 	      JMP	.noSprite_ret
     23  f913
     24  f913				   .loop
     25  f913		       a5 b4		      LDA	wallColour
     26  f915		       85 02		      STA	WSYNC
     27  f917				   .joinIn
     28  f917		       85 08		      STA	COLUPF
     29  f919		       a5 85		      LDA	wall2a
     30  f91b		       85 0e		      STA	PF1
     31  f91d		       98		      TYA
     32  f91e
     33  f91e		       f0 e6		      BEQ	.noSprite_1
     34  f920				   .branchPoint_1
     35  f920		       88		      DEY
     36  f921		       c4 bd		      CPY	spriteHeight
     37  f923
     38  f923		       b0 e9		      BCS	.noSprite_2
     39  f925				   .branchPoint_2
     40  f925		       b1 bb		      LDA	(sprite),Y
     41  f927		       85 1b		      STA	GRP0
     42  f929
     43  f929				   .noSprite_ret
     44  f929		       a5 86		      LDA	wall2b
     45  f92b		       85 0f		      STA	PF2
     46  f92d
     47  f92d		       a5 87		      LDA	wall2c
     48  f92f		       85 0d		      STA	PF0
     49  f931		       a5 88		      LDA	wall2d
     50  f933		       85 0e		      STA	PF1
     51  f935		       a5 89		      LDA	wall2e
     52  f937		       85 0f		      STA	PF2
     53  f939		       a9 00		      LDA	#NULL
      0  f93b					      DELAY	10
      1  f93b				   .CYCLES    SET	10
      2  f93b
      3  f93b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f93b				  -	      NOP
      5  f93b				  -.CYCLES    SET	.CYCLES - 2
      6  f93b					      ENDIF
      7  f93b
      8  f93b					      IF	[.CYCLES - 2] / 5
      9  f93b					      REPEAT	.CYCLES / 5
     10  f93b		       e6 30		      INC	DUMP
      9  f93b					      REPEND
     10  f93d		       e6 30		      INC	DUMP
     11  f93f					      REPEND
     12  f93f				   .CYCLES    SET	.CYCLES % 5
     13  f93f					      ENDIF
     14  f93f
     15  f93f				  -	      IF	.CYCLES % 3 == 1
     16  f93f				  -	      NOP
     17  f93f				  -.CYCLES    SET	.CYCLES - 2
     18  f93f					      ENDIF
     19  f93f
     20  f93f				  -	      REPEAT	.CYCLES / 3
     21  f93f				  -	      STA	DUMP
     22  f93f					      REPEND
     23  f93f
     24  f93f				   .CYCLES    SET	.CYCLES % 3
     25  f93f
     26  f93f				  -	      REPEAT	.CYCLES / 2
     27  f93f				  -	      NOP
     28  f93f					      REPEND
     29  f93f
     30  f93f				   .CYCLES    SET	.CYCLES % 2
     31  f93f
     32  f93f				  -	      IF	.CYCLES
     33  f93f				  -	      ERR
     34  f93f					      ENDIF
     35  f93f
     55  f93f		       85 0f		      STA	PF2
     56  f941		       85 0d		      STA	PF0
     57  f943
     58  f943		       85 02		      STA	WSYNC	; Draw the shadow
     59  f945		       a5 b5		      LDA	shadowColour
     60  f947		       85 08		      STA	COLUPF
     61  f949		       a5 91		      LDA	shadow2aa
     62  f94b		       05 9b		      ORA	shadow1a
     63  f94d		       85 0e		      STA	PF1
     64  f94f		       a5 92		      LDA	shadow2ba
     65  f951		       05 9c		      ORA	shadow1b
     66  f953		       85 0f		      STA	PF2
     67  f955		       a5 93		      LDA	shadow2ca
     68  f957		       85 0d		      STA	PF0
     69  f959		       a5 94		      LDA	shadow2da
     70  f95b		       05 9e		      ORA	shadow1d
     71  f95d		       85 0e		      STA	PF1
     72  f95f		       a5 95		      LDA	shadow2ea
     73  f961		       05 9f		      ORA	shadow1e
     74  f963		       85 0f		      STA	PF2
     75  f965		       a9 00		      LDA	#NULL
     76  f967		       85 0d		      STA	PF0
     77  f969
     78  f969		       ca		      DEX
     79  f96a		       d0 a7		      BNE	.loop
     80  f96c
     81  f96c		       50 03		      BVC	dc_w2s2_delayed
     82  f96e		       4c 37 fb 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  f971					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  f971							; The second wall and it's second shadow
      2  f971
      3  f971				   dc_w2s2_delayed
      0  f971					      DELAY	2
      1  f971				   .CYCLES    SET	2
      2  f971
      3  f971				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f971				  -	      NOP
      5  f971				  -.CYCLES    SET	.CYCLES - 2
      6  f971					      ENDIF
      7  f971
      8  f971				  -	      IF	[.CYCLES - 2] / 5
      9  f971				  -	      REPEAT	.CYCLES / 5
     10  f971				  -	      INC	DUMP
     11  f971				  -	      REPEND
     12  f971				  -.CYCLES    SET	.CYCLES % 5
     13  f971					      ENDIF
     14  f971
     15  f971				  -	      IF	.CYCLES % 3 == 1
     16  f971				  -	      NOP
     17  f971				  -.CYCLES    SET	.CYCLES - 2
     18  f971					      ENDIF
     19  f971
     20  f971				  -	      REPEAT	.CYCLES / 3
     21  f971				  -	      STA	DUMP
     22  f971					      REPEND
     23  f971
     24  f971				   .CYCLES    SET	.CYCLES % 3
     25  f971
     26  f971					      REPEAT	.CYCLES / 2
     27  f971		       ea		      NOP
     28  f972					      REPEND
     29  f972
     30  f972				   .CYCLES    SET	.CYCLES % 2
     31  f972
     32  f972				  -	      IF	.CYCLES
     33  f972				  -	      ERR
     34  f972					      ENDIF
     35  f972
      5  f972				   dc_w2s2    SUBROUTINE
      6  f972
      7  f972		       a2 03		      LDX	#PIXH
      8  f974
      9  f974				   .loop
     10  f974		       a5 b4		      LDA	wallColour
     11  f976		       85 02		      STA	WSYNC
     12  f978		       85 08		      STA	COLUPF
     13  f97a		       a5 85		      LDA	wall2a
     14  f97c		       85 0e		      STA	PF1
     15  f97e		       98		      TYA
     16  f97f
     17  f97f		       f0 51		      BEQ	.noSprite_1
     18  f981				   .branchPoint_1
     19  f981		       88		      DEY
     20  f982		       c4 bd		      CPY	spriteHeight
     21  f984
     22  f984		       b0 54		      BCS	.noSprite_2
     23  f986				   .branchPoint_2
     24  f986		       b1 bb		      LDA	(sprite),Y
     25  f988		       85 1b		      STA	GRP0
     26  f98a
     27  f98a				   .noSprite_ret
     28  f98a		       a5 86		      LDA	wall2b
     29  f98c		       85 0f		      STA	PF2
     30  f98e
     31  f98e		       a5 87		      LDA	wall2c
     32  f990		       85 0d		      STA	PF0
     33  f992		       a5 88		      LDA	wall2d
     34  f994		       85 0e		      STA	PF1
     35  f996		       a5 89		      LDA	wall2e
     36  f998		       85 0f		      STA	PF2
     37  f99a		       a9 00		      LDA	#NULL
      0  f99c					      DELAY	10
      1  f99c				   .CYCLES    SET	10
      2  f99c
      3  f99c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f99c				  -	      NOP
      5  f99c				  -.CYCLES    SET	.CYCLES - 2
      6  f99c					      ENDIF
      7  f99c
      8  f99c					      IF	[.CYCLES - 2] / 5
      9  f99c					      REPEAT	.CYCLES / 5
     10  f99c		       e6 30		      INC	DUMP
      9  f99c					      REPEND
     10  f99e		       e6 30		      INC	DUMP
     11  f9a0					      REPEND
     12  f9a0				   .CYCLES    SET	.CYCLES % 5
     13  f9a0					      ENDIF
     14  f9a0
     15  f9a0				  -	      IF	.CYCLES % 3 == 1
     16  f9a0				  -	      NOP
     17  f9a0				  -.CYCLES    SET	.CYCLES - 2
     18  f9a0					      ENDIF
     19  f9a0
     20  f9a0				  -	      REPEAT	.CYCLES / 3
     21  f9a0				  -	      STA	DUMP
     22  f9a0					      REPEND
     23  f9a0
     24  f9a0				   .CYCLES    SET	.CYCLES % 3
     25  f9a0
     26  f9a0				  -	      REPEAT	.CYCLES / 2
     27  f9a0				  -	      NOP
     28  f9a0					      REPEND
     29  f9a0
     30  f9a0				   .CYCLES    SET	.CYCLES % 2
     31  f9a0
     32  f9a0				  -	      IF	.CYCLES
     33  f9a0				  -	      ERR
     34  f9a0					      ENDIF
     35  f9a0
     39  f9a0		       85 0f		      STA	PF2
     40  f9a2		       85 0d		      STA	PF0
     41  f9a4
     42  f9a4		       85 02		      STA	WSYNC	; Draw the shadow
     43  f9a6		       a5 b5		      LDA	shadowColour
     44  f9a8		       85 08		      STA	COLUPF
     45  f9aa		       a5 a0		      LDA	shadow2ab
     46  f9ac		       05 9b		      ORA	shadow1a
     47  f9ae		       85 0e		      STA	PF1
     48  f9b0		       a5 a1		      LDA	shadow2bb
     49  f9b2		       05 9c		      ORA	shadow1b
     50  f9b4		       85 0f		      STA	PF2
     51  f9b6		       a5 a2		      LDA	shadow2cb
     52  f9b8		       85 0d		      STA	PF0
     53  f9ba		       a5 a3		      LDA	shadow2db
     54  f9bc		       05 9e		      ORA	shadow1d
     55  f9be		       85 0e		      STA	PF1
     56  f9c0		       a5 a4		      LDA	shadow2eb
     57  f9c2		       05 9f		      ORA	shadow1e
     58  f9c4		       85 0f		      STA	PF2
     59  f9c6		       a9 00		      LDA	#NULL
     60  f9c8		       85 0d		      STA	PF0
     61  f9ca
     62  f9ca		       ca		      DEX
     63  f9cb		       d0 a7		      BNE	.loop
     64  f9cd
     65  f9cd		       50 10		      BVC	dc_w3s1_delayed
     66  f9cf		       4c 01 f9 	      JMP	dc_w2s1
     67  f9d2
     68  f9d2				   .noSprite_1
     69  f9d2					      IF	>.branchPoint_1 == >.noSprite_1
      0  f9d2					      DELAY	11
      1  f9d2				   .CYCLES    SET	11
      2  f9d2
      3  f9d2					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9d2		       ea		      NOP
      5  f9d2				   .CYCLES    SET	.CYCLES - 2
      6  f9d3					      ENDIF
      7  f9d3
      8  f9d3					      IF	[.CYCLES - 2] / 5
      9  f9d3					      REPEAT	.CYCLES / 5
     10  f9d3		       e6 30		      INC	DUMP
     11  f9d5					      REPEND
     12  f9d5				   .CYCLES    SET	.CYCLES % 5
     13  f9d5					      ENDIF
     14  f9d5
     15  f9d5					      IF	.CYCLES % 3 == 1
     16  f9d5		       ea		      NOP
     17  f9d5				   .CYCLES    SET	.CYCLES - 2
     18  f9d6					      ENDIF
     19  f9d6
     20  f9d6				  -	      REPEAT	.CYCLES / 3
     21  f9d6				  -	      STA	DUMP
     22  f9d6					      REPEND
     23  f9d6
     24  f9d6				   .CYCLES    SET	.CYCLES % 3
     25  f9d6
     26  f9d6					      REPEAT	.CYCLES / 2
     27  f9d6		       ea		      NOP
     28  f9d7					      REPEND
     29  f9d7
     30  f9d7				   .CYCLES    SET	.CYCLES % 2
     31  f9d7
     32  f9d7				  -	      IF	.CYCLES
     33  f9d7				  -	      ERR
     34  f9d7					      ENDIF
     35  f9d7
     71  f9d7				  -	      ELSE
     72  f9d7				  -	      DELAY	10
     73  f9d7					      ENDIF
     74  f9d7		       4c 8a f9 	      JMP	.noSprite_ret
     75  f9da
     76  f9da				   .noSprite_2
     77  f9da					      IF	>.branchPoint_2 == >.noSprite_2
      0  f9da					      DELAY	4
      1  f9da				   .CYCLES    SET	4
      2  f9da
      3  f9da				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9da				  -	      NOP
      5  f9da				  -.CYCLES    SET	.CYCLES - 2
      6  f9da					      ENDIF
      7  f9da
      8  f9da				  -	      IF	[.CYCLES - 2] / 5
      9  f9da				  -	      REPEAT	.CYCLES / 5
     10  f9da				  -	      INC	DUMP
     11  f9da				  -	      REPEND
     12  f9da				  -.CYCLES    SET	.CYCLES % 5
     13  f9da					      ENDIF
     14  f9da
     15  f9da					      IF	.CYCLES % 3 == 1
     16  f9da		       ea		      NOP
     17  f9da				   .CYCLES    SET	.CYCLES - 2
     18  f9db					      ENDIF
     19  f9db
     20  f9db				  -	      REPEAT	.CYCLES / 3
     21  f9db				  -	      STA	DUMP
     22  f9db					      REPEND
     23  f9db
     24  f9db				   .CYCLES    SET	.CYCLES % 3
     25  f9db
     26  f9db					      REPEAT	.CYCLES / 2
     27  f9db		       ea		      NOP
     28  f9dc					      REPEND
     29  f9dc
     30  f9dc				   .CYCLES    SET	.CYCLES % 2
     31  f9dc
     32  f9dc				  -	      IF	.CYCLES
     33  f9dc				  -	      ERR
     34  f9dc					      ENDIF
     35  f9dc
     79  f9dc				  -	      ELSE
     80  f9dc				  -	      DELAY	3
     81  f9dc					      ENDIF
     82  f9dc		       4c 8a f9 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  f9df					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  f9df							; The third wall and it's first shadow
      2  f9df							; See GLOSSARY.TXT for definitions of vague words
      3  f9df
      4  f9df				   dc_w3s1_delayed
      0  f9df					      DELAY	2
      1  f9df				   .CYCLES    SET	2
      2  f9df
      3  f9df				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9df				  -	      NOP
      5  f9df				  -.CYCLES    SET	.CYCLES - 2
      6  f9df					      ENDIF
      7  f9df
      8  f9df				  -	      IF	[.CYCLES - 2] / 5
      9  f9df				  -	      REPEAT	.CYCLES / 5
     10  f9df				  -	      INC	DUMP
     11  f9df				  -	      REPEND
     12  f9df				  -.CYCLES    SET	.CYCLES % 5
     13  f9df					      ENDIF
     14  f9df
     15  f9df				  -	      IF	.CYCLES % 3 == 1
     16  f9df				  -	      NOP
     17  f9df				  -.CYCLES    SET	.CYCLES - 2
     18  f9df					      ENDIF
     19  f9df
     20  f9df				  -	      REPEAT	.CYCLES / 3
     21  f9df				  -	      STA	DUMP
     22  f9df					      REPEND
     23  f9df
     24  f9df				   .CYCLES    SET	.CYCLES % 3
     25  f9df
     26  f9df					      REPEAT	.CYCLES / 2
     27  f9df		       ea		      NOP
     28  f9e0					      REPEND
     29  f9e0
     30  f9e0				   .CYCLES    SET	.CYCLES % 2
     31  f9e0
     32  f9e0				  -	      IF	.CYCLES
     33  f9e0				  -	      ERR
     34  f9e0					      ENDIF
     35  f9e0
      6  f9e0				   dc_w3s1    SUBROUTINE
      7  f9e0
      8  f9e0		       a2 03		      LDX	#PIXH
      9  f9e2
     10  f9e2				   .loop
     11  f9e2		       a5 b4		      LDA	wallColour
     12  f9e4		       85 02		      STA	WSYNC
     13  f9e6		       85 08		      STA	COLUPF
     14  f9e8		       a5 8a		      LDA	wall3a
     15  f9ea		       85 0e		      STA	PF1
     16  f9ec		       98		      TYA
     17  f9ed
     18  f9ed		       f0 53		      BEQ	.noSprite_1
     19  f9ef				   .branchPoint_1
     20  f9ef		       88		      DEY
     21  f9f0		       c4 bd		      CPY	spriteHeight
     22  f9f2
     23  f9f2		       b0 55		      BCS	.noSprite_2
     24  f9f4				   .branchPoint_2
     25  f9f4		       b1 bb		      LDA	(sprite),Y
     26  f9f6		       85 1b		      STA	GRP0
     27  f9f8
     28  f9f8				   .noSprite_ret
     29  f9f8		       a5 8b		      LDA	wall3b
     30  f9fa		       85 0f		      STA	PF2
     31  f9fc
     32  f9fc		       a5 8c		      LDA	wall3c
     33  f9fe		       85 0d		      STA	PF0
     34  fa00		       a5 8d		      LDA	wall3d
     35  fa02		       85 0e		      STA	PF1
     36  fa04		       a5 8e		      LDA	wall3e
     37  fa06		       85 0f		      STA	PF2
     38  fa08		       a9 00		      LDA	#NULL
      0  fa0a					      DELAY	10
      1  fa0a				   .CYCLES    SET	10
      2  fa0a
      3  fa0a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa0a				  -	      NOP
      5  fa0a				  -.CYCLES    SET	.CYCLES - 2
      6  fa0a					      ENDIF
      7  fa0a
      8  fa0a					      IF	[.CYCLES - 2] / 5
      9  fa0a					      REPEAT	.CYCLES / 5
     10  fa0a		       e6 30		      INC	DUMP
      9  fa0a					      REPEND
     10  fa0c		       e6 30		      INC	DUMP
     11  fa0e					      REPEND
     12  fa0e				   .CYCLES    SET	.CYCLES % 5
     13  fa0e					      ENDIF
     14  fa0e
     15  fa0e				  -	      IF	.CYCLES % 3 == 1
     16  fa0e				  -	      NOP
     17  fa0e				  -.CYCLES    SET	.CYCLES - 2
     18  fa0e					      ENDIF
     19  fa0e
     20  fa0e				  -	      REPEAT	.CYCLES / 3
     21  fa0e				  -	      STA	DUMP
     22  fa0e					      REPEND
     23  fa0e
     24  fa0e				   .CYCLES    SET	.CYCLES % 3
     25  fa0e
     26  fa0e				  -	      REPEAT	.CYCLES / 2
     27  fa0e				  -	      NOP
     28  fa0e					      REPEND
     29  fa0e
     30  fa0e				   .CYCLES    SET	.CYCLES % 2
     31  fa0e
     32  fa0e				  -	      IF	.CYCLES
     33  fa0e				  -	      ERR
     34  fa0e					      ENDIF
     35  fa0e
     40  fa0e		       85 0f		      STA	PF2
     41  fa10		       85 0d		      STA	PF0
     42  fa12
     43  fa12		       85 02		      STA	WSYNC	; Draw the shadow
     44  fa14		       a5 b5		      LDA	shadowColour
     45  fa16		       85 08		      STA	COLUPF
     46  fa18		       a5 96		      LDA	shadow3aa
     47  fa1a		       05 a0		      ORA	shadow2ab
     48  fa1c		       85 0e		      STA	PF1
     49  fa1e		       a5 97		      LDA	shadow3ba
     50  fa20		       05 a1		      ORA	shadow2bb
     51  fa22		       85 0f		      STA	PF2
     52  fa24		       a5 98		      LDA	shadow3ca
     53  fa26		       05 a2		      ORA	shadow2cb
     54  fa28		       85 0d		      STA	PF0
     55  fa2a		       a5 99		      LDA	shadow3da
     56  fa2c		       05 a3		      ORA	shadow2db
     57  fa2e		       85 0e		      STA	PF1
     58  fa30		       a5 9a		      LDA	shadow3ea
     59  fa32		       05 a4		      ORA	shadow2eb
     60  fa34		       85 0f		      STA	PF2
     61  fa36		       a9 00		      LDA	#NULL
     62  fa38		       85 0d		      STA	PF0
     63  fa3a
     64  fa3a		       ca		      DEX
     65  fa3b		       d0 a5		      BNE	.loop
     66  fa3d
     67  fa3d		       50 0f		      BVC	dc_w3s2_delayed
     68  fa3f		       4c 72 f9 	      JMP	dc_w2s2
     69  fa42
     70  fa42				   .noSprite_1
     71  fa42				  -	      IF	>.branchPoint_1 == >.noSprite_1
     72  fa42				  -	      DELAY	11
     73  fa42					      ELSE
      0  fa42					      DELAY	10
      1  fa42				   .CYCLES    SET	10
      2  fa42
      3  fa42				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa42				  -	      NOP
      5  fa42				  -.CYCLES    SET	.CYCLES - 2
      6  fa42					      ENDIF
      7  fa42
      8  fa42					      IF	[.CYCLES - 2] / 5
      9  fa42					      REPEAT	.CYCLES / 5
     10  fa42		       e6 30		      INC	DUMP
      9  fa42					      REPEND
     10  fa44		       e6 30		      INC	DUMP
     11  fa46					      REPEND
     12  fa46				   .CYCLES    SET	.CYCLES % 5
     13  fa46					      ENDIF
     14  fa46
     15  fa46				  -	      IF	.CYCLES % 3 == 1
     16  fa46				  -	      NOP
     17  fa46				  -.CYCLES    SET	.CYCLES - 2
     18  fa46					      ENDIF
     19  fa46
     20  fa46				  -	      REPEAT	.CYCLES / 3
     21  fa46				  -	      STA	DUMP
     22  fa46					      REPEND
     23  fa46
     24  fa46				   .CYCLES    SET	.CYCLES % 3
     25  fa46
     26  fa46				  -	      REPEAT	.CYCLES / 2
     27  fa46				  -	      NOP
     28  fa46					      REPEND
     29  fa46
     30  fa46				   .CYCLES    SET	.CYCLES % 2
     31  fa46
     32  fa46				  -	      IF	.CYCLES
     33  fa46				  -	      ERR
     34  fa46					      ENDIF
     35  fa46
     75  fa46					      ENDIF
     76  fa46		       4c f8 f9 	      JMP	.noSprite_ret
     77  fa49
     78  fa49				   .noSprite_2
     79  fa49				  -	      IF	>.branchPoint_2 == >.noSprite_2
     80  fa49				  -	      DELAY	4
     81  fa49					      ELSE
      0  fa49					      DELAY	3
      1  fa49				   .CYCLES    SET	3
      2  fa49
      3  fa49				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa49				  -	      NOP
      5  fa49				  -.CYCLES    SET	.CYCLES - 2
      6  fa49					      ENDIF
      7  fa49
      8  fa49				  -	      IF	[.CYCLES - 2] / 5
      9  fa49				  -	      REPEAT	.CYCLES / 5
     10  fa49				  -	      INC	DUMP
     11  fa49				  -	      REPEND
     12  fa49				  -.CYCLES    SET	.CYCLES % 5
     13  fa49					      ENDIF
     14  fa49
     15  fa49				  -	      IF	.CYCLES % 3 == 1
     16  fa49				  -	      NOP
     17  fa49				  -.CYCLES    SET	.CYCLES - 2
     18  fa49					      ENDIF
     19  fa49
     20  fa49					      REPEAT	.CYCLES / 3
     21  fa49		       85 30		      STA	DUMP
     22  fa4b					      REPEND
     23  fa4b
     24  fa4b				   .CYCLES    SET	.CYCLES % 3
     25  fa4b
     26  fa4b				  -	      REPEAT	.CYCLES / 2
     27  fa4b				  -	      NOP
     28  fa4b					      REPEND
     29  fa4b
     30  fa4b				   .CYCLES    SET	.CYCLES % 2
     31  fa4b
     32  fa4b				  -	      IF	.CYCLES
     33  fa4b				  -	      ERR
     34  fa4b					      ENDIF
     35  fa4b
     83  fa4b					      ENDIF
     84  fa4b		       4c f8 f9 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fa4e					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fa4e							; The third wall and it's second shadow
      2  fa4e							; See GLOSSARY.TXT for definitions of vague words
      3  fa4e
      4  fa4e				   dc_w3s2_delayed
      0  fa4e					      DELAY	2
      1  fa4e				   .CYCLES    SET	2
      2  fa4e
      3  fa4e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa4e				  -	      NOP
      5  fa4e				  -.CYCLES    SET	.CYCLES - 2
      6  fa4e					      ENDIF
      7  fa4e
      8  fa4e				  -	      IF	[.CYCLES - 2] / 5
      9  fa4e				  -	      REPEAT	.CYCLES / 5
     10  fa4e				  -	      INC	DUMP
     11  fa4e				  -	      REPEND
     12  fa4e				  -.CYCLES    SET	.CYCLES % 5
     13  fa4e					      ENDIF
     14  fa4e
     15  fa4e				  -	      IF	.CYCLES % 3 == 1
     16  fa4e				  -	      NOP
     17  fa4e				  -.CYCLES    SET	.CYCLES - 2
     18  fa4e					      ENDIF
     19  fa4e
     20  fa4e				  -	      REPEAT	.CYCLES / 3
     21  fa4e				  -	      STA	DUMP
     22  fa4e					      REPEND
     23  fa4e
     24  fa4e				   .CYCLES    SET	.CYCLES % 3
     25  fa4e
     26  fa4e					      REPEAT	.CYCLES / 2
     27  fa4e		       ea		      NOP
     28  fa4f					      REPEND
     29  fa4f
     30  fa4f				   .CYCLES    SET	.CYCLES % 2
     31  fa4f
     32  fa4f				  -	      IF	.CYCLES
     33  fa4f				  -	      ERR
     34  fa4f					      ENDIF
     35  fa4f
      6  fa4f				   dc_w3s2    SUBROUTINE
      7  fa4f
      8  fa4f		       a2 03		      LDX	#PIXH
      9  fa51
     10  fa51				   .loop
     11  fa51		       a5 b4		      LDA	wallColour
     12  fa53		       85 02		      STA	WSYNC
     13  fa55				   .joinIn
     14  fa55		       85 08		      STA	COLUPF
     15  fa57		       a5 8a		      LDA	wall3a
     16  fa59		       85 0e		      STA	PF1
     17  fa5b		       98		      TYA
     18  fa5c
     19  fa5c		       f0 53		      BEQ	.noSprite_1
     20  fa5e				   .branchPoint_1
     21  fa5e		       88		      DEY
     22  fa5f		       c4 bd		      CPY	spriteHeight
     23  fa61
     24  fa61		       b0 56		      BCS	.noSprite_2
     25  fa63				   .branchPoint_2
     26  fa63		       b1 bb		      LDA	(sprite),Y
     27  fa65		       85 1b		      STA	GRP0
     28  fa67
     29  fa67				   .noSprite_ret
     30  fa67		       a5 8b		      LDA	wall3b
     31  fa69		       85 0f		      STA	PF2
     32  fa6b
     33  fa6b		       a5 8c		      LDA	wall3c
     34  fa6d		       85 0d		      STA	PF0
     35  fa6f		       a5 8d		      LDA	wall3d
     36  fa71		       85 0e		      STA	PF1
     37  fa73		       a5 8e		      LDA	wall3e
     38  fa75		       85 0f		      STA	PF2
     39  fa77		       a9 00		      LDA	#NULL
      0  fa79					      DELAY	10
      1  fa79				   .CYCLES    SET	10
      2  fa79
      3  fa79				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa79				  -	      NOP
      5  fa79				  -.CYCLES    SET	.CYCLES - 2
      6  fa79					      ENDIF
      7  fa79
      8  fa79					      IF	[.CYCLES - 2] / 5
      9  fa79					      REPEAT	.CYCLES / 5
     10  fa79		       e6 30		      INC	DUMP
      9  fa79					      REPEND
     10  fa7b		       e6 30		      INC	DUMP
     11  fa7d					      REPEND
     12  fa7d				   .CYCLES    SET	.CYCLES % 5
     13  fa7d					      ENDIF
     14  fa7d
     15  fa7d				  -	      IF	.CYCLES % 3 == 1
     16  fa7d				  -	      NOP
     17  fa7d				  -.CYCLES    SET	.CYCLES - 2
     18  fa7d					      ENDIF
     19  fa7d
     20  fa7d				  -	      REPEAT	.CYCLES / 3
     21  fa7d				  -	      STA	DUMP
     22  fa7d					      REPEND
     23  fa7d
     24  fa7d				   .CYCLES    SET	.CYCLES % 3
     25  fa7d
     26  fa7d				  -	      REPEAT	.CYCLES / 2
     27  fa7d				  -	      NOP
     28  fa7d					      REPEND
     29  fa7d
     30  fa7d				   .CYCLES    SET	.CYCLES % 2
     31  fa7d
     32  fa7d				  -	      IF	.CYCLES
     33  fa7d				  -	      ERR
     34  fa7d					      ENDIF
     35  fa7d
     41  fa7d		       85 0f		      STA	PF2
     42  fa7f		       85 0d		      STA	PF0
     43  fa81
     44  fa81		       85 02		      STA	WSYNC	; Draw the shadow
     45  fa83		       a5 b5		      LDA	shadowColour
     46  fa85		       85 08		      STA	COLUPF
     47  fa87		       a5 a5		      LDA	shadow3ab
     48  fa89		       05 a0		      ORA	shadow2ab
     49  fa8b		       85 0e		      STA	PF1
     50  fa8d		       a5 a6		      LDA	shadow3bb
     51  fa8f		       05 a1		      ORA	shadow2bb
     52  fa91		       85 0f		      STA	PF2
     53  fa93		       a5 a7		      LDA	shadow3cb
     54  fa95		       05 a2		      ORA	shadow2cb
     55  fa97		       85 0d		      STA	PF0
     56  fa99		       a5 a8		      LDA	shadow3db
     57  fa9b		       05 a3		      ORA	shadow2db
     58  fa9d		       85 0e		      STA	PF1
     59  fa9f		       a5 a9		      LDA	shadow3eb
     60  faa1		       05 a4		      ORA	shadow2eb
     61  faa3		       85 0f		      STA	PF2
     62  faa5		       a9 00		      LDA	#NULL
     63  faa7		       85 0d		      STA	PF0
     64  faa9
     65  faa9		       ca		      DEX
     66  faaa		       d0 a5		      BNE	.loop
     67  faac
     68  faac		       50 10		      BVC	dc_w4s0_delayed
     69  faae		       4c e0 f9 	      JMP	dc_w3s1
     70  fab1
     71  fab1				   .noSprite_1
     72  fab1					      IF	>.branchPoint_1 == >.noSprite_1
      0  fab1					      DELAY	11
      1  fab1				   .CYCLES    SET	11
      2  fab1
      3  fab1					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab1		       ea		      NOP
      5  fab1				   .CYCLES    SET	.CYCLES - 2
      6  fab2					      ENDIF
      7  fab2
      8  fab2					      IF	[.CYCLES - 2] / 5
      9  fab2					      REPEAT	.CYCLES / 5
     10  fab2		       e6 30		      INC	DUMP
     11  fab4					      REPEND
     12  fab4				   .CYCLES    SET	.CYCLES % 5
     13  fab4					      ENDIF
     14  fab4
     15  fab4					      IF	.CYCLES % 3 == 1
     16  fab4		       ea		      NOP
     17  fab4				   .CYCLES    SET	.CYCLES - 2
     18  fab5					      ENDIF
     19  fab5
     20  fab5				  -	      REPEAT	.CYCLES / 3
     21  fab5				  -	      STA	DUMP
     22  fab5					      REPEND
     23  fab5
     24  fab5				   .CYCLES    SET	.CYCLES % 3
     25  fab5
     26  fab5					      REPEAT	.CYCLES / 2
     27  fab5		       ea		      NOP
     28  fab6					      REPEND
     29  fab6
     30  fab6				   .CYCLES    SET	.CYCLES % 2
     31  fab6
     32  fab6				  -	      IF	.CYCLES
     33  fab6				  -	      ERR
     34  fab6					      ENDIF
     35  fab6
     74  fab6				  -	      ELSE
     75  fab6				  -	      DELAY	10
     76  fab6					      ENDIF
     77  fab6		       4c 67 fa 	      JMP	.noSprite_ret
     78  fab9
     79  fab9				   .noSprite_2
     80  fab9
     81  fab9					      IF	>.branchPoint_2 == >.noSprite_2
      0  fab9					      DELAY	4
      1  fab9				   .CYCLES    SET	4
      2  fab9
      3  fab9				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab9				  -	      NOP
      5  fab9				  -.CYCLES    SET	.CYCLES - 2
      6  fab9					      ENDIF
      7  fab9
      8  fab9				  -	      IF	[.CYCLES - 2] / 5
      9  fab9				  -	      REPEAT	.CYCLES / 5
     10  fab9				  -	      INC	DUMP
     11  fab9				  -	      REPEND
     12  fab9				  -.CYCLES    SET	.CYCLES % 5
     13  fab9					      ENDIF
     14  fab9
     15  fab9					      IF	.CYCLES % 3 == 1
     16  fab9		       ea		      NOP
     17  fab9				   .CYCLES    SET	.CYCLES - 2
     18  faba					      ENDIF
     19  faba
     20  faba				  -	      REPEAT	.CYCLES / 3
     21  faba				  -	      STA	DUMP
     22  faba					      REPEND
     23  faba
     24  faba				   .CYCLES    SET	.CYCLES % 3
     25  faba
     26  faba					      REPEAT	.CYCLES / 2
     27  faba		       ea		      NOP
     28  fabb					      REPEND
     29  fabb
     30  fabb				   .CYCLES    SET	.CYCLES % 2
     31  fabb
     32  fabb				  -	      IF	.CYCLES
     33  fabb				  -	      ERR
     34  fabb					      ENDIF
     35  fabb
     83  fabb				  -	      ELSE
     84  fabb				  -	      DELAY	3
     85  fabb					      ENDIF
     86  fabb		       4c 67 fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fabe					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fabe							; The fourth wall
      2  fabe
      3  fabe				   dc_w4s0_delayed
      4  fabe		       4c c5 fa 	      JMP	dc_w4s0
      5  fac1
      6  fac1				   dc_w4s0_switch
      7  fac1		       a9 7f		      LDA	#$7F
      8  fac3		       69 01		      ADC	#$01
      9  fac5
     10  fac5				   dc_w4s0    SUBROUTINE
     11  fac5
     12  fac5		       a2 03		      LDX	#PIXH
     13  fac7
     14  fac7				   .loop
     15  fac7		       a5 b4		      LDA	wallColour
     16  fac9		       85 02		      STA	WSYNC
     17  facb				   .joinIn
     18  facb		       85 08		      STA	COLUPF
     19  facd		       a5 8f		      LDA	wall4a
     20  facf		       85 0e		      STA	PF1
     21  fad1		       98		      TYA
     22  fad2
     23  fad2		       f0 57		      BEQ	.noSprite_1
     24  fad4				   .branchPoint_1
     25  fad4		       88		      DEY
     26  fad5		       c4 bd		      CPY	spriteHeight
     27  fad7
     28  fad7		       b0 59		      BCS	.noSprite_2
     29  fad9				   .branchPoint_2
     30  fad9		       b1 bb		      LDA	(sprite),Y
     31  fadb		       85 1b		      STA	GRP0
     32  fadd
     33  fadd				   .noSprite_ret
     34  fadd		       a5 90		      LDA	wall4b
     35  fadf		       85 0f		      STA	PF2
     36  fae1
     37  fae1		       a9 ff		      LDA	#FULLWALL
     38  fae3		       45 a7		      EOR	shadow3cb
     39  fae5		       85 0d		      STA	PF0
     40  fae7		       a9 ff		      LDA	#FULLWALL
     41  fae9		       45 a8		      EOR	shadow3db
     42  faeb		       85 0e		      STA	PF1
     43  faed		       a9 ff		      LDA	#FULLWALL
     44  faef		       45 a9		      EOR	shadow3eb
     45  faf1		       85 0f		      STA	PF2
     46  faf3		       a9 00		      LDA	#NULL
      0  faf5					      DELAY	4
      1  faf5				   .CYCLES    SET	4
      2  faf5
      3  faf5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faf5				  -	      NOP
      5  faf5				  -.CYCLES    SET	.CYCLES - 2
      6  faf5					      ENDIF
      7  faf5
      8  faf5				  -	      IF	[.CYCLES - 2] / 5
      9  faf5				  -	      REPEAT	.CYCLES / 5
     10  faf5				  -	      INC	DUMP
     11  faf5				  -	      REPEND
     12  faf5				  -.CYCLES    SET	.CYCLES % 5
     13  faf5					      ENDIF
     14  faf5
     15  faf5					      IF	.CYCLES % 3 == 1
     16  faf5		       ea		      NOP
     17  faf5				   .CYCLES    SET	.CYCLES - 2
     18  faf6					      ENDIF
     19  faf6
     20  faf6				  -	      REPEAT	.CYCLES / 3
     21  faf6				  -	      STA	DUMP
     22  faf6					      REPEND
     23  faf6
     24  faf6				   .CYCLES    SET	.CYCLES % 3
     25  faf6
     26  faf6					      REPEAT	.CYCLES / 2
     27  faf6		       ea		      NOP
     28  faf7					      REPEND
     29  faf7
     30  faf7				   .CYCLES    SET	.CYCLES % 2
     31  faf7
     32  faf7				  -	      IF	.CYCLES
     33  faf7				  -	      ERR
     34  faf7					      ENDIF
     35  faf7
     48  faf7		       85 0f		      STA	PF2
     49  faf9		       85 0d		      STA	PF0
     50  fafb
     51  fafb		       85 02		      STA	WSYNC	; Draw the shadow
     52  fafd		       a5 b5		      LDA	shadowColour
     53  faff		       85 08		      STA	COLUPF
     54  fb01		       a5 a5		      LDA	shadow3ab
     55  fb03		       05 a0		      ORA	shadow2ab
     56  fb05		       85 0e		      STA	PF1
     57  fb07		       a5 a6		      LDA	shadow3bb
     58  fb09		       05 a1		      ORA	shadow2bb
     59  fb0b		       85 0f		      STA	PF2
     60  fb0d		       a5 a7		      LDA	shadow3cb
     61  fb0f		       05 a2		      ORA	shadow2cb
     62  fb11		       85 0d		      STA	PF0
     63  fb13		       a5 a8		      LDA	shadow3db
     64  fb15		       05 a3		      ORA	shadow2db
     65  fb17		       85 0e		      STA	PF1
     66  fb19		       a5 a9		      LDA	shadow3eb
     67  fb1b		       05 a4		      ORA	shadow2eb
     68  fb1d		       85 0f		      STA	PF2
     69  fb1f		       a9 00		      LDA	#NULL
     70  fb21		       85 0d		      STA	PF0
     71  fb23
     72  fb23		       ca		      DEX
     73  fb24		       d0 a1		      BNE	.loop
     74  fb26
     75  fb26		       50 99		      BVC	dc_w4s0_switch
     76  fb28		       4c 4f fa 	      JMP	dc_w3s2
     77  fb2b
     78  fb2b				   .noSprite_1
     79  fb2b				  -	      IF	>.branchPoint_1 == >.noSprite_1
     80  fb2b				  -	      DELAY	11
     81  fb2b					      ELSE
      0  fb2b					      DELAY	10
      1  fb2b				   .CYCLES    SET	10
      2  fb2b
      3  fb2b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb2b				  -	      NOP
      5  fb2b				  -.CYCLES    SET	.CYCLES - 2
      6  fb2b					      ENDIF
      7  fb2b
      8  fb2b					      IF	[.CYCLES - 2] / 5
      9  fb2b					      REPEAT	.CYCLES / 5
     10  fb2b		       e6 30		      INC	DUMP
      9  fb2b					      REPEND
     10  fb2d		       e6 30		      INC	DUMP
     11  fb2f					      REPEND
     12  fb2f				   .CYCLES    SET	.CYCLES % 5
     13  fb2f					      ENDIF
     14  fb2f
     15  fb2f				  -	      IF	.CYCLES % 3 == 1
     16  fb2f				  -	      NOP
     17  fb2f				  -.CYCLES    SET	.CYCLES - 2
     18  fb2f					      ENDIF
     19  fb2f
     20  fb2f				  -	      REPEAT	.CYCLES / 3
     21  fb2f				  -	      STA	DUMP
     22  fb2f					      REPEND
     23  fb2f
     24  fb2f				   .CYCLES    SET	.CYCLES % 3
     25  fb2f
     26  fb2f				  -	      REPEAT	.CYCLES / 2
     27  fb2f				  -	      NOP
     28  fb2f					      REPEND
     29  fb2f
     30  fb2f				   .CYCLES    SET	.CYCLES % 2
     31  fb2f
     32  fb2f				  -	      IF	.CYCLES
     33  fb2f				  -	      ERR
     34  fb2f					      ENDIF
     35  fb2f
     83  fb2f					      ENDIF
     84  fb2f		       4c dd fa 	      JMP	.noSprite_ret
     85  fb32
     86  fb32				   .noSprite_2
     87  fb32				  -	      IF	>.branchPoint_2 == >.noSprite_2
     88  fb32				  -	      DELAY	4
     89  fb32					      ELSE
      0  fb32					      DELAY	3
      1  fb32				   .CYCLES    SET	3
      2  fb32
      3  fb32				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb32				  -	      NOP
      5  fb32				  -.CYCLES    SET	.CYCLES - 2
      6  fb32					      ENDIF
      7  fb32
      8  fb32				  -	      IF	[.CYCLES - 2] / 5
      9  fb32				  -	      REPEAT	.CYCLES / 5
     10  fb32				  -	      INC	DUMP
     11  fb32				  -	      REPEND
     12  fb32				  -.CYCLES    SET	.CYCLES % 5
     13  fb32					      ENDIF
     14  fb32
     15  fb32				  -	      IF	.CYCLES % 3 == 1
     16  fb32				  -	      NOP
     17  fb32				  -.CYCLES    SET	.CYCLES - 2
     18  fb32					      ENDIF
     19  fb32
     20  fb32					      REPEAT	.CYCLES / 3
     21  fb32		       85 30		      STA	DUMP
     22  fb34					      REPEND
     23  fb34
     24  fb34				   .CYCLES    SET	.CYCLES % 3
     25  fb34
     26  fb34				  -	      REPEAT	.CYCLES / 2
     27  fb34				  -	      NOP
     28  fb34					      REPEND
     29  fb34
     30  fb34				   .CYCLES    SET	.CYCLES % 2
     31  fb34
     32  fb34				  -	      IF	.CYCLES
     33  fb34				  -	      ERR
     34  fb34					      ENDIF
     35  fb34
     91  fb34					      ENDIF
     92  fb34		       4c dd fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     36  fb37
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fb37					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fb37							; The draw code for the 1st wall and  it's second shadow
      2  fb37
      3  fb37				   dc_w1s2    SUBROUTINE
      4  fb37
      5  fb37		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fb39
      7  fb39				   .loop
      8  fb39		       a5 b4		      LDA	wallColour
      9  fb3b		       85 02		      STA	WSYNC
     10  fb3d		       85 08		      STA	COLUPF
     11  fb3f		       a5 80		      LDA	wall1
     12  fb41		       85 0e		      STA	PF1
     13  fb43		       98		      TYA
     14  fb44
     15  fb44		       f0 53		      BEQ	.noSprite_1
     16  fb46				   .branchPoint_1
     17  fb46		       88		      DEY
     18  fb47		       c4 bd		      CPY	spriteHeight
     19  fb49
     20  fb49		       b0 56		      BCS	.noSprite_2
     21  fb4b				   .branchPoint_2
     22  fb4b		       b1 bb		      LDA	(sprite),Y
     23  fb4d		       85 1b		      STA	GRP0
     24  fb4f
     25  fb4f				   .noSprite_ret
     26  fb4f		       a5 80		      LDA	wall1
     27  fb51		       85 0f		      STA	PF2
      0  fb53					      DELAY	6
      1  fb53				   .CYCLES    SET	6
      2  fb53
      3  fb53				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb53				  -	      NOP
      5  fb53				  -.CYCLES    SET	.CYCLES - 2
      6  fb53					      ENDIF
      7  fb53
      8  fb53				  -	      IF	[.CYCLES - 2] / 5
      9  fb53				  -	      REPEAT	.CYCLES / 5
     10  fb53				  -	      INC	DUMP
     11  fb53				  -	      REPEND
     12  fb53				  -.CYCLES    SET	.CYCLES % 5
     13  fb53					      ENDIF
     14  fb53
     15  fb53				  -	      IF	.CYCLES % 3 == 1
     16  fb53				  -	      NOP
     17  fb53				  -.CYCLES    SET	.CYCLES - 2
     18  fb53					      ENDIF
     19  fb53
     20  fb53					      REPEAT	.CYCLES / 3
     21  fb53		       85 30		      STA	DUMP
     20  fb53					      REPEND
     21  fb55		       85 30		      STA	DUMP
     22  fb57					      REPEND
     23  fb57
     24  fb57				   .CYCLES    SET	.CYCLES % 3
     25  fb57
     26  fb57				  -	      REPEAT	.CYCLES / 2
     27  fb57				  -	      NOP
     28  fb57					      REPEND
     29  fb57
     30  fb57				   .CYCLES    SET	.CYCLES % 2
     31  fb57
     32  fb57				  -	      IF	.CYCLES
     33  fb57				  -	      ERR
     34  fb57					      ENDIF
     35  fb57
     29  fb57		       85 0d		      STA	PF0
      0  fb59					      DELAY	19
      1  fb59				   .CYCLES    SET	19
      2  fb59
      3  fb59				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb59				  -	      NOP
      5  fb59				  -.CYCLES    SET	.CYCLES - 2
      6  fb59					      ENDIF
      7  fb59
      8  fb59					      IF	[.CYCLES - 2] / 5
      9  fb59					      REPEAT	.CYCLES / 5
     10  fb59		       e6 30		      INC	DUMP
      9  fb59					      REPEND
     10  fb5b		       e6 30		      INC	DUMP
      9  fb5b					      REPEND
     10  fb5d		       e6 30		      INC	DUMP
     11  fb5f					      REPEND
     12  fb5f				   .CYCLES    SET	.CYCLES % 5
     13  fb5f					      ENDIF
     14  fb5f
     15  fb5f					      IF	.CYCLES % 3 == 1
     16  fb5f		       ea		      NOP
     17  fb5f				   .CYCLES    SET	.CYCLES - 2
     18  fb60					      ENDIF
     19  fb60
     20  fb60				  -	      REPEAT	.CYCLES / 3
     21  fb60				  -	      STA	DUMP
     22  fb60					      REPEND
     23  fb60
     24  fb60				   .CYCLES    SET	.CYCLES % 3
     25  fb60
     26  fb60					      REPEAT	.CYCLES / 2
     27  fb60		       ea		      NOP
     28  fb61					      REPEND
     29  fb61
     30  fb61				   .CYCLES    SET	.CYCLES % 2
     31  fb61
     32  fb61				  -	      IF	.CYCLES
     33  fb61				  -	      ERR
     34  fb61					      ENDIF
     35  fb61
     31  fb61		       a9 00		      LDA	#NULL
     32  fb63		       85 0f		      STA	PF2
     33  fb65		       85 0d		      STA	PF0
     34  fb67
     35  fb67		       85 02		      STA	WSYNC
     36  fb69		       a5 b5		      LDA	shadowColour
     37  fb6b		       85 08		      STA	COLUPF
     38  fb6d		       a5 9b		      LDA	shadow1a
     39  fb6f		       3d 00 f6 	      AND	and_1a,X
     40  fb72		       85 0e		      STA	PF1
     41  fb74		       a5 9c		      LDA	shadow1b
     42  fb76		       3d 1e f6 	      AND	and_1b,X
     43  fb79		       85 0f		      STA	PF2
      0  fb7b					      DELAY	9
      1  fb7b				   .CYCLES    SET	9
      2  fb7b
      3  fb7b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb7b				  -	      NOP
      5  fb7b				  -.CYCLES    SET	.CYCLES - 2
      6  fb7b					      ENDIF
      7  fb7b
      8  fb7b					      IF	[.CYCLES - 2] / 5
      9  fb7b					      REPEAT	.CYCLES / 5
     10  fb7b		       e6 30		      INC	DUMP
     11  fb7d					      REPEND
     12  fb7d				   .CYCLES    SET	.CYCLES % 5
     13  fb7d					      ENDIF
     14  fb7d
     15  fb7d					      IF	.CYCLES % 3 == 1
     16  fb7d		       ea		      NOP
     17  fb7d				   .CYCLES    SET	.CYCLES - 2
     18  fb7e					      ENDIF
     19  fb7e
     20  fb7e				  -	      REPEAT	.CYCLES / 3
     21  fb7e				  -	      STA	DUMP
     22  fb7e					      REPEND
     23  fb7e
     24  fb7e				   .CYCLES    SET	.CYCLES % 3
     25  fb7e
     26  fb7e					      REPEAT	.CYCLES / 2
     27  fb7e		       ea		      NOP
     28  fb7f					      REPEND
     29  fb7f
     30  fb7f				   .CYCLES    SET	.CYCLES % 2
     31  fb7f
     32  fb7f				  -	      IF	.CYCLES
     33  fb7f				  -	      ERR
     34  fb7f					      ENDIF
     35  fb7f
     45  fb7f		       a5 9e		      LDA	shadow1d
     46  fb81		       3d 3c f6 	      AND	and_1c,X
     47  fb84		       85 0e		      STA	PF1
     48  fb86		       a5 9f		      LDA	shadow1e
     49  fb88		       3d 5a f6 	      AND	and_1d,X
     50  fb8b		       85 0f		      STA	PF2
     51  fb8d
     52  fb8d		       a9 00		      LDA	#NULL
     53  fb8f		       85 1b		      STA	GRP0
     54  fb91
     55  fb91		       ca		      DEX
     56  fb92		       e0 06		      CPX	#LOWRWALL_S
     57  fb94		       d0 a3		      BNE	.loop
     58  fb96
     59  fb96		       4c a6 fb 	      JMP	dc_wallsEnd
     60  fb99
     61  fb99				   .noSprite_1
     62  fb99					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb99					      DELAY	11
      1  fb99				   .CYCLES    SET	11
      2  fb99
      3  fb99					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb99		       ea		      NOP
      5  fb99				   .CYCLES    SET	.CYCLES - 2
      6  fb9a					      ENDIF
      7  fb9a
      8  fb9a					      IF	[.CYCLES - 2] / 5
      9  fb9a					      REPEAT	.CYCLES / 5
     10  fb9a		       e6 30		      INC	DUMP
     11  fb9c					      REPEND
     12  fb9c				   .CYCLES    SET	.CYCLES % 5
     13  fb9c					      ENDIF
     14  fb9c
     15  fb9c					      IF	.CYCLES % 3 == 1
     16  fb9c		       ea		      NOP
     17  fb9c				   .CYCLES    SET	.CYCLES - 2
     18  fb9d					      ENDIF
     19  fb9d
     20  fb9d				  -	      REPEAT	.CYCLES / 3
     21  fb9d				  -	      STA	DUMP
     22  fb9d					      REPEND
     23  fb9d
     24  fb9d				   .CYCLES    SET	.CYCLES % 3
     25  fb9d
     26  fb9d					      REPEAT	.CYCLES / 2
     27  fb9d		       ea		      NOP
     28  fb9e					      REPEND
     29  fb9e
     30  fb9e				   .CYCLES    SET	.CYCLES % 2
     31  fb9e
     32  fb9e				  -	      IF	.CYCLES
     33  fb9e				  -	      ERR
     34  fb9e					      ENDIF
     35  fb9e
     64  fb9e				  -	      ELSE
     65  fb9e				  -	      DELAY	10
     66  fb9e					      ENDIF
     67  fb9e		       4c 4f fb 	      JMP	.noSprite_ret
     68  fba1
     69  fba1				   .noSprite_2
     70  fba1					      IF	>.branchPoint_2 == >.noSprite_2
      0  fba1					      DELAY	4
      1  fba1				   .CYCLES    SET	4
      2  fba1
      3  fba1				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fba1				  -	      NOP
      5  fba1				  -.CYCLES    SET	.CYCLES - 2
      6  fba1					      ENDIF
      7  fba1
      8  fba1				  -	      IF	[.CYCLES - 2] / 5
      9  fba1				  -	      REPEAT	.CYCLES / 5
     10  fba1				  -	      INC	DUMP
     11  fba1				  -	      REPEND
     12  fba1				  -.CYCLES    SET	.CYCLES % 5
     13  fba1					      ENDIF
     14  fba1
     15  fba1					      IF	.CYCLES % 3 == 1
     16  fba1		       ea		      NOP
     17  fba1				   .CYCLES    SET	.CYCLES - 2
     18  fba2					      ENDIF
     19  fba2
     20  fba2				  -	      REPEAT	.CYCLES / 3
     21  fba2				  -	      STA	DUMP
     22  fba2					      REPEND
     23  fba2
     24  fba2				   .CYCLES    SET	.CYCLES % 3
     25  fba2
     26  fba2					      REPEAT	.CYCLES / 2
     27  fba2		       ea		      NOP
     28  fba3					      REPEND
     29  fba3
     30  fba3				   .CYCLES    SET	.CYCLES % 2
     31  fba3
     32  fba3				  -	      IF	.CYCLES
     33  fba3				  -	      ERR
     34  fba3					      ENDIF
     35  fba3
     72  fba3				  -	      ELSE
     73  fba3				  -	      DELAY	3
     74  fba3					      ENDIF
     75  fba3		       4c 4f fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     38  fba6
     39  fba6				   dc_wallsEnd		; once we've finished drawing the walls we draw the minimap ( or
     40  fba6							; hud, if that feature is added any time soon).
     41  fba6
     42  fba6		       b8		      CLV		; always best to leave the overflow flag at zero...
     43  fba7
     44  fba7		       a9 00		      LDA	#NULL	; Also nice to make sure the playfields are clear...
     45  fba9		       85 0e		      STA	PF1
     46  fbab		       85 0f		      STA	PF2
     47  fbad
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fbad					      INCLUDE	"drawCode/mmDraw.asm"
      1  fbad							; Draws the compass to the screen
      2  fbad							; See GLOSSARY.TXT for definitions of vague words
      3  fbad
      4  fbad				   mmDraw
      5  fbad
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fbad					      INCLUDE	"drawCode/mmRender.asm"
      1  fbad							; Render the minimap
      2  fbad
      3  fbad				   mmRender   SUBROUTINE
      4  fbad		       a9 00		      LDA	#NULL
      5  fbaf							; Set the colour of the player
      6  fbaf		       a9 cc		      LDA	#PLYRCOLU
      7  fbb1		       85 08		      STA	COLUPF
      8  fbb3							; Set the colour of the map
      9  fbb3		       a9 0e		      LDA	#MAPCOLU
     10  fbb5		       85 06		      STA	COLUP0
     11  fbb7		       85 07		      STA	COLUP1
     12  fbb9							; Get the player's position and translate it into horizontal movement
     13  fbb9		       a9 08		      LDA	#%00001000
     14  fbbb		       18		      CLC
     15  fbbc		       38		      SEC
     16  fbbd		       e5 aa		      SBC	playerPos
     17  fbbf		       0a		      ASL
     18  fbc0		       0a		      ASL
     19  fbc1		       0a		      ASL
     20  fbc2		       0a		      ASL
     21  fbc3		       85 24		      STA	HMBL
     22  fbc5
     23  fbc5							; Set the map's position to the right values
     24  fbc5		       a9 00		      LDA	#HADJ_A
     25  fbc7		       85 20		      STA	HMP0
     26  fbc9		       a9 10		      LDA	#HADJ_B
     27  fbcb		       85 21		      STA	HMP1
     28  fbcd
     29  fbcd		       85 02		      STA	WSYNC
     30  fbcf		       a2 07		      LDX	#HWAIT
     31  fbd1
     32  fbd1				   .wait1
     33  fbd1		       ca		      DEX
     34  fbd2		       d0 fd		      BNE	.wait1
      0  fbd4					      DELAY	HDELAY1
      1  fbd4				   .CYCLES    SET	HDELAY1
      2  fbd4
      3  fbd4				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbd4				  -	      NOP
      5  fbd4				  -.CYCLES    SET	.CYCLES - 2
      6  fbd4					      ENDIF
      7  fbd4
      8  fbd4				  -	      IF	[.CYCLES - 2] / 5
      9  fbd4				  -	      REPEAT	.CYCLES / 5
     10  fbd4				  -	      INC	DUMP
     11  fbd4				  -	      REPEND
     12  fbd4				  -.CYCLES    SET	.CYCLES % 5
     13  fbd4					      ENDIF
     14  fbd4
     15  fbd4				  -	      IF	.CYCLES % 3 == 1
     16  fbd4				  -	      NOP
     17  fbd4				  -.CYCLES    SET	.CYCLES - 2
     18  fbd4					      ENDIF
     19  fbd4
     20  fbd4					      REPEAT	.CYCLES / 3
     21  fbd4		       85 30		      STA	DUMP
     22  fbd6					      REPEND
     23  fbd6
     24  fbd6				   .CYCLES    SET	.CYCLES % 3
     25  fbd6
     26  fbd6					      REPEAT	.CYCLES / 2
     27  fbd6		       ea		      NOP
     28  fbd7					      REPEND
     29  fbd7
     30  fbd7				   .CYCLES    SET	.CYCLES % 2
     31  fbd7
     32  fbd7				  -	      IF	.CYCLES
     33  fbd7				  -	      ERR
     34  fbd7					      ENDIF
     35  fbd7
     36  fbd7		       85 10		      STA	RESP0
     37  fbd9		       85 11		      STA	RESP1
     38  fbdb
     39  fbdb		       a5 aa		      LDA	playerPos
     40  fbdd
     41  fbdd		       85 02		      STA	WSYNC
     42  fbdf		       a2 07		      LDX	#HWAIT
     43  fbe1
     44  fbe1				   .wait2
     45  fbe1		       ca		      DEX
     46  fbe2		       d0 fd		      BNE	.wait2
      0  fbe4					      DELAY	HDELAY2
      1  fbe4				   .CYCLES    SET	HDELAY2
      2  fbe4
      3  fbe4				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbe4				  -	      NOP
      5  fbe4				  -.CYCLES    SET	.CYCLES - 2
      6  fbe4					      ENDIF
      7  fbe4
      8  fbe4					      IF	[.CYCLES - 2] / 5
      9  fbe4					      REPEAT	.CYCLES / 5
     10  fbe4		       e6 30		      INC	DUMP
     11  fbe6					      REPEND
     12  fbe6				   .CYCLES    SET	.CYCLES % 5
     13  fbe6					      ENDIF
     14  fbe6
     15  fbe6				  -	      IF	.CYCLES % 3 == 1
     16  fbe6				  -	      NOP
     17  fbe6				  -.CYCLES    SET	.CYCLES - 2
     18  fbe6					      ENDIF
     19  fbe6
     20  fbe6					      REPEAT	.CYCLES / 3
     21  fbe6		       85 30		      STA	DUMP
     22  fbe8					      REPEND
     23  fbe8
     24  fbe8				   .CYCLES    SET	.CYCLES % 3
     25  fbe8
     26  fbe8				  -	      REPEAT	.CYCLES / 2
     27  fbe8				  -	      NOP
     28  fbe8					      REPEND
     29  fbe8
     30  fbe8				   .CYCLES    SET	.CYCLES % 2
     31  fbe8
     32  fbe8				  -	      IF	.CYCLES
     33  fbe8				  -	      ERR
     34  fbe8					      ENDIF
     35  fbe8
     48  fbe8		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      7  fbea
      8  fbea					      SUBROUTINE		; The preceeding code declares it's own subroutine
      9  fbea
     10  fbea		       a0 00		      LDY	#NULL
     11  fbec		       84 1b		      STY	GRP0
     12  fbee		       84 1c		      STY	GRP1
     13  fbf0		       84 02		      STY	WSYNC
     14  fbf2		       84 2a		      STY	HMOVE
     15  fbf4
     16  fbf4		       a6 aa		      LDX	playerPos
     17  fbf6
     18  fbf6				   .loop
     19  fbf6		       85 02		      STA	WSYNC
     20  fbf8
     21  fbf8		       b1 b7		      LDA	(miniMapPtr),Y
     22  fbfa		       85 1b		      STA	GRP0
     23  fbfc		       c8		      INY
     24  fbfd		       b1 b7		      LDA	(miniMapPtr),Y
     25  fbff		       85 1c		      STA	GRP1
     26  fc01		       c8		      INY
     27  fc02
     28  fc02		       8a		      TXA
     29  fc03		       38		      SEC
     30  fc04		       e5 ab		      SBC	mapWidth
     31  fc06		       aa		      TAX
     32  fc07		       29 f0		      AND	#$F0
     33  fc09
     34  fc09		       d0 0a		      BNE	.noDraw
     35  fc0b
     36  fc0b		       a9 02		      LDA	#2
     37  fc0d		       85 1f		      STA	ENABL
     38  fc0f		       85 b6		      STA	drawingPlyr
     39  fc11		       a9 01		      LDA	#1
     40  fc13		       85 27		      STA	VDELBL
     41  fc15
     42  fc15				   .noDraw
     43  fc15
     44  fc15		       a5 b6		      LDA	drawingPlyr
     45  fc17		       85 1f		      STA	ENABL
     46  fc19		       a9 00		      LDA	#NULL
     47  fc1b		       85 b6		      STA	drawingPlyr
     48  fc1d		       c0 20		      CPY	#MMSIZE
     49  fc1f		       d0 d5		      BNE	.loop
     50  fc21
     51  fc21		       a9 00		      LDA	#NULL
     52  fc23		       85 1f		      STA	ENABL
     53  fc25
     54  fc25		       85 02		      STA	WSYNC
     55  fc27
     56  fc27		       a9 00		      LDA	#NULL
     57  fc29		       85 1b		      STA	GRP0
     58  fc2b		       85 1c		      STA	GRP1
     59  fc2d		       85 06		      STA	COLUP0
     60  fc2f		       85 07		      STA	COLUP1
------- FILE dispkern.asm
------- FILE main.asm
     70  fc31
     71  fc31							; Start VBLANK
     72  fc31
     73  fc31		       a9 c2		      LDA	#VBLANK_SET
     74  fc33		       85 01		      STA	VBLANK
     75  fc35
     76  fc35							; Make sounds 'n' stuff
     77  fc35
------- FILE sound.asm LEVEL 2 PASS 4
      0  fc35					      INCLUDE	"sound.asm"
      1  fc35							; sounds.asm - makes sounds 'n' stuff
      2  fc35
      3  fc35					      SUBROUTINE
      4  fc35
      5  fc35		       a5 bf		      LDA	stepVol
      6  fc37		       85 19		      STA	AUDV0
      7  fc39		       a5 c0		      LDA	stepSnd
      8  fc3b		       85 15		      STA	AUDC0
      9  fc3d		       a9 00		      LDA	#NULL
     10  fc3f		       85 bf		      STA	stepVol
     11  fc41
------- FILE main.asm
     79  fc41
     80  fc41							; Process input
     81  fc41
------- FILE input.asm LEVEL 2 PASS 4
      0  fc41					      INCLUDE	"input.asm"
      1  fc41							; VePseu's controller input
      2  fc41
      3  fc41		       85 02		      STA	WSYNC
      4  fc43
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fc43					      INCLUDE	"ctrlCode/cin1.asm"
      1  fc43					      SUBROUTINE
      2  fc43
      3  fc43		       ad 80 02 	      LDA	SWCHA
      4  fc46		       29 10		      AND	#FFORD
      5  fc48		       d0 2a		      BNE	.noPress
      6  fc4a
      7  fc4a		       a5 aa		      LDA	playerPos
      8  fc4c		       38		      SEC
      9  fc4d		       e5 af		      SBC	yLoss
     10  fc4f		       18		      CLC
     11  fc50		       65 ae		      ADC	yGain
     12  fc52		       a8		      TAY
     13  fc53
     14  fc53		       b1 b9		      LDA	(mapPtr),Y
     15  fc55		       d0 21		      BNE	.end
     16  fc57
     17  fc57		       a6 b0		      LDX	fordPressed
     18  fc59		       d0 13		      BNE	.wait
     19  fc5b		       84 aa		      STY	playerPos
     20  fc5d		       a9 19		      LDA	#CWAITCNT
     21  fc5f		       85 b0		      STA	fordPressed
     22  fc61
     23  fc61		       a9 07		      LDA	#PLAYER_STEPV
     24  fc63		       05 bf		      ORA	stepVol
     25  fc65		       85 bf		      STA	stepVol
     26  fc67		       a9 02		      LDA	#PLAYER_STEPS
     27  fc69		       85 c0		      STA	stepSnd
     28  fc6b
     29  fc6b		       4c 78 fc 	      JMP	.end
     30  fc6e
     31  fc6e				   .wait
     32  fc6e		       ca		      DEX
     33  fc6f		       86 b0		      STX	fordPressed
     34  fc71		       4c 78 fc 	      JMP	.end
     35  fc74
     36  fc74				   .noPress
     37  fc74		       a9 00		      LDA	#NULL
     38  fc76		       85 b0		      STA	fordPressed
     39  fc78
     40  fc78				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fc78					      INCLUDE	"ctrlCode/cin2.asm"
      1  fc78					      SUBROUTINE
      2  fc78
      3  fc78		       85 02		      STA	WSYNC
      4  fc7a		       ad 80 02 	      LDA	SWCHA
      5  fc7d		       29 20		      AND	#FBACK
      6  fc7f		       d0 2a		      BNE	.noPress
      7  fc81
      8  fc81		       a5 aa		      LDA	playerPos
      9  fc83		       38		      SEC
     10  fc84		       e5 ae		      SBC	yGain
     11  fc86		       18		      CLC
     12  fc87		       65 af		      ADC	yLoss
     13  fc89		       a8		      TAY
     14  fc8a
     15  fc8a		       b1 b9		      LDA	(mapPtr),Y
     16  fc8c		       d0 21		      BNE	.end
     17  fc8e
     18  fc8e		       a6 b1		      LDX	backPressed
     19  fc90		       d0 13		      BNE	.wait
     20  fc92
     21  fc92		       84 aa		      STY	playerPos
     22  fc94		       a9 19		      LDA	#CWAITCNT
     23  fc96		       85 b1		      STA	backPressed
     24  fc98
     25  fc98		       a9 07		      LDA	#PLAYER_STEPV
     26  fc9a		       05 bf		      ORA	stepVol
     27  fc9c		       85 bf		      STA	stepVol
     28  fc9e		       a9 02		      LDA	#PLAYER_STEPS
     29  fca0		       85 c0		      STA	stepSnd
     30  fca2
     31  fca2		       4c af fc 	      JMP	.end
     32  fca5
     33  fca5				   .wait
     34  fca5		       ca		      DEX
     35  fca6		       86 b1		      STX	backPressed
     36  fca8		       4c af fc 	      JMP	.end
     37  fcab
     38  fcab				   .noPress
     39  fcab		       a9 00		      LDA	#NULL
     40  fcad		       85 b1		      STA	backPressed
     41  fcaf
     42  fcaf				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fcaf					      INCLUDE	"ctrlCode/cin3.asm"
      1  fcaf					      SUBROUTINE
      2  fcaf
      3  fcaf		       85 02		      STA	WSYNC
      4  fcb1
      5  fcb1		       a6 b3		      LDX	rigtPressed
      6  fcb3		       d0 30		      BNE	.wait
      7  fcb5
      8  fcb5		       ad 80 02 	      LDA	SWCHA
      9  fcb8		       29 80		      AND	#FLEFT
     10  fcba		       d0 2f		      BNE	.noPress
     11  fcbc
     12  fcbc		       a6 b5		      LDX	shadowColour
     13  fcbe		       a5 b4		      LDA	wallColour
     14  fcc0		       86 b4		      STX	wallColour
     15  fcc2		       85 b5		      STA	shadowColour
     16  fcc4
     17  fcc4		       a5 af		      LDA	yLoss
     18  fcc6		       a6 ac		      LDX	xGain
     19  fcc8		       85 ac		      STA	xGain
     20  fcca		       a5 ae		      LDA	yGain
     21  fccc		       86 ae		      STX	yGain
     22  fcce		       a6 ad		      LDX	xLoss
     23  fcd0		       85 ad		      STA	xLoss
     24  fcd2		       86 af		      STX	yLoss
     25  fcd4
     26  fcd4		       a9 19		      LDA	#CWAITCNT
     27  fcd6		       85 b3		      STA	rigtPressed
     28  fcd8
     29  fcd8		       a9 07		      LDA	#PLAYER_STEPV
     30  fcda		       05 bf		      ORA	stepVol
     31  fcdc		       85 bf		      STA	stepVol
     32  fcde		       a9 06		      LDA	#PLAYER_TURNS
     33  fce0		       85 c0		      STA	stepSnd
     34  fce2
     35  fce2		       4c ed fc 	      JMP	.end
     36  fce5
     37  fce5				   .wait
     38  fce5		       ca		      DEX
     39  fce6		       86 b3		      STX	rigtPressed
     40  fce8		       4c ed fc 	      JMP	.end
     41  fceb
     42  fceb				   .noPress
     43  fceb		       86 b3		      STX	rigtPressed
     44  fced
     45  fced				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fced					      INCLUDE	"ctrlCode/cin4.asm"
      1  fced					      SUBROUTINE
      2  fced
      3  fced		       85 02		      STA	WSYNC
      4  fcef
      5  fcef		       a6 b2		      LDX	leftPressed
      6  fcf1		       d0 30		      BNE	.wait
      7  fcf3
      8  fcf3		       ad 80 02 	      LDA	SWCHA
      9  fcf6		       29 40		      AND	#FRIGT
     10  fcf8		       d0 2f		      BNE	.noPress
     11  fcfa
     12  fcfa		       a6 b5		      LDX	shadowColour
     13  fcfc		       a5 b4		      LDA	wallColour
     14  fcfe		       86 b4		      STX	wallColour
     15  fd00		       85 b5		      STA	shadowColour
     16  fd02
     17  fd02		       a5 ac		      LDA	xGain
     18  fd04		       a6 af		      LDX	yLoss
     19  fd06		       85 af		      STA	yLoss
     20  fd08		       a5 ad		      LDA	xLoss
     21  fd0a		       86 ad		      STX	xLoss
     22  fd0c		       a6 ae		      LDX	yGain
     23  fd0e		       85 ae		      STA	yGain
     24  fd10		       86 ac		      STX	xGain
     25  fd12
     26  fd12		       a9 19		      LDA	#CWAITCNT
     27  fd14		       85 b2		      STA	leftPressed
     28  fd16
     29  fd16		       a9 07		      LDA	#PLAYER_STEPV
     30  fd18		       05 bf		      ORA	stepVol
     31  fd1a		       85 bf		      STA	stepVol
     32  fd1c		       a9 06		      LDA	#PLAYER_TURNS
     33  fd1e		       85 c0		      STA	stepSnd
     34  fd20
     35  fd20		       4c 2b fd 	      JMP	.end
     36  fd23
     37  fd23				   .wait
     38  fd23		       ca		      DEX
     39  fd24		       86 b2		      STX	leftPressed
     40  fd26		       4c 2b fd 	      JMP	.end
     41  fd29
     42  fd29				   .noPress
     43  fd29		       86 b2		      STX	leftPressed
     44  fd2b
     45  fd2b				   .end
------- FILE input.asm
      9  fd2b
     10  fd2b				   CEND
     11  fd2b		       85 02		      STA	WSYNC
------- FILE main.asm
     83  fd2d
     84  fd2d							; Pad again!
     85  fd2d
      0  fd2d					      PAD	LOPAD_LIMIT
      1  fd2d
      2  fd2d				   .SCANLINES SET	LOPAD_LIMIT
      3  fd2d
      4  fd2d		       a2 1c		      LDX	#.SCANLINES
      5  fd2f
      6  fd2f				   .loop
      7  fd2f		       85 02		      STA	WSYNC
      8  fd31
      9  fd31		       ca		      DEX
     10  fd32		       d0 fb		      BNE	.loop
     11  fd34
     87  fd34
     88  fd34							; Get everything ready for VSYNC
     89  fd34
     90  fd34		       86 01		      STX	VBLANK
     91  fd36		       a9 02		      LDA	#VSYNC_SET
     92  fd38		       85 02		      STA	WSYNC
     93  fd3a		       4c a3 f6 	      JMP	screenStart	; And start all over again!
     94  fd3d
     95  fd3d							; Tell us how many bytes we've used up
     96  fd3d
      0  fd3d					      USAGE_REPORT	"ROM", $F600, $FFFA
      1  fd3d
      2  fd3d				   NAM	      SET	"ROM"
      3  fd3d				   SPOS       SET	$F600
      4  fd3d				   EPOS       SET	$FFFA
      5  fd3d				   CPOS       SET	.
      6  fd3d
      7  fd3d				   CAP	      SET	EPOS - SPOS
      8  fd3d				   TKUP       SET	CPOS - SPOS
      9  fd3d
     10  fd3d				   PCNT       SET	[TKUP * 100 / CAP]d
     11  fd3d
     12  fd3d
     13  fd3d
 72 % of your ROM is used up ( 1853 / 2554  bytes )
     14  fd3d					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  ROM ,  701 bytes are free
     15  fd3d					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16  fd3d					      ECHO	""
     17  fd3d
     98  fd3d
     99  fffa					      ORG	$FFFA
    100  fffa
    101  fffa		       83 f6		      DC.W	start	; Something
    102  fffc		       83 f6		      DC.W	start	; Entrypoint
    103  fffe		       a3 f6		      DC.W	screenStart	; Something else
    104  10000
    105  10000					       END
