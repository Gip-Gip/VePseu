------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0f	    UPPAD_LIMIT =	15	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 0f	    CWAITCNT   =	15	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
     56  10000 ????
     57  10000 ????		00 07	    PLAYER_STEPV =	7	; The volume of the player's steps
     58  10000 ????		00 02	    PLAYER_STEPS =	2
     59  10000 ????		00 06	    PLAYER_TURNS =	6
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros & stuff
      2  10000 ????
      3  10000 ????						; Scanline padding macro
      4  10000 ????				       MAC	pad
      5  10000 ????
      6  10000 ????			    .SCANLINES SET	{1}	; Scanlines to essentially skip
      7  10000 ????
      8  10000 ????				       LDX	#.SCANLINES
      9  10000 ????
     10  10000 ????			    .loop
     11  10000 ????				       STA	WSYNC
     12  10000 ????
     13  10000 ????				       DEX
     14  10000 ????				       BNE	.loop
     15  10000 ????
     16  10000 ????				       ENDM
     17  10000 ????
     18  10000 ????						; Precision delay macro
     19  10000 ????
     20  10000 ????				       MAC	delay
     21  10000 ????			    .CYCLES    SET	{1}
     22  10000 ????
     23  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     24  10000 ????				       NOP
     25  10000 ????			    .CYCLES    SET	.CYCLES - 2
     26  10000 ????				       ENDIF
     27  10000 ????
     28  10000 ????				       IF	[.CYCLES - 2] / 5
     29  10000 ????				       REPEAT	.CYCLES / 5
     30  10000 ????				       INC	DUMP
     31  10000 ????				       REPEND
     32  10000 ????			    .CYCLES    SET	.CYCLES % 5
     33  10000 ????				       ENDIF
     34  10000 ????
     35  10000 ????				       IF	.CYCLES % 3 == 1
     36  10000 ????				       NOP
     37  10000 ????			    .CYCLES    SET	.CYCLES - 2
     38  10000 ????				       ENDIF
     39  10000 ????
     40  10000 ????				       REPEAT	.CYCLES / 3
     41  10000 ????				       STA	DUMP
     42  10000 ????				       REPEND
     43  10000 ????
     44  10000 ????			    .CYCLES    SET	.CYCLES % 3
     45  10000 ????
     46  10000 ????				       REPEAT	.CYCLES / 2
     47  10000 ????				       NOP
     48  10000 ????				       REPEND
     49  10000 ????
     50  10000 ????			    .CYCLES    SET	.CYCLES % 2
     51  10000 ????
     52  10000 ????				       IF	.CYCLES
     53  10000 ????				       ERR
     54  10000 ????				       ENDIF
     55  10000 ????
     56  10000 ????				       ENDM
     57  10000 ????
     58  10000 ????						; Macro used to find the space used up in a certain section of ram
     59  10000 ????
     60  10000 ????				       MAC	usage_report
     61  10000 ????
     62  10000 ????			    NAM        SET	{1}	; Name of the section
     63  10000 ????			    SPOS       SET	{2}	; Start address of the section
     64  10000 ????			    EPOS       SET	{3}	; End address of the section
     65  10000 ????			    CPOS       SET	.	; The current position of the macro in the section
     66  10000 ????
     67  10000 ????			    CAP        SET	EPOS - SPOS	; Space that exists
     68  10000 ????			    TKUP       SET	CPOS - SPOS	; Space taken up by data
     69  10000 ????
     70  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d	; Percent of space taken by data, converted to
     71  10000 ????						; a string so the following line doesn't exceed
     72  10000 ????						; 80 characters
     73  10000 ????
     74  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     75  10000 ????
     76  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   fordPressed DC	0
     57 U00b1		       00	   backPressed DC	0
     58 U00b2		       00	   leftPressed DC	0
     59 U00b3		       00	   rigtPressed DC	0
     60 U00b4
     61 U00b4		       00	   wallColour DC	0
     62 U00b5		       00	   shadowColour DC	0
     63 U00b6		       00	   drawingPlyr DC	0
     64 U00b7		       00	   direction  DC	0
     65 U00b8
     66 U00b8		       00 00	   miniMapPtr DC.W	0
     67 U00ba		       00 00	   mapPtr     DC.W	0
     68 U00bc
     69 U00bc				   sprite
     70 U00bc		       00	   spriteAddrH DC	0
     71 U00bd		       00	   spriteAddrL DC	0
     72 U00be
     73 U00be		       00	   spriteHeight DC	0
     74 U00bf		       00	   spritePosY DC	0
     75 U00c0
     76 U00c0		       00	   stepVol    DC	0
     77 U00c1		       00	   stepSnd    DC	0
     78 U00c2
      0 U00c2					      USAGE_REPORT	"RAM", $80, $100
      1 U00c2
      2 U00c2				   NAM	      SET	"RAM"
      3 U00c2				   SPOS       SET	$80
      4 U00c2				   EPOS       SET	$100
      5 U00c2				   CPOS       SET	.
      6 U00c2
      7 U00c2				   CAP	      SET	EPOS - SPOS
      8 U00c2				   TKUP       SET	CPOS - SPOS
      9 U00c2
     10 U00c2				   PCNT       SET	[TKUP * 100 / CAP]d
     11 U00c2
     12 U00c2
     13 U00c2
 51 % of your RAM is used up ( 66 / 128 ) bytes
     14 U00c2					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15 U00c2
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c2					      INCLUDE	"include/pia_addr.h"
      1 U00c2							; PIA addresses
      2 U00c2
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   carl
      8  f078		       00		      DC	%00000000
      9  f079		       66		      DC	%01100110
     10  f07a		       24		      DC	%00100100
     11  f07b		       3c		      DC	%00111100
     12  f07c		       42		      DC	%01000010
     13  f07d		       bd		      DC	%10111101
     14  f07e		       c3		      DC	%11000011
     15  f07f		       81		      DC	%10000001
     16  f080		       a5		      DC	%10100101
     17  f081		       42		      DC	%01000010
     18  f082		       3c		      DC	%00111100
     19  f083
     20  f083				   carlH      SET	. - carl
     21  f083
     22  f083				   miniMap_01
     23  f083		       e0 07		      DC.W	%0000011111100000
     24  f085		       bf fd		      DC.W	%1111110110111111
     25  f087		       80 01		      DC.W	%0000000110000000
     26  f089		       80 01		      DC.W	%0000000110000000
     27  f08b		       be bd		      DC.W	%1011110110111110
     28  f08d		       a2 a5		      DC.W	%1010010110100010
     29  f08f		       a2 a7		      DC.W	%1010011110100010
     30  f091		       e2 a7		      DC.W	%1010011111100010
     31  f093		       e2 a5		      DC.W	%1010010111100010
     32  f095		       be bd		      DC.W	%1011110110111110
     33  f097		       80 81		      DC.W	%1000000110000000
     34  f099		       80 81		      DC.W	%1000000110000000
     35  f09b		       bf fd		      DC.W	%1111110110111111
     36  f09d		       a0 05		      DC.W	%0000010110100000
     37  f09f		       a0 05		      DC.W	%0000010110100000
     38  f0a1		       e0 07		      DC.W	%0000011111100000
     39  f0a3
     40  f0a3				   map_01_load
     41  f0a3		       a9 d1		      LDA	#MAP_01_POS
     42  f0a5		       85 aa		      STA	playerPos
     43  f0a7		       a9 10		      LDA	#MAP_01_WDTH
     44  f0a9		       85 ab		      STA	mapWidth
     45  f0ab
     46  f0ab		       a9 00		      LDA	#<map_01
     47  f0ad		       85 ba		      STA	mapPtr
     48  f0af		       a9 f1		      LDA	#>map_01
     49  f0b1		       85 bb		      STA	mapPtr + 1
     50  f0b3
     51  f0b3		       a9 83		      LDA	#<miniMap_01
     52  f0b5		       85 b8		      STA	miniMapPtr
     53  f0b7		       a9 f0		      LDA	#>miniMap_01
     54  f0b9		       85 b9		      STA	miniMapPtr + 1
     55  f0bb		       60		      RTS
     56  f0bc
     57  f0bc
     58  f100		       00 00 00 00*	      ALIGN	256
     59  f100
     60  f100				   map_01
     61  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     62  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     63  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     64  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     65  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     66  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     67  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     68  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     69  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     70  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     71  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     72  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     73  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     74  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     75  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     76  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F800
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F800
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200
     10  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     11  f200
     12  f200
     13  f200
 25 % of your map space is used up ( 512 / 2048 ) bytes
     14  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15  f200
     15  f200
     16  f800					      ORG	$F800
     17  f800
     18  f800				   start
     19  f800
     20  f800							; Initialize everything
     21  f800
------- FILE init.asm LEVEL 2 PASS 4
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800					      SUBROUTINE
      4  f800
      5  f800		       a2 ff		      LDX	#stack
      6  f802		       9a		      TXS
      7  f803
      8  f803		       a9 00		      LDA	#NULL
      9  f805
     10  f805		       d8		      CLD
     11  f806		       18		      CLC
     12  f807		       58		      CLI
     13  f808		       b8		      CLV
     14  f809
     15  f809		       a2 00		      LDX	#NULL
     16  f80b
     17  f80b				   .loop
     18  f80b
     19  f80b		       95 00		      STA	cleanStart,X
     20  f80d		       ca		      DEX
     21  f80e
     22  f80e		       d0 fb		      BNE	.loop
     23  f810
     24  f810		       20 a3 f0 	      JSR	map_01_load
     25  f813
     26  f813		       a5 ab		      LDA	mapWidth
     27  f815		       85 af		      STA	yLoss
     28  f817		       a9 01		      LDA	#ONE
     29  f819		       85 ac		      STA	xGain
     30  f81b
     31  f81b		       a9 86		      LDA	#WCOLU
     32  f81d		       85 b4		      STA	wallColour
     33  f81f		       a9 82		      LDA	#SCOLU
     34  f821		       85 b5		      STA	shadowColour
     35  f823
     36  f823		       a9 02		      LDA	#2
     37  f825		       85 17		      STA	AUDF0
     38  f827		       85 15		      STA	AUDC0
------- FILE main.asm
     23  f829
     24  f829		       a9 02		      LDA	#VSYNC_SET
     25  f82b
     26  f82b				   screenStart
     27  f82b
     28  f82b							; Start vsync (3 scanlines)
     29  f82b		       85 00		      STA	VSYNC
     30  f82d
     31  f82d		       85 02		      STA	WSYNC
     32  f82f		       85 02		      STA	WSYNC
     33  f831		       a9 00		      LDA	#NULL
     34  f833		       85 02		      STA	WSYNC
     35  f835
     36  f835		       85 00		      STA	VSYNC
     37  f837
     38  f837							; Render everything
     39  f837
     40  f837
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f837					      INCLUDE	"walrend.asm"
      1  f837							; VePseu's wall renderer
      2  f837
      3  f837		       a4 aa		      LDY	playerPos
      4  f839
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f839					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f839							; Peripheral vision rendering (54 cycles)
      2  f839
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f839					      INCLUDE	"include/ands_0.h"
      1  f839							; The AND constants for peripheral vision
      2  f839
      3  f839		       00 c0	   AND_W0S1P1 =	%11000000
      4  f839		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f839
      0  f839					      X_POS_LOS		; 24 cycles
      1  f839
      2  f839		       98		      TYA
      3  f83a		       18		      CLC
      4  f83b		       65 ad		      ADC	xLoss
      5  f83d		       38		      SEC
      6  f83e		       e5 ac		      SBC	xGain
      7  f840		       a8		      TAY
      8  f841
      6  f841		       b1 ba		      LDA	(mapPtr),Y
      7  f843		       29 c0		      AND	#AND_W0S1P1
      8  f845		       85 9b		      STA	shadow1a
      9  f847
     10  f847		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f848		       18		      CLC
     12  f849		       65 ac		      ADC	xGain
     13  f84b		       65 ac		      ADC	xGain
     14  f84d		       38		      SEC
     15  f84e		       e5 ad		      SBC	xLoss
     16  f850		       e5 ad		      SBC	xLoss
     17  f852		       a8		      TAY
     18  f853
     19  f853		       b1 ba		      LDA	(mapPtr),Y	; 10 cycles
     20  f855		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f857
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f857					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f857							; Render the first layer (not that ugly) (86 cycles)
      2  f857
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f857					      INCLUDE	"include/ands_1.h"
      1  f857							; The AND constants for layer 1
      2  f857
      3  f857		       00 03	   AND_W1S1P1 =	%00000011
      4  f857		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f857
      0  f857					      Y_POS_ADV		; 30 cycles
      1  f857
      2  f857		       98		      TYA
      3  f858		       18		      CLC
      4  f859		       65 ae		      ADC	yGain
      5  f85b		       38		      SEC
      6  f85c		       e5 af		      SBC	yLoss
      7  f85e		       a8		      TAY
      8  f85f
      6  f85f		       b1 ba		      LDA	(mapPtr),Y
      7  f861		       85 9e		      STA	shadow1d
      8  f863
      0  f863					      X_POS_LOS		; 22 cycles
      1  f863
      2  f863		       98		      TYA
      3  f864		       18		      CLC
      4  f865		       65 ad		      ADC	xLoss
      5  f867		       38		      SEC
      6  f868		       e5 ac		      SBC	xGain
      7  f86a		       a8		      TAY
      8  f86b
     10  f86b		       b1 ba		      LDA	(mapPtr),Y
     11  f86d		       85 80		      STA	wall1
     12  f86f		       85 81		      STA	wall1+1
     13  f871		       85 82		      STA	wall1+2
     14  f873		       85 83		      STA	wall1+3
     15  f875		       85 84		      STA	wall1+4
     16  f877
     17  f877		       a5 9e		      LDA	shadow1d
     18  f879		       aa		      TAX
     19  f87a		       05 80		      ORA	wall1
     20  f87c		       45 80		      EOR	wall1
     21  f87e		       85 9e		      STA	shadow1d
     22  f880		       8a		      TXA
     23  f881		       05 9f		      ORA	shadow1e
     24  f883		       05 80		      ORA	wall1
     25  f885		       45 80		      EOR	wall1
     26  f887		       29 03		      AND	#AND_W1S1P2
     27  f889		       85 9f		      STA	shadow1e
     28  f88b
      0  f88b					      X_POS_LOS		; 34 cycles
      1  f88b
      2  f88b		       98		      TYA
      3  f88c		       18		      CLC
      4  f88d		       65 ad		      ADC	xLoss
      5  f88f		       38		      SEC
      6  f890		       e5 ac		      SBC	xGain
      7  f892		       a8		      TAY
      8  f893
     30  f893		       b1 ba		      LDA	(mapPtr),Y
     31  f895		       05 80		      ORA	wall1
     32  f897		       aa		      TAX
     33  f898		       05 9b		      ORA	shadow1a
     34  f89a		       45 80		      EOR	wall1
     35  f89c		       85 9b		      STA	shadow1a
     36  f89e		       8a		      TXA
     37  f89f		       45 80		      EOR	wall1
     38  f8a1		       29 03		      AND	#AND_W1S1P2
     39  f8a3		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f8a5
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f8a5					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f8a5							; Render the second layer (186 cycles)
      2  f8a5
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f8a5					      INCLUDE	"include/ands_2.h"
      1  f8a5							; The AND constants for layer 2
      2  f8a5
      3  f8a5		       00 e0	   AND_W2S1P1 =	%11100000
      4  f8a5		       00 fc	   AND_W2S2P1 =	%11111100
      5  f8a5
      6  f8a5		       00 03	   AND_W2S0P1 =	%00000011
      7  f8a5		       00 04	   AND_W2S1P2 =	%00000100
      8  f8a5		       00 0c	   AND_W2S2P2 =	%00001100
      9  f8a5
     10  f8a5		       00 fc	   AND_W2S0P2 =	%11111100
     11  f8a5
     12  f8a5		       00 80	   AND_W2S1P3 =	%10000000
     13  f8a5		       00 c0	   AND_W2S2P3 =	%11000000
     14  f8a5
     15  f8a5		       00 01	   AND_W2S1P4 =	%00000001
     16  f8a5		       00 0f	   AND_W2S2P4 =	%00001111
     17  f8a5		       00 03	   AND_W2S1P5 =	%00000011
     18  f8a5		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f8a5
      0  f8a5					      Y_POS_ADV_AL		; 35 cycles
      1  f8a5
      2  f8a5		       98		      TYA
      3  f8a6		       18		      CLC
      4  f8a7		       65 ae		      ADC	yGain
      5  f8a9		       65 ad		      ADC	xLoss
      6  f8ab		       38		      SEC
      7  f8ac		       e5 af		      SBC	yLoss
      8  f8ae		       e5 ac		      SBC	xGain
      9  f8b0		       a8		      TAY
     10  f8b1
      6  f8b1		       b1 ba		      LDA	(mapPtr),Y
      7  f8b3		       29 fc		      AND	#AND_W2S2P1
      8  f8b5		       85 a0		      STA	shadow2ab
      9  f8b7		       29 e0		      AND	#AND_W2S1P1
     10  f8b9		       85 91		      STA	shadow2aa
     11  f8bb
      0  f8bb					      X_POS_GAN		; 41 cycles
      1  f8bb
      2  f8bb		       98		      TYA
      3  f8bc		       18		      CLC
      4  f8bd		       65 ac		      ADC	xGain
      5  f8bf		       38		      SEC
      6  f8c0		       e5 ad		      SBC	xLoss
      7  f8c2		       a8		      TAY
      8  f8c3
     13  f8c3		       b1 ba		      LDA	(mapPtr),Y
     14  f8c5		       aa		      TAX
     15  f8c6		       85 85		      STA	wall2a
     16  f8c8		       29 03		      AND	#AND_W2S0P1
     17  f8ca		       85 86		      STA	wall2b
     18  f8cc		       8a		      TXA
     19  f8cd		       29 0c		      AND	#AND_W2S2P2
     20  f8cf		       85 a1		      STA	shadow2bb
     21  f8d1		       29 04		      AND	#AND_W2S1P2
     22  f8d3		       85 92		      STA	shadow2ba
     23  f8d5
      0  f8d5					      X_POS_GAN		; 30 cycles
      1  f8d5
      2  f8d5		       98		      TYA
      3  f8d6		       18		      CLC
      4  f8d7		       65 ac		      ADC	xGain
      5  f8d9		       38		      SEC
      6  f8da		       e5 ad		      SBC	xLoss
      7  f8dc		       a8		      TAY
      8  f8dd
     25  f8dd		       b1 ba		      LDA	(mapPtr),Y
     26  f8df		       85 87		      STA	wall2c
     27  f8e1		       29 fc		      AND	#AND_W2S0P2
     28  f8e3		       05 86		      ORA	wall2b
     29  f8e5		       85 86		      STA	wall2b
     30  f8e7
      0  f8e7					      X_POS_GAN		; 35 cycles
      1  f8e7
      2  f8e7		       98		      TYA
      3  f8e8		       18		      CLC
      4  f8e9		       65 ac		      ADC	xGain
      5  f8eb		       38		      SEC
      6  f8ec		       e5 ad		      SBC	xLoss
      7  f8ee		       a8		      TAY
      8  f8ef
     32  f8ef		       b1 ba		      LDA	(mapPtr),Y
     33  f8f1		       85 88		      STA	wall2d
     34  f8f3		       85 89		      STA	wall2e
     35  f8f5		       29 c0		      AND	#AND_W2S2P3
     36  f8f7		       85 a2		      STA	shadow2cb
     37  f8f9		       29 80		      AND	#AND_W2S1P3
     38  f8fb		       85 93		      STA	shadow2ca
     39  f8fd
      0  f8fd					      X_POS_GAN		; 37 cycles
      1  f8fd
      2  f8fd		       98		      TYA
      3  f8fe		       18		      CLC
      4  f8ff		       65 ac		      ADC	xGain
      5  f901		       38		      SEC
      6  f902		       e5 ad		      SBC	xLoss
      7  f904		       a8		      TAY
      8  f905
     41  f905		       b1 ba		      LDA	(mapPtr),Y
     42  f907		       29 0f		      AND	#AND_W2S2P4
     43  f909		       85 a3		      STA	shadow2db
     44  f90b		       29 03		      AND	#AND_W2S1P5
     45  f90d		       85 95		      STA	shadow2ea
     46  f90f		       85 a4		      STA	shadow2eb
     47  f911		       29 01		      AND	#AND_W2S1P4
     48  f913		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f915
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f915					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f915							; Render the third layer (it's really ugly, at 281 cycles)
      2  f915
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f915					      INCLUDE	"include/ands_3.h"
      1  f915							; The AND constants for render layer 3
      2  f915
      3  f915		       00 80	   AND_W3S1P1 =	%10000000
      4  f915		       00 c0	   AND_W3S2P1 =	%11000000
      5  f915
      6  f915		       00 fc	   AND_W3S0P1 =	%11111100
      7  f915		       00 02	   AND_W3S1P2 =	%00000010
      8  f915		       00 03	   AND_W3S2P2 =	%00000011
      9  f915
     10  f915		       00 03	   AND_W3S0P2 =	%00000011
     11  f915		       00 0f	   AND_W3S0P3 =	%00001111
     12  f915		       00 10	   AND_W3S1P3 =	%00010000
     13  f915		       00 30	   AND_W3S2P3 =	%00110000
     14  f915
     15  f915		       00 f0	   AND_W3S0P4 =	%11110000
     16  f915		       00 30	   AND_W3S0P5 =	%00110000
     17  f915
     18  f915		       00 c0	   AND_W3S0P6 =	%11000000
     19  f915		       00 f0	   AND_W3S0P7 =	%11110000
     20  f915		       00 20	   AND_W3S1P4 =	%00100000
     21  f915		       00 30	   AND_W3S2P4 =	%00110000
     22  f915
     23  f915		       00 0f	   AND_W3S0P8 =	%00001111
     24  f915		       00 03	   AND_W3S0P9 =	%00000011
     25  f915		       00 10	   AND_W3S1P5 =	%00010000
     26  f915		       00 30	   AND_W3S2P5 =	%00110000
     27  f915
     28  f915		       00 02	   AND_W3S1P6 =	%00000010
     29  f915		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f915
      0  f915					      Y_POS_ADV_AG		; 35 cycles
      1  f915
      2  f915		       98		      TYA
      3  f916		       18		      CLC
      4  f917		       65 ae		      ADC	yGain
      5  f919		       65 ac		      ADC	xGain
      6  f91b		       38		      SEC
      7  f91c		       e5 af		      SBC	yLoss
      8  f91e		       e5 ad		      SBC	xLoss
      9  f920		       a8		      TAY
     10  f921
      6  f921		       b1 ba		      LDA	(mapPtr),Y
      7  f923		       29 03		      AND	#AND_W3S2P6
      8  f925		       85 a9		      STA	shadow3eb
      9  f927		       29 02		      AND	#AND_W3S1P6
     10  f929		       85 9a		      STA	shadow3ea
     11  f92b
      0  f92b					      X_POS_LOS		; 38 cycles
      1  f92b
      2  f92b		       98		      TYA
      3  f92c		       18		      CLC
      4  f92d		       65 ad		      ADC	xLoss
      5  f92f		       38		      SEC
      6  f930		       e5 ac		      SBC	xGain
      7  f932		       a8		      TAY
      8  f933
     13  f933		       b1 ba		      LDA	(mapPtr),Y
     14  f935		       aa		      TAX
     15  f936		       29 0f		      AND	#AND_W3S0P8
     16  f938		       85 8d		      STA	wall3d
     17  f93a		       29 03		      AND	#AND_W3S0P9
     18  f93c		       85 8e		      STA	wall3e
     19  f93e		       8a		      TXA
     20  f93f		       29 30		      AND	#AND_W3S2P5
     21  f941		       85 a8		      STA	shadow3db
     22  f943		       29 10		      AND	#AND_W3S1P5
     23  f945		       85 99		      STA	shadow3da
     24  f947
      0  f947					      X_POS_LOS		; 46 cycles
      1  f947
      2  f947		       98		      TYA
      3  f948		       18		      CLC
      4  f949		       65 ad		      ADC	xLoss
      5  f94b		       38		      SEC
      6  f94c		       e5 ac		      SBC	xGain
      7  f94e		       a8		      TAY
      8  f94f
     26  f94f		       b1 ba		      LDA	(mapPtr),Y
     27  f951		       aa		      TAX
     28  f952		       29 f0		      AND	#AND_W3S0P7
     29  f954		       05 8d		      ORA	wall3d
     30  f956		       85 8d		      STA	wall3d
     31  f958		       29 c0		      AND	#AND_W3S0P6
     32  f95a		       85 8c		      STA	wall3c
     33  f95c		       8a		      TXA
     34  f95d		       29 30		      AND	#AND_W3S2P4
     35  f95f		       85 a7		      STA	shadow3cb
     36  f961		       29 20		      AND	#AND_W3S1P4
     37  f963		       85 98		      STA	shadow3ca
     38  f965
      0  f965					      X_POS_LOS		; 32 cycles
      1  f965
      2  f965		       98		      TYA
      3  f966		       18		      CLC
      4  f967		       65 ad		      ADC	xLoss
      5  f969		       38		      SEC
      6  f96a		       e5 ac		      SBC	xGain
      7  f96c		       a8		      TAY
      8  f96d
     40  f96d		       b1 ba		      LDA	(mapPtr),Y
     41  f96f		       29 f0		      AND	#AND_W3S0P4
     42  f971		       85 8b		      STA	wall3b
     43  f973		       29 30		      AND	#AND_W3S0P5
     44  f975		       05 8c		      ORA	wall3c
     45  f977		       85 8c		      STA	wall3c
     46  f979
      0  f979					      X_POS_LOS		; 46 cycles
      1  f979
      2  f979		       98		      TYA
      3  f97a		       18		      CLC
      4  f97b		       65 ad		      ADC	xLoss
      5  f97d		       38		      SEC
      6  f97e		       e5 ac		      SBC	xGain
      7  f980		       a8		      TAY
      8  f981
     48  f981		       b1 ba		      LDA	(mapPtr),Y
     49  f983		       aa		      TAX
     50  f984		       29 0f		      AND	#AND_W3S0P3
     51  f986		       05 8b		      ORA	wall3b
     52  f988		       85 8b		      STA	wall3b
     53  f98a		       29 03		      AND	#AND_W3S0P2
     54  f98c		       85 8a		      STA	wall3a
     55  f98e		       8a		      TXA
     56  f98f		       29 30		      AND	#AND_W3S2P3
     57  f991		       85 a6		      STA	shadow3bb
     58  f993		       29 10		      AND	#AND_W3S1P3
     59  f995		       85 97		      STA	shadow3ba
     60  f997
      0  f997					      X_POS_LOS		; 41 cycles
      1  f997
      2  f997		       98		      TYA
      3  f998		       18		      CLC
      4  f999		       65 ad		      ADC	xLoss
      5  f99b		       38		      SEC
      6  f99c		       e5 ac		      SBC	xGain
      7  f99e		       a8		      TAY
      8  f99f
     62  f99f		       b1 ba		      LDA	(mapPtr),Y
     63  f9a1		       aa		      TAX
     64  f9a2		       29 fc		      AND	#AND_W3S0P1
     65  f9a4		       05 8a		      ORA	wall3a
     66  f9a6		       85 8a		      STA	wall3a
     67  f9a8		       8a		      TXA
     68  f9a9		       29 03		      AND	#AND_W3S2P2
     69  f9ab		       85 a5		      STA	shadow3ab
     70  f9ad		       29 02		      AND	#AND_W3S1P2
     71  f9af		       85 96		      STA	shadow3aa
     72  f9b1
      0  f9b1					      X_POS_LOS		; 35 cycles
      1  f9b1
      2  f9b1		       98		      TYA
      3  f9b2		       18		      CLC
      4  f9b3		       65 ad		      ADC	xLoss
      5  f9b5		       38		      SEC
      6  f9b6		       e5 ac		      SBC	xGain
      7  f9b8		       a8		      TAY
      8  f9b9
     74  f9b9		       b1 ba		      LDA	(mapPtr),Y
     75  f9bb		       29 c0		      AND	#AND_W3S2P1
     76  f9bd		       05 a5		      ORA	shadow3ab
     77  f9bf		       85 a5		      STA	shadow3ab
     78  f9c1		       29 80		      AND	#AND_W3S1P1
     79  f9c3		       05 96		      ORA	shadow3aa
     80  f9c5		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9c7
     13  f9c7		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9c9					      INCLUDE	"scrend.asm"
      1  f9c9							; VePseu's screen renderer
      2  f9c9
      3  f9c9					      SUBROUTINE
      4  f9c9
      5  f9c9		       a2 00		      LDX	#INDEXINIT	; 2 cycles
      6  f9cb
      7  f9cb				   .loop		; Totals at 909 cycles
      8  f9cb
      9  f9cb		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     10  f9cd		       15 80		      ORA	wall1,X
     11  f9cf		       95 85		      STA	wall2a,X
     12  f9d1
     13  f9d1		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     14  f9d3		       15 9b		      ORA	shadow1a,X
     15  f9d5		       95 91		      STA	shadow2aa,X
     16  f9d7
     17  f9d7		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     18  f9d9		       15 9b		      ORA	shadow1a,X
     19  f9db		       95 a0		      STA	shadow2ab,X
     20  f9dd
     21  f9dd		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     22  f9df		       15 9b		      ORA	shadow1a,X
     23  f9e1		       55 9b		      EOR	shadow1a,X
     24  f9e3		       95 85		      STA	wall2a,X
     25  f9e5
     26  f9e5		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     27  f9e7		       15 85		      ORA	wall2a,X
     28  f9e9		       55 85		      EOR	wall2a,X
     29  f9eb		       95 91		      STA	shadow2aa,X
     30  f9ed
     31  f9ed		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     32  f9ef		       15 85		      ORA	wall2a,X
     33  f9f1		       55 85		      EOR	wall2a,X
     34  f9f3		       95 a0		      STA	shadow2ab,X
     35  f9f5
     36  f9f5		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     37  f9f6		       e0 0a		      CPX	#WALLCNT
     38  f9f8		       d0 d1		      BNE	.loop
     39  f9fa
     40  f9fa		       a2 ff		      LDX	#FULLWALL
     41  f9fc
     42  f9fc		       8a		      TXA
     43  f9fd		       45 a5		      EOR	shadow3ab
     44  f9ff		       85 8f		      STA	wall4a
     45  fa01
     46  fa01		       8a		      TXA
     47  fa02		       45 a6		      EOR	shadow3bb
     48  fa04		       85 90		      STA	wall4b
     49  fa06
     50  fa06		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     43  fa08
     44  fa08
     45  fa08							; Tell the draw code to draw carl...
     46  fa08
     47  fa08		       a9 78		      LDA	#<carl
     48  fa0a		       85 bc		      STA	spriteAddrH
     49  fa0c		       a9 f0		      LDA	#>carl
     50  fa0e		       85 bd		      STA	spriteAddrL
     51  fa10		       a9 0b		      LDA	#carlH
     52  fa12		       85 be		      STA	spriteHeight
     53  fa14
     54  fa14		       a9 0e		      LDA	#14	; Color him...
     55  fa16		       85 06		      STA	COLUP0
     56  fa18
     57  fa18		       a6 bf		      LDX	spritePosY	; And roll him accross the screen for some reason
     58  fa1a		       e8		      INX
     59  fa1b							;STX spritePosY
     60  fa1b
     61  fa1b							; Pad!
     62  fa1b
      0  fa1b					      PAD	UPPAD_LIMIT
      1  fa1b
      2  fa1b				   .SCANLINES SET	UPPAD_LIMIT
      3  fa1b
      4  fa1b		       a2 0f		      LDX	#.SCANLINES
      5  fa1d
      6  fa1d				   .loop
      7  fa1d		       85 02		      STA	WSYNC
      8  fa1f
      9  fa1f		       ca		      DEX
     10  fa20		       d0 fb		      BNE	.loop
     11  fa22
     64  fa22
     65  fa22							; Draw everything
     66  fa22
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa22					      INCLUDE	"dispkern.asm"
      1  fa22							; VePseu's display kernel
      2  fa22
      3  fa22		       4c 25 fa 	      JMP	drawStart
      4  fa25
      5  fa25							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa25							;
      7  fa25							; dc_w1s1.asm
      8  fa25							; |   | |
      9  fa25							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa25							; |   |
     11  fa25							; |   |- The wall it draws
     12  fa25							; |
     13  fa25							; |- Draw-code identifies
     14  fa25							;
     15  fa25							; See GLOSSARY.TXT for definitions of vague words
     16  fa25
     17  fa25				   drawStart
     18  fa25
     19  fa25		       a4 bf		      LDY	spritePosY	; The Y register is expected to hold the sprite's Y position
     20  fa27
     21  fa27							; Also note that if the sprite position = 0 then the sprite
     22  fa27							; will not be drawn
     23  fa27
     24  fa27
     25  fa27		       b8		      CLV		; The overflow flag is used to determine which half of the screen is
     26  fa28							; being drawn, allowing code to be easily re-used. This requires that
     27  fa28							; the overflow flag be set to zero at start, otherwise things won't turn
     28  fa28							; out so well...
     29  fa28
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa28					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa28							; The draw code for the 1st wall and shadow
      2  fa28
      3  fa28				   dc_w1s1    SUBROUTINE
      4  fa28
      5  fa28		       a2 00		      LDX	#INDEXINIT
      6  fa2a		       4c 3a fa 	      JMP	.loop
      7  fa2d
      8  fa2d				   .noSprite_1
      9  fa2d							; Depending on the location in the program the branch here might cross a
     10  fa2d							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa2d							; delay simply check if the page number (the MSB of the address) is
     12  fa2d							; different between the branch and it's destination
     13  fa2d					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa2d					      DELAY	11
      1  fa2d				   .CYCLES    SET	11
      2  fa2d
      3  fa2d					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa2d		       ea		      NOP
      5  fa2d				   .CYCLES    SET	.CYCLES - 2
      6  fa2e					      ENDIF
      7  fa2e
      8  fa2e					      IF	[.CYCLES - 2] / 5
      9  fa2e					      REPEAT	.CYCLES / 5
     10  fa2e		       e6 30		      INC	DUMP
     11  fa30					      REPEND
     12  fa30				   .CYCLES    SET	.CYCLES % 5
     13  fa30					      ENDIF
     14  fa30
     15  fa30					      IF	.CYCLES % 3 == 1
     16  fa30		       ea		      NOP
     17  fa30				   .CYCLES    SET	.CYCLES - 2
     18  fa31					      ENDIF
     19  fa31
     20  fa31				  -	      REPEAT	.CYCLES / 3
     21  fa31				  -	      STA	DUMP
     22  fa31					      REPEND
     23  fa31
     24  fa31				   .CYCLES    SET	.CYCLES % 3
     25  fa31
     26  fa31					      REPEAT	.CYCLES / 2
     27  fa31		       ea		      NOP
     28  fa32					      REPEND
     29  fa32
     30  fa32				   .CYCLES    SET	.CYCLES % 2
     31  fa32
     32  fa32				  -	      IF	.CYCLES
     33  fa32				  -	      ERR
     34  fa32					      ENDIF
     35  fa32
     15  fa32				  -	      ELSE
     16  fa32				  -	      DELAY	10
     17  fa32					      ENDIF
     18  fa32		       4c 50 fa 	      JMP	.noSprite_ret
     19  fa35
     20  fa35				   .noSprite_2
     21  fa35					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa35					      DELAY	4
      1  fa35				   .CYCLES    SET	4
      2  fa35
      3  fa35				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa35				  -	      NOP
      5  fa35				  -.CYCLES    SET	.CYCLES - 2
      6  fa35					      ENDIF
      7  fa35
      8  fa35				  -	      IF	[.CYCLES - 2] / 5
      9  fa35				  -	      REPEAT	.CYCLES / 5
     10  fa35				  -	      INC	DUMP
     11  fa35				  -	      REPEND
     12  fa35				  -.CYCLES    SET	.CYCLES % 5
     13  fa35					      ENDIF
     14  fa35
     15  fa35					      IF	.CYCLES % 3 == 1
     16  fa35		       ea		      NOP
     17  fa35				   .CYCLES    SET	.CYCLES - 2
     18  fa36					      ENDIF
     19  fa36
     20  fa36				  -	      REPEAT	.CYCLES / 3
     21  fa36				  -	      STA	DUMP
     22  fa36					      REPEND
     23  fa36
     24  fa36				   .CYCLES    SET	.CYCLES % 3
     25  fa36
     26  fa36					      REPEAT	.CYCLES / 2
     27  fa36		       ea		      NOP
     28  fa37					      REPEND
     29  fa37
     30  fa37				   .CYCLES    SET	.CYCLES % 2
     31  fa37
     32  fa37				  -	      IF	.CYCLES
     33  fa37				  -	      ERR
     34  fa37					      ENDIF
     35  fa37
     23  fa37				  -	      ELSE
     24  fa37				  -	      DELAY	3
     25  fa37					      ENDIF
     26  fa37		       4c 50 fa 	      JMP	.noSprite_ret
     27  fa3a
     28  fa3a				   .loop
     29  fa3a		       a5 b4		      LDA	wallColour
     30  fa3c		       85 02		      STA	WSYNC
     31  fa3e		       85 08		      STA	COLUPF
     32  fa40		       a5 80		      LDA	wall1
     33  fa42		       85 0e		      STA	PF1
     34  fa44		       98		      TYA
     35  fa45
     36  fa45		       f0 e6		      BEQ	.noSprite_1
     37  fa47				   .branchPoint_1
     38  fa47		       88		      DEY
     39  fa48		       c4 be		      CPY	spriteHeight
     40  fa4a
     41  fa4a		       b0 e9		      BCS	.noSprite_2
     42  fa4c				   .branchPoint_2
     43  fa4c		       b1 bc		      LDA	(sprite),Y
     44  fa4e		       85 1b		      STA	GRP0
     45  fa50
     46  fa50				   .noSprite_ret
     47  fa50		       a5 80		      LDA	wall1
     48  fa52		       85 0f		      STA	PF2
      0  fa54					      DELAY	6
      1  fa54				   .CYCLES    SET	6
      2  fa54
      3  fa54				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa54				  -	      NOP
      5  fa54				  -.CYCLES    SET	.CYCLES - 2
      6  fa54					      ENDIF
      7  fa54
      8  fa54				  -	      IF	[.CYCLES - 2] / 5
      9  fa54				  -	      REPEAT	.CYCLES / 5
     10  fa54				  -	      INC	DUMP
     11  fa54				  -	      REPEND
     12  fa54				  -.CYCLES    SET	.CYCLES % 5
     13  fa54					      ENDIF
     14  fa54
     15  fa54				  -	      IF	.CYCLES % 3 == 1
     16  fa54				  -	      NOP
     17  fa54				  -.CYCLES    SET	.CYCLES - 2
     18  fa54					      ENDIF
     19  fa54
     20  fa54					      REPEAT	.CYCLES / 3
     21  fa54		       85 30		      STA	DUMP
     20  fa54					      REPEND
     21  fa56		       85 30		      STA	DUMP
     22  fa58					      REPEND
     23  fa58
     24  fa58				   .CYCLES    SET	.CYCLES % 3
     25  fa58
     26  fa58				  -	      REPEAT	.CYCLES / 2
     27  fa58				  -	      NOP
     28  fa58					      REPEND
     29  fa58
     30  fa58				   .CYCLES    SET	.CYCLES % 2
     31  fa58
     32  fa58				  -	      IF	.CYCLES
     33  fa58				  -	      ERR
     34  fa58					      ENDIF
     35  fa58
     50  fa58		       85 0d		      STA	PF0
      0  fa5a					      DELAY	19
      1  fa5a				   .CYCLES    SET	19
      2  fa5a
      3  fa5a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa5a				  -	      NOP
      5  fa5a				  -.CYCLES    SET	.CYCLES - 2
      6  fa5a					      ENDIF
      7  fa5a
      8  fa5a					      IF	[.CYCLES - 2] / 5
      9  fa5a					      REPEAT	.CYCLES / 5
     10  fa5a		       e6 30		      INC	DUMP
      9  fa5a					      REPEND
     10  fa5c		       e6 30		      INC	DUMP
      9  fa5c					      REPEND
     10  fa5e		       e6 30		      INC	DUMP
     11  fa60					      REPEND
     12  fa60				   .CYCLES    SET	.CYCLES % 5
     13  fa60					      ENDIF
     14  fa60
     15  fa60					      IF	.CYCLES % 3 == 1
     16  fa60		       ea		      NOP
     17  fa60				   .CYCLES    SET	.CYCLES - 2
     18  fa61					      ENDIF
     19  fa61
     20  fa61				  -	      REPEAT	.CYCLES / 3
     21  fa61				  -	      STA	DUMP
     22  fa61					      REPEND
     23  fa61
     24  fa61				   .CYCLES    SET	.CYCLES % 3
     25  fa61
     26  fa61					      REPEAT	.CYCLES / 2
     27  fa61		       ea		      NOP
     28  fa62					      REPEND
     29  fa62
     30  fa62				   .CYCLES    SET	.CYCLES % 2
     31  fa62
     32  fa62				  -	      IF	.CYCLES
     33  fa62				  -	      ERR
     34  fa62					      ENDIF
     35  fa62
     52  fa62		       a9 00		      LDA	#NULL
     53  fa64		       85 0f		      STA	PF2
     54  fa66		       85 0d		      STA	PF0
     55  fa68
     56  fa68		       85 02		      STA	WSYNC
     57  fa6a		       a5 b5		      LDA	shadowColour
     58  fa6c		       85 08		      STA	COLUPF
     59  fa6e		       a5 9b		      LDA	shadow1a
     60  fa70		       3d 00 f0 	      AND	and_1a,X
     61  fa73		       85 0e		      STA	PF1
     62  fa75		       a5 9c		      LDA	shadow1b
     63  fa77		       3d 1e f0 	      AND	and_1b,X
     64  fa7a		       85 0f		      STA	PF2
      0  fa7c					      DELAY	9
      1  fa7c				   .CYCLES    SET	9
      2  fa7c
      3  fa7c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa7c				  -	      NOP
      5  fa7c				  -.CYCLES    SET	.CYCLES - 2
      6  fa7c					      ENDIF
      7  fa7c
      8  fa7c					      IF	[.CYCLES - 2] / 5
      9  fa7c					      REPEAT	.CYCLES / 5
     10  fa7c		       e6 30		      INC	DUMP
     11  fa7e					      REPEND
     12  fa7e				   .CYCLES    SET	.CYCLES % 5
     13  fa7e					      ENDIF
     14  fa7e
     15  fa7e					      IF	.CYCLES % 3 == 1
     16  fa7e		       ea		      NOP
     17  fa7e				   .CYCLES    SET	.CYCLES - 2
     18  fa7f					      ENDIF
     19  fa7f
     20  fa7f				  -	      REPEAT	.CYCLES / 3
     21  fa7f				  -	      STA	DUMP
     22  fa7f					      REPEND
     23  fa7f
     24  fa7f				   .CYCLES    SET	.CYCLES % 3
     25  fa7f
     26  fa7f					      REPEAT	.CYCLES / 2
     27  fa7f		       ea		      NOP
     28  fa80					      REPEND
     29  fa80
     30  fa80				   .CYCLES    SET	.CYCLES % 2
     31  fa80
     32  fa80				  -	      IF	.CYCLES
     33  fa80				  -	      ERR
     34  fa80					      ENDIF
     35  fa80
     66  fa80		       a5 9e		      LDA	shadow1d
     67  fa82		       3d 3c f0 	      AND	and_1c,X
     68  fa85		       85 0e		      STA	PF1
     69  fa87		       a5 9f		      LDA	shadow1e
     70  fa89		       3d 5a f0 	      AND	and_1d,X
     71  fa8c		       85 0f		      STA	PF2
     72  fa8e
     73  fa8e		       e8		      INX
     74  fa8f		       e0 1e		      CPX	#UPPRWALL_S
     75  fa91		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  fa93					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  fa93							; The second wall and it's first shadow
      2  fa93
      3  fa93				   dc_w2s1    SUBROUTINE
      4  fa93
      5  fa93		       a2 03		      LDX	#PIXH
      6  fa95		       4c a5 fa 	      JMP	.loop
      7  fa98
      8  fa98				   .noSprite_1
      9  fa98					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa98					      DELAY	11
      1  fa98				   .CYCLES    SET	11
      2  fa98
      3  fa98					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa98		       ea		      NOP
      5  fa98				   .CYCLES    SET	.CYCLES - 2
      6  fa99					      ENDIF
      7  fa99
      8  fa99					      IF	[.CYCLES - 2] / 5
      9  fa99					      REPEAT	.CYCLES / 5
     10  fa99		       e6 30		      INC	DUMP
     11  fa9b					      REPEND
     12  fa9b				   .CYCLES    SET	.CYCLES % 5
     13  fa9b					      ENDIF
     14  fa9b
     15  fa9b					      IF	.CYCLES % 3 == 1
     16  fa9b		       ea		      NOP
     17  fa9b				   .CYCLES    SET	.CYCLES - 2
     18  fa9c					      ENDIF
     19  fa9c
     20  fa9c				  -	      REPEAT	.CYCLES / 3
     21  fa9c				  -	      STA	DUMP
     22  fa9c					      REPEND
     23  fa9c
     24  fa9c				   .CYCLES    SET	.CYCLES % 3
     25  fa9c
     26  fa9c					      REPEAT	.CYCLES / 2
     27  fa9c		       ea		      NOP
     28  fa9d					      REPEND
     29  fa9d
     30  fa9d				   .CYCLES    SET	.CYCLES % 2
     31  fa9d
     32  fa9d				  -	      IF	.CYCLES
     33  fa9d				  -	      ERR
     34  fa9d					      ENDIF
     35  fa9d
     11  fa9d				  -	      ELSE
     12  fa9d				  -	      DELAY	10
     13  fa9d					      ENDIF
     14  fa9d		       4c bb fa 	      JMP	.noSprite_ret
     15  faa0
     16  faa0				   .noSprite_2
     17  faa0					      IF	>.branchPoint_2 == >.noSprite_2
      0  faa0					      DELAY	4
      1  faa0				   .CYCLES    SET	4
      2  faa0
      3  faa0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faa0				  -	      NOP
      5  faa0				  -.CYCLES    SET	.CYCLES - 2
      6  faa0					      ENDIF
      7  faa0
      8  faa0				  -	      IF	[.CYCLES - 2] / 5
      9  faa0				  -	      REPEAT	.CYCLES / 5
     10  faa0				  -	      INC	DUMP
     11  faa0				  -	      REPEND
     12  faa0				  -.CYCLES    SET	.CYCLES % 5
     13  faa0					      ENDIF
     14  faa0
     15  faa0					      IF	.CYCLES % 3 == 1
     16  faa0		       ea		      NOP
     17  faa0				   .CYCLES    SET	.CYCLES - 2
     18  faa1					      ENDIF
     19  faa1
     20  faa1				  -	      REPEAT	.CYCLES / 3
     21  faa1				  -	      STA	DUMP
     22  faa1					      REPEND
     23  faa1
     24  faa1				   .CYCLES    SET	.CYCLES % 3
     25  faa1
     26  faa1					      REPEAT	.CYCLES / 2
     27  faa1		       ea		      NOP
     28  faa2					      REPEND
     29  faa2
     30  faa2				   .CYCLES    SET	.CYCLES % 2
     31  faa2
     32  faa2				  -	      IF	.CYCLES
     33  faa2				  -	      ERR
     34  faa2					      ENDIF
     35  faa2
     19  faa2				  -	      ELSE
     20  faa2				  -	      DELAY	3
     21  faa2					      ENDIF
     22  faa2		       4c bb fa 	      JMP	.noSprite_ret
     23  faa5
     24  faa5				   .loop
     25  faa5		       a5 b4		      LDA	wallColour
     26  faa7		       85 02		      STA	WSYNC
     27  faa9				   .joinIn
     28  faa9		       85 08		      STA	COLUPF
     29  faab		       a5 85		      LDA	wall2a
     30  faad		       85 0e		      STA	PF1
     31  faaf		       98		      TYA
     32  fab0
     33  fab0		       f0 e6		      BEQ	.noSprite_1
     34  fab2				   .branchPoint_1
     35  fab2		       88		      DEY
     36  fab3		       c4 be		      CPY	spriteHeight
     37  fab5
     38  fab5		       b0 e9		      BCS	.noSprite_2
     39  fab7				   .branchPoint_2
     40  fab7		       b1 bc		      LDA	(sprite),Y
     41  fab9		       85 1b		      STA	GRP0
     42  fabb
     43  fabb				   .noSprite_ret
     44  fabb		       a5 86		      LDA	wall2b
     45  fabd		       85 0f		      STA	PF2
     46  fabf
     47  fabf		       a5 87		      LDA	wall2c
     48  fac1		       85 0d		      STA	PF0
     49  fac3		       a5 88		      LDA	wall2d
     50  fac5		       85 0e		      STA	PF1
     51  fac7		       a5 89		      LDA	wall2e
     52  fac9		       85 0f		      STA	PF2
     53  facb		       a9 00		      LDA	#NULL
      0  facd					      DELAY	10
      1  facd				   .CYCLES    SET	10
      2  facd
      3  facd				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  facd				  -	      NOP
      5  facd				  -.CYCLES    SET	.CYCLES - 2
      6  facd					      ENDIF
      7  facd
      8  facd					      IF	[.CYCLES - 2] / 5
      9  facd					      REPEAT	.CYCLES / 5
     10  facd		       e6 30		      INC	DUMP
      9  facd					      REPEND
     10  facf		       e6 30		      INC	DUMP
     11  fad1					      REPEND
     12  fad1				   .CYCLES    SET	.CYCLES % 5
     13  fad1					      ENDIF
     14  fad1
     15  fad1				  -	      IF	.CYCLES % 3 == 1
     16  fad1				  -	      NOP
     17  fad1				  -.CYCLES    SET	.CYCLES - 2
     18  fad1					      ENDIF
     19  fad1
     20  fad1				  -	      REPEAT	.CYCLES / 3
     21  fad1				  -	      STA	DUMP
     22  fad1					      REPEND
     23  fad1
     24  fad1				   .CYCLES    SET	.CYCLES % 3
     25  fad1
     26  fad1				  -	      REPEAT	.CYCLES / 2
     27  fad1				  -	      NOP
     28  fad1					      REPEND
     29  fad1
     30  fad1				   .CYCLES    SET	.CYCLES % 2
     31  fad1
     32  fad1				  -	      IF	.CYCLES
     33  fad1				  -	      ERR
     34  fad1					      ENDIF
     35  fad1
     55  fad1		       85 0f		      STA	PF2
     56  fad3		       85 0d		      STA	PF0
     57  fad5
     58  fad5		       85 02		      STA	WSYNC	; Draw the shadow
     59  fad7		       a5 b5		      LDA	shadowColour
     60  fad9		       85 08		      STA	COLUPF
     61  fadb		       a5 91		      LDA	shadow2aa
     62  fadd		       05 9b		      ORA	shadow1a
     63  fadf		       85 0e		      STA	PF1
     64  fae1		       a5 92		      LDA	shadow2ba
     65  fae3		       05 9c		      ORA	shadow1b
     66  fae5		       85 0f		      STA	PF2
     67  fae7		       a5 93		      LDA	shadow2ca
     68  fae9		       85 0d		      STA	PF0
     69  faeb		       a5 94		      LDA	shadow2da
     70  faed		       05 9e		      ORA	shadow1d
     71  faef		       85 0e		      STA	PF1
     72  faf1		       a5 95		      LDA	shadow2ea
     73  faf3		       05 9f		      ORA	shadow1e
     74  faf5		       85 0f		      STA	PF2
     75  faf7		       a9 00		      LDA	#NULL
     76  faf9		       85 0d		      STA	PF0
     77  fafb
     78  fafb		       ca		      DEX
     79  fafc		       d0 a7		      BNE	.loop
     80  fafe
     81  fafe		       50 03		      BVC	dc_w2s2_delayed
     82  fb00		       4c ca fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fb03					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fb03							; The second wall and it's second shadow
      2  fb03
      3  fb03				   dc_w2s2_delayed
      0  fb03					      DELAY	2
      1  fb03				   .CYCLES    SET	2
      2  fb03
      3  fb03				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb03				  -	      NOP
      5  fb03				  -.CYCLES    SET	.CYCLES - 2
      6  fb03					      ENDIF
      7  fb03
      8  fb03				  -	      IF	[.CYCLES - 2] / 5
      9  fb03				  -	      REPEAT	.CYCLES / 5
     10  fb03				  -	      INC	DUMP
     11  fb03				  -	      REPEND
     12  fb03				  -.CYCLES    SET	.CYCLES % 5
     13  fb03					      ENDIF
     14  fb03
     15  fb03				  -	      IF	.CYCLES % 3 == 1
     16  fb03				  -	      NOP
     17  fb03				  -.CYCLES    SET	.CYCLES - 2
     18  fb03					      ENDIF
     19  fb03
     20  fb03				  -	      REPEAT	.CYCLES / 3
     21  fb03				  -	      STA	DUMP
     22  fb03					      REPEND
     23  fb03
     24  fb03				   .CYCLES    SET	.CYCLES % 3
     25  fb03
     26  fb03					      REPEAT	.CYCLES / 2
     27  fb03		       ea		      NOP
     28  fb04					      REPEND
     29  fb04
     30  fb04				   .CYCLES    SET	.CYCLES % 2
     31  fb04
     32  fb04				  -	      IF	.CYCLES
     33  fb04				  -	      ERR
     34  fb04					      ENDIF
     35  fb04
      5  fb04				   dc_w2s2    SUBROUTINE
      6  fb04
      7  fb04		       a2 03		      LDX	#PIXH
      8  fb06
      9  fb06				   .loop
     10  fb06		       a5 b4		      LDA	wallColour
     11  fb08		       85 02		      STA	WSYNC
     12  fb0a		       85 08		      STA	COLUPF
     13  fb0c		       a5 85		      LDA	wall2a
     14  fb0e		       85 0e		      STA	PF1
     15  fb10		       98		      TYA
     16  fb11
     17  fb11		       f0 51		      BEQ	.noSprite_1
     18  fb13				   .branchPoint_1
     19  fb13		       88		      DEY
     20  fb14		       c4 be		      CPY	spriteHeight
     21  fb16
     22  fb16		       b0 54		      BCS	.noSprite_2
     23  fb18				   .branchPoint_2
     24  fb18		       b1 bc		      LDA	(sprite),Y
     25  fb1a		       85 1b		      STA	GRP0
     26  fb1c
     27  fb1c				   .noSprite_ret
     28  fb1c		       a5 86		      LDA	wall2b
     29  fb1e		       85 0f		      STA	PF2
     30  fb20
     31  fb20		       a5 87		      LDA	wall2c
     32  fb22		       85 0d		      STA	PF0
     33  fb24		       a5 88		      LDA	wall2d
     34  fb26		       85 0e		      STA	PF1
     35  fb28		       a5 89		      LDA	wall2e
     36  fb2a		       85 0f		      STA	PF2
     37  fb2c		       a9 00		      LDA	#NULL
      0  fb2e					      DELAY	10
      1  fb2e				   .CYCLES    SET	10
      2  fb2e
      3  fb2e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb2e				  -	      NOP
      5  fb2e				  -.CYCLES    SET	.CYCLES - 2
      6  fb2e					      ENDIF
      7  fb2e
      8  fb2e					      IF	[.CYCLES - 2] / 5
      9  fb2e					      REPEAT	.CYCLES / 5
     10  fb2e		       e6 30		      INC	DUMP
      9  fb2e					      REPEND
     10  fb30		       e6 30		      INC	DUMP
     11  fb32					      REPEND
     12  fb32				   .CYCLES    SET	.CYCLES % 5
     13  fb32					      ENDIF
     14  fb32
     15  fb32				  -	      IF	.CYCLES % 3 == 1
     16  fb32				  -	      NOP
     17  fb32				  -.CYCLES    SET	.CYCLES - 2
     18  fb32					      ENDIF
     19  fb32
     20  fb32				  -	      REPEAT	.CYCLES / 3
     21  fb32				  -	      STA	DUMP
     22  fb32					      REPEND
     23  fb32
     24  fb32				   .CYCLES    SET	.CYCLES % 3
     25  fb32
     26  fb32				  -	      REPEAT	.CYCLES / 2
     27  fb32				  -	      NOP
     28  fb32					      REPEND
     29  fb32
     30  fb32				   .CYCLES    SET	.CYCLES % 2
     31  fb32
     32  fb32				  -	      IF	.CYCLES
     33  fb32				  -	      ERR
     34  fb32					      ENDIF
     35  fb32
     39  fb32		       85 0f		      STA	PF2
     40  fb34		       85 0d		      STA	PF0
     41  fb36
     42  fb36		       85 02		      STA	WSYNC	; Draw the shadow
     43  fb38		       a5 b5		      LDA	shadowColour
     44  fb3a		       85 08		      STA	COLUPF
     45  fb3c		       a5 a0		      LDA	shadow2ab
     46  fb3e		       05 9b		      ORA	shadow1a
     47  fb40		       85 0e		      STA	PF1
     48  fb42		       a5 a1		      LDA	shadow2bb
     49  fb44		       05 9c		      ORA	shadow1b
     50  fb46		       85 0f		      STA	PF2
     51  fb48		       a5 a2		      LDA	shadow2cb
     52  fb4a		       85 0d		      STA	PF0
     53  fb4c		       a5 a3		      LDA	shadow2db
     54  fb4e		       05 9e		      ORA	shadow1d
     55  fb50		       85 0e		      STA	PF1
     56  fb52		       a5 a4		      LDA	shadow2eb
     57  fb54		       05 9f		      ORA	shadow1e
     58  fb56		       85 0f		      STA	PF2
     59  fb58		       a9 00		      LDA	#NULL
     60  fb5a		       85 0d		      STA	PF0
     61  fb5c
     62  fb5c		       ca		      DEX
     63  fb5d		       d0 a7		      BNE	.loop
     64  fb5f
     65  fb5f		       50 10		      BVC	dc_w3s1_delayed
     66  fb61		       4c 93 fa 	      JMP	dc_w2s1
     67  fb64
     68  fb64				   .noSprite_1
     69  fb64					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb64					      DELAY	11
      1  fb64				   .CYCLES    SET	11
      2  fb64
      3  fb64					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb64		       ea		      NOP
      5  fb64				   .CYCLES    SET	.CYCLES - 2
      6  fb65					      ENDIF
      7  fb65
      8  fb65					      IF	[.CYCLES - 2] / 5
      9  fb65					      REPEAT	.CYCLES / 5
     10  fb65		       e6 30		      INC	DUMP
     11  fb67					      REPEND
     12  fb67				   .CYCLES    SET	.CYCLES % 5
     13  fb67					      ENDIF
     14  fb67
     15  fb67					      IF	.CYCLES % 3 == 1
     16  fb67		       ea		      NOP
     17  fb67				   .CYCLES    SET	.CYCLES - 2
     18  fb68					      ENDIF
     19  fb68
     20  fb68				  -	      REPEAT	.CYCLES / 3
     21  fb68				  -	      STA	DUMP
     22  fb68					      REPEND
     23  fb68
     24  fb68				   .CYCLES    SET	.CYCLES % 3
     25  fb68
     26  fb68					      REPEAT	.CYCLES / 2
     27  fb68		       ea		      NOP
     28  fb69					      REPEND
     29  fb69
     30  fb69				   .CYCLES    SET	.CYCLES % 2
     31  fb69
     32  fb69				  -	      IF	.CYCLES
     33  fb69				  -	      ERR
     34  fb69					      ENDIF
     35  fb69
     71  fb69				  -	      ELSE
     72  fb69				  -	      DELAY	10
     73  fb69					      ENDIF
     74  fb69		       4c 1c fb 	      JMP	.noSprite_ret
     75  fb6c
     76  fb6c				   .noSprite_2
     77  fb6c					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb6c					      DELAY	4
      1  fb6c				   .CYCLES    SET	4
      2  fb6c
      3  fb6c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb6c				  -	      NOP
      5  fb6c				  -.CYCLES    SET	.CYCLES - 2
      6  fb6c					      ENDIF
      7  fb6c
      8  fb6c				  -	      IF	[.CYCLES - 2] / 5
      9  fb6c				  -	      REPEAT	.CYCLES / 5
     10  fb6c				  -	      INC	DUMP
     11  fb6c				  -	      REPEND
     12  fb6c				  -.CYCLES    SET	.CYCLES % 5
     13  fb6c					      ENDIF
     14  fb6c
     15  fb6c					      IF	.CYCLES % 3 == 1
     16  fb6c		       ea		      NOP
     17  fb6c				   .CYCLES    SET	.CYCLES - 2
     18  fb6d					      ENDIF
     19  fb6d
     20  fb6d				  -	      REPEAT	.CYCLES / 3
     21  fb6d				  -	      STA	DUMP
     22  fb6d					      REPEND
     23  fb6d
     24  fb6d				   .CYCLES    SET	.CYCLES % 3
     25  fb6d
     26  fb6d					      REPEAT	.CYCLES / 2
     27  fb6d		       ea		      NOP
     28  fb6e					      REPEND
     29  fb6e
     30  fb6e				   .CYCLES    SET	.CYCLES % 2
     31  fb6e
     32  fb6e				  -	      IF	.CYCLES
     33  fb6e				  -	      ERR
     34  fb6e					      ENDIF
     35  fb6e
     79  fb6e				  -	      ELSE
     80  fb6e				  -	      DELAY	3
     81  fb6e					      ENDIF
     82  fb6e		       4c 1c fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb71					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb71							; The third wall and it's first shadow
      2  fb71							; See GLOSSARY.TXT for definitions of vague words
      3  fb71
      4  fb71				   dc_w3s1_delayed
      0  fb71					      DELAY	2
      1  fb71				   .CYCLES    SET	2
      2  fb71
      3  fb71				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb71				  -	      NOP
      5  fb71				  -.CYCLES    SET	.CYCLES - 2
      6  fb71					      ENDIF
      7  fb71
      8  fb71				  -	      IF	[.CYCLES - 2] / 5
      9  fb71				  -	      REPEAT	.CYCLES / 5
     10  fb71				  -	      INC	DUMP
     11  fb71				  -	      REPEND
     12  fb71				  -.CYCLES    SET	.CYCLES % 5
     13  fb71					      ENDIF
     14  fb71
     15  fb71				  -	      IF	.CYCLES % 3 == 1
     16  fb71				  -	      NOP
     17  fb71				  -.CYCLES    SET	.CYCLES - 2
     18  fb71					      ENDIF
     19  fb71
     20  fb71				  -	      REPEAT	.CYCLES / 3
     21  fb71				  -	      STA	DUMP
     22  fb71					      REPEND
     23  fb71
     24  fb71				   .CYCLES    SET	.CYCLES % 3
     25  fb71
     26  fb71					      REPEAT	.CYCLES / 2
     27  fb71		       ea		      NOP
     28  fb72					      REPEND
     29  fb72
     30  fb72				   .CYCLES    SET	.CYCLES % 2
     31  fb72
     32  fb72				  -	      IF	.CYCLES
     33  fb72				  -	      ERR
     34  fb72					      ENDIF
     35  fb72
      6  fb72				   dc_w3s1    SUBROUTINE
      7  fb72
      8  fb72		       a2 03		      LDX	#PIXH
      9  fb74
     10  fb74				   .loop
     11  fb74		       a5 b4		      LDA	wallColour
     12  fb76		       85 02		      STA	WSYNC
     13  fb78		       85 08		      STA	COLUPF
     14  fb7a		       a5 8a		      LDA	wall3a
     15  fb7c		       85 0e		      STA	PF1
     16  fb7e		       98		      TYA
     17  fb7f
     18  fb7f		       f0 53		      BEQ	.noSprite_1
     19  fb81				   .branchPoint_1
     20  fb81		       88		      DEY
     21  fb82		       c4 be		      CPY	spriteHeight
     22  fb84
     23  fb84		       b0 56		      BCS	.noSprite_2
     24  fb86				   .branchPoint_2
     25  fb86		       b1 bc		      LDA	(sprite),Y
     26  fb88		       85 1b		      STA	GRP0
     27  fb8a
     28  fb8a				   .noSprite_ret
     29  fb8a		       a5 8b		      LDA	wall3b
     30  fb8c		       85 0f		      STA	PF2
     31  fb8e
     32  fb8e		       a5 8c		      LDA	wall3c
     33  fb90		       85 0d		      STA	PF0
     34  fb92		       a5 8d		      LDA	wall3d
     35  fb94		       85 0e		      STA	PF1
     36  fb96		       a5 8e		      LDA	wall3e
     37  fb98		       85 0f		      STA	PF2
     38  fb9a		       a9 00		      LDA	#NULL
      0  fb9c					      DELAY	10
      1  fb9c				   .CYCLES    SET	10
      2  fb9c
      3  fb9c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb9c				  -	      NOP
      5  fb9c				  -.CYCLES    SET	.CYCLES - 2
      6  fb9c					      ENDIF
      7  fb9c
      8  fb9c					      IF	[.CYCLES - 2] / 5
      9  fb9c					      REPEAT	.CYCLES / 5
     10  fb9c		       e6 30		      INC	DUMP
      9  fb9c					      REPEND
     10  fb9e		       e6 30		      INC	DUMP
     11  fba0					      REPEND
     12  fba0				   .CYCLES    SET	.CYCLES % 5
     13  fba0					      ENDIF
     14  fba0
     15  fba0				  -	      IF	.CYCLES % 3 == 1
     16  fba0				  -	      NOP
     17  fba0				  -.CYCLES    SET	.CYCLES - 2
     18  fba0					      ENDIF
     19  fba0
     20  fba0				  -	      REPEAT	.CYCLES / 3
     21  fba0				  -	      STA	DUMP
     22  fba0					      REPEND
     23  fba0
     24  fba0				   .CYCLES    SET	.CYCLES % 3
     25  fba0
     26  fba0				  -	      REPEAT	.CYCLES / 2
     27  fba0				  -	      NOP
     28  fba0					      REPEND
     29  fba0
     30  fba0				   .CYCLES    SET	.CYCLES % 2
     31  fba0
     32  fba0				  -	      IF	.CYCLES
     33  fba0				  -	      ERR
     34  fba0					      ENDIF
     35  fba0
     40  fba0		       85 0f		      STA	PF2
     41  fba2		       85 0d		      STA	PF0
     42  fba4
     43  fba4		       85 02		      STA	WSYNC	; Draw the shadow
     44  fba6		       a5 b5		      LDA	shadowColour
     45  fba8		       85 08		      STA	COLUPF
     46  fbaa		       a5 96		      LDA	shadow3aa
     47  fbac		       05 a0		      ORA	shadow2ab
     48  fbae		       85 0e		      STA	PF1
     49  fbb0		       a5 97		      LDA	shadow3ba
     50  fbb2		       05 a1		      ORA	shadow2bb
     51  fbb4		       85 0f		      STA	PF2
     52  fbb6		       a5 98		      LDA	shadow3ca
     53  fbb8		       05 a2		      ORA	shadow2cb
     54  fbba		       85 0d		      STA	PF0
     55  fbbc		       a5 99		      LDA	shadow3da
     56  fbbe		       05 a3		      ORA	shadow2db
     57  fbc0		       85 0e		      STA	PF1
     58  fbc2		       a5 9a		      LDA	shadow3ea
     59  fbc4		       05 a4		      ORA	shadow2eb
     60  fbc6		       85 0f		      STA	PF2
     61  fbc8		       a9 00		      LDA	#NULL
     62  fbca		       85 0d		      STA	PF0
     63  fbcc
     64  fbcc		       ca		      DEX
     65  fbcd		       d0 a5		      BNE	.loop
     66  fbcf
     67  fbcf		       50 10		      BVC	dc_w3s2_delayed
     68  fbd1		       4c 04 fb 	      JMP	dc_w2s2
     69  fbd4
     70  fbd4				   .noSprite_1
     71  fbd4					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbd4					      DELAY	11
      1  fbd4				   .CYCLES    SET	11
      2  fbd4
      3  fbd4					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbd4		       ea		      NOP
      5  fbd4				   .CYCLES    SET	.CYCLES - 2
      6  fbd5					      ENDIF
      7  fbd5
      8  fbd5					      IF	[.CYCLES - 2] / 5
      9  fbd5					      REPEAT	.CYCLES / 5
     10  fbd5		       e6 30		      INC	DUMP
     11  fbd7					      REPEND
     12  fbd7				   .CYCLES    SET	.CYCLES % 5
     13  fbd7					      ENDIF
     14  fbd7
     15  fbd7					      IF	.CYCLES % 3 == 1
     16  fbd7		       ea		      NOP
     17  fbd7				   .CYCLES    SET	.CYCLES - 2
     18  fbd8					      ENDIF
     19  fbd8
     20  fbd8				  -	      REPEAT	.CYCLES / 3
     21  fbd8				  -	      STA	DUMP
     22  fbd8					      REPEND
     23  fbd8
     24  fbd8				   .CYCLES    SET	.CYCLES % 3
     25  fbd8
     26  fbd8					      REPEAT	.CYCLES / 2
     27  fbd8		       ea		      NOP
     28  fbd9					      REPEND
     29  fbd9
     30  fbd9				   .CYCLES    SET	.CYCLES % 2
     31  fbd9
     32  fbd9				  -	      IF	.CYCLES
     33  fbd9				  -	      ERR
     34  fbd9					      ENDIF
     35  fbd9
     73  fbd9				  -	      ELSE
     74  fbd9				  -	      DELAY	10
     75  fbd9					      ENDIF
     76  fbd9		       4c 8a fb 	      JMP	.noSprite_ret
     77  fbdc
     78  fbdc				   .noSprite_2
     79  fbdc					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbdc					      DELAY	4
      1  fbdc				   .CYCLES    SET	4
      2  fbdc
      3  fbdc				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbdc				  -	      NOP
      5  fbdc				  -.CYCLES    SET	.CYCLES - 2
      6  fbdc					      ENDIF
      7  fbdc
      8  fbdc				  -	      IF	[.CYCLES - 2] / 5
      9  fbdc				  -	      REPEAT	.CYCLES / 5
     10  fbdc				  -	      INC	DUMP
     11  fbdc				  -	      REPEND
     12  fbdc				  -.CYCLES    SET	.CYCLES % 5
     13  fbdc					      ENDIF
     14  fbdc
     15  fbdc					      IF	.CYCLES % 3 == 1
     16  fbdc		       ea		      NOP
     17  fbdc				   .CYCLES    SET	.CYCLES - 2
     18  fbdd					      ENDIF
     19  fbdd
     20  fbdd				  -	      REPEAT	.CYCLES / 3
     21  fbdd				  -	      STA	DUMP
     22  fbdd					      REPEND
     23  fbdd
     24  fbdd				   .CYCLES    SET	.CYCLES % 3
     25  fbdd
     26  fbdd					      REPEAT	.CYCLES / 2
     27  fbdd		       ea		      NOP
     28  fbde					      REPEND
     29  fbde
     30  fbde				   .CYCLES    SET	.CYCLES % 2
     31  fbde
     32  fbde				  -	      IF	.CYCLES
     33  fbde				  -	      ERR
     34  fbde					      ENDIF
     35  fbde
     81  fbde				  -	      ELSE
     82  fbde				  -	      DELAY	3
     83  fbde					      ENDIF
     84  fbde		       4c 8a fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fbe1					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fbe1							; The third wall and it's second shadow
      2  fbe1							; See GLOSSARY.TXT for definitions of vague words
      3  fbe1
      4  fbe1				   dc_w3s2_delayed
      0  fbe1					      DELAY	2
      1  fbe1				   .CYCLES    SET	2
      2  fbe1
      3  fbe1				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbe1				  -	      NOP
      5  fbe1				  -.CYCLES    SET	.CYCLES - 2
      6  fbe1					      ENDIF
      7  fbe1
      8  fbe1				  -	      IF	[.CYCLES - 2] / 5
      9  fbe1				  -	      REPEAT	.CYCLES / 5
     10  fbe1				  -	      INC	DUMP
     11  fbe1				  -	      REPEND
     12  fbe1				  -.CYCLES    SET	.CYCLES % 5
     13  fbe1					      ENDIF
     14  fbe1
     15  fbe1				  -	      IF	.CYCLES % 3 == 1
     16  fbe1				  -	      NOP
     17  fbe1				  -.CYCLES    SET	.CYCLES - 2
     18  fbe1					      ENDIF
     19  fbe1
     20  fbe1				  -	      REPEAT	.CYCLES / 3
     21  fbe1				  -	      STA	DUMP
     22  fbe1					      REPEND
     23  fbe1
     24  fbe1				   .CYCLES    SET	.CYCLES % 3
     25  fbe1
     26  fbe1					      REPEAT	.CYCLES / 2
     27  fbe1		       ea		      NOP
     28  fbe2					      REPEND
     29  fbe2
     30  fbe2				   .CYCLES    SET	.CYCLES % 2
     31  fbe2
     32  fbe2				  -	      IF	.CYCLES
     33  fbe2				  -	      ERR
     34  fbe2					      ENDIF
     35  fbe2
      6  fbe2				   dc_w3s2    SUBROUTINE
      7  fbe2
      8  fbe2		       a2 03		      LDX	#PIXH
      9  fbe4
     10  fbe4				   .loop
     11  fbe4		       a5 b4		      LDA	wallColour
     12  fbe6		       85 02		      STA	WSYNC
     13  fbe8				   .joinIn
     14  fbe8		       85 08		      STA	COLUPF
     15  fbea		       a5 8a		      LDA	wall3a
     16  fbec		       85 0e		      STA	PF1
     17  fbee		       98		      TYA
     18  fbef
     19  fbef		       f0 53		      BEQ	.noSprite_1
     20  fbf1				   .branchPoint_1
     21  fbf1		       88		      DEY
     22  fbf2		       c4 be		      CPY	spriteHeight
     23  fbf4
     24  fbf4		       b0 55		      BCS	.noSprite_2
     25  fbf6				   .branchPoint_2
     26  fbf6		       b1 bc		      LDA	(sprite),Y
     27  fbf8		       85 1b		      STA	GRP0
     28  fbfa
     29  fbfa				   .noSprite_ret
     30  fbfa		       a5 8b		      LDA	wall3b
     31  fbfc		       85 0f		      STA	PF2
     32  fbfe
     33  fbfe		       a5 8c		      LDA	wall3c
     34  fc00		       85 0d		      STA	PF0
     35  fc02		       a5 8d		      LDA	wall3d
     36  fc04		       85 0e		      STA	PF1
     37  fc06		       a5 8e		      LDA	wall3e
     38  fc08		       85 0f		      STA	PF2
     39  fc0a		       a9 00		      LDA	#NULL
      0  fc0c					      DELAY	10
      1  fc0c				   .CYCLES    SET	10
      2  fc0c
      3  fc0c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc0c				  -	      NOP
      5  fc0c				  -.CYCLES    SET	.CYCLES - 2
      6  fc0c					      ENDIF
      7  fc0c
      8  fc0c					      IF	[.CYCLES - 2] / 5
      9  fc0c					      REPEAT	.CYCLES / 5
     10  fc0c		       e6 30		      INC	DUMP
      9  fc0c					      REPEND
     10  fc0e		       e6 30		      INC	DUMP
     11  fc10					      REPEND
     12  fc10				   .CYCLES    SET	.CYCLES % 5
     13  fc10					      ENDIF
     14  fc10
     15  fc10				  -	      IF	.CYCLES % 3 == 1
     16  fc10				  -	      NOP
     17  fc10				  -.CYCLES    SET	.CYCLES - 2
     18  fc10					      ENDIF
     19  fc10
     20  fc10				  -	      REPEAT	.CYCLES / 3
     21  fc10				  -	      STA	DUMP
     22  fc10					      REPEND
     23  fc10
     24  fc10				   .CYCLES    SET	.CYCLES % 3
     25  fc10
     26  fc10				  -	      REPEAT	.CYCLES / 2
     27  fc10				  -	      NOP
     28  fc10					      REPEND
     29  fc10
     30  fc10				   .CYCLES    SET	.CYCLES % 2
     31  fc10
     32  fc10				  -	      IF	.CYCLES
     33  fc10				  -	      ERR
     34  fc10					      ENDIF
     35  fc10
     41  fc10		       85 0f		      STA	PF2
     42  fc12		       85 0d		      STA	PF0
     43  fc14
     44  fc14		       85 02		      STA	WSYNC	; Draw the shadow
     45  fc16		       a5 b5		      LDA	shadowColour
     46  fc18		       85 08		      STA	COLUPF
     47  fc1a		       a5 a5		      LDA	shadow3ab
     48  fc1c		       05 a0		      ORA	shadow2ab
     49  fc1e		       85 0e		      STA	PF1
     50  fc20		       a5 a6		      LDA	shadow3bb
     51  fc22		       05 a1		      ORA	shadow2bb
     52  fc24		       85 0f		      STA	PF2
     53  fc26		       a5 a7		      LDA	shadow3cb
     54  fc28		       05 a2		      ORA	shadow2cb
     55  fc2a		       85 0d		      STA	PF0
     56  fc2c		       a5 a8		      LDA	shadow3db
     57  fc2e		       05 a3		      ORA	shadow2db
     58  fc30		       85 0e		      STA	PF1
     59  fc32		       a5 a9		      LDA	shadow3eb
     60  fc34		       05 a4		      ORA	shadow2eb
     61  fc36		       85 0f		      STA	PF2
     62  fc38		       a9 00		      LDA	#NULL
     63  fc3a		       85 0d		      STA	PF0
     64  fc3c
     65  fc3c		       ca		      DEX
     66  fc3d		       d0 a5		      BNE	.loop
     67  fc3f
     68  fc3f		       50 0f		      BVC	dc_w4s0_delayed
     69  fc41		       4c 72 fb 	      JMP	dc_w3s1
     70  fc44
     71  fc44				   .noSprite_1
     72  fc44				  -	      IF	>.branchPoint_1 == >.noSprite_1
     73  fc44				  -	      DELAY	11
     74  fc44					      ELSE
      0  fc44					      DELAY	10
      1  fc44				   .CYCLES    SET	10
      2  fc44
      3  fc44				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc44				  -	      NOP
      5  fc44				  -.CYCLES    SET	.CYCLES - 2
      6  fc44					      ENDIF
      7  fc44
      8  fc44					      IF	[.CYCLES - 2] / 5
      9  fc44					      REPEAT	.CYCLES / 5
     10  fc44		       e6 30		      INC	DUMP
      9  fc44					      REPEND
     10  fc46		       e6 30		      INC	DUMP
     11  fc48					      REPEND
     12  fc48				   .CYCLES    SET	.CYCLES % 5
     13  fc48					      ENDIF
     14  fc48
     15  fc48				  -	      IF	.CYCLES % 3 == 1
     16  fc48				  -	      NOP
     17  fc48				  -.CYCLES    SET	.CYCLES - 2
     18  fc48					      ENDIF
     19  fc48
     20  fc48				  -	      REPEAT	.CYCLES / 3
     21  fc48				  -	      STA	DUMP
     22  fc48					      REPEND
     23  fc48
     24  fc48				   .CYCLES    SET	.CYCLES % 3
     25  fc48
     26  fc48				  -	      REPEAT	.CYCLES / 2
     27  fc48				  -	      NOP
     28  fc48					      REPEND
     29  fc48
     30  fc48				   .CYCLES    SET	.CYCLES % 2
     31  fc48
     32  fc48				  -	      IF	.CYCLES
     33  fc48				  -	      ERR
     34  fc48					      ENDIF
     35  fc48
     76  fc48					      ENDIF
     77  fc48		       4c fa fb 	      JMP	.noSprite_ret
     78  fc4b
     79  fc4b				   .noSprite_2
     80  fc4b
     81  fc4b				  -	      IF	>.branchPoint_2 == >.noSprite_2
     82  fc4b				  -	      DELAY	4
     83  fc4b					      ELSE
      0  fc4b					      DELAY	3
      1  fc4b				   .CYCLES    SET	3
      2  fc4b
      3  fc4b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc4b				  -	      NOP
      5  fc4b				  -.CYCLES    SET	.CYCLES - 2
      6  fc4b					      ENDIF
      7  fc4b
      8  fc4b				  -	      IF	[.CYCLES - 2] / 5
      9  fc4b				  -	      REPEAT	.CYCLES / 5
     10  fc4b				  -	      INC	DUMP
     11  fc4b				  -	      REPEND
     12  fc4b				  -.CYCLES    SET	.CYCLES % 5
     13  fc4b					      ENDIF
     14  fc4b
     15  fc4b				  -	      IF	.CYCLES % 3 == 1
     16  fc4b				  -	      NOP
     17  fc4b				  -.CYCLES    SET	.CYCLES - 2
     18  fc4b					      ENDIF
     19  fc4b
     20  fc4b					      REPEAT	.CYCLES / 3
     21  fc4b		       85 30		      STA	DUMP
     22  fc4d					      REPEND
     23  fc4d
     24  fc4d				   .CYCLES    SET	.CYCLES % 3
     25  fc4d
     26  fc4d				  -	      REPEAT	.CYCLES / 2
     27  fc4d				  -	      NOP
     28  fc4d					      REPEND
     29  fc4d
     30  fc4d				   .CYCLES    SET	.CYCLES % 2
     31  fc4d
     32  fc4d				  -	      IF	.CYCLES
     33  fc4d				  -	      ERR
     34  fc4d					      ENDIF
     35  fc4d
     85  fc4d					      ENDIF
     86  fc4d		       4c fa fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc50					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc50							; The fourth wall
      2  fc50
      3  fc50				   dc_w4s0_delayed
      4  fc50		       4c 57 fc 	      JMP	dc_w4s0
      5  fc53
      6  fc53				   dc_w4s0_switch
      7  fc53		       a9 7f		      LDA	#$7F
      8  fc55		       69 01		      ADC	#$01
      9  fc57
     10  fc57				   dc_w4s0    SUBROUTINE
     11  fc57
     12  fc57		       a2 03		      LDX	#PIXH
     13  fc59
     14  fc59				   .loop
     15  fc59		       a5 b4		      LDA	wallColour
     16  fc5b		       85 02		      STA	WSYNC
     17  fc5d				   .joinIn
     18  fc5d		       85 08		      STA	COLUPF
     19  fc5f		       a5 8f		      LDA	wall4a
     20  fc61		       85 0e		      STA	PF1
     21  fc63		       98		      TYA
     22  fc64
     23  fc64		       f0 57		      BEQ	.noSprite_1
     24  fc66				   .branchPoint_1
     25  fc66		       88		      DEY
     26  fc67		       c4 be		      CPY	spriteHeight
     27  fc69
     28  fc69		       b0 5a		      BCS	.noSprite_2
     29  fc6b				   .branchPoint_2
     30  fc6b		       b1 bc		      LDA	(sprite),Y
     31  fc6d		       85 1b		      STA	GRP0
     32  fc6f
     33  fc6f				   .noSprite_ret
     34  fc6f		       a5 90		      LDA	wall4b
     35  fc71		       85 0f		      STA	PF2
     36  fc73
     37  fc73		       a9 ff		      LDA	#FULLWALL
     38  fc75		       45 a7		      EOR	shadow3cb
     39  fc77		       85 0d		      STA	PF0
     40  fc79		       a9 ff		      LDA	#FULLWALL
     41  fc7b		       45 a8		      EOR	shadow3db
     42  fc7d		       85 0e		      STA	PF1
     43  fc7f		       a9 ff		      LDA	#FULLWALL
     44  fc81		       45 a9		      EOR	shadow3eb
     45  fc83		       85 0f		      STA	PF2
     46  fc85		       a9 00		      LDA	#NULL
      0  fc87					      DELAY	4
      1  fc87				   .CYCLES    SET	4
      2  fc87
      3  fc87				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc87				  -	      NOP
      5  fc87				  -.CYCLES    SET	.CYCLES - 2
      6  fc87					      ENDIF
      7  fc87
      8  fc87				  -	      IF	[.CYCLES - 2] / 5
      9  fc87				  -	      REPEAT	.CYCLES / 5
     10  fc87				  -	      INC	DUMP
     11  fc87				  -	      REPEND
     12  fc87				  -.CYCLES    SET	.CYCLES % 5
     13  fc87					      ENDIF
     14  fc87
     15  fc87					      IF	.CYCLES % 3 == 1
     16  fc87		       ea		      NOP
     17  fc87				   .CYCLES    SET	.CYCLES - 2
     18  fc88					      ENDIF
     19  fc88
     20  fc88				  -	      REPEAT	.CYCLES / 3
     21  fc88				  -	      STA	DUMP
     22  fc88					      REPEND
     23  fc88
     24  fc88				   .CYCLES    SET	.CYCLES % 3
     25  fc88
     26  fc88					      REPEAT	.CYCLES / 2
     27  fc88		       ea		      NOP
     28  fc89					      REPEND
     29  fc89
     30  fc89				   .CYCLES    SET	.CYCLES % 2
     31  fc89
     32  fc89				  -	      IF	.CYCLES
     33  fc89				  -	      ERR
     34  fc89					      ENDIF
     35  fc89
     48  fc89		       85 0f		      STA	PF2
     49  fc8b		       85 0d		      STA	PF0
     50  fc8d
     51  fc8d		       85 02		      STA	WSYNC	; Draw the shadow
     52  fc8f		       a5 b5		      LDA	shadowColour
     53  fc91		       85 08		      STA	COLUPF
     54  fc93		       a5 a5		      LDA	shadow3ab
     55  fc95		       05 a0		      ORA	shadow2ab
     56  fc97		       85 0e		      STA	PF1
     57  fc99		       a5 a6		      LDA	shadow3bb
     58  fc9b		       05 a1		      ORA	shadow2bb
     59  fc9d		       85 0f		      STA	PF2
     60  fc9f		       a5 a7		      LDA	shadow3cb
     61  fca1		       05 a2		      ORA	shadow2cb
     62  fca3		       85 0d		      STA	PF0
     63  fca5		       a5 a8		      LDA	shadow3db
     64  fca7		       05 a3		      ORA	shadow2db
     65  fca9		       85 0e		      STA	PF1
     66  fcab		       a5 a9		      LDA	shadow3eb
     67  fcad		       05 a4		      ORA	shadow2eb
     68  fcaf		       85 0f		      STA	PF2
     69  fcb1		       a9 00		      LDA	#NULL
     70  fcb3		       85 0d		      STA	PF0
     71  fcb5
     72  fcb5		       ca		      DEX
     73  fcb6		       d0 a1		      BNE	.loop
     74  fcb8
     75  fcb8		       50 99		      BVC	dc_w4s0_switch
     76  fcba		       4c e2 fb 	      JMP	dc_w3s2
     77  fcbd
     78  fcbd				   .noSprite_1
     79  fcbd					      IF	>.branchPoint_1 == >.noSprite_1
      0  fcbd					      DELAY	11
      1  fcbd				   .CYCLES    SET	11
      2  fcbd
      3  fcbd					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcbd		       ea		      NOP
      5  fcbd				   .CYCLES    SET	.CYCLES - 2
      6  fcbe					      ENDIF
      7  fcbe
      8  fcbe					      IF	[.CYCLES - 2] / 5
      9  fcbe					      REPEAT	.CYCLES / 5
     10  fcbe		       e6 30		      INC	DUMP
     11  fcc0					      REPEND
     12  fcc0				   .CYCLES    SET	.CYCLES % 5
     13  fcc0					      ENDIF
     14  fcc0
     15  fcc0					      IF	.CYCLES % 3 == 1
     16  fcc0		       ea		      NOP
     17  fcc0				   .CYCLES    SET	.CYCLES - 2
     18  fcc1					      ENDIF
     19  fcc1
     20  fcc1				  -	      REPEAT	.CYCLES / 3
     21  fcc1				  -	      STA	DUMP
     22  fcc1					      REPEND
     23  fcc1
     24  fcc1				   .CYCLES    SET	.CYCLES % 3
     25  fcc1
     26  fcc1					      REPEAT	.CYCLES / 2
     27  fcc1		       ea		      NOP
     28  fcc2					      REPEND
     29  fcc2
     30  fcc2				   .CYCLES    SET	.CYCLES % 2
     31  fcc2
     32  fcc2				  -	      IF	.CYCLES
     33  fcc2				  -	      ERR
     34  fcc2					      ENDIF
     35  fcc2
     81  fcc2				  -	      ELSE
     82  fcc2				  -	      DELAY	10
     83  fcc2					      ENDIF
     84  fcc2		       4c 6f fc 	      JMP	.noSprite_ret
     85  fcc5
     86  fcc5				   .noSprite_2
     87  fcc5					      IF	>.branchPoint_2 == >.noSprite_2
      0  fcc5					      DELAY	4
      1  fcc5				   .CYCLES    SET	4
      2  fcc5
      3  fcc5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcc5				  -	      NOP
      5  fcc5				  -.CYCLES    SET	.CYCLES - 2
      6  fcc5					      ENDIF
      7  fcc5
      8  fcc5				  -	      IF	[.CYCLES - 2] / 5
      9  fcc5				  -	      REPEAT	.CYCLES / 5
     10  fcc5				  -	      INC	DUMP
     11  fcc5				  -	      REPEND
     12  fcc5				  -.CYCLES    SET	.CYCLES % 5
     13  fcc5					      ENDIF
     14  fcc5
     15  fcc5					      IF	.CYCLES % 3 == 1
     16  fcc5		       ea		      NOP
     17  fcc5				   .CYCLES    SET	.CYCLES - 2
     18  fcc6					      ENDIF
     19  fcc6
     20  fcc6				  -	      REPEAT	.CYCLES / 3
     21  fcc6				  -	      STA	DUMP
     22  fcc6					      REPEND
     23  fcc6
     24  fcc6				   .CYCLES    SET	.CYCLES % 3
     25  fcc6
     26  fcc6					      REPEAT	.CYCLES / 2
     27  fcc6		       ea		      NOP
     28  fcc7					      REPEND
     29  fcc7
     30  fcc7				   .CYCLES    SET	.CYCLES % 2
     31  fcc7
     32  fcc7				  -	      IF	.CYCLES
     33  fcc7				  -	      ERR
     34  fcc7					      ENDIF
     35  fcc7
     89  fcc7				  -	      ELSE
     90  fcc7				  -	      DELAY	3
     91  fcc7					      ENDIF
     92  fcc7		       4c 6f fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     36  fcca
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fcca					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fcca							; The draw code for the 1st wall and  it's second shadow
      2  fcca
      3  fcca				   dc_w1s2    SUBROUTINE
      4  fcca
      5  fcca		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fccc
      7  fccc				   .loop
      8  fccc		       a5 b4		      LDA	wallColour
      9  fcce		       85 02		      STA	WSYNC
     10  fcd0		       85 08		      STA	COLUPF
     11  fcd2		       a5 80		      LDA	wall1
     12  fcd4		       85 0e		      STA	PF1
     13  fcd6		       98		      TYA
     14  fcd7
     15  fcd7		       f0 53		      BEQ	.noSprite_1
     16  fcd9				   .branchPoint_1
     17  fcd9		       88		      DEY
     18  fcda		       c4 be		      CPY	spriteHeight
     19  fcdc
     20  fcdc		       b0 55		      BCS	.noSprite_2
     21  fcde				   .branchPoint_2
     22  fcde		       b1 bc		      LDA	(sprite),Y
     23  fce0		       85 1b		      STA	GRP0
     24  fce2
     25  fce2				   .noSprite_ret
     26  fce2		       a5 80		      LDA	wall1
     27  fce4		       85 0f		      STA	PF2
      0  fce6					      DELAY	6
      1  fce6				   .CYCLES    SET	6
      2  fce6
      3  fce6				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce6				  -	      NOP
      5  fce6				  -.CYCLES    SET	.CYCLES - 2
      6  fce6					      ENDIF
      7  fce6
      8  fce6				  -	      IF	[.CYCLES - 2] / 5
      9  fce6				  -	      REPEAT	.CYCLES / 5
     10  fce6				  -	      INC	DUMP
     11  fce6				  -	      REPEND
     12  fce6				  -.CYCLES    SET	.CYCLES % 5
     13  fce6					      ENDIF
     14  fce6
     15  fce6				  -	      IF	.CYCLES % 3 == 1
     16  fce6				  -	      NOP
     17  fce6				  -.CYCLES    SET	.CYCLES - 2
     18  fce6					      ENDIF
     19  fce6
     20  fce6					      REPEAT	.CYCLES / 3
     21  fce6		       85 30		      STA	DUMP
     20  fce6					      REPEND
     21  fce8		       85 30		      STA	DUMP
     22  fcea					      REPEND
     23  fcea
     24  fcea				   .CYCLES    SET	.CYCLES % 3
     25  fcea
     26  fcea				  -	      REPEAT	.CYCLES / 2
     27  fcea				  -	      NOP
     28  fcea					      REPEND
     29  fcea
     30  fcea				   .CYCLES    SET	.CYCLES % 2
     31  fcea
     32  fcea				  -	      IF	.CYCLES
     33  fcea				  -	      ERR
     34  fcea					      ENDIF
     35  fcea
     29  fcea		       85 0d		      STA	PF0
      0  fcec					      DELAY	19
      1  fcec				   .CYCLES    SET	19
      2  fcec
      3  fcec				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcec				  -	      NOP
      5  fcec				  -.CYCLES    SET	.CYCLES - 2
      6  fcec					      ENDIF
      7  fcec
      8  fcec					      IF	[.CYCLES - 2] / 5
      9  fcec					      REPEAT	.CYCLES / 5
     10  fcec		       e6 30		      INC	DUMP
      9  fcec					      REPEND
     10  fcee		       e6 30		      INC	DUMP
      9  fcee					      REPEND
     10  fcf0		       e6 30		      INC	DUMP
     11  fcf2					      REPEND
     12  fcf2				   .CYCLES    SET	.CYCLES % 5
     13  fcf2					      ENDIF
     14  fcf2
     15  fcf2					      IF	.CYCLES % 3 == 1
     16  fcf2		       ea		      NOP
     17  fcf2				   .CYCLES    SET	.CYCLES - 2
     18  fcf3					      ENDIF
     19  fcf3
     20  fcf3				  -	      REPEAT	.CYCLES / 3
     21  fcf3				  -	      STA	DUMP
     22  fcf3					      REPEND
     23  fcf3
     24  fcf3				   .CYCLES    SET	.CYCLES % 3
     25  fcf3
     26  fcf3					      REPEAT	.CYCLES / 2
     27  fcf3		       ea		      NOP
     28  fcf4					      REPEND
     29  fcf4
     30  fcf4				   .CYCLES    SET	.CYCLES % 2
     31  fcf4
     32  fcf4				  -	      IF	.CYCLES
     33  fcf4				  -	      ERR
     34  fcf4					      ENDIF
     35  fcf4
     31  fcf4		       a9 00		      LDA	#NULL
     32  fcf6		       85 0f		      STA	PF2
     33  fcf8		       85 0d		      STA	PF0
     34  fcfa
     35  fcfa		       85 02		      STA	WSYNC
     36  fcfc		       a5 b5		      LDA	shadowColour
     37  fcfe		       85 08		      STA	COLUPF
     38  fd00		       a5 9b		      LDA	shadow1a
     39  fd02		       3d 00 f0 	      AND	and_1a,X
     40  fd05		       85 0e		      STA	PF1
     41  fd07		       a5 9c		      LDA	shadow1b
     42  fd09		       3d 1e f0 	      AND	and_1b,X
     43  fd0c		       85 0f		      STA	PF2
      0  fd0e					      DELAY	9
      1  fd0e				   .CYCLES    SET	9
      2  fd0e
      3  fd0e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd0e				  -	      NOP
      5  fd0e				  -.CYCLES    SET	.CYCLES - 2
      6  fd0e					      ENDIF
      7  fd0e
      8  fd0e					      IF	[.CYCLES - 2] / 5
      9  fd0e					      REPEAT	.CYCLES / 5
     10  fd0e		       e6 30		      INC	DUMP
     11  fd10					      REPEND
     12  fd10				   .CYCLES    SET	.CYCLES % 5
     13  fd10					      ENDIF
     14  fd10
     15  fd10					      IF	.CYCLES % 3 == 1
     16  fd10		       ea		      NOP
     17  fd10				   .CYCLES    SET	.CYCLES - 2
     18  fd11					      ENDIF
     19  fd11
     20  fd11				  -	      REPEAT	.CYCLES / 3
     21  fd11				  -	      STA	DUMP
     22  fd11					      REPEND
     23  fd11
     24  fd11				   .CYCLES    SET	.CYCLES % 3
     25  fd11
     26  fd11					      REPEAT	.CYCLES / 2
     27  fd11		       ea		      NOP
     28  fd12					      REPEND
     29  fd12
     30  fd12				   .CYCLES    SET	.CYCLES % 2
     31  fd12
     32  fd12				  -	      IF	.CYCLES
     33  fd12				  -	      ERR
     34  fd12					      ENDIF
     35  fd12
     45  fd12		       a5 9e		      LDA	shadow1d
     46  fd14		       3d 3c f0 	      AND	and_1c,X
     47  fd17		       85 0e		      STA	PF1
     48  fd19		       a5 9f		      LDA	shadow1e
     49  fd1b		       3d 5a f0 	      AND	and_1d,X
     50  fd1e		       85 0f		      STA	PF2
     51  fd20
     52  fd20		       a9 00		      LDA	#NULL
     53  fd22		       85 1b		      STA	GRP0
     54  fd24
     55  fd24		       ca		      DEX
     56  fd25		       e0 06		      CPX	#LOWRWALL_S
     57  fd27		       d0 a3		      BNE	.loop
     58  fd29
     59  fd29		       4c 38 fd 	      JMP	dc_wallsEnd
     60  fd2c
     61  fd2c				   .noSprite_1
     62  fd2c				  -	      IF	>.branchPoint_1 == >.noSprite_1
     63  fd2c				  -	      DELAY	11
     64  fd2c					      ELSE
      0  fd2c					      DELAY	10
      1  fd2c				   .CYCLES    SET	10
      2  fd2c
      3  fd2c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd2c				  -	      NOP
      5  fd2c				  -.CYCLES    SET	.CYCLES - 2
      6  fd2c					      ENDIF
      7  fd2c
      8  fd2c					      IF	[.CYCLES - 2] / 5
      9  fd2c					      REPEAT	.CYCLES / 5
     10  fd2c		       e6 30		      INC	DUMP
      9  fd2c					      REPEND
     10  fd2e		       e6 30		      INC	DUMP
     11  fd30					      REPEND
     12  fd30				   .CYCLES    SET	.CYCLES % 5
     13  fd30					      ENDIF
     14  fd30
     15  fd30				  -	      IF	.CYCLES % 3 == 1
     16  fd30				  -	      NOP
     17  fd30				  -.CYCLES    SET	.CYCLES - 2
     18  fd30					      ENDIF
     19  fd30
     20  fd30				  -	      REPEAT	.CYCLES / 3
     21  fd30				  -	      STA	DUMP
     22  fd30					      REPEND
     23  fd30
     24  fd30				   .CYCLES    SET	.CYCLES % 3
     25  fd30
     26  fd30				  -	      REPEAT	.CYCLES / 2
     27  fd30				  -	      NOP
     28  fd30					      REPEND
     29  fd30
     30  fd30				   .CYCLES    SET	.CYCLES % 2
     31  fd30
     32  fd30				  -	      IF	.CYCLES
     33  fd30				  -	      ERR
     34  fd30					      ENDIF
     35  fd30
     66  fd30					      ENDIF
     67  fd30		       4c e2 fc 	      JMP	.noSprite_ret
     68  fd33
     69  fd33				   .noSprite_2
     70  fd33				  -	      IF	>.branchPoint_2 == >.noSprite_2
     71  fd33				  -	      DELAY	4
     72  fd33					      ELSE
      0  fd33					      DELAY	3
      1  fd33				   .CYCLES    SET	3
      2  fd33
      3  fd33				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd33				  -	      NOP
      5  fd33				  -.CYCLES    SET	.CYCLES - 2
      6  fd33					      ENDIF
      7  fd33
      8  fd33				  -	      IF	[.CYCLES - 2] / 5
      9  fd33				  -	      REPEAT	.CYCLES / 5
     10  fd33				  -	      INC	DUMP
     11  fd33				  -	      REPEND
     12  fd33				  -.CYCLES    SET	.CYCLES % 5
     13  fd33					      ENDIF
     14  fd33
     15  fd33				  -	      IF	.CYCLES % 3 == 1
     16  fd33				  -	      NOP
     17  fd33				  -.CYCLES    SET	.CYCLES - 2
     18  fd33					      ENDIF
     19  fd33
     20  fd33					      REPEAT	.CYCLES / 3
     21  fd33		       85 30		      STA	DUMP
     22  fd35					      REPEND
     23  fd35
     24  fd35				   .CYCLES    SET	.CYCLES % 3
     25  fd35
     26  fd35				  -	      REPEAT	.CYCLES / 2
     27  fd35				  -	      NOP
     28  fd35					      REPEND
     29  fd35
     30  fd35				   .CYCLES    SET	.CYCLES % 2
     31  fd35
     32  fd35				  -	      IF	.CYCLES
     33  fd35				  -	      ERR
     34  fd35					      ENDIF
     35  fd35
     74  fd35					      ENDIF
     75  fd35		       4c e2 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     38  fd38
     39  fd38				   dc_wallsEnd		; once we've finished drawing the walls we draw the minimap ( or
     40  fd38							; hud, if that feature is added any time soon).
     41  fd38
     42  fd38		       b8		      CLV		; always best to leave the overflow flag at zero...
     43  fd39
     44  fd39		       a9 00		      LDA	#NULL	; Also nice to make sure the playfields are clear...
     45  fd3b		       85 0e		      STA	PF1
     46  fd3d		       85 0f		      STA	PF2
     47  fd3f
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd3f					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd3f							; Draws the compass to the screen
      2  fd3f							; See GLOSSARY.TXT for definitions of vague words
      3  fd3f
      4  fd3f				   mmDraw
      5  fd3f
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd3f					      INCLUDE	"drawCode/mmRender.asm"
      1  fd3f							; Render the minimap
      2  fd3f
      3  fd3f				   mmRender   SUBROUTINE
      4  fd3f		       a9 00		      LDA	#NULL
      5  fd41							; Set the colour of the player
      6  fd41		       a9 cc		      LDA	#PLYRCOLU
      7  fd43		       85 08		      STA	COLUPF
      8  fd45							; Set the colour of the map
      9  fd45		       a9 0e		      LDA	#MAPCOLU
     10  fd47		       85 06		      STA	COLUP0
     11  fd49		       85 07		      STA	COLUP1
     12  fd4b							; Get the player's position and translate it into horizontal movement
     13  fd4b		       a9 08		      LDA	#%00001000
     14  fd4d		       18		      CLC
     15  fd4e		       38		      SEC
     16  fd4f		       e5 aa		      SBC	playerPos
     17  fd51		       0a		      ASL
     18  fd52		       0a		      ASL
     19  fd53		       0a		      ASL
     20  fd54		       0a		      ASL
     21  fd55		       85 24		      STA	HMBL
     22  fd57
     23  fd57							; Set the map's position to the right values
     24  fd57		       a9 00		      LDA	#HADJ_A
     25  fd59		       85 20		      STA	HMP0
     26  fd5b		       a9 10		      LDA	#HADJ_B
     27  fd5d		       85 21		      STA	HMP1
     28  fd5f
     29  fd5f		       85 02		      STA	WSYNC
     30  fd61		       a2 07		      LDX	#HWAIT
     31  fd63
     32  fd63				   .wait1
     33  fd63		       ca		      DEX
     34  fd64		       d0 fd		      BNE	.wait1
      0  fd66					      DELAY	HDELAY1
      1  fd66				   .CYCLES    SET	HDELAY1
      2  fd66
      3  fd66				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd66				  -	      NOP
      5  fd66				  -.CYCLES    SET	.CYCLES - 2
      6  fd66					      ENDIF
      7  fd66
      8  fd66				  -	      IF	[.CYCLES - 2] / 5
      9  fd66				  -	      REPEAT	.CYCLES / 5
     10  fd66				  -	      INC	DUMP
     11  fd66				  -	      REPEND
     12  fd66				  -.CYCLES    SET	.CYCLES % 5
     13  fd66					      ENDIF
     14  fd66
     15  fd66				  -	      IF	.CYCLES % 3 == 1
     16  fd66				  -	      NOP
     17  fd66				  -.CYCLES    SET	.CYCLES - 2
     18  fd66					      ENDIF
     19  fd66
     20  fd66					      REPEAT	.CYCLES / 3
     21  fd66		       85 30		      STA	DUMP
     22  fd68					      REPEND
     23  fd68
     24  fd68				   .CYCLES    SET	.CYCLES % 3
     25  fd68
     26  fd68					      REPEAT	.CYCLES / 2
     27  fd68		       ea		      NOP
     28  fd69					      REPEND
     29  fd69
     30  fd69				   .CYCLES    SET	.CYCLES % 2
     31  fd69
     32  fd69				  -	      IF	.CYCLES
     33  fd69				  -	      ERR
     34  fd69					      ENDIF
     35  fd69
     36  fd69		       85 10		      STA	RESP0
     37  fd6b		       85 11		      STA	RESP1
     38  fd6d
     39  fd6d		       a5 aa		      LDA	playerPos
     40  fd6f
     41  fd6f		       85 02		      STA	WSYNC
     42  fd71		       a2 07		      LDX	#HWAIT
     43  fd73
     44  fd73				   .wait2
     45  fd73		       ca		      DEX
     46  fd74		       d0 fd		      BNE	.wait2
      0  fd76					      DELAY	HDELAY2
      1  fd76				   .CYCLES    SET	HDELAY2
      2  fd76
      3  fd76				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd76				  -	      NOP
      5  fd76				  -.CYCLES    SET	.CYCLES - 2
      6  fd76					      ENDIF
      7  fd76
      8  fd76					      IF	[.CYCLES - 2] / 5
      9  fd76					      REPEAT	.CYCLES / 5
     10  fd76		       e6 30		      INC	DUMP
     11  fd78					      REPEND
     12  fd78				   .CYCLES    SET	.CYCLES % 5
     13  fd78					      ENDIF
     14  fd78
     15  fd78				  -	      IF	.CYCLES % 3 == 1
     16  fd78				  -	      NOP
     17  fd78				  -.CYCLES    SET	.CYCLES - 2
     18  fd78					      ENDIF
     19  fd78
     20  fd78					      REPEAT	.CYCLES / 3
     21  fd78		       85 30		      STA	DUMP
     22  fd7a					      REPEND
     23  fd7a
     24  fd7a				   .CYCLES    SET	.CYCLES % 3
     25  fd7a
     26  fd7a				  -	      REPEAT	.CYCLES / 2
     27  fd7a				  -	      NOP
     28  fd7a					      REPEND
     29  fd7a
     30  fd7a				   .CYCLES    SET	.CYCLES % 2
     31  fd7a
     32  fd7a				  -	      IF	.CYCLES
     33  fd7a				  -	      ERR
     34  fd7a					      ENDIF
     35  fd7a
     48  fd7a		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      7  fd7c
      8  fd7c					      SUBROUTINE		; The preceeding code declares it's own subroutine
      9  fd7c
     10  fd7c		       a0 00		      LDY	#NULL
     11  fd7e		       84 1b		      STY	GRP0
     12  fd80		       84 1c		      STY	GRP1
     13  fd82		       84 02		      STY	WSYNC
     14  fd84		       84 2a		      STY	HMOVE
     15  fd86
     16  fd86		       a6 aa		      LDX	playerPos
     17  fd88
     18  fd88				   .loop
     19  fd88		       85 02		      STA	WSYNC
     20  fd8a
     21  fd8a		       b1 b8		      LDA	(miniMapPtr),Y
     22  fd8c		       85 1b		      STA	GRP0
     23  fd8e		       c8		      INY
     24  fd8f		       b1 b8		      LDA	(miniMapPtr),Y
     25  fd91		       85 1c		      STA	GRP1
     26  fd93		       c8		      INY
     27  fd94
     28  fd94		       8a		      TXA
     29  fd95		       38		      SEC
     30  fd96		       e5 ab		      SBC	mapWidth
     31  fd98		       aa		      TAX
     32  fd99		       29 f0		      AND	#$F0
     33  fd9b
     34  fd9b		       d0 0a		      BNE	.noDraw
     35  fd9d
     36  fd9d		       a9 02		      LDA	#2
     37  fd9f		       85 1f		      STA	ENABL
     38  fda1		       85 b6		      STA	drawingPlyr
     39  fda3		       a9 01		      LDA	#1
     40  fda5		       85 27		      STA	VDELBL
     41  fda7
     42  fda7				   .noDraw
     43  fda7
     44  fda7		       a5 b6		      LDA	drawingPlyr
     45  fda9		       85 1f		      STA	ENABL
     46  fdab		       a9 00		      LDA	#NULL
     47  fdad		       85 b6		      STA	drawingPlyr
     48  fdaf		       c0 20		      CPY	#MMSIZE
     49  fdb1		       d0 d5		      BNE	.loop
     50  fdb3
     51  fdb3		       a9 00		      LDA	#NULL
     52  fdb5		       85 1f		      STA	ENABL
     53  fdb7
     54  fdb7		       85 02		      STA	WSYNC
     55  fdb9
     56  fdb9		       a9 00		      LDA	#NULL
     57  fdbb		       85 1b		      STA	GRP0
     58  fdbd		       85 1c		      STA	GRP1
     59  fdbf		       85 06		      STA	COLUP0
     60  fdc1		       85 07		      STA	COLUP1
------- FILE dispkern.asm
------- FILE main.asm
     68  fdc3
     69  fdc3							; Start VBLANK
     70  fdc3
     71  fdc3		       a9 c2		      LDA	#VBLANK_SET
     72  fdc5		       85 01		      STA	VBLANK
     73  fdc7
     74  fdc7							; Make sounds 'n' stuff
     75  fdc7
------- FILE sound.asm LEVEL 2 PASS 4
      0  fdc7					      INCLUDE	"sound.asm"
      1  fdc7							; sounds.asm - makes sounds 'n' stuff
      2  fdc7
      3  fdc7					      SUBROUTINE
      4  fdc7
      5  fdc7		       a5 c0		      LDA	stepVol
      6  fdc9		       85 19		      STA	AUDV0
      7  fdcb		       a5 c1		      LDA	stepSnd
      8  fdcd		       85 15		      STA	AUDC0
      9  fdcf		       a9 00		      LDA	#NULL
     10  fdd1		       85 c0		      STA	stepVol
     11  fdd3
------- FILE main.asm
     77  fdd3
     78  fdd3							; Process input
     79  fdd3
------- FILE input.asm LEVEL 2 PASS 4
      0  fdd3					      INCLUDE	"input.asm"
      1  fdd3							; VePseu's controller input
      2  fdd3
      3  fdd3		       85 02		      STA	WSYNC
      4  fdd5
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fdd5					      INCLUDE	"ctrlCode/cin1.asm"
      1  fdd5					      SUBROUTINE
      2  fdd5
      3  fdd5		       ad 80 02 	      LDA	SWCHA
      4  fdd8		       29 10		      AND	#FFORD
      5  fdda		       d0 2a		      BNE	.noPress
      6  fddc
      7  fddc		       a5 aa		      LDA	playerPos
      8  fdde		       38		      SEC
      9  fddf		       e5 af		      SBC	yLoss
     10  fde1		       18		      CLC
     11  fde2		       65 ae		      ADC	yGain
     12  fde4		       a8		      TAY
     13  fde5
     14  fde5		       b1 ba		      LDA	(mapPtr),Y
     15  fde7		       d0 21		      BNE	.end
     16  fde9
     17  fde9		       a6 b0		      LDX	fordPressed
     18  fdeb		       d0 13		      BNE	.wait
     19  fded		       84 aa		      STY	playerPos
     20  fdef		       a9 0f		      LDA	#CWAITCNT
     21  fdf1		       85 b0		      STA	fordPressed
     22  fdf3
     23  fdf3		       a9 07		      LDA	#PLAYER_STEPV
     24  fdf5		       05 c0		      ORA	stepVol
     25  fdf7		       85 c0		      STA	stepVol
     26  fdf9		       a9 02		      LDA	#PLAYER_STEPS
     27  fdfb		       85 c1		      STA	stepSnd
     28  fdfd
     29  fdfd		       4c 0a fe 	      JMP	.end
     30  fe00
     31  fe00				   .wait
     32  fe00		       ca		      DEX
     33  fe01		       86 b0		      STX	fordPressed
     34  fe03		       4c 0a fe 	      JMP	.end
     35  fe06
     36  fe06				   .noPress
     37  fe06		       a9 00		      LDA	#NULL
     38  fe08		       85 b0		      STA	fordPressed
     39  fe0a
     40  fe0a				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fe0a					      INCLUDE	"ctrlCode/cin2.asm"
      1  fe0a					      SUBROUTINE
      2  fe0a
      3  fe0a		       85 02		      STA	WSYNC
      4  fe0c		       ad 80 02 	      LDA	SWCHA
      5  fe0f		       29 20		      AND	#FBACK
      6  fe11		       d0 2a		      BNE	.noPress
      7  fe13
      8  fe13		       a5 aa		      LDA	playerPos
      9  fe15		       38		      SEC
     10  fe16		       e5 ae		      SBC	yGain
     11  fe18		       18		      CLC
     12  fe19		       65 af		      ADC	yLoss
     13  fe1b		       a8		      TAY
     14  fe1c
     15  fe1c		       b1 ba		      LDA	(mapPtr),Y
     16  fe1e		       d0 21		      BNE	.end
     17  fe20
     18  fe20		       a6 b1		      LDX	backPressed
     19  fe22		       d0 13		      BNE	.wait
     20  fe24
     21  fe24		       84 aa		      STY	playerPos
     22  fe26		       a9 0f		      LDA	#CWAITCNT
     23  fe28		       85 b1		      STA	backPressed
     24  fe2a
     25  fe2a		       a9 07		      LDA	#PLAYER_STEPV
     26  fe2c		       05 c0		      ORA	stepVol
     27  fe2e		       85 c0		      STA	stepVol
     28  fe30		       a9 02		      LDA	#PLAYER_STEPS
     29  fe32		       85 c1		      STA	stepSnd
     30  fe34
     31  fe34		       4c 41 fe 	      JMP	.end
     32  fe37
     33  fe37				   .wait
     34  fe37		       ca		      DEX
     35  fe38		       86 b1		      STX	backPressed
     36  fe3a		       4c 41 fe 	      JMP	.end
     37  fe3d
     38  fe3d				   .noPress
     39  fe3d		       a9 00		      LDA	#NULL
     40  fe3f		       85 b1		      STA	backPressed
     41  fe41
     42  fe41				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fe41					      INCLUDE	"ctrlCode/cin3.asm"
      1  fe41					      SUBROUTINE
      2  fe41
      3  fe41		       85 02		      STA	WSYNC
      4  fe43
      5  fe43		       a6 b3		      LDX	rigtPressed
      6  fe45		       d0 20		      BNE	.wait
      7  fe47
      8  fe47		       ad 80 02 	      LDA	SWCHA
      9  fe4a		       29 80		      AND	#FLEFT
     10  fe4c		       d0 1f		      BNE	.noPress
     11  fe4e
     12  fe4e		       a6 b7		      LDX	direction
     13  fe50		       e8		      INX
     14  fe51		       8a		      TXA
     15  fe52		       29 03		      AND	#%11
     16  fe54
     17  fe54		       85 b7		      STA	direction
     18  fe56
     19  fe56		       a9 0f		      LDA	#CWAITCNT
     20  fe58		       85 b3		      STA	rigtPressed
     21  fe5a
     22  fe5a		       a9 07		      LDA	#PLAYER_STEPV
     23  fe5c		       05 c0		      ORA	stepVol
     24  fe5e		       85 c0		      STA	stepVol
     25  fe60		       a9 06		      LDA	#PLAYER_TURNS
     26  fe62		       85 c1		      STA	stepSnd
     27  fe64
     28  fe64		       4c 6f fe 	      JMP	.end
     29  fe67
     30  fe67				   .wait
     31  fe67		       ca		      DEX
     32  fe68		       86 b3		      STX	rigtPressed
     33  fe6a		       4c 6f fe 	      JMP	.end
     34  fe6d
     35  fe6d				   .noPress
     36  fe6d		       86 b3		      STX	rigtPressed
     37  fe6f
     38  fe6f				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fe6f					      INCLUDE	"ctrlCode/cin4.asm"
      1  fe6f					      SUBROUTINE
      2  fe6f
      3  fe6f		       85 02		      STA	WSYNC
      4  fe71
      5  fe71		       a6 b2		      LDX	leftPressed
      6  fe73		       d0 20		      BNE	.wait
      7  fe75
      8  fe75		       ad 80 02 	      LDA	SWCHA
      9  fe78		       29 40		      AND	#FRIGT
     10  fe7a		       d0 1f		      BNE	.noPress
     11  fe7c
     12  fe7c		       a6 b7		      LDX	direction
     13  fe7e		       ca		      DEX
     14  fe7f		       8a		      TXA
     15  fe80		       29 03		      AND	#%11
     16  fe82
     17  fe82		       85 b7		      STA	direction
     18  fe84
     19  fe84		       a9 0f		      LDA	#CWAITCNT
     20  fe86		       85 b2		      STA	leftPressed
     21  fe88
     22  fe88		       a9 07		      LDA	#PLAYER_STEPV
     23  fe8a		       05 c0		      ORA	stepVol
     24  fe8c		       85 c0		      STA	stepVol
     25  fe8e		       a9 06		      LDA	#PLAYER_TURNS
     26  fe90		       85 c1		      STA	stepSnd
     27  fe92
     28  fe92		       4c 9d fe 	      JMP	.end
     29  fe95
     30  fe95				   .wait
     31  fe95		       ca		      DEX
     32  fe96		       86 b2		      STX	leftPressed
     33  fe98		       4c 9d fe 	      JMP	CDIR1
     34  fe9b
     35  fe9b				   .noPress
     36  fe9b		       86 b2		      STX	leftPressed
     37  fe9d
     38  fe9d				   .end
------- FILE input.asm
      9  fe9d
     10  fe9d				   CDIR1
     11  fe9d		       85 02		      STA	WSYNC
     12  fe9f		       a5 b7		      LDA	direction
     13  fea1		       c9 00		      CMP	#DNORTH
     14  fea3		       d0 15		      BNE	CDIR2
     15  fea5
     16  fea5		       a9 86		      LDA	#WCOLU
     17  fea7		       85 b4		      STA	wallColour
     18  fea9		       a9 82		      LDA	#SCOLU
     19  feab		       85 b5		      STA	shadowColour
     20  fead
     21  fead		       a5 ab		      LDA	mapWidth
     22  feaf		       85 af		      STA	yLoss
     23  feb1		       a2 01		      LDX	#ONE
     24  feb3		       86 ac		      STX	xGain
     25  feb5		       ca		      DEX
     26  feb6		       86 ae		      STX	yGain
     27  feb8		       86 ad		      STX	xLoss
     28  feba
     29  feba				   CDIR2
     30  feba		       a5 b7		      LDA	direction
     31  febc		       c9 02		      CMP	#DSOUTH
     32  febe		       d0 15		      BNE	CDIR3
     33  fec0
     34  fec0		       a9 86		      LDA	#WCOLU
     35  fec2		       85 b4		      STA	wallColour
     36  fec4		       a9 82		      LDA	#SCOLU
     37  fec6		       85 b5		      STA	shadowColour
     38  fec8
     39  fec8		       a5 ab		      LDA	mapWidth
     40  feca		       85 ae		      STA	yGain
     41  fecc		       a2 01		      LDX	#ONE
     42  fece		       86 ad		      STX	xLoss
     43  fed0		       ca		      DEX
     44  fed1		       86 af		      STX	yLoss
     45  fed3		       86 ac		      STX	xGain
     46  fed5
     47  fed5				   CDIR3
     48  fed5		       a5 b7		      LDA	direction
     49  fed7		       c9 01		      CMP	#DWEST
     50  fed9		       d0 15		      BNE	CDIR4
     51  fedb
     52  fedb		       a9 82		      LDA	#SCOLU
     53  fedd		       85 b4		      STA	wallColour
     54  fedf		       a9 86		      LDA	#WCOLU
     55  fee1		       85 b5		      STA	shadowColour
     56  fee3
     57  fee3		       a5 ab		      LDA	mapWidth
     58  fee5		       85 ac		      STA	xGain
     59  fee7		       a2 01		      LDX	#ONE
     60  fee9		       86 ae		      STX	yGain
     61  feeb		       ca		      DEX
     62  feec		       86 af		      STX	yLoss
     63  feee		       86 ad		      STX	xLoss
     64  fef0
     65  fef0				   CDIR4
     66  fef0		       a5 b7		      LDA	direction
     67  fef2		       c9 03		      CMP	#DEAST
     68  fef4		       d0 15		      BNE	CEND
     69  fef6
     70  fef6		       a9 82		      LDA	#SCOLU
     71  fef8		       85 b4		      STA	wallColour
     72  fefa		       a9 86		      LDA	#WCOLU
     73  fefc		       85 b5		      STA	shadowColour
     74  fefe
     75  fefe		       a5 ab		      LDA	mapWidth
     76  ff00		       85 ad		      STA	xLoss
     77  ff02		       a2 01		      LDX	#ONE
     78  ff04		       86 af		      STX	yLoss
     79  ff06		       ca		      DEX
     80  ff07		       86 ae		      STX	yGain
     81  ff09		       86 ac		      STX	xGain
     82  ff0b
     83  ff0b				   CEND
     84  ff0b		       85 02		      STA	WSYNC
------- FILE main.asm
     81  ff0d
     82  ff0d							; Pad again!
     83  ff0d
      0  ff0d					      PAD	LOPAD_LIMIT
      1  ff0d
      2  ff0d				   .SCANLINES SET	LOPAD_LIMIT
      3  ff0d
      4  ff0d		       a2 1c		      LDX	#.SCANLINES
      5  ff0f
      6  ff0f				   .loop
      7  ff0f		       85 02		      STA	WSYNC
      8  ff11
      9  ff11		       ca		      DEX
     10  ff12		       d0 fb		      BNE	.loop
     11  ff14
     85  ff14
     86  ff14							; Get everything ready for VSYNC
     87  ff14
     88  ff14		       86 01		      STX	VBLANK
     89  ff16		       a9 02		      LDA	#VSYNC_SET
     90  ff18		       85 02		      STA	WSYNC
     91  ff1a		       4c 2b f8 	      JMP	screenStart	; And start all over again!
     92  ff1d
     93  ff1d							; Tell us how many bytes we have used up
     94  ff1d
      0  ff1d					      USAGE_REPORT	"ROM", $F800, $FFFA
      1  ff1d
      2  ff1d				   NAM	      SET	"ROM"
      3  ff1d				   SPOS       SET	$F800
      4  ff1d				   EPOS       SET	$FFFA
      5  ff1d				   CPOS       SET	.
      6  ff1d
      7  ff1d				   CAP	      SET	EPOS - SPOS
      8  ff1d				   TKUP       SET	CPOS - SPOS
      9  ff1d
     10  ff1d				   PCNT       SET	[TKUP * 100 / CAP]d
     11  ff1d
     12  ff1d
     13  ff1d
 89 % of your ROM is used up ( 1821 / 2042 ) bytes
     14  ff1d					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15  ff1d
     96  ff1d
     97  fffa					      ORG	$FFFA
     98  fffa
     99  fffa		       00 f8		      DC.W	start	; Something
    100  fffc		       00 f8		      DC.W	start	; Entrypoint
    101  fffe		       2b f8		      DC.W	screenStart	; Something else
    102  10000
    103  10000					       END
