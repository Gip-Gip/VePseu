------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0e	    UPPAD_LIMIT =	14	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 0f	    CWAITCNT   =	15	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros
      2  10000 ????
      3  10000 ????				       MAC	ina
      4  10000 ????				       CLC
      5  10000 ????				       ADC	#1
      6  10000 ????				       ENDM
      7  10000 ????
      8  10000 ????				       MAC	dea
      9  10000 ????				       SEC
     10  10000 ????				       SBC	#1
     11  10000 ????				       ENDM
     12  10000 ????
     13  10000 ????				       MAC	delay
     14  10000 ????			    .CYCLES    SET	{1}
     15  10000 ????
     16  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     17  10000 ????				       NOP
     18  10000 ????			    .CYCLES    SET	.CYCLES - 2
     19  10000 ????				       ENDIF
     20  10000 ????
     21  10000 ????				       IF	[.CYCLES - 2] / 5
     22  10000 ????				       REPEAT	.CYCLES / 5
     23  10000 ????				       INC	DUMP
     24  10000 ????				       REPEND
     25  10000 ????			    .CYCLES    SET	.CYCLES % 5
     26  10000 ????				       ENDIF
     27  10000 ????
     28  10000 ????				       IF	.CYCLES % 3 == 1
     29  10000 ????				       NOP
     30  10000 ????			    .CYCLES    SET	.CYCLES - 2
     31  10000 ????				       ENDIF
     32  10000 ????
     33  10000 ????				       REPEAT	.CYCLES / 3
     34  10000 ????				       STA	DUMP
     35  10000 ????				       REPEND
     36  10000 ????
     37  10000 ????			    .CYCLES    SET	.CYCLES % 3
     38  10000 ????
     39  10000 ????				       REPEAT	.CYCLES / 2
     40  10000 ????				       NOP
     41  10000 ????				       REPEND
     42  10000 ????
     43  10000 ????			    .CYCLES    SET	.CYCLES % 2
     44  10000 ????
     45  10000 ????				       IF	.CYCLES
     46  10000 ????				       ERR
     47  10000 ????				       ENDIF
     48  10000 ????
     49  10000 ????				       ENDM
     50  10000 ????
     51  10000 ????				       MAC	usage_report
     52  10000 ????
     53  10000 ????			    NAM        SET	{1}
     54  10000 ????			    SPOS       SET	{2}
     55  10000 ????			    EPOS       SET	{3}
     56  10000 ????			    CPOS       SET	.
     57  10000 ????
     58  10000 ????			    CAP        SET	EPOS - SPOS
     59  10000 ????			    TKUP       SET	CPOS - SPOS
     60  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d
     61  10000 ????
     62  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     63  10000 ????
     64  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   fordPressed DC	0
     57 U00b1		       00	   backPressed DC	0
     58 U00b2		       00	   leftPressed DC	0
     59 U00b3		       00	   rigtPressed DC	0
     60 U00b4
     61 U00b4		       00	   wallColour DC	0
     62 U00b5		       00	   shadowColour DC	0
     63 U00b6		       00	   drawingPlyr DC	0
     64 U00b7		       00	   direction  DC	0
     65 U00b8		       00	   spriteHeight DC	0
     66 U00b9		       00 00	   miniMapPtr DC.W	0
     67 U00bb		       00 00	   mapPtr     DC.W	0
     68 U00bd		       00 00	   sprite     DC.W	0
     69 U00bf
      0 U00bf					      USAGE_REPORT	"RAM", $80, $100
      1 U00bf
      2 U00bf				   NAM	      SET	"RAM"
      3 U00bf				   SPOS       SET	$80
      4 U00bf				   EPOS       SET	$100
      5 U00bf				   CPOS       SET	.
      6 U00bf
      7 U00bf				   CAP	      SET	EPOS - SPOS
      8 U00bf				   TKUP       SET	CPOS - SPOS
      9 U00bf				   PCNT       SET	[TKUP * 100 / CAP]d
     10 U00bf
 49 % of your RAM is used up ( 63 / 128 ) bytes
     11 U00bf					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12 U00bf
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00bf					      INCLUDE	"include/pia_addr.h"
      1 U00bf							; PIA addresses
      2 U00bf
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   carl
      8  f078		       00		      DC	%00000000
      9  f079		       66		      DC	%01100110
     10  f07a		       24		      DC	%00100100
     11  f07b		       3c		      DC	%00111100
     12  f07c		       42		      DC	%01000010
     13  f07d		       bd		      DC	%10111101
     14  f07e		       c3		      DC	%11000011
     15  f07f		       81		      DC	%10000001
     16  f080		       a5		      DC	%10100101
     17  f081		       42		      DC	%01000010
     18  f082		       3c		      DC	%00111100
     19  f083
     20  f083				   miniMap_01
     21  f083		       e0 07		      DC.W	%0000011111100000
     22  f085		       bf fd		      DC.W	%1111110110111111
     23  f087		       80 01		      DC.W	%0000000110000000
     24  f089		       80 01		      DC.W	%0000000110000000
     25  f08b		       be bd		      DC.W	%1011110110111110
     26  f08d		       a2 a5		      DC.W	%1010010110100010
     27  f08f		       a2 a7		      DC.W	%1010011110100010
     28  f091		       e2 a7		      DC.W	%1010011111100010
     29  f093		       e2 a5		      DC.W	%1010010111100010
     30  f095		       be bd		      DC.W	%1011110110111110
     31  f097		       80 81		      DC.W	%1000000110000000
     32  f099		       80 81		      DC.W	%1000000110000000
     33  f09b		       bf fd		      DC.W	%1111110110111111
     34  f09d		       a0 05		      DC.W	%0000010110100000
     35  f09f		       a0 05		      DC.W	%0000010110100000
     36  f0a1		       e0 07		      DC.W	%0000011111100000
     37  f0a3
     38  f0a3				   map_01_load
     39  f0a3		       a9 d1		      LDA	#MAP_01_POS
     40  f0a5		       85 aa		      STA	playerPos
     41  f0a7		       a9 10		      LDA	#MAP_01_WDTH
     42  f0a9		       85 ab		      STA	mapWidth
     43  f0ab
     44  f0ab		       a9 00		      LDA	#<map_01
     45  f0ad		       85 bb		      STA	mapPtr
     46  f0af		       a9 f1		      LDA	#>map_01
     47  f0b1		       85 bc		      STA	mapPtr + 1
     48  f0b3
     49  f0b3		       a9 83		      LDA	#<miniMap_01
     50  f0b5		       85 b9		      STA	miniMapPtr
     51  f0b7		       a9 f0		      LDA	#>miniMap_01
     52  f0b9		       85 ba		      STA	miniMapPtr + 1
     53  f0bb		       60		      RTS
     54  f0bc
     55  f0bc
     56  f100		       00 00 00 00*	      ALIGN	256
     57  f100
     58  f100				   map_01
     59  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     60  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     61  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     62  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     63  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     64  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     65  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     66  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     67  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     68  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     69  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     70  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     71  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     72  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     73  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     74  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F800
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F800
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     10  f200
 25 % of your map space is used up ( 512 / 2048 ) bytes
     11  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12  f200
     15  f200
     16  f800					      ORG	$F800
     17  f800
     18  f800				   start
     19  f800
     20  f800							; Initialize everything
     21  f800
------- FILE init.asm LEVEL 2 PASS 4
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800					      SUBROUTINE
      4  f800
      5  f800		       a2 ff		      LDX	#stack
      6  f802		       9a		      TXS
      7  f803
      8  f803		       a9 00		      LDA	#NULL
      9  f805
     10  f805		       d8		      CLD
     11  f806		       18		      CLC
     12  f807		       58		      CLI
     13  f808		       b8		      CLV
     14  f809
     15  f809		       a2 00		      LDX	#NULL
     16  f80b
     17  f80b				   .loop
     18  f80b
     19  f80b		       95 00		      STA	cleanStart,X
     20  f80d		       ca		      DEX
     21  f80e
     22  f80e		       d0 fb		      BNE	.loop
     23  f810
     24  f810		       20 a3 f0 	      JSR	map_01_load
     25  f813
     26  f813		       a5 ab		      LDA	mapWidth
     27  f815		       85 af		      STA	yLoss
     28  f817		       a9 01		      LDA	#ONE
     29  f819		       85 ac		      STA	xGain
     30  f81b
     31  f81b		       a9 86		      LDA	#WCOLU
     32  f81d		       85 b4		      STA	wallColour
     33  f81f		       a9 82		      LDA	#SCOLU
     34  f821		       85 b5		      STA	shadowColour
------- FILE main.asm
     23  f823
     24  f823		       a9 02		      LDA	#VSYNC_SET
     25  f825
     26  f825				   screenStart
     27  f825
     28  f825							; Start vsync (3 scanlines)
     29  f825		       85 00		      STA	VSYNC
     30  f827
     31  f827		       85 02		      STA	WSYNC
     32  f829		       85 02		      STA	WSYNC
     33  f82b		       a9 00		      LDA	#NULL
     34  f82d		       85 02		      STA	WSYNC
     35  f82f
     36  f82f		       85 00		      STA	VSYNC
     37  f831
     38  f831							; Render everything (23 scanlines)
     39  f831
     40  f831
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f831					      INCLUDE	"walrend.asm"	; 9 scanlines
      1  f831							; VePseu's wall renderer
      2  f831
      3  f831		       a4 aa		      LDY	playerPos
      4  f833
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f833					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f833							; Peripheral vision rendering (54 cycles)
      2  f833
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f833					      INCLUDE	"include/ands_0.h"
      1  f833							; The AND constants for peripheral vision
      2  f833
      3  f833		       00 c0	   AND_W0S1P1 =	%11000000
      4  f833		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f833
      0  f833					      X_POS_LOS		; 24 cycles
      1  f833
      2  f833		       98		      TYA
      3  f834		       18		      CLC
      4  f835		       65 ad		      ADC	xLoss
      5  f837		       38		      SEC
      6  f838		       e5 ac		      SBC	xGain
      7  f83a		       a8		      TAY
      8  f83b
      6  f83b		       b1 bb		      LDA	(mapPtr),Y
      7  f83d		       29 c0		      AND	#AND_W0S1P1
      8  f83f		       85 9b		      STA	shadow1a
      9  f841
     10  f841		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f842		       18		      CLC
     12  f843		       65 ac		      ADC	xGain
     13  f845		       65 ac		      ADC	xGain
     14  f847		       38		      SEC
     15  f848		       e5 ad		      SBC	xLoss
     16  f84a		       e5 ad		      SBC	xLoss
     17  f84c		       a8		      TAY
     18  f84d
     19  f84d		       b1 bb		      LDA	(mapPtr),Y	; 10 cycles
     20  f84f		       29 03		      AND	#AND_W0S1P2
     21  f851		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f853
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f853					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f853							; Render the first layer (not that ugly) (86 cycles)
      2  f853
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f853					      INCLUDE	"include/ands_1.h"
      1  f853							; The AND constants for layer 1
      2  f853
      3  f853		       00 03	   AND_W1S1P1 =	%00000011
      4  f853		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f853
      0  f853					      Y_POS_ADV		; 30 cycles
      1  f853
      2  f853		       98		      TYA
      3  f854		       18		      CLC
      4  f855		       65 ae		      ADC	yGain
      5  f857		       38		      SEC
      6  f858		       e5 af		      SBC	yLoss
      7  f85a		       a8		      TAY
      8  f85b
      6  f85b		       b1 bb		      LDA	(mapPtr),Y
      7  f85d		       85 9e		      STA	shadow1d
      8  f85f		       05 9f		      ORA	shadow1e
      9  f861		       29 03		      AND	#AND_W1S1P1
     10  f863		       85 9f		      STA	shadow1e
     11  f865
      0  f865					      X_POS_LOS		; 22 cycles
      1  f865
      2  f865		       98		      TYA
      3  f866		       18		      CLC
      4  f867		       65 ad		      ADC	xLoss
      5  f869		       38		      SEC
      6  f86a		       e5 ac		      SBC	xGain
      7  f86c		       a8		      TAY
      8  f86d
     13  f86d		       b1 bb		      LDA	(mapPtr),Y
     14  f86f		       85 80		      STA	wall1
     15  f871
      0  f871					      X_POS_LOS		; 34 cycles
      1  f871
      2  f871		       98		      TYA
      3  f872		       18		      CLC
      4  f873		       65 ad		      ADC	xLoss
      5  f875		       38		      SEC
      6  f876		       e5 ac		      SBC	xGain
      7  f878		       a8		      TAY
      8  f879
     17  f879		       b1 bb		      LDA	(mapPtr),Y
     18  f87b		       aa		      TAX
     19  f87c		       05 9b		      ORA	shadow1a
     20  f87e		       85 9b		      STA	shadow1a
     21  f880		       8a		      TXA
     22  f881		       29 03		      AND	#AND_W1S1P2
     23  f883		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f885
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f885					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f885							; Render the second layer (186 cycles)
      2  f885
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f885					      INCLUDE	"include/ands_2.h"
      1  f885							; The AND constants for layer 2
      2  f885
      3  f885		       00 e0	   AND_W2S1P1 =	%11100000
      4  f885		       00 fc	   AND_W2S2P1 =	%11111100
      5  f885
      6  f885		       00 03	   AND_W2S0P1 =	%00000011
      7  f885		       00 04	   AND_W2S1P2 =	%00000100
      8  f885		       00 0c	   AND_W2S2P2 =	%00001100
      9  f885
     10  f885		       00 fc	   AND_W2S0P2 =	%11111100
     11  f885
     12  f885		       00 80	   AND_W2S1P3 =	%10000000
     13  f885		       00 c0	   AND_W2S2P3 =	%11000000
     14  f885
     15  f885		       00 01	   AND_W2S1P4 =	%00000001
     16  f885		       00 0f	   AND_W2S2P4 =	%00001111
     17  f885		       00 03	   AND_W2S1P5 =	%00000011
     18  f885		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f885
      0  f885					      Y_POS_ADV_AL		; 35 cycles
      1  f885
      2  f885		       98		      TYA
      3  f886		       18		      CLC
      4  f887		       65 ae		      ADC	yGain
      5  f889		       65 ad		      ADC	xLoss
      6  f88b		       38		      SEC
      7  f88c		       e5 af		      SBC	yLoss
      8  f88e		       e5 ac		      SBC	xGain
      9  f890		       a8		      TAY
     10  f891
      6  f891		       b1 bb		      LDA	(mapPtr),Y
      7  f893		       29 fc		      AND	#AND_W2S2P1
      8  f895		       85 a0		      STA	shadow2ab
      9  f897		       29 e0		      AND	#AND_W2S1P1
     10  f899		       85 91		      STA	shadow2aa
     11  f89b
      0  f89b					      X_POS_GAN		; 41 cycles
      1  f89b
      2  f89b		       98		      TYA
      3  f89c		       18		      CLC
      4  f89d		       65 ac		      ADC	xGain
      5  f89f		       38		      SEC
      6  f8a0		       e5 ad		      SBC	xLoss
      7  f8a2		       a8		      TAY
      8  f8a3
     13  f8a3		       b1 bb		      LDA	(mapPtr),Y
     14  f8a5		       aa		      TAX
     15  f8a6		       85 85		      STA	wall2a
     16  f8a8		       29 03		      AND	#AND_W2S0P1
     17  f8aa		       85 86		      STA	wall2b
     18  f8ac		       8a		      TXA
     19  f8ad		       29 0c		      AND	#AND_W2S2P2
     20  f8af		       85 a1		      STA	shadow2bb
     21  f8b1		       29 04		      AND	#AND_W2S1P2
     22  f8b3		       85 92		      STA	shadow2ba
     23  f8b5
      0  f8b5					      X_POS_GAN		; 30 cycles
      1  f8b5
      2  f8b5		       98		      TYA
      3  f8b6		       18		      CLC
      4  f8b7		       65 ac		      ADC	xGain
      5  f8b9		       38		      SEC
      6  f8ba		       e5 ad		      SBC	xLoss
      7  f8bc		       a8		      TAY
      8  f8bd
     25  f8bd		       b1 bb		      LDA	(mapPtr),Y
     26  f8bf		       85 87		      STA	wall2c
     27  f8c1		       29 fc		      AND	#AND_W2S0P2
     28  f8c3		       05 86		      ORA	wall2b
     29  f8c5		       85 86		      STA	wall2b
     30  f8c7
      0  f8c7					      X_POS_GAN		; 35 cycles
      1  f8c7
      2  f8c7		       98		      TYA
      3  f8c8		       18		      CLC
      4  f8c9		       65 ac		      ADC	xGain
      5  f8cb		       38		      SEC
      6  f8cc		       e5 ad		      SBC	xLoss
      7  f8ce		       a8		      TAY
      8  f8cf
     32  f8cf		       b1 bb		      LDA	(mapPtr),Y
     33  f8d1		       85 88		      STA	wall2d
     34  f8d3		       85 89		      STA	wall2e
     35  f8d5		       29 c0		      AND	#AND_W2S2P3
     36  f8d7		       85 a2		      STA	shadow2cb
     37  f8d9		       29 80		      AND	#AND_W2S1P3
     38  f8db		       85 93		      STA	shadow2ca
     39  f8dd
      0  f8dd					      X_POS_GAN		; 37 cycles
      1  f8dd
      2  f8dd		       98		      TYA
      3  f8de		       18		      CLC
      4  f8df		       65 ac		      ADC	xGain
      5  f8e1		       38		      SEC
      6  f8e2		       e5 ad		      SBC	xLoss
      7  f8e4		       a8		      TAY
      8  f8e5
     41  f8e5		       b1 bb		      LDA	(mapPtr),Y
     42  f8e7		       29 0f		      AND	#AND_W2S2P4
     43  f8e9		       85 a3		      STA	shadow2db
     44  f8eb		       29 03		      AND	#AND_W2S1P5
     45  f8ed		       85 95		      STA	shadow2ea
     46  f8ef		       85 a4		      STA	shadow2eb
     47  f8f1		       29 01		      AND	#AND_W2S1P4
     48  f8f3		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f8f5
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f8f5					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f8f5							; Render the third layer (it's really ugly, at 281 cycles)
      2  f8f5
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f8f5					      INCLUDE	"include/ands_3.h"
      1  f8f5							; The AND constants for render layer 3
      2  f8f5
      3  f8f5		       00 80	   AND_W3S1P1 =	%10000000
      4  f8f5		       00 c0	   AND_W3S2P1 =	%11000000
      5  f8f5
      6  f8f5		       00 fc	   AND_W3S0P1 =	%11111100
      7  f8f5		       00 02	   AND_W3S1P2 =	%00000010
      8  f8f5		       00 03	   AND_W3S2P2 =	%00000011
      9  f8f5
     10  f8f5		       00 03	   AND_W3S0P2 =	%00000011
     11  f8f5		       00 0f	   AND_W3S0P3 =	%00001111
     12  f8f5		       00 10	   AND_W3S1P3 =	%00010000
     13  f8f5		       00 30	   AND_W3S2P3 =	%00110000
     14  f8f5
     15  f8f5		       00 f0	   AND_W3S0P4 =	%11110000
     16  f8f5		       00 30	   AND_W3S0P5 =	%00110000
     17  f8f5
     18  f8f5		       00 c0	   AND_W3S0P6 =	%11000000
     19  f8f5		       00 f0	   AND_W3S0P7 =	%11110000
     20  f8f5		       00 20	   AND_W3S1P4 =	%00100000
     21  f8f5		       00 30	   AND_W3S2P4 =	%00110000
     22  f8f5
     23  f8f5		       00 0f	   AND_W3S0P8 =	%00001111
     24  f8f5		       00 03	   AND_W3S0P9 =	%00000011
     25  f8f5		       00 10	   AND_W3S1P5 =	%00010000
     26  f8f5		       00 30	   AND_W3S2P5 =	%00110000
     27  f8f5
     28  f8f5		       00 02	   AND_W3S1P6 =	%00000010
     29  f8f5		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f8f5
      0  f8f5					      Y_POS_ADV_AG		; 35 cycles
      1  f8f5
      2  f8f5		       98		      TYA
      3  f8f6		       18		      CLC
      4  f8f7		       65 ae		      ADC	yGain
      5  f8f9		       65 ac		      ADC	xGain
      6  f8fb		       38		      SEC
      7  f8fc		       e5 af		      SBC	yLoss
      8  f8fe		       e5 ad		      SBC	xLoss
      9  f900		       a8		      TAY
     10  f901
      6  f901		       b1 bb		      LDA	(mapPtr),Y
      7  f903		       29 03		      AND	#AND_W3S2P6
      8  f905		       85 a9		      STA	shadow3eb
      9  f907		       29 02		      AND	#AND_W3S1P6
     10  f909		       85 9a		      STA	shadow3ea
     11  f90b
      0  f90b					      X_POS_LOS		; 38 cycles
      1  f90b
      2  f90b		       98		      TYA
      3  f90c		       18		      CLC
      4  f90d		       65 ad		      ADC	xLoss
      5  f90f		       38		      SEC
      6  f910		       e5 ac		      SBC	xGain
      7  f912		       a8		      TAY
      8  f913
     13  f913		       b1 bb		      LDA	(mapPtr),Y
     14  f915		       aa		      TAX
     15  f916		       29 0f		      AND	#AND_W3S0P8
     16  f918		       85 8d		      STA	wall3d
     17  f91a		       29 03		      AND	#AND_W3S0P9
     18  f91c		       85 8e		      STA	wall3e
     19  f91e		       8a		      TXA
     20  f91f		       29 30		      AND	#AND_W3S2P5
     21  f921		       85 a8		      STA	shadow3db
     22  f923		       29 10		      AND	#AND_W3S1P5
     23  f925		       85 99		      STA	shadow3da
     24  f927
      0  f927					      X_POS_LOS		; 46 cycles
      1  f927
      2  f927		       98		      TYA
      3  f928		       18		      CLC
      4  f929		       65 ad		      ADC	xLoss
      5  f92b		       38		      SEC
      6  f92c		       e5 ac		      SBC	xGain
      7  f92e		       a8		      TAY
      8  f92f
     26  f92f		       b1 bb		      LDA	(mapPtr),Y
     27  f931		       aa		      TAX
     28  f932		       29 f0		      AND	#AND_W3S0P7
     29  f934		       05 8d		      ORA	wall3d
     30  f936		       85 8d		      STA	wall3d
     31  f938		       29 c0		      AND	#AND_W3S0P6
     32  f93a		       85 8c		      STA	wall3c
     33  f93c		       8a		      TXA
     34  f93d		       29 30		      AND	#AND_W3S2P4
     35  f93f		       85 a7		      STA	shadow3cb
     36  f941		       29 20		      AND	#AND_W3S1P4
     37  f943		       85 98		      STA	shadow3ca
     38  f945
      0  f945					      X_POS_LOS		; 32 cycles
      1  f945
      2  f945		       98		      TYA
      3  f946		       18		      CLC
      4  f947		       65 ad		      ADC	xLoss
      5  f949		       38		      SEC
      6  f94a		       e5 ac		      SBC	xGain
      7  f94c		       a8		      TAY
      8  f94d
     40  f94d		       b1 bb		      LDA	(mapPtr),Y
     41  f94f		       29 f0		      AND	#AND_W3S0P4
     42  f951		       85 8b		      STA	wall3b
     43  f953		       29 30		      AND	#AND_W3S0P5
     44  f955		       05 8c		      ORA	wall3c
     45  f957		       85 8c		      STA	wall3c
     46  f959
      0  f959					      X_POS_LOS		; 46 cycles
      1  f959
      2  f959		       98		      TYA
      3  f95a		       18		      CLC
      4  f95b		       65 ad		      ADC	xLoss
      5  f95d		       38		      SEC
      6  f95e		       e5 ac		      SBC	xGain
      7  f960		       a8		      TAY
      8  f961
     48  f961		       b1 bb		      LDA	(mapPtr),Y
     49  f963		       aa		      TAX
     50  f964		       29 0f		      AND	#AND_W3S0P3
     51  f966		       05 8b		      ORA	wall3b
     52  f968		       85 8b		      STA	wall3b
     53  f96a		       29 03		      AND	#AND_W3S0P2
     54  f96c		       85 8a		      STA	wall3a
     55  f96e		       8a		      TXA
     56  f96f		       29 30		      AND	#AND_W3S2P3
     57  f971		       85 a6		      STA	shadow3bb
     58  f973		       29 10		      AND	#AND_W3S1P3
     59  f975		       85 97		      STA	shadow3ba
     60  f977
      0  f977					      X_POS_LOS		; 41 cycles
      1  f977
      2  f977		       98		      TYA
      3  f978		       18		      CLC
      4  f979		       65 ad		      ADC	xLoss
      5  f97b		       38		      SEC
      6  f97c		       e5 ac		      SBC	xGain
      7  f97e		       a8		      TAY
      8  f97f
     62  f97f		       b1 bb		      LDA	(mapPtr),Y
     63  f981		       aa		      TAX
     64  f982		       29 fc		      AND	#AND_W3S0P1
     65  f984		       05 8a		      ORA	wall3a
     66  f986		       85 8a		      STA	wall3a
     67  f988		       8a		      TXA
     68  f989		       29 03		      AND	#AND_W3S2P2
     69  f98b		       85 a5		      STA	shadow3ab
     70  f98d		       29 02		      AND	#AND_W3S1P2
     71  f98f		       85 96		      STA	shadow3aa
     72  f991
      0  f991					      X_POS_LOS		; 35 cycles
      1  f991
      2  f991		       98		      TYA
      3  f992		       18		      CLC
      4  f993		       65 ad		      ADC	xLoss
      5  f995		       38		      SEC
      6  f996		       e5 ac		      SBC	xGain
      7  f998		       a8		      TAY
      8  f999
     74  f999		       b1 bb		      LDA	(mapPtr),Y
     75  f99b		       29 c0		      AND	#AND_W3S2P1
     76  f99d		       05 a5		      ORA	shadow3ab
     77  f99f		       85 a5		      STA	shadow3ab
     78  f9a1		       29 80		      AND	#AND_W3S1P1
     79  f9a3		       05 96		      ORA	shadow3aa
     80  f9a5		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9a7
     13  f9a7		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9a9					      INCLUDE	"scrend.asm"	; 14 Scanlines
      1  f9a9							; VePseu's screen renderer
      2  f9a9
      3  f9a9							; Remove the shadows incase only 1 wall is drawn
      4  f9a9
      5  f9a9					      SUBROUTINE
      6  f9a9
      7  f9a9		       a5 9b		      LDA	shadow1a	; 12 cycles
      8  f9ab		       05 80		      ORA	wall1
      9  f9ad		       45 80		      EOR	wall1
     10  f9af		       85 9b		      STA	shadow1a
     11  f9b1
     12  f9b1		       a5 9c		      LDA	shadow1b	; 12 cycles
     13  f9b3		       05 80		      ORA	wall1
     14  f9b5		       45 80		      EOR	wall1
     15  f9b7		       85 9c		      STA	shadow1b
     16  f9b9
     17  f9b9		       a5 9e		      LDA	shadow1d	; 12 cycles
     18  f9bb		       05 80		      ORA	wall1
     19  f9bd		       45 80		      EOR	wall1
     20  f9bf		       85 9e		      STA	shadow1d
     21  f9c1
     22  f9c1		       a5 9f		      LDA	shadow1e	; 12 cycles
     23  f9c3		       05 80		      ORA	wall1
     24  f9c5		       45 80		      EOR	wall1
     25  f9c7		       85 9f		      STA	shadow1e
     26  f9c9
     27  f9c9		       a5 80		      LDA	wall1	; Copy wall one to the four addresses preceding it (15 cycles)
     28  f9cb		       85 81		      STA	wall1+1
     29  f9cd		       85 82		      STA	wall1+2
     30  f9cf		       85 83		      STA	wall1+3
     31  f9d1		       85 84		      STA	wall1+4
     32  f9d3
     33  f9d3		       a2 00		      LDX	#INDEXINIT	; 2 cycles
     34  f9d5
     35  f9d5				   .loop		; Totals at 909 cycles
     36  f9d5
     37  f9d5		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     38  f9d7		       15 80		      ORA	wall1,X
     39  f9d9		       95 85		      STA	wall2a,X
     40  f9db
     41  f9db		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     42  f9dd		       15 9b		      ORA	shadow1a,X
     43  f9df		       95 91		      STA	shadow2aa,X
     44  f9e1
     45  f9e1		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     46  f9e3		       15 9b		      ORA	shadow1a,X
     47  f9e5		       95 a0		      STA	shadow2ab,X
     48  f9e7
     49  f9e7		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     50  f9e9		       15 9b		      ORA	shadow1a,X
     51  f9eb		       55 9b		      EOR	shadow1a,X
     52  f9ed		       95 85		      STA	wall2a,X
     53  f9ef
     54  f9ef		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     55  f9f1		       15 85		      ORA	wall2a,X
     56  f9f3		       55 85		      EOR	wall2a,X
     57  f9f5		       95 91		      STA	shadow2aa,X
     58  f9f7
     59  f9f7		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     60  f9f9		       15 85		      ORA	wall2a,X
     61  f9fb		       55 85		      EOR	wall2a,X
     62  f9fd		       95 a0		      STA	shadow2ab,X
     63  f9ff
     64  f9ff		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     65  fa00		       e0 0a		      CPX	#WALLCNT
     66  fa02		       d0 d1		      BNE	.loop
     67  fa04
     68  fa04		       a2 ff		      LDX	#FULLWALL
     69  fa06
     70  fa06		       8a		      TXA
     71  fa07		       45 a5		      EOR	shadow3ab
     72  fa09		       85 8f		      STA	wall4a
     73  fa0b
     74  fa0b		       8a		      TXA
     75  fa0c		       45 a6		      EOR	shadow3bb
     76  fa0e		       85 90		      STA	wall4b
     77  fa10
     78  fa10		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     43  fa12
     44  fa12		       a9 78		      LDA	#<carl
     45  fa14		       85 bd		      STA	sprite
     46  fa16		       a9 f0		      LDA	#>carl
     47  fa18		       85 be		      STA	sprite+1
     48  fa1a		       a9 0c		      LDA	#$0C
     49  fa1c		       85 06		      STA	COLUP0
     50  fa1e
     51  fa1e		       a9 0b		      LDA	#11
     52  fa20		       85 b8		      STA	spriteHeight
     53  fa22
     54  fa22							; Pad!
     55  fa22
     56  fa22		       a2 0e		      LDX	#UPPAD_LIMIT
     57  fa24
     58  fa24				   upperPad
     59  fa24		       85 02		      STA	WSYNC
     60  fa26
     61  fa26		       ca		      DEX
     62  fa27		       d0 fb		      BNE	upperPad
     63  fa29
     64  fa29		       85 02		      STA	WSYNC
     65  fa2b
     66  fa2b							; Draw everything
     67  fa2b
     68  fa2b		       a4 00		      LDY	0
     69  fa2d
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa2d					      INCLUDE	"dispkern.asm"	; 186 scanlines
      1  fa2d							; VePseu's display kernel
      2  fa2d
      3  fa2d		       4c 30 fa 	      JMP	drawStart
      4  fa30
      5  fa30							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa30							;
      7  fa30							; dc_w1s1.asm
      8  fa30							; |   | |
      9  fa30							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa30							; |   |
     11  fa30							; |   |- The wall it draws
     12  fa30							; |
     13  fa30							; |- Draw-code identifies
     14  fa30
     15  fa30				   drawStart
     16  fa30
     17  fa30		       b8		      CLV
     18  fa31
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa31					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa31							; The draw code for the 1st wall and shadow
      2  fa31
      3  fa31				   dc_w1s1    SUBROUTINE
      4  fa31
      5  fa31		       a2 00		      LDX	#INDEXINIT
      6  fa33		       4c 43 fa 	      JMP	.loop
      7  fa36
      8  fa36				   .noSprite_1
      9  fa36							; Depending on the location in the program the branch here might cross a
     10  fa36							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa36							; delay simply check if the page number (the MSB of the address) is
     12  fa36							; different between the branch and it's destination
     13  fa36					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa36					      DELAY	11
      1  fa36				   .CYCLES    SET	11
      2  fa36
      3  fa36					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa36		       ea		      NOP
      5  fa36				   .CYCLES    SET	.CYCLES - 2
      6  fa37					      ENDIF
      7  fa37
      8  fa37					      IF	[.CYCLES - 2] / 5
      9  fa37					      REPEAT	.CYCLES / 5
     10  fa37		       e6 30		      INC	DUMP
     11  fa39					      REPEND
     12  fa39				   .CYCLES    SET	.CYCLES % 5
     13  fa39					      ENDIF
     14  fa39
     15  fa39					      IF	.CYCLES % 3 == 1
     16  fa39		       ea		      NOP
     17  fa39				   .CYCLES    SET	.CYCLES - 2
     18  fa3a					      ENDIF
     19  fa3a
     20  fa3a				  -	      REPEAT	.CYCLES / 3
     21  fa3a				  -	      STA	DUMP
     22  fa3a					      REPEND
     23  fa3a
     24  fa3a				   .CYCLES    SET	.CYCLES % 3
     25  fa3a
     26  fa3a					      REPEAT	.CYCLES / 2
     27  fa3a		       ea		      NOP
     28  fa3b					      REPEND
     29  fa3b
     30  fa3b				   .CYCLES    SET	.CYCLES % 2
     31  fa3b
     32  fa3b				  -	      IF	.CYCLES
     33  fa3b				  -	      ERR
     34  fa3b					      ENDIF
     35  fa3b
     15  fa3b				  -	      ELSE
     16  fa3b				  -	      DELAY	10
     17  fa3b					      ENDIF
     18  fa3b		       4c 59 fa 	      JMP	.noSprite_ret
     19  fa3e
     20  fa3e				   .noSprite_2
     21  fa3e					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa3e					      DELAY	4
      1  fa3e				   .CYCLES    SET	4
      2  fa3e
      3  fa3e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa3e				  -	      NOP
      5  fa3e				  -.CYCLES    SET	.CYCLES - 2
      6  fa3e					      ENDIF
      7  fa3e
      8  fa3e				  -	      IF	[.CYCLES - 2] / 5
      9  fa3e				  -	      REPEAT	.CYCLES / 5
     10  fa3e				  -	      INC	DUMP
     11  fa3e				  -	      REPEND
     12  fa3e				  -.CYCLES    SET	.CYCLES % 5
     13  fa3e					      ENDIF
     14  fa3e
     15  fa3e					      IF	.CYCLES % 3 == 1
     16  fa3e		       ea		      NOP
     17  fa3e				   .CYCLES    SET	.CYCLES - 2
     18  fa3f					      ENDIF
     19  fa3f
     20  fa3f				  -	      REPEAT	.CYCLES / 3
     21  fa3f				  -	      STA	DUMP
     22  fa3f					      REPEND
     23  fa3f
     24  fa3f				   .CYCLES    SET	.CYCLES % 3
     25  fa3f
     26  fa3f					      REPEAT	.CYCLES / 2
     27  fa3f		       ea		      NOP
     28  fa40					      REPEND
     29  fa40
     30  fa40				   .CYCLES    SET	.CYCLES % 2
     31  fa40
     32  fa40				  -	      IF	.CYCLES
     33  fa40				  -	      ERR
     34  fa40					      ENDIF
     35  fa40
     23  fa40				  -	      ELSE
     24  fa40				  -	      DELAY	3
     25  fa40					      ENDIF
     26  fa40		       4c 59 fa 	      JMP	.noSprite_ret
     27  fa43
     28  fa43				   .loop
     29  fa43		       a5 b4		      LDA	wallColour
     30  fa45		       85 02		      STA	WSYNC
     31  fa47		       85 08		      STA	COLUPF
     32  fa49		       a5 80		      LDA	wall1
     33  fa4b		       85 0e		      STA	PF1
     34  fa4d		       98		      TYA
     35  fa4e				   .branchPoint_1
     36  fa4e		       f0 e6		      BEQ	.noSprite_1
     37  fa50		       88		      DEY
     38  fa51		       c4 b8		      CPY	spriteHeight
     39  fa53				   .branchPoint_2
     40  fa53		       b0 e9		      BCS	.noSprite_2
     41  fa55		       b1 bd		      LDA	(sprite),Y
     42  fa57		       85 1b		      STA	GRP0
     43  fa59				   .noSprite_ret
     44  fa59		       a5 80		      LDA	wall1
     45  fa5b		       85 0f		      STA	PF2
      0  fa5d					      DELAY	6
      1  fa5d				   .CYCLES    SET	6
      2  fa5d
      3  fa5d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa5d				  -	      NOP
      5  fa5d				  -.CYCLES    SET	.CYCLES - 2
      6  fa5d					      ENDIF
      7  fa5d
      8  fa5d				  -	      IF	[.CYCLES - 2] / 5
      9  fa5d				  -	      REPEAT	.CYCLES / 5
     10  fa5d				  -	      INC	DUMP
     11  fa5d				  -	      REPEND
     12  fa5d				  -.CYCLES    SET	.CYCLES % 5
     13  fa5d					      ENDIF
     14  fa5d
     15  fa5d				  -	      IF	.CYCLES % 3 == 1
     16  fa5d				  -	      NOP
     17  fa5d				  -.CYCLES    SET	.CYCLES - 2
     18  fa5d					      ENDIF
     19  fa5d
     20  fa5d					      REPEAT	.CYCLES / 3
     21  fa5d		       85 30		      STA	DUMP
     20  fa5d					      REPEND
     21  fa5f		       85 30		      STA	DUMP
     22  fa61					      REPEND
     23  fa61
     24  fa61				   .CYCLES    SET	.CYCLES % 3
     25  fa61
     26  fa61				  -	      REPEAT	.CYCLES / 2
     27  fa61				  -	      NOP
     28  fa61					      REPEND
     29  fa61
     30  fa61				   .CYCLES    SET	.CYCLES % 2
     31  fa61
     32  fa61				  -	      IF	.CYCLES
     33  fa61				  -	      ERR
     34  fa61					      ENDIF
     35  fa61
     47  fa61		       85 0d		      STA	PF0
      0  fa63					      DELAY	19
      1  fa63				   .CYCLES    SET	19
      2  fa63
      3  fa63				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa63				  -	      NOP
      5  fa63				  -.CYCLES    SET	.CYCLES - 2
      6  fa63					      ENDIF
      7  fa63
      8  fa63					      IF	[.CYCLES - 2] / 5
      9  fa63					      REPEAT	.CYCLES / 5
     10  fa63		       e6 30		      INC	DUMP
      9  fa63					      REPEND
     10  fa65		       e6 30		      INC	DUMP
      9  fa65					      REPEND
     10  fa67		       e6 30		      INC	DUMP
     11  fa69					      REPEND
     12  fa69				   .CYCLES    SET	.CYCLES % 5
     13  fa69					      ENDIF
     14  fa69
     15  fa69					      IF	.CYCLES % 3 == 1
     16  fa69		       ea		      NOP
     17  fa69				   .CYCLES    SET	.CYCLES - 2
     18  fa6a					      ENDIF
     19  fa6a
     20  fa6a				  -	      REPEAT	.CYCLES / 3
     21  fa6a				  -	      STA	DUMP
     22  fa6a					      REPEND
     23  fa6a
     24  fa6a				   .CYCLES    SET	.CYCLES % 3
     25  fa6a
     26  fa6a					      REPEAT	.CYCLES / 2
     27  fa6a		       ea		      NOP
     28  fa6b					      REPEND
     29  fa6b
     30  fa6b				   .CYCLES    SET	.CYCLES % 2
     31  fa6b
     32  fa6b				  -	      IF	.CYCLES
     33  fa6b				  -	      ERR
     34  fa6b					      ENDIF
     35  fa6b
     49  fa6b		       a9 00		      LDA	#NULL
     50  fa6d		       85 0f		      STA	PF2
     51  fa6f		       85 0d		      STA	PF0
     52  fa71
     53  fa71		       85 02		      STA	WSYNC
     54  fa73		       a5 b5		      LDA	shadowColour
     55  fa75		       85 08		      STA	COLUPF
     56  fa77		       a5 9b		      LDA	shadow1a
     57  fa79		       3d 00 f0 	      AND	and_1a,X
     58  fa7c		       85 0e		      STA	PF1
     59  fa7e		       a5 9c		      LDA	shadow1b
     60  fa80		       3d 1e f0 	      AND	and_1b,X
     61  fa83		       85 0f		      STA	PF2
      0  fa85					      DELAY	9
      1  fa85				   .CYCLES    SET	9
      2  fa85
      3  fa85				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa85				  -	      NOP
      5  fa85				  -.CYCLES    SET	.CYCLES - 2
      6  fa85					      ENDIF
      7  fa85
      8  fa85					      IF	[.CYCLES - 2] / 5
      9  fa85					      REPEAT	.CYCLES / 5
     10  fa85		       e6 30		      INC	DUMP
     11  fa87					      REPEND
     12  fa87				   .CYCLES    SET	.CYCLES % 5
     13  fa87					      ENDIF
     14  fa87
     15  fa87					      IF	.CYCLES % 3 == 1
     16  fa87		       ea		      NOP
     17  fa87				   .CYCLES    SET	.CYCLES - 2
     18  fa88					      ENDIF
     19  fa88
     20  fa88				  -	      REPEAT	.CYCLES / 3
     21  fa88				  -	      STA	DUMP
     22  fa88					      REPEND
     23  fa88
     24  fa88				   .CYCLES    SET	.CYCLES % 3
     25  fa88
     26  fa88					      REPEAT	.CYCLES / 2
     27  fa88		       ea		      NOP
     28  fa89					      REPEND
     29  fa89
     30  fa89				   .CYCLES    SET	.CYCLES % 2
     31  fa89
     32  fa89				  -	      IF	.CYCLES
     33  fa89				  -	      ERR
     34  fa89					      ENDIF
     35  fa89
     63  fa89		       a5 9e		      LDA	shadow1d
     64  fa8b		       3d 3c f0 	      AND	and_1c,X
     65  fa8e		       85 0e		      STA	PF1
     66  fa90		       a5 9f		      LDA	shadow1e
     67  fa92		       3d 5a f0 	      AND	and_1d,X
     68  fa95		       85 0f		      STA	PF2
     69  fa97
     70  fa97		       e8		      INX
     71  fa98		       e0 1e		      CPX	#UPPRWALL_S
     72  fa9a		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  fa9c					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  fa9c							; The second wall and it's first shadow
      2  fa9c
      3  fa9c				   dc_w2s1    SUBROUTINE
      4  fa9c
      5  fa9c		       a2 03		      LDX	#PIXH
      6  fa9e		       4c ae fa 	      JMP	.loop
      7  faa1
      8  faa1				   .noSprite_1
      9  faa1					      IF	>.branchPoint_1 == >.noSprite_1
      0  faa1					      DELAY	11
      1  faa1				   .CYCLES    SET	11
      2  faa1
      3  faa1					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faa1		       ea		      NOP
      5  faa1				   .CYCLES    SET	.CYCLES - 2
      6  faa2					      ENDIF
      7  faa2
      8  faa2					      IF	[.CYCLES - 2] / 5
      9  faa2					      REPEAT	.CYCLES / 5
     10  faa2		       e6 30		      INC	DUMP
     11  faa4					      REPEND
     12  faa4				   .CYCLES    SET	.CYCLES % 5
     13  faa4					      ENDIF
     14  faa4
     15  faa4					      IF	.CYCLES % 3 == 1
     16  faa4		       ea		      NOP
     17  faa4				   .CYCLES    SET	.CYCLES - 2
     18  faa5					      ENDIF
     19  faa5
     20  faa5				  -	      REPEAT	.CYCLES / 3
     21  faa5				  -	      STA	DUMP
     22  faa5					      REPEND
     23  faa5
     24  faa5				   .CYCLES    SET	.CYCLES % 3
     25  faa5
     26  faa5					      REPEAT	.CYCLES / 2
     27  faa5		       ea		      NOP
     28  faa6					      REPEND
     29  faa6
     30  faa6				   .CYCLES    SET	.CYCLES % 2
     31  faa6
     32  faa6				  -	      IF	.CYCLES
     33  faa6				  -	      ERR
     34  faa6					      ENDIF
     35  faa6
     11  faa6				  -	      ELSE
     12  faa6				  -	      DELAY	10
     13  faa6					      ENDIF
     14  faa6		       4c c4 fa 	      JMP	.noSprite_ret
     15  faa9
     16  faa9				   .noSprite_2
     17  faa9					      IF	>.branchPoint_2 == >.noSprite_2
      0  faa9					      DELAY	4
      1  faa9				   .CYCLES    SET	4
      2  faa9
      3  faa9				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faa9				  -	      NOP
      5  faa9				  -.CYCLES    SET	.CYCLES - 2
      6  faa9					      ENDIF
      7  faa9
      8  faa9				  -	      IF	[.CYCLES - 2] / 5
      9  faa9				  -	      REPEAT	.CYCLES / 5
     10  faa9				  -	      INC	DUMP
     11  faa9				  -	      REPEND
     12  faa9				  -.CYCLES    SET	.CYCLES % 5
     13  faa9					      ENDIF
     14  faa9
     15  faa9					      IF	.CYCLES % 3 == 1
     16  faa9		       ea		      NOP
     17  faa9				   .CYCLES    SET	.CYCLES - 2
     18  faaa					      ENDIF
     19  faaa
     20  faaa				  -	      REPEAT	.CYCLES / 3
     21  faaa				  -	      STA	DUMP
     22  faaa					      REPEND
     23  faaa
     24  faaa				   .CYCLES    SET	.CYCLES % 3
     25  faaa
     26  faaa					      REPEAT	.CYCLES / 2
     27  faaa		       ea		      NOP
     28  faab					      REPEND
     29  faab
     30  faab				   .CYCLES    SET	.CYCLES % 2
     31  faab
     32  faab				  -	      IF	.CYCLES
     33  faab				  -	      ERR
     34  faab					      ENDIF
     35  faab
     19  faab				  -	      ELSE
     20  faab				  -	      DELAY	3
     21  faab					      ENDIF
     22  faab		       4c c4 fa 	      JMP	.noSprite_ret
     23  faae
     24  faae				   .loop
     25  faae		       a5 b4		      LDA	wallColour
     26  fab0		       85 02		      STA	WSYNC
     27  fab2				   .joinIn
     28  fab2		       85 08		      STA	COLUPF
     29  fab4		       a5 85		      LDA	wall2a
     30  fab6		       85 0e		      STA	PF1
     31  fab8		       98		      TYA
     32  fab9				   .branchPoint_1
     33  fab9		       f0 e6		      BEQ	.noSprite_1
     34  fabb		       88		      DEY
     35  fabc		       c4 b8		      CPY	spriteHeight
     36  fabe				   .branchPoint_2
     37  fabe		       b0 e9		      BCS	.noSprite_2
     38  fac0		       b1 bd		      LDA	(sprite),Y
     39  fac2		       85 1b		      STA	GRP0
     40  fac4				   .noSprite_ret
     41  fac4		       a5 86		      LDA	wall2b
     42  fac6		       85 0f		      STA	PF2
     43  fac8
     44  fac8		       a5 87		      LDA	wall2c
     45  faca		       85 0d		      STA	PF0
     46  facc		       a5 88		      LDA	wall2d
     47  face		       85 0e		      STA	PF1
     48  fad0		       a5 89		      LDA	wall2e
     49  fad2		       85 0f		      STA	PF2
     50  fad4		       a9 00		      LDA	#NULL
      0  fad6					      DELAY	10
      1  fad6				   .CYCLES    SET	10
      2  fad6
      3  fad6				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fad6				  -	      NOP
      5  fad6				  -.CYCLES    SET	.CYCLES - 2
      6  fad6					      ENDIF
      7  fad6
      8  fad6					      IF	[.CYCLES - 2] / 5
      9  fad6					      REPEAT	.CYCLES / 5
     10  fad6		       e6 30		      INC	DUMP
      9  fad6					      REPEND
     10  fad8		       e6 30		      INC	DUMP
     11  fada					      REPEND
     12  fada				   .CYCLES    SET	.CYCLES % 5
     13  fada					      ENDIF
     14  fada
     15  fada				  -	      IF	.CYCLES % 3 == 1
     16  fada				  -	      NOP
     17  fada				  -.CYCLES    SET	.CYCLES - 2
     18  fada					      ENDIF
     19  fada
     20  fada				  -	      REPEAT	.CYCLES / 3
     21  fada				  -	      STA	DUMP
     22  fada					      REPEND
     23  fada
     24  fada				   .CYCLES    SET	.CYCLES % 3
     25  fada
     26  fada				  -	      REPEAT	.CYCLES / 2
     27  fada				  -	      NOP
     28  fada					      REPEND
     29  fada
     30  fada				   .CYCLES    SET	.CYCLES % 2
     31  fada
     32  fada				  -	      IF	.CYCLES
     33  fada				  -	      ERR
     34  fada					      ENDIF
     35  fada
     52  fada		       85 0f		      STA	PF2
     53  fadc		       85 0d		      STA	PF0
     54  fade
     55  fade		       85 02		      STA	WSYNC	; Draw the shadow
     56  fae0		       a5 b5		      LDA	shadowColour
     57  fae2		       85 08		      STA	COLUPF
     58  fae4		       a5 91		      LDA	shadow2aa
     59  fae6		       05 9b		      ORA	shadow1a
     60  fae8		       85 0e		      STA	PF1
     61  faea		       a5 92		      LDA	shadow2ba
     62  faec		       05 9c		      ORA	shadow1b
     63  faee		       85 0f		      STA	PF2
     64  faf0		       a5 93		      LDA	shadow2ca
     65  faf2		       85 0d		      STA	PF0
     66  faf4		       a5 94		      LDA	shadow2da
     67  faf6		       05 9e		      ORA	shadow1d
     68  faf8		       85 0e		      STA	PF1
     69  fafa		       a5 95		      LDA	shadow2ea
     70  fafc		       05 9f		      ORA	shadow1e
     71  fafe		       85 0f		      STA	PF2
     72  fb00		       a9 00		      LDA	#NULL
     73  fb02		       85 0d		      STA	PF0
     74  fb04
     75  fb04		       ca		      DEX
     76  fb05		       d0 a7		      BNE	.loop
     77  fb07
     78  fb07		       50 03		      BVC	dc_w2s2_delayed
     79  fb09		       4c d3 fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fb0c					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fb0c							; The second wall and it's second shadow
      2  fb0c
      3  fb0c				   dc_w2s2_delayed
      0  fb0c					      DELAY	2
      1  fb0c				   .CYCLES    SET	2
      2  fb0c
      3  fb0c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb0c				  -	      NOP
      5  fb0c				  -.CYCLES    SET	.CYCLES - 2
      6  fb0c					      ENDIF
      7  fb0c
      8  fb0c				  -	      IF	[.CYCLES - 2] / 5
      9  fb0c				  -	      REPEAT	.CYCLES / 5
     10  fb0c				  -	      INC	DUMP
     11  fb0c				  -	      REPEND
     12  fb0c				  -.CYCLES    SET	.CYCLES % 5
     13  fb0c					      ENDIF
     14  fb0c
     15  fb0c				  -	      IF	.CYCLES % 3 == 1
     16  fb0c				  -	      NOP
     17  fb0c				  -.CYCLES    SET	.CYCLES - 2
     18  fb0c					      ENDIF
     19  fb0c
     20  fb0c				  -	      REPEAT	.CYCLES / 3
     21  fb0c				  -	      STA	DUMP
     22  fb0c					      REPEND
     23  fb0c
     24  fb0c				   .CYCLES    SET	.CYCLES % 3
     25  fb0c
     26  fb0c					      REPEAT	.CYCLES / 2
     27  fb0c		       ea		      NOP
     28  fb0d					      REPEND
     29  fb0d
     30  fb0d				   .CYCLES    SET	.CYCLES % 2
     31  fb0d
     32  fb0d				  -	      IF	.CYCLES
     33  fb0d				  -	      ERR
     34  fb0d					      ENDIF
     35  fb0d
      5  fb0d				   dc_w2s2    SUBROUTINE
      6  fb0d
      7  fb0d		       a2 03		      LDX	#PIXH
      8  fb0f
      9  fb0f				   .loop
     10  fb0f		       a5 b4		      LDA	wallColour
     11  fb11		       85 02		      STA	WSYNC
     12  fb13		       85 08		      STA	COLUPF
     13  fb15		       a5 85		      LDA	wall2a
     14  fb17		       85 0e		      STA	PF1
     15  fb19		       98		      TYA
     16  fb1a				   .branchPoint_1
     17  fb1a		       f0 51		      BEQ	.noSprite_1
     18  fb1c		       88		      DEY
     19  fb1d		       c4 b8		      CPY	spriteHeight
     20  fb1f				   .branchPoint_2
     21  fb1f		       b0 54		      BCS	.noSprite_2
     22  fb21		       b1 bd		      LDA	(sprite),Y
     23  fb23		       85 1b		      STA	GRP0
     24  fb25				   .noSprite_ret
     25  fb25		       a5 86		      LDA	wall2b
     26  fb27		       85 0f		      STA	PF2
     27  fb29
     28  fb29		       a5 87		      LDA	wall2c
     29  fb2b		       85 0d		      STA	PF0
     30  fb2d		       a5 88		      LDA	wall2d
     31  fb2f		       85 0e		      STA	PF1
     32  fb31		       a5 89		      LDA	wall2e
     33  fb33		       85 0f		      STA	PF2
     34  fb35		       a9 00		      LDA	#NULL
      0  fb37					      DELAY	10
      1  fb37				   .CYCLES    SET	10
      2  fb37
      3  fb37				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb37				  -	      NOP
      5  fb37				  -.CYCLES    SET	.CYCLES - 2
      6  fb37					      ENDIF
      7  fb37
      8  fb37					      IF	[.CYCLES - 2] / 5
      9  fb37					      REPEAT	.CYCLES / 5
     10  fb37		       e6 30		      INC	DUMP
      9  fb37					      REPEND
     10  fb39		       e6 30		      INC	DUMP
     11  fb3b					      REPEND
     12  fb3b				   .CYCLES    SET	.CYCLES % 5
     13  fb3b					      ENDIF
     14  fb3b
     15  fb3b				  -	      IF	.CYCLES % 3 == 1
     16  fb3b				  -	      NOP
     17  fb3b				  -.CYCLES    SET	.CYCLES - 2
     18  fb3b					      ENDIF
     19  fb3b
     20  fb3b				  -	      REPEAT	.CYCLES / 3
     21  fb3b				  -	      STA	DUMP
     22  fb3b					      REPEND
     23  fb3b
     24  fb3b				   .CYCLES    SET	.CYCLES % 3
     25  fb3b
     26  fb3b				  -	      REPEAT	.CYCLES / 2
     27  fb3b				  -	      NOP
     28  fb3b					      REPEND
     29  fb3b
     30  fb3b				   .CYCLES    SET	.CYCLES % 2
     31  fb3b
     32  fb3b				  -	      IF	.CYCLES
     33  fb3b				  -	      ERR
     34  fb3b					      ENDIF
     35  fb3b
     36  fb3b		       85 0f		      STA	PF2
     37  fb3d		       85 0d		      STA	PF0
     38  fb3f
     39  fb3f		       85 02		      STA	WSYNC	; Draw the shadow
     40  fb41		       a5 b5		      LDA	shadowColour
     41  fb43		       85 08		      STA	COLUPF
     42  fb45		       a5 a0		      LDA	shadow2ab
     43  fb47		       05 9b		      ORA	shadow1a
     44  fb49		       85 0e		      STA	PF1
     45  fb4b		       a5 a1		      LDA	shadow2bb
     46  fb4d		       05 9c		      ORA	shadow1b
     47  fb4f		       85 0f		      STA	PF2
     48  fb51		       a5 a2		      LDA	shadow2cb
     49  fb53		       85 0d		      STA	PF0
     50  fb55		       a5 a3		      LDA	shadow2db
     51  fb57		       05 9e		      ORA	shadow1d
     52  fb59		       85 0e		      STA	PF1
     53  fb5b		       a5 a4		      LDA	shadow2eb
     54  fb5d		       05 9f		      ORA	shadow1e
     55  fb5f		       85 0f		      STA	PF2
     56  fb61		       a9 00		      LDA	#NULL
     57  fb63		       85 0d		      STA	PF0
     58  fb65
     59  fb65		       ca		      DEX
     60  fb66		       d0 a7		      BNE	.loop
     61  fb68
     62  fb68		       50 10		      BVC	dc_w3s1_delayed
     63  fb6a		       4c 9c fa 	      JMP	dc_w2s1
     64  fb6d
     65  fb6d				   .noSprite_1
     66  fb6d					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb6d					      DELAY	11
      1  fb6d				   .CYCLES    SET	11
      2  fb6d
      3  fb6d					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb6d		       ea		      NOP
      5  fb6d				   .CYCLES    SET	.CYCLES - 2
      6  fb6e					      ENDIF
      7  fb6e
      8  fb6e					      IF	[.CYCLES - 2] / 5
      9  fb6e					      REPEAT	.CYCLES / 5
     10  fb6e		       e6 30		      INC	DUMP
     11  fb70					      REPEND
     12  fb70				   .CYCLES    SET	.CYCLES % 5
     13  fb70					      ENDIF
     14  fb70
     15  fb70					      IF	.CYCLES % 3 == 1
     16  fb70		       ea		      NOP
     17  fb70				   .CYCLES    SET	.CYCLES - 2
     18  fb71					      ENDIF
     19  fb71
     20  fb71				  -	      REPEAT	.CYCLES / 3
     21  fb71				  -	      STA	DUMP
     22  fb71					      REPEND
     23  fb71
     24  fb71				   .CYCLES    SET	.CYCLES % 3
     25  fb71
     26  fb71					      REPEAT	.CYCLES / 2
     27  fb71		       ea		      NOP
     28  fb72					      REPEND
     29  fb72
     30  fb72				   .CYCLES    SET	.CYCLES % 2
     31  fb72
     32  fb72				  -	      IF	.CYCLES
     33  fb72				  -	      ERR
     34  fb72					      ENDIF
     35  fb72
     68  fb72				  -	      ELSE
     69  fb72				  -	      DELAY	10
     70  fb72					      ENDIF
     71  fb72		       4c 25 fb 	      JMP	.noSprite_ret
     72  fb75
     73  fb75				   .noSprite_2
     74  fb75					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb75					      DELAY	4
      1  fb75				   .CYCLES    SET	4
      2  fb75
      3  fb75				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb75				  -	      NOP
      5  fb75				  -.CYCLES    SET	.CYCLES - 2
      6  fb75					      ENDIF
      7  fb75
      8  fb75				  -	      IF	[.CYCLES - 2] / 5
      9  fb75				  -	      REPEAT	.CYCLES / 5
     10  fb75				  -	      INC	DUMP
     11  fb75				  -	      REPEND
     12  fb75				  -.CYCLES    SET	.CYCLES % 5
     13  fb75					      ENDIF
     14  fb75
     15  fb75					      IF	.CYCLES % 3 == 1
     16  fb75		       ea		      NOP
     17  fb75				   .CYCLES    SET	.CYCLES - 2
     18  fb76					      ENDIF
     19  fb76
     20  fb76				  -	      REPEAT	.CYCLES / 3
     21  fb76				  -	      STA	DUMP
     22  fb76					      REPEND
     23  fb76
     24  fb76				   .CYCLES    SET	.CYCLES % 3
     25  fb76
     26  fb76					      REPEAT	.CYCLES / 2
     27  fb76		       ea		      NOP
     28  fb77					      REPEND
     29  fb77
     30  fb77				   .CYCLES    SET	.CYCLES % 2
     31  fb77
     32  fb77				  -	      IF	.CYCLES
     33  fb77				  -	      ERR
     34  fb77					      ENDIF
     35  fb77
     76  fb77				  -	      ELSE
     77  fb77				  -	      DELAY	3
     78  fb77					      ENDIF
     79  fb77		       4c 25 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb7a					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb7a							; The third wall and it's first shadow
      2  fb7a
      3  fb7a				   dc_w3s1_delayed
      0  fb7a					      DELAY	2
      1  fb7a				   .CYCLES    SET	2
      2  fb7a
      3  fb7a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb7a				  -	      NOP
      5  fb7a				  -.CYCLES    SET	.CYCLES - 2
      6  fb7a					      ENDIF
      7  fb7a
      8  fb7a				  -	      IF	[.CYCLES - 2] / 5
      9  fb7a				  -	      REPEAT	.CYCLES / 5
     10  fb7a				  -	      INC	DUMP
     11  fb7a				  -	      REPEND
     12  fb7a				  -.CYCLES    SET	.CYCLES % 5
     13  fb7a					      ENDIF
     14  fb7a
     15  fb7a				  -	      IF	.CYCLES % 3 == 1
     16  fb7a				  -	      NOP
     17  fb7a				  -.CYCLES    SET	.CYCLES - 2
     18  fb7a					      ENDIF
     19  fb7a
     20  fb7a				  -	      REPEAT	.CYCLES / 3
     21  fb7a				  -	      STA	DUMP
     22  fb7a					      REPEND
     23  fb7a
     24  fb7a				   .CYCLES    SET	.CYCLES % 3
     25  fb7a
     26  fb7a					      REPEAT	.CYCLES / 2
     27  fb7a		       ea		      NOP
     28  fb7b					      REPEND
     29  fb7b
     30  fb7b				   .CYCLES    SET	.CYCLES % 2
     31  fb7b
     32  fb7b				  -	      IF	.CYCLES
     33  fb7b				  -	      ERR
     34  fb7b					      ENDIF
     35  fb7b
      5  fb7b				   dc_w3s1    SUBROUTINE
      6  fb7b
      7  fb7b		       a2 03		      LDX	#PIXH
      8  fb7d
      9  fb7d				   .loop
     10  fb7d		       a5 b4		      LDA	wallColour
     11  fb7f		       85 02		      STA	WSYNC
     12  fb81		       85 08		      STA	COLUPF
     13  fb83		       a5 8a		      LDA	wall3a
     14  fb85		       85 0e		      STA	PF1
     15  fb87		       98		      TYA
     16  fb88				   .branchPoint_1
     17  fb88		       f0 53		      BEQ	.noSprite_1
     18  fb8a		       88		      DEY
     19  fb8b		       c4 b8		      CPY	spriteHeight
     20  fb8d				   .branchPoint_2
     21  fb8d		       b0 56		      BCS	.noSprite_2
     22  fb8f		       b1 bd		      LDA	(sprite),Y
     23  fb91		       85 1b		      STA	GRP0
     24  fb93				   .noSprite_ret
     25  fb93		       a5 8b		      LDA	wall3b
     26  fb95		       85 0f		      STA	PF2
     27  fb97
     28  fb97		       a5 8c		      LDA	wall3c
     29  fb99		       85 0d		      STA	PF0
     30  fb9b		       a5 8d		      LDA	wall3d
     31  fb9d		       85 0e		      STA	PF1
     32  fb9f		       a5 8e		      LDA	wall3e
     33  fba1		       85 0f		      STA	PF2
     34  fba3		       a9 00		      LDA	#NULL
      0  fba5					      DELAY	10
      1  fba5				   .CYCLES    SET	10
      2  fba5
      3  fba5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fba5				  -	      NOP
      5  fba5				  -.CYCLES    SET	.CYCLES - 2
      6  fba5					      ENDIF
      7  fba5
      8  fba5					      IF	[.CYCLES - 2] / 5
      9  fba5					      REPEAT	.CYCLES / 5
     10  fba5		       e6 30		      INC	DUMP
      9  fba5					      REPEND
     10  fba7		       e6 30		      INC	DUMP
     11  fba9					      REPEND
     12  fba9				   .CYCLES    SET	.CYCLES % 5
     13  fba9					      ENDIF
     14  fba9
     15  fba9				  -	      IF	.CYCLES % 3 == 1
     16  fba9				  -	      NOP
     17  fba9				  -.CYCLES    SET	.CYCLES - 2
     18  fba9					      ENDIF
     19  fba9
     20  fba9				  -	      REPEAT	.CYCLES / 3
     21  fba9				  -	      STA	DUMP
     22  fba9					      REPEND
     23  fba9
     24  fba9				   .CYCLES    SET	.CYCLES % 3
     25  fba9
     26  fba9				  -	      REPEAT	.CYCLES / 2
     27  fba9				  -	      NOP
     28  fba9					      REPEND
     29  fba9
     30  fba9				   .CYCLES    SET	.CYCLES % 2
     31  fba9
     32  fba9				  -	      IF	.CYCLES
     33  fba9				  -	      ERR
     34  fba9					      ENDIF
     35  fba9
     36  fba9		       85 0f		      STA	PF2
     37  fbab		       85 0d		      STA	PF0
     38  fbad
     39  fbad		       85 02		      STA	WSYNC	; Draw the shadow
     40  fbaf		       a5 b5		      LDA	shadowColour
     41  fbb1		       85 08		      STA	COLUPF
     42  fbb3		       a5 96		      LDA	shadow3aa
     43  fbb5		       05 a0		      ORA	shadow2ab
     44  fbb7		       85 0e		      STA	PF1
     45  fbb9		       a5 97		      LDA	shadow3ba
     46  fbbb		       05 a1		      ORA	shadow2bb
     47  fbbd		       85 0f		      STA	PF2
     48  fbbf		       a5 98		      LDA	shadow3ca
     49  fbc1		       05 a2		      ORA	shadow2cb
     50  fbc3		       85 0d		      STA	PF0
     51  fbc5		       a5 99		      LDA	shadow3da
     52  fbc7		       05 a3		      ORA	shadow2db
     53  fbc9		       85 0e		      STA	PF1
     54  fbcb		       a5 9a		      LDA	shadow3ea
     55  fbcd		       05 a4		      ORA	shadow2eb
     56  fbcf		       85 0f		      STA	PF2
     57  fbd1		       a9 00		      LDA	#NULL
     58  fbd3		       85 0d		      STA	PF0
     59  fbd5
     60  fbd5		       ca		      DEX
     61  fbd6		       d0 a5		      BNE	.loop
     62  fbd8
     63  fbd8		       50 10		      BVC	dc_w3s2_delayed
     64  fbda		       4c 0d fb 	      JMP	dc_w2s2
     65  fbdd
     66  fbdd				   .noSprite_1
     67  fbdd					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbdd					      DELAY	11
      1  fbdd				   .CYCLES    SET	11
      2  fbdd
      3  fbdd					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbdd		       ea		      NOP
      5  fbdd				   .CYCLES    SET	.CYCLES - 2
      6  fbde					      ENDIF
      7  fbde
      8  fbde					      IF	[.CYCLES - 2] / 5
      9  fbde					      REPEAT	.CYCLES / 5
     10  fbde		       e6 30		      INC	DUMP
     11  fbe0					      REPEND
     12  fbe0				   .CYCLES    SET	.CYCLES % 5
     13  fbe0					      ENDIF
     14  fbe0
     15  fbe0					      IF	.CYCLES % 3 == 1
     16  fbe0		       ea		      NOP
     17  fbe0				   .CYCLES    SET	.CYCLES - 2
     18  fbe1					      ENDIF
     19  fbe1
     20  fbe1				  -	      REPEAT	.CYCLES / 3
     21  fbe1				  -	      STA	DUMP
     22  fbe1					      REPEND
     23  fbe1
     24  fbe1				   .CYCLES    SET	.CYCLES % 3
     25  fbe1
     26  fbe1					      REPEAT	.CYCLES / 2
     27  fbe1		       ea		      NOP
     28  fbe2					      REPEND
     29  fbe2
     30  fbe2				   .CYCLES    SET	.CYCLES % 2
     31  fbe2
     32  fbe2				  -	      IF	.CYCLES
     33  fbe2				  -	      ERR
     34  fbe2					      ENDIF
     35  fbe2
     69  fbe2				  -	      ELSE
     70  fbe2				  -	      DELAY	10
     71  fbe2					      ENDIF
     72  fbe2		       4c 93 fb 	      JMP	.noSprite_ret
     73  fbe5
     74  fbe5				   .noSprite_2
     75  fbe5					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbe5					      DELAY	3
      1  fbe5				   .CYCLES    SET	3
      2  fbe5
      3  fbe5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbe5				  -	      NOP
      5  fbe5				  -.CYCLES    SET	.CYCLES - 2
      6  fbe5					      ENDIF
      7  fbe5
      8  fbe5				  -	      IF	[.CYCLES - 2] / 5
      9  fbe5				  -	      REPEAT	.CYCLES / 5
     10  fbe5				  -	      INC	DUMP
     11  fbe5				  -	      REPEND
     12  fbe5				  -.CYCLES    SET	.CYCLES % 5
     13  fbe5					      ENDIF
     14  fbe5
     15  fbe5				  -	      IF	.CYCLES % 3 == 1
     16  fbe5				  -	      NOP
     17  fbe5				  -.CYCLES    SET	.CYCLES - 2
     18  fbe5					      ENDIF
     19  fbe5
     20  fbe5					      REPEAT	.CYCLES / 3
     21  fbe5		       85 30		      STA	DUMP
     22  fbe7					      REPEND
     23  fbe7
     24  fbe7				   .CYCLES    SET	.CYCLES % 3
     25  fbe7
     26  fbe7				  -	      REPEAT	.CYCLES / 2
     27  fbe7				  -	      NOP
     28  fbe7					      REPEND
     29  fbe7
     30  fbe7				   .CYCLES    SET	.CYCLES % 2
     31  fbe7
     32  fbe7				  -	      IF	.CYCLES
     33  fbe7				  -	      ERR
     34  fbe7					      ENDIF
     35  fbe7
     77  fbe7				  -	      ELSE
     78  fbe7				  -	      DELAY	4
     79  fbe7					      ENDIF
     80  fbe7		       4c 93 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fbea					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fbea							; The third wall and it's second shadow
      2  fbea
      3  fbea				   dc_w3s2_delayed
      0  fbea					      DELAY	2
      1  fbea				   .CYCLES    SET	2
      2  fbea
      3  fbea				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbea				  -	      NOP
      5  fbea				  -.CYCLES    SET	.CYCLES - 2
      6  fbea					      ENDIF
      7  fbea
      8  fbea				  -	      IF	[.CYCLES - 2] / 5
      9  fbea				  -	      REPEAT	.CYCLES / 5
     10  fbea				  -	      INC	DUMP
     11  fbea				  -	      REPEND
     12  fbea				  -.CYCLES    SET	.CYCLES % 5
     13  fbea					      ENDIF
     14  fbea
     15  fbea				  -	      IF	.CYCLES % 3 == 1
     16  fbea				  -	      NOP
     17  fbea				  -.CYCLES    SET	.CYCLES - 2
     18  fbea					      ENDIF
     19  fbea
     20  fbea				  -	      REPEAT	.CYCLES / 3
     21  fbea				  -	      STA	DUMP
     22  fbea					      REPEND
     23  fbea
     24  fbea				   .CYCLES    SET	.CYCLES % 3
     25  fbea
     26  fbea					      REPEAT	.CYCLES / 2
     27  fbea		       ea		      NOP
     28  fbeb					      REPEND
     29  fbeb
     30  fbeb				   .CYCLES    SET	.CYCLES % 2
     31  fbeb
     32  fbeb				  -	      IF	.CYCLES
     33  fbeb				  -	      ERR
     34  fbeb					      ENDIF
     35  fbeb
      5  fbeb				   dc_w3s2    SUBROUTINE
      6  fbeb
      7  fbeb		       a2 03		      LDX	#PIXH
      8  fbed
      9  fbed				   .loop
     10  fbed		       a5 b4		      LDA	wallColour
     11  fbef		       85 02		      STA	WSYNC
     12  fbf1				   .joinIn
     13  fbf1		       85 08		      STA	COLUPF
     14  fbf3		       a5 8a		      LDA	wall3a
     15  fbf5		       85 0e		      STA	PF1
     16  fbf7		       98		      TYA
     17  fbf8				   .branchPoint_1
     18  fbf8		       f0 53		      BEQ	.noSprite_1
     19  fbfa		       88		      DEY
     20  fbfb		       c4 b8		      CPY	spriteHeight
     21  fbfd				   .branchPoint_2
     22  fbfd		       b0 55		      BCS	.noSprite_2
     23  fbff		       b1 bd		      LDA	(sprite),Y
     24  fc01		       85 1b		      STA	GRP0
     25  fc03				   .noSprite_ret
     26  fc03		       a5 8b		      LDA	wall3b
     27  fc05		       85 0f		      STA	PF2
     28  fc07
     29  fc07		       a5 8c		      LDA	wall3c
     30  fc09		       85 0d		      STA	PF0
     31  fc0b		       a5 8d		      LDA	wall3d
     32  fc0d		       85 0e		      STA	PF1
     33  fc0f		       a5 8e		      LDA	wall3e
     34  fc11		       85 0f		      STA	PF2
     35  fc13		       a9 00		      LDA	#NULL
      0  fc15					      DELAY	10
      1  fc15				   .CYCLES    SET	10
      2  fc15
      3  fc15				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc15				  -	      NOP
      5  fc15				  -.CYCLES    SET	.CYCLES - 2
      6  fc15					      ENDIF
      7  fc15
      8  fc15					      IF	[.CYCLES - 2] / 5
      9  fc15					      REPEAT	.CYCLES / 5
     10  fc15		       e6 30		      INC	DUMP
      9  fc15					      REPEND
     10  fc17		       e6 30		      INC	DUMP
     11  fc19					      REPEND
     12  fc19				   .CYCLES    SET	.CYCLES % 5
     13  fc19					      ENDIF
     14  fc19
     15  fc19				  -	      IF	.CYCLES % 3 == 1
     16  fc19				  -	      NOP
     17  fc19				  -.CYCLES    SET	.CYCLES - 2
     18  fc19					      ENDIF
     19  fc19
     20  fc19				  -	      REPEAT	.CYCLES / 3
     21  fc19				  -	      STA	DUMP
     22  fc19					      REPEND
     23  fc19
     24  fc19				   .CYCLES    SET	.CYCLES % 3
     25  fc19
     26  fc19				  -	      REPEAT	.CYCLES / 2
     27  fc19				  -	      NOP
     28  fc19					      REPEND
     29  fc19
     30  fc19				   .CYCLES    SET	.CYCLES % 2
     31  fc19
     32  fc19				  -	      IF	.CYCLES
     33  fc19				  -	      ERR
     34  fc19					      ENDIF
     35  fc19
     37  fc19		       85 0f		      STA	PF2
     38  fc1b		       85 0d		      STA	PF0
     39  fc1d
     40  fc1d		       85 02		      STA	WSYNC	; Draw the shadow
     41  fc1f		       a5 b5		      LDA	shadowColour
     42  fc21		       85 08		      STA	COLUPF
     43  fc23		       a5 a5		      LDA	shadow3ab
     44  fc25		       05 a0		      ORA	shadow2ab
     45  fc27		       85 0e		      STA	PF1
     46  fc29		       a5 a6		      LDA	shadow3bb
     47  fc2b		       05 a1		      ORA	shadow2bb
     48  fc2d		       85 0f		      STA	PF2
     49  fc2f		       a5 a7		      LDA	shadow3cb
     50  fc31		       05 a2		      ORA	shadow2cb
     51  fc33		       85 0d		      STA	PF0
     52  fc35		       a5 a8		      LDA	shadow3db
     53  fc37		       05 a3		      ORA	shadow2db
     54  fc39		       85 0e		      STA	PF1
     55  fc3b		       a5 a9		      LDA	shadow3eb
     56  fc3d		       05 a4		      ORA	shadow2eb
     57  fc3f		       85 0f		      STA	PF2
     58  fc41		       a9 00		      LDA	#NULL
     59  fc43		       85 0d		      STA	PF0
     60  fc45
     61  fc45		       ca		      DEX
     62  fc46		       d0 a5		      BNE	.loop
     63  fc48
     64  fc48		       50 0f		      BVC	dc_w4s0_delayed
     65  fc4a		       4c 7b fb 	      JMP	dc_w3s1
     66  fc4d
     67  fc4d				   .noSprite_1
     68  fc4d				  -	      IF	>.branchPoint_1 == >.noSprite_1
     69  fc4d				  -	      DELAY	11
     70  fc4d					      ELSE
      0  fc4d					      DELAY	10
      1  fc4d				   .CYCLES    SET	10
      2  fc4d
      3  fc4d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc4d				  -	      NOP
      5  fc4d				  -.CYCLES    SET	.CYCLES - 2
      6  fc4d					      ENDIF
      7  fc4d
      8  fc4d					      IF	[.CYCLES - 2] / 5
      9  fc4d					      REPEAT	.CYCLES / 5
     10  fc4d		       e6 30		      INC	DUMP
      9  fc4d					      REPEND
     10  fc4f		       e6 30		      INC	DUMP
     11  fc51					      REPEND
     12  fc51				   .CYCLES    SET	.CYCLES % 5
     13  fc51					      ENDIF
     14  fc51
     15  fc51				  -	      IF	.CYCLES % 3 == 1
     16  fc51				  -	      NOP
     17  fc51				  -.CYCLES    SET	.CYCLES - 2
     18  fc51					      ENDIF
     19  fc51
     20  fc51				  -	      REPEAT	.CYCLES / 3
     21  fc51				  -	      STA	DUMP
     22  fc51					      REPEND
     23  fc51
     24  fc51				   .CYCLES    SET	.CYCLES % 3
     25  fc51
     26  fc51				  -	      REPEAT	.CYCLES / 2
     27  fc51				  -	      NOP
     28  fc51					      REPEND
     29  fc51
     30  fc51				   .CYCLES    SET	.CYCLES % 2
     31  fc51
     32  fc51				  -	      IF	.CYCLES
     33  fc51				  -	      ERR
     34  fc51					      ENDIF
     35  fc51
     72  fc51					      ENDIF
     73  fc51		       4c 03 fc 	      JMP	.noSprite_ret
     74  fc54
     75  fc54				   .noSprite_2
     76  fc54				  -	      IF	>.branchPoint_2 == >.noSprite_2
     77  fc54				  -	      DELAY	4
     78  fc54					      ELSE
      0  fc54					      DELAY	3
      1  fc54				   .CYCLES    SET	3
      2  fc54
      3  fc54				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc54				  -	      NOP
      5  fc54				  -.CYCLES    SET	.CYCLES - 2
      6  fc54					      ENDIF
      7  fc54
      8  fc54				  -	      IF	[.CYCLES - 2] / 5
      9  fc54				  -	      REPEAT	.CYCLES / 5
     10  fc54				  -	      INC	DUMP
     11  fc54				  -	      REPEND
     12  fc54				  -.CYCLES    SET	.CYCLES % 5
     13  fc54					      ENDIF
     14  fc54
     15  fc54				  -	      IF	.CYCLES % 3 == 1
     16  fc54				  -	      NOP
     17  fc54				  -.CYCLES    SET	.CYCLES - 2
     18  fc54					      ENDIF
     19  fc54
     20  fc54					      REPEAT	.CYCLES / 3
     21  fc54		       85 30		      STA	DUMP
     22  fc56					      REPEND
     23  fc56
     24  fc56				   .CYCLES    SET	.CYCLES % 3
     25  fc56
     26  fc56				  -	      REPEAT	.CYCLES / 2
     27  fc56				  -	      NOP
     28  fc56					      REPEND
     29  fc56
     30  fc56				   .CYCLES    SET	.CYCLES % 2
     31  fc56
     32  fc56				  -	      IF	.CYCLES
     33  fc56				  -	      ERR
     34  fc56					      ENDIF
     35  fc56
     80  fc56					      ENDIF
     81  fc56		       4c 03 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc59					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc59							; The fourth wall
      2  fc59
      3  fc59				   dc_w4s0_delayed
      4  fc59		       4c 60 fc 	      JMP	dc_w4s0
      5  fc5c
      6  fc5c				   dc_w4s0_switch
      7  fc5c		       a9 7f		      LDA	#$7F
      8  fc5e		       69 01		      ADC	#$01
      9  fc60
     10  fc60				   dc_w4s0    SUBROUTINE
     11  fc60
     12  fc60		       a2 03		      LDX	#PIXH
     13  fc62
     14  fc62				   .loop
     15  fc62		       a5 b4		      LDA	wallColour
     16  fc64		       85 02		      STA	WSYNC
     17  fc66				   .joinIn
     18  fc66		       85 08		      STA	COLUPF
     19  fc68		       a5 8f		      LDA	wall4a
     20  fc6a		       85 0e		      STA	PF1
     21  fc6c		       98		      TYA
     22  fc6d				   .branchPoint_1
     23  fc6d		       f0 57		      BEQ	.noSprite_1
     24  fc6f		       88		      DEY
     25  fc70		       c4 b8		      CPY	spriteHeight
     26  fc72				   .branchPoint_2
     27  fc72		       b0 5a		      BCS	.noSprite_2
     28  fc74		       b1 bd		      LDA	(sprite),Y
     29  fc76		       85 1b		      STA	GRP0
     30  fc78				   .noSprite_ret
     31  fc78		       a5 90		      LDA	wall4b
     32  fc7a		       85 0f		      STA	PF2
     33  fc7c
     34  fc7c		       a9 ff		      LDA	#FULLWALL
     35  fc7e		       45 a7		      EOR	shadow3cb
     36  fc80		       85 0d		      STA	PF0
     37  fc82		       a9 ff		      LDA	#FULLWALL
     38  fc84		       45 a8		      EOR	shadow3db
     39  fc86		       85 0e		      STA	PF1
     40  fc88		       a9 ff		      LDA	#FULLWALL
     41  fc8a		       45 a9		      EOR	shadow3eb
     42  fc8c		       85 0f		      STA	PF2
     43  fc8e		       a9 00		      LDA	#NULL
      0  fc90					      DELAY	4
      1  fc90				   .CYCLES    SET	4
      2  fc90
      3  fc90				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc90				  -	      NOP
      5  fc90				  -.CYCLES    SET	.CYCLES - 2
      6  fc90					      ENDIF
      7  fc90
      8  fc90				  -	      IF	[.CYCLES - 2] / 5
      9  fc90				  -	      REPEAT	.CYCLES / 5
     10  fc90				  -	      INC	DUMP
     11  fc90				  -	      REPEND
     12  fc90				  -.CYCLES    SET	.CYCLES % 5
     13  fc90					      ENDIF
     14  fc90
     15  fc90					      IF	.CYCLES % 3 == 1
     16  fc90		       ea		      NOP
     17  fc90				   .CYCLES    SET	.CYCLES - 2
     18  fc91					      ENDIF
     19  fc91
     20  fc91				  -	      REPEAT	.CYCLES / 3
     21  fc91				  -	      STA	DUMP
     22  fc91					      REPEND
     23  fc91
     24  fc91				   .CYCLES    SET	.CYCLES % 3
     25  fc91
     26  fc91					      REPEAT	.CYCLES / 2
     27  fc91		       ea		      NOP
     28  fc92					      REPEND
     29  fc92
     30  fc92				   .CYCLES    SET	.CYCLES % 2
     31  fc92
     32  fc92				  -	      IF	.CYCLES
     33  fc92				  -	      ERR
     34  fc92					      ENDIF
     35  fc92
     45  fc92		       85 0f		      STA	PF2
     46  fc94		       85 0d		      STA	PF0
     47  fc96
     48  fc96		       85 02		      STA	WSYNC	; Draw the shadow
     49  fc98		       a5 b5		      LDA	shadowColour
     50  fc9a		       85 08		      STA	COLUPF
     51  fc9c		       a5 a5		      LDA	shadow3ab
     52  fc9e		       05 a0		      ORA	shadow2ab
     53  fca0		       85 0e		      STA	PF1
     54  fca2		       a5 a6		      LDA	shadow3bb
     55  fca4		       05 a1		      ORA	shadow2bb
     56  fca6		       85 0f		      STA	PF2
     57  fca8		       a5 a7		      LDA	shadow3cb
     58  fcaa		       05 a2		      ORA	shadow2cb
     59  fcac		       85 0d		      STA	PF0
     60  fcae		       a5 a8		      LDA	shadow3db
     61  fcb0		       05 a3		      ORA	shadow2db
     62  fcb2		       85 0e		      STA	PF1
     63  fcb4		       a5 a9		      LDA	shadow3eb
     64  fcb6		       05 a4		      ORA	shadow2eb
     65  fcb8		       85 0f		      STA	PF2
     66  fcba		       a9 00		      LDA	#NULL
     67  fcbc		       85 0d		      STA	PF0
     68  fcbe
     69  fcbe		       ca		      DEX
     70  fcbf		       d0 a1		      BNE	.loop
     71  fcc1
     72  fcc1		       50 99		      BVC	dc_w4s0_switch
     73  fcc3		       4c eb fb 	      JMP	dc_w3s2
     74  fcc6
     75  fcc6				   .noSprite_1
     76  fcc6					      IF	>.branchPoint_1 == >.noSprite_1
      0  fcc6					      DELAY	11
      1  fcc6				   .CYCLES    SET	11
      2  fcc6
      3  fcc6					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcc6		       ea		      NOP
      5  fcc6				   .CYCLES    SET	.CYCLES - 2
      6  fcc7					      ENDIF
      7  fcc7
      8  fcc7					      IF	[.CYCLES - 2] / 5
      9  fcc7					      REPEAT	.CYCLES / 5
     10  fcc7		       e6 30		      INC	DUMP
     11  fcc9					      REPEND
     12  fcc9				   .CYCLES    SET	.CYCLES % 5
     13  fcc9					      ENDIF
     14  fcc9
     15  fcc9					      IF	.CYCLES % 3 == 1
     16  fcc9		       ea		      NOP
     17  fcc9				   .CYCLES    SET	.CYCLES - 2
     18  fcca					      ENDIF
     19  fcca
     20  fcca				  -	      REPEAT	.CYCLES / 3
     21  fcca				  -	      STA	DUMP
     22  fcca					      REPEND
     23  fcca
     24  fcca				   .CYCLES    SET	.CYCLES % 3
     25  fcca
     26  fcca					      REPEAT	.CYCLES / 2
     27  fcca		       ea		      NOP
     28  fccb					      REPEND
     29  fccb
     30  fccb				   .CYCLES    SET	.CYCLES % 2
     31  fccb
     32  fccb				  -	      IF	.CYCLES
     33  fccb				  -	      ERR
     34  fccb					      ENDIF
     35  fccb
     78  fccb				  -	      ELSE
     79  fccb				  -	      DELAY	10
     80  fccb					      ENDIF
     81  fccb		       4c 78 fc 	      JMP	.noSprite_ret
     82  fcce
     83  fcce				   .noSprite_2
     84  fcce					      IF	>.branchPoint_2 == >.noSprite_2
      0  fcce					      DELAY	4
      1  fcce				   .CYCLES    SET	4
      2  fcce
      3  fcce				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcce				  -	      NOP
      5  fcce				  -.CYCLES    SET	.CYCLES - 2
      6  fcce					      ENDIF
      7  fcce
      8  fcce				  -	      IF	[.CYCLES - 2] / 5
      9  fcce				  -	      REPEAT	.CYCLES / 5
     10  fcce				  -	      INC	DUMP
     11  fcce				  -	      REPEND
     12  fcce				  -.CYCLES    SET	.CYCLES % 5
     13  fcce					      ENDIF
     14  fcce
     15  fcce					      IF	.CYCLES % 3 == 1
     16  fcce		       ea		      NOP
     17  fcce				   .CYCLES    SET	.CYCLES - 2
     18  fccf					      ENDIF
     19  fccf
     20  fccf				  -	      REPEAT	.CYCLES / 3
     21  fccf				  -	      STA	DUMP
     22  fccf					      REPEND
     23  fccf
     24  fccf				   .CYCLES    SET	.CYCLES % 3
     25  fccf
     26  fccf					      REPEAT	.CYCLES / 2
     27  fccf		       ea		      NOP
     28  fcd0					      REPEND
     29  fcd0
     30  fcd0				   .CYCLES    SET	.CYCLES % 2
     31  fcd0
     32  fcd0				  -	      IF	.CYCLES
     33  fcd0				  -	      ERR
     34  fcd0					      ENDIF
     35  fcd0
     86  fcd0				  -	      ELSE
     87  fcd0				  -	      DELAY	3
     88  fcd0					      ENDIF
     89  fcd0		       4c 78 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     25  fcd3
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fcd3					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fcd3							; The draw code for the 1st wall and  it's second shadow
      2  fcd3
      3  fcd3				   dc_w1s2    SUBROUTINE
      4  fcd3
      5  fcd3		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fcd5
      7  fcd5				   .loop
      8  fcd5		       a5 b4		      LDA	wallColour
      9  fcd7		       85 02		      STA	WSYNC
     10  fcd9		       85 08		      STA	COLUPF
     11  fcdb		       a5 80		      LDA	wall1
     12  fcdd		       85 0e		      STA	PF1
     13  fcdf		       98		      TYA
     14  fce0				   .branchPoint_1
     15  fce0		       f0 53		      BEQ	.noSprite_1
     16  fce2		       88		      DEY
     17  fce3		       c4 b8		      CPY	spriteHeight
     18  fce5				   .branchPoint_2
     19  fce5		       b0 55		      BCS	.noSprite_2
     20  fce7		       b1 bd		      LDA	(sprite),Y
     21  fce9		       85 1b		      STA	GRP0
     22  fceb				   .noSprite_ret
     23  fceb		       a5 80		      LDA	wall1
     24  fced		       85 0f		      STA	PF2
      0  fcef					      DELAY	6
      1  fcef				   .CYCLES    SET	6
      2  fcef
      3  fcef				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcef				  -	      NOP
      5  fcef				  -.CYCLES    SET	.CYCLES - 2
      6  fcef					      ENDIF
      7  fcef
      8  fcef				  -	      IF	[.CYCLES - 2] / 5
      9  fcef				  -	      REPEAT	.CYCLES / 5
     10  fcef				  -	      INC	DUMP
     11  fcef				  -	      REPEND
     12  fcef				  -.CYCLES    SET	.CYCLES % 5
     13  fcef					      ENDIF
     14  fcef
     15  fcef				  -	      IF	.CYCLES % 3 == 1
     16  fcef				  -	      NOP
     17  fcef				  -.CYCLES    SET	.CYCLES - 2
     18  fcef					      ENDIF
     19  fcef
     20  fcef					      REPEAT	.CYCLES / 3
     21  fcef		       85 30		      STA	DUMP
     20  fcef					      REPEND
     21  fcf1		       85 30		      STA	DUMP
     22  fcf3					      REPEND
     23  fcf3
     24  fcf3				   .CYCLES    SET	.CYCLES % 3
     25  fcf3
     26  fcf3				  -	      REPEAT	.CYCLES / 2
     27  fcf3				  -	      NOP
     28  fcf3					      REPEND
     29  fcf3
     30  fcf3				   .CYCLES    SET	.CYCLES % 2
     31  fcf3
     32  fcf3				  -	      IF	.CYCLES
     33  fcf3				  -	      ERR
     34  fcf3					      ENDIF
     35  fcf3
     26  fcf3		       85 0d		      STA	PF0
      0  fcf5					      DELAY	19
      1  fcf5				   .CYCLES    SET	19
      2  fcf5
      3  fcf5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcf5				  -	      NOP
      5  fcf5				  -.CYCLES    SET	.CYCLES - 2
      6  fcf5					      ENDIF
      7  fcf5
      8  fcf5					      IF	[.CYCLES - 2] / 5
      9  fcf5					      REPEAT	.CYCLES / 5
     10  fcf5		       e6 30		      INC	DUMP
      9  fcf5					      REPEND
     10  fcf7		       e6 30		      INC	DUMP
      9  fcf7					      REPEND
     10  fcf9		       e6 30		      INC	DUMP
     11  fcfb					      REPEND
     12  fcfb				   .CYCLES    SET	.CYCLES % 5
     13  fcfb					      ENDIF
     14  fcfb
     15  fcfb					      IF	.CYCLES % 3 == 1
     16  fcfb		       ea		      NOP
     17  fcfb				   .CYCLES    SET	.CYCLES - 2
     18  fcfc					      ENDIF
     19  fcfc
     20  fcfc				  -	      REPEAT	.CYCLES / 3
     21  fcfc				  -	      STA	DUMP
     22  fcfc					      REPEND
     23  fcfc
     24  fcfc				   .CYCLES    SET	.CYCLES % 3
     25  fcfc
     26  fcfc					      REPEAT	.CYCLES / 2
     27  fcfc		       ea		      NOP
     28  fcfd					      REPEND
     29  fcfd
     30  fcfd				   .CYCLES    SET	.CYCLES % 2
     31  fcfd
     32  fcfd				  -	      IF	.CYCLES
     33  fcfd				  -	      ERR
     34  fcfd					      ENDIF
     35  fcfd
     28  fcfd		       a9 00		      LDA	#NULL
     29  fcff		       85 0f		      STA	PF2
     30  fd01		       85 0d		      STA	PF0
     31  fd03
     32  fd03		       85 02		      STA	WSYNC
     33  fd05		       a5 b5		      LDA	shadowColour
     34  fd07		       85 08		      STA	COLUPF
     35  fd09		       a5 9b		      LDA	shadow1a
     36  fd0b		       3d 00 f0 	      AND	and_1a,X
     37  fd0e		       85 0e		      STA	PF1
     38  fd10		       a5 9c		      LDA	shadow1b
     39  fd12		       3d 1e f0 	      AND	and_1b,X
     40  fd15		       85 0f		      STA	PF2
      0  fd17					      DELAY	9
      1  fd17				   .CYCLES    SET	9
      2  fd17
      3  fd17				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd17				  -	      NOP
      5  fd17				  -.CYCLES    SET	.CYCLES - 2
      6  fd17					      ENDIF
      7  fd17
      8  fd17					      IF	[.CYCLES - 2] / 5
      9  fd17					      REPEAT	.CYCLES / 5
     10  fd17		       e6 30		      INC	DUMP
     11  fd19					      REPEND
     12  fd19				   .CYCLES    SET	.CYCLES % 5
     13  fd19					      ENDIF
     14  fd19
     15  fd19					      IF	.CYCLES % 3 == 1
     16  fd19		       ea		      NOP
     17  fd19				   .CYCLES    SET	.CYCLES - 2
     18  fd1a					      ENDIF
     19  fd1a
     20  fd1a				  -	      REPEAT	.CYCLES / 3
     21  fd1a				  -	      STA	DUMP
     22  fd1a					      REPEND
     23  fd1a
     24  fd1a				   .CYCLES    SET	.CYCLES % 3
     25  fd1a
     26  fd1a					      REPEAT	.CYCLES / 2
     27  fd1a		       ea		      NOP
     28  fd1b					      REPEND
     29  fd1b
     30  fd1b				   .CYCLES    SET	.CYCLES % 2
     31  fd1b
     32  fd1b				  -	      IF	.CYCLES
     33  fd1b				  -	      ERR
     34  fd1b					      ENDIF
     35  fd1b
     42  fd1b		       a5 9e		      LDA	shadow1d
     43  fd1d		       3d 3c f0 	      AND	and_1c,X
     44  fd20		       85 0e		      STA	PF1
     45  fd22		       a5 9f		      LDA	shadow1e
     46  fd24		       3d 5a f0 	      AND	and_1d,X
     47  fd27		       85 0f		      STA	PF2
     48  fd29
     49  fd29		       a9 00		      LDA	#NULL
     50  fd2b		       85 1b		      STA	GRP0
     51  fd2d
     52  fd2d		       ca		      DEX
     53  fd2e		       e0 06		      CPX	#LOWRWALL_S
     54  fd30		       d0 a3		      BNE	.loop
     55  fd32
     56  fd32		       4c 41 fd 	      JMP	dc_wallsEnd
     57  fd35
     58  fd35				   .noSprite_1
     59  fd35				  -	      IF	>.branchPoint_1 == >.noSprite_1
     60  fd35				  -	      DELAY	11
     61  fd35					      ELSE
      0  fd35					      DELAY	10
      1  fd35				   .CYCLES    SET	10
      2  fd35
      3  fd35				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd35				  -	      NOP
      5  fd35				  -.CYCLES    SET	.CYCLES - 2
      6  fd35					      ENDIF
      7  fd35
      8  fd35					      IF	[.CYCLES - 2] / 5
      9  fd35					      REPEAT	.CYCLES / 5
     10  fd35		       e6 30		      INC	DUMP
      9  fd35					      REPEND
     10  fd37		       e6 30		      INC	DUMP
     11  fd39					      REPEND
     12  fd39				   .CYCLES    SET	.CYCLES % 5
     13  fd39					      ENDIF
     14  fd39
     15  fd39				  -	      IF	.CYCLES % 3 == 1
     16  fd39				  -	      NOP
     17  fd39				  -.CYCLES    SET	.CYCLES - 2
     18  fd39					      ENDIF
     19  fd39
     20  fd39				  -	      REPEAT	.CYCLES / 3
     21  fd39				  -	      STA	DUMP
     22  fd39					      REPEND
     23  fd39
     24  fd39				   .CYCLES    SET	.CYCLES % 3
     25  fd39
     26  fd39				  -	      REPEAT	.CYCLES / 2
     27  fd39				  -	      NOP
     28  fd39					      REPEND
     29  fd39
     30  fd39				   .CYCLES    SET	.CYCLES % 2
     31  fd39
     32  fd39				  -	      IF	.CYCLES
     33  fd39				  -	      ERR
     34  fd39					      ENDIF
     35  fd39
     63  fd39					      ENDIF
     64  fd39		       4c eb fc 	      JMP	.noSprite_ret
     65  fd3c
     66  fd3c				   .noSprite_2
     67  fd3c				  -	      IF	>.branchPoint_2 == >.noSprite_2
     68  fd3c				  -	      DELAY	4
     69  fd3c					      ELSE
      0  fd3c					      DELAY	3
      1  fd3c				   .CYCLES    SET	3
      2  fd3c
      3  fd3c				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd3c				  -	      NOP
      5  fd3c				  -.CYCLES    SET	.CYCLES - 2
      6  fd3c					      ENDIF
      7  fd3c
      8  fd3c				  -	      IF	[.CYCLES - 2] / 5
      9  fd3c				  -	      REPEAT	.CYCLES / 5
     10  fd3c				  -	      INC	DUMP
     11  fd3c				  -	      REPEND
     12  fd3c				  -.CYCLES    SET	.CYCLES % 5
     13  fd3c					      ENDIF
     14  fd3c
     15  fd3c				  -	      IF	.CYCLES % 3 == 1
     16  fd3c				  -	      NOP
     17  fd3c				  -.CYCLES    SET	.CYCLES - 2
     18  fd3c					      ENDIF
     19  fd3c
     20  fd3c					      REPEAT	.CYCLES / 3
     21  fd3c		       85 30		      STA	DUMP
     22  fd3e					      REPEND
     23  fd3e
     24  fd3e				   .CYCLES    SET	.CYCLES % 3
     25  fd3e
     26  fd3e				  -	      REPEAT	.CYCLES / 2
     27  fd3e				  -	      NOP
     28  fd3e					      REPEND
     29  fd3e
     30  fd3e				   .CYCLES    SET	.CYCLES % 2
     31  fd3e
     32  fd3e				  -	      IF	.CYCLES
     33  fd3e				  -	      ERR
     34  fd3e					      ENDIF
     35  fd3e
     71  fd3e					      ENDIF
     72  fd3e		       4c eb fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     27  fd41
     28  fd41				   dc_wallsEnd
     29  fd41
     30  fd41		       b8		      CLV
     31  fd42
     32  fd42		       a9 00		      LDA	#NULL
     33  fd44		       85 0e		      STA	PF1
     34  fd46		       85 0f		      STA	PF2
     35  fd48
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd48					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd48							; Draws the compass to the screen
      2  fd48
      3  fd48				   mmDraw
      4  fd48
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd48					      INCLUDE	"drawCode/mmRender.asm"
      1  fd48							; Render the minimap
      2  fd48
      3  fd48				   mmRender   SUBROUTINE
      4  fd48		       a9 00		      LDA	#NULL
      5  fd4a							; Set the colour of the player
      6  fd4a		       a9 cc		      LDA	#PLYRCOLU
      7  fd4c		       85 08		      STA	COLUPF
      8  fd4e							; Set the colour of the map
      9  fd4e		       a9 0e		      LDA	#MAPCOLU
     10  fd50		       85 06		      STA	COLUP0
     11  fd52		       85 07		      STA	COLUP1
     12  fd54							; Get the player's position and translate it into horizontal movement
     13  fd54		       a9 08		      LDA	#%00001000
     14  fd56		       18		      CLC
     15  fd57		       38		      SEC
     16  fd58		       e5 aa		      SBC	playerPos
     17  fd5a		       0a		      ASL
     18  fd5b		       0a		      ASL
     19  fd5c		       0a		      ASL
     20  fd5d		       0a		      ASL
     21  fd5e		       85 24		      STA	HMBL
     22  fd60
     23  fd60							; Set the map's position to the right values
     24  fd60		       a9 00		      LDA	#HADJ_A
     25  fd62		       85 20		      STA	HMP0
     26  fd64		       a9 10		      LDA	#HADJ_B
     27  fd66		       85 21		      STA	HMP1
     28  fd68
     29  fd68		       85 02		      STA	WSYNC
     30  fd6a		       a2 07		      LDX	#HWAIT
     31  fd6c
     32  fd6c				   .wait1
     33  fd6c		       ca		      DEX
     34  fd6d		       d0 fd		      BNE	.wait1
      0  fd6f					      DELAY	HDELAY1
      1  fd6f				   .CYCLES    SET	HDELAY1
      2  fd6f
      3  fd6f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd6f				  -	      NOP
      5  fd6f				  -.CYCLES    SET	.CYCLES - 2
      6  fd6f					      ENDIF
      7  fd6f
      8  fd6f				  -	      IF	[.CYCLES - 2] / 5
      9  fd6f				  -	      REPEAT	.CYCLES / 5
     10  fd6f				  -	      INC	DUMP
     11  fd6f				  -	      REPEND
     12  fd6f				  -.CYCLES    SET	.CYCLES % 5
     13  fd6f					      ENDIF
     14  fd6f
     15  fd6f				  -	      IF	.CYCLES % 3 == 1
     16  fd6f				  -	      NOP
     17  fd6f				  -.CYCLES    SET	.CYCLES - 2
     18  fd6f					      ENDIF
     19  fd6f
     20  fd6f					      REPEAT	.CYCLES / 3
     21  fd6f		       85 30		      STA	DUMP
     22  fd71					      REPEND
     23  fd71
     24  fd71				   .CYCLES    SET	.CYCLES % 3
     25  fd71
     26  fd71					      REPEAT	.CYCLES / 2
     27  fd71		       ea		      NOP
     28  fd72					      REPEND
     29  fd72
     30  fd72				   .CYCLES    SET	.CYCLES % 2
     31  fd72
     32  fd72				  -	      IF	.CYCLES
     33  fd72				  -	      ERR
     34  fd72					      ENDIF
     35  fd72
     36  fd72		       85 10		      STA	RESP0
     37  fd74		       85 11		      STA	RESP1
     38  fd76
     39  fd76		       a5 aa		      LDA	playerPos
     40  fd78
     41  fd78		       85 02		      STA	WSYNC
     42  fd7a		       a2 07		      LDX	#HWAIT
     43  fd7c
     44  fd7c				   .wait2
     45  fd7c		       ca		      DEX
     46  fd7d		       d0 fd		      BNE	.wait2
      0  fd7f					      DELAY	HDELAY2
      1  fd7f				   .CYCLES    SET	HDELAY2
      2  fd7f
      3  fd7f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd7f				  -	      NOP
      5  fd7f				  -.CYCLES    SET	.CYCLES - 2
      6  fd7f					      ENDIF
      7  fd7f
      8  fd7f					      IF	[.CYCLES - 2] / 5
      9  fd7f					      REPEAT	.CYCLES / 5
     10  fd7f		       e6 30		      INC	DUMP
     11  fd81					      REPEND
     12  fd81				   .CYCLES    SET	.CYCLES % 5
     13  fd81					      ENDIF
     14  fd81
     15  fd81				  -	      IF	.CYCLES % 3 == 1
     16  fd81				  -	      NOP
     17  fd81				  -.CYCLES    SET	.CYCLES - 2
     18  fd81					      ENDIF
     19  fd81
     20  fd81					      REPEAT	.CYCLES / 3
     21  fd81		       85 30		      STA	DUMP
     22  fd83					      REPEND
     23  fd83
     24  fd83				   .CYCLES    SET	.CYCLES % 3
     25  fd83
     26  fd83				  -	      REPEAT	.CYCLES / 2
     27  fd83				  -	      NOP
     28  fd83					      REPEND
     29  fd83
     30  fd83				   .CYCLES    SET	.CYCLES % 2
     31  fd83
     32  fd83				  -	      IF	.CYCLES
     33  fd83				  -	      ERR
     34  fd83					      ENDIF
     35  fd83
     48  fd83		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      6  fd85
      7  fd85					      SUBROUTINE		; The preceeding code declares it's own subroutine
      8  fd85
      9  fd85		       a0 00		      LDY	#NULL
     10  fd87		       84 1b		      STY	GRP0
     11  fd89		       84 1c		      STY	GRP1
     12  fd8b		       84 02		      STY	WSYNC
     13  fd8d		       84 2a		      STY	HMOVE
     14  fd8f
     15  fd8f		       a6 aa		      LDX	playerPos
     16  fd91
     17  fd91				   .loop
     18  fd91		       85 02		      STA	WSYNC
     19  fd93
     20  fd93		       b1 b9		      LDA	(miniMapPtr),Y
     21  fd95		       85 1b		      STA	GRP0
     22  fd97		       c8		      INY
     23  fd98		       b1 b9		      LDA	(miniMapPtr),Y
     24  fd9a		       85 1c		      STA	GRP1
     25  fd9c		       c8		      INY
     26  fd9d
     27  fd9d		       8a		      TXA
     28  fd9e		       38		      SEC
     29  fd9f		       e5 ab		      SBC	mapWidth
     30  fda1		       aa		      TAX
     31  fda2		       29 f0		      AND	#$F0
     32  fda4
     33  fda4		       d0 0a		      BNE	.noDraw
     34  fda6
     35  fda6		       a9 02		      LDA	#2
     36  fda8		       85 1f		      STA	ENABL
     37  fdaa		       85 b6		      STA	drawingPlyr
     38  fdac		       a9 01		      LDA	#1
     39  fdae		       85 27		      STA	VDELBL
     40  fdb0
     41  fdb0				   .noDraw
     42  fdb0
     43  fdb0		       a5 b6		      LDA	drawingPlyr
     44  fdb2		       85 1f		      STA	ENABL
     45  fdb4		       a9 00		      LDA	#NULL
     46  fdb6		       85 b6		      STA	drawingPlyr
     47  fdb8		       c0 20		      CPY	#MMSIZE
     48  fdba		       d0 d5		      BNE	.loop
     49  fdbc
     50  fdbc		       a9 00		      LDA	#NULL
     51  fdbe		       85 1f		      STA	ENABL
     52  fdc0
     53  fdc0		       85 02		      STA	WSYNC
     54  fdc2
     55  fdc2		       a9 00		      LDA	#NULL
     56  fdc4		       85 1b		      STA	GRP0
     57  fdc6		       85 1c		      STA	GRP1
     58  fdc8		       85 06		      STA	COLUP0
     59  fdca		       85 07		      STA	COLUP1
------- FILE dispkern.asm
     37  fdcc
     38  fdcc		       85 09		      STA	COLUBK
------- FILE main.asm
     71  fdce
     72  fdce							; Start VBLANK
     73  fdce
     74  fdce		       a9 c2		      LDA	#VBLANK_SET
     75  fdd0		       85 01		      STA	VBLANK
     76  fdd2
     77  fdd2							; Process input
     78  fdd2
------- FILE input.asm LEVEL 2 PASS 4
      0  fdd2					      INCLUDE	"input.asm"
      1  fdd2							; VePseu's controller input
      2  fdd2
      3  fdd2		       85 02		      STA	WSYNC
      4  fdd4
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fdd4					      INCLUDE	"ctrlCode/cin1.asm"
      1  fdd4					      SUBROUTINE
      2  fdd4
      3  fdd4		       ad 80 02 	      LDA	SWCHA
      4  fdd7		       29 10		      AND	#FFORD
      5  fdd9		       d0 22		      BNE	.noPress
      6  fddb
      7  fddb		       a5 aa		      LDA	playerPos
      8  fddd		       38		      SEC
      9  fdde		       e5 af		      SBC	yLoss
     10  fde0		       18		      CLC
     11  fde1		       65 ae		      ADC	yGain
     12  fde3		       a8		      TAY
     13  fde4
     14  fde4		       b1 bb		      LDA	(mapPtr),Y
     15  fde6		       d0 19		      BNE	.end
     16  fde8
     17  fde8		       a5 b0		      LDA	fordPressed
     18  fdea		       d0 09		      BNE	.wait
     19  fdec
     20  fdec		       84 aa		      STY	playerPos
     21  fdee		       a9 0f		      LDA	#CWAITCNT
     22  fdf0		       85 b0		      STA	fordPressed
     23  fdf2		       4c 01 fe 	      JMP	.end
     24  fdf5
     25  fdf5				   .wait
      0  fdf5					      DEA
      1  fdf5		       38		      SEC
      2  fdf6		       e9 01		      SBC	#1
     27  fdf8		       85 b0		      STA	fordPressed
     28  fdfa		       4c 01 fe 	      JMP	.end
     29  fdfd
     30  fdfd				   .noPress
     31  fdfd		       a9 00		      LDA	#NULL
     32  fdff		       85 b0		      STA	fordPressed
     33  fe01
     34  fe01				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fe01					      INCLUDE	"ctrlCode/cin2.asm"
      1  fe01					      SUBROUTINE
      2  fe01
      3  fe01		       85 02		      STA	WSYNC
      4  fe03		       ad 80 02 	      LDA	SWCHA
      5  fe06		       29 20		      AND	#FBACK
      6  fe08		       d0 22		      BNE	.noPress
      7  fe0a
      8  fe0a		       a5 aa		      LDA	playerPos
      9  fe0c		       38		      SEC
     10  fe0d		       e5 ae		      SBC	yGain
     11  fe0f		       18		      CLC
     12  fe10		       65 af		      ADC	yLoss
     13  fe12		       a8		      TAY
     14  fe13
     15  fe13		       b1 bb		      LDA	(mapPtr),Y
     16  fe15		       d0 19		      BNE	.end
     17  fe17
     18  fe17		       a5 b1		      LDA	backPressed
     19  fe19		       d0 09		      BNE	.wait
     20  fe1b
     21  fe1b		       84 aa		      STY	playerPos
     22  fe1d		       a9 0f		      LDA	#CWAITCNT
     23  fe1f		       85 b1		      STA	backPressed
     24  fe21		       4c 30 fe 	      JMP	.end
     25  fe24
     26  fe24				   .wait
      0  fe24					      DEA
      1  fe24		       38		      SEC
      2  fe25		       e9 01		      SBC	#1
     28  fe27		       85 b1		      STA	backPressed
     29  fe29		       4c 30 fe 	      JMP	.end
     30  fe2c
     31  fe2c				   .noPress
     32  fe2c		       a9 00		      LDA	#NULL
     33  fe2e		       85 b1		      STA	backPressed
     34  fe30
     35  fe30				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fe30					      INCLUDE	"ctrlCode/cin3.asm"
      1  fe30					      SUBROUTINE
      2  fe30
      3  fe30		       85 02		      STA	WSYNC
      4  fe32
      5  fe32		       a6 b3		      LDX	rigtPressed
      6  fe34		       d0 16		      BNE	.wait
      7  fe36
      8  fe36		       ad 80 02 	      LDA	SWCHA
      9  fe39		       29 80		      AND	#FLEFT
     10  fe3b		       d0 15		      BNE	.noPress
     11  fe3d
     12  fe3d		       a6 b7		      LDX	direction
     13  fe3f		       e8		      INX
     14  fe40		       8a		      TXA
     15  fe41		       29 03		      AND	#%11
     16  fe43
     17  fe43		       85 b7		      STA	direction
     18  fe45
     19  fe45		       a9 0f		      LDA	#CWAITCNT
     20  fe47		       85 b3		      STA	rigtPressed
     21  fe49		       4c 54 fe 	      JMP	.end
     22  fe4c
     23  fe4c				   .wait
     24  fe4c		       ca		      DEX
     25  fe4d		       86 b3		      STX	rigtPressed
     26  fe4f		       4c 54 fe 	      JMP	.end
     27  fe52
     28  fe52				   .noPress
     29  fe52		       86 b3		      STX	rigtPressed
     30  fe54
     31  fe54				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fe54					      INCLUDE	"ctrlCode/cin4.asm"
      1  fe54					      SUBROUTINE
      2  fe54
      3  fe54		       85 02		      STA	WSYNC
      4  fe56
      5  fe56		       a6 b2		      LDX	leftPressed
      6  fe58		       d0 16		      BNE	.wait
      7  fe5a
      8  fe5a		       ad 80 02 	      LDA	SWCHA
      9  fe5d		       29 40		      AND	#FRIGT
     10  fe5f		       d0 15		      BNE	.noPress
     11  fe61
     12  fe61		       a6 b7		      LDX	direction
     13  fe63		       ca		      DEX
     14  fe64		       8a		      TXA
     15  fe65		       29 03		      AND	#%11
     16  fe67
     17  fe67		       85 b7		      STA	direction
     18  fe69
     19  fe69		       a9 0f		      LDA	#CWAITCNT
     20  fe6b		       85 b2		      STA	leftPressed
     21  fe6d		       4c 78 fe 	      JMP	.end
     22  fe70
     23  fe70				   .wait
     24  fe70		       ca		      DEX
     25  fe71		       86 b2		      STX	leftPressed
     26  fe73		       4c 78 fe 	      JMP	CDIR1
     27  fe76
     28  fe76				   .noPress
     29  fe76		       86 b2		      STX	leftPressed
     30  fe78
     31  fe78				   .end
------- FILE input.asm
      9  fe78
     10  fe78				   CDIR1
     11  fe78		       85 02		      STA	WSYNC
     12  fe7a		       a5 b7		      LDA	direction
     13  fe7c		       c9 00		      CMP	#DNORTH
     14  fe7e		       d0 15		      BNE	CDIR2
     15  fe80
     16  fe80		       a9 86		      LDA	#WCOLU
     17  fe82		       85 b4		      STA	wallColour
     18  fe84		       a9 82		      LDA	#SCOLU
     19  fe86		       85 b5		      STA	shadowColour
     20  fe88
     21  fe88		       a5 ab		      LDA	mapWidth
     22  fe8a		       85 af		      STA	yLoss
     23  fe8c		       a2 01		      LDX	#ONE
     24  fe8e		       86 ac		      STX	xGain
     25  fe90		       ca		      DEX
     26  fe91		       86 ae		      STX	yGain
     27  fe93		       86 ad		      STX	xLoss
     28  fe95
     29  fe95				   CDIR2
     30  fe95		       a5 b7		      LDA	direction
     31  fe97		       c9 02		      CMP	#DSOUTH
     32  fe99		       d0 15		      BNE	CDIR3
     33  fe9b
     34  fe9b		       a9 86		      LDA	#WCOLU
     35  fe9d		       85 b4		      STA	wallColour
     36  fe9f		       a9 82		      LDA	#SCOLU
     37  fea1		       85 b5		      STA	shadowColour
     38  fea3
     39  fea3		       a5 ab		      LDA	mapWidth
     40  fea5		       85 ae		      STA	yGain
     41  fea7		       a2 01		      LDX	#ONE
     42  fea9		       86 ad		      STX	xLoss
     43  feab		       ca		      DEX
     44  feac		       86 af		      STX	yLoss
     45  feae		       86 ac		      STX	xGain
     46  feb0
     47  feb0				   CDIR3
     48  feb0		       a5 b7		      LDA	direction
     49  feb2		       c9 01		      CMP	#DWEST
     50  feb4		       d0 15		      BNE	CDIR4
     51  feb6
     52  feb6		       a9 82		      LDA	#SCOLU
     53  feb8		       85 b4		      STA	wallColour
     54  feba		       a9 86		      LDA	#WCOLU
     55  febc		       85 b5		      STA	shadowColour
     56  febe
     57  febe		       a5 ab		      LDA	mapWidth
     58  fec0		       85 ac		      STA	xGain
     59  fec2		       a2 01		      LDX	#ONE
     60  fec4		       86 ae		      STX	yGain
     61  fec6		       ca		      DEX
     62  fec7		       86 af		      STX	yLoss
     63  fec9		       86 ad		      STX	xLoss
     64  fecb
     65  fecb				   CDIR4
     66  fecb		       a5 b7		      LDA	direction
     67  fecd		       c9 03		      CMP	#DEAST
     68  fecf		       d0 15		      BNE	CEND
     69  fed1
     70  fed1		       a9 82		      LDA	#SCOLU
     71  fed3		       85 b4		      STA	wallColour
     72  fed5		       a9 86		      LDA	#WCOLU
     73  fed7		       85 b5		      STA	shadowColour
     74  fed9
     75  fed9		       a5 ab		      LDA	mapWidth
     76  fedb		       85 ad		      STA	xLoss
     77  fedd		       a2 01		      LDX	#ONE
     78  fedf		       86 af		      STX	yLoss
     79  fee1		       ca		      DEX
     80  fee2		       86 ae		      STX	yGain
     81  fee4		       86 ac		      STX	xGain
     82  fee6
     83  fee6				   CEND
     84  fee6		       85 02		      STA	WSYNC
------- FILE main.asm
     80  fee8
     81  fee8							; Pad again
     82  fee8
     83  fee8		       a2 1c		      LDX	#LOPAD_LIMIT
     84  feea
     85  feea				   lowerPad
     86  feea		       85 02		      STA	WSYNC
     87  feec
     88  feec		       ca		      DEX
     89  feed		       d0 fb		      BNE	lowerPad
     90  feef
     91  feef							; Get everything ready for VSYNC
     92  feef
     93  feef		       86 01		      STX	VBLANK
     94  fef1		       a9 02		      LDA	#VSYNC_SET
     95  fef3		       85 02		      STA	WSYNC
     96  fef5		       4c 25 f8 	      JMP	screenStart
     97  fef8
     98  fef8							; Tell us how many bytes we have used up
     99  fef8
      0  fef8					      USAGE_REPORT	"ROM", $F800, $FFFA
      1  fef8
      2  fef8				   NAM	      SET	"ROM"
      3  fef8				   SPOS       SET	$F800
      4  fef8				   EPOS       SET	$FFFA
      5  fef8				   CPOS       SET	.
      6  fef8
      7  fef8				   CAP	      SET	EPOS - SPOS
      8  fef8				   TKUP       SET	CPOS - SPOS
      9  fef8				   PCNT       SET	[TKUP * 100 / CAP]d
     10  fef8
 87 % of your ROM is used up ( 1784 / 2042 ) bytes
     11  fef8					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12  fef8
    101  fef8
    102  fffa					      ORG	$FFFA
    103  fffa
    104  fffa		       00 f8		      DC.W	start	; Something
    105  fffc		       00 f8		      DC.W	start	; Entrypoint
    106  fffe		       25 f8		      DC.W	screenStart	; Something else
    107  10000
    108  10000					       END
