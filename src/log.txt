------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????				       MAC	ina
      2  10000 ????				       CLC
      3  10000 ????				       ADC	#1
      4  10000 ????				       ENDM
      5  10000 ????
      6  10000 ????				       MAC	dea
      7  10000 ????				       SEC
      8  10000 ????				       SBC	#1
      9  10000 ????				       ENDM
     10  10000 ????
     11  10000 ????				       MAC	delay
     12  10000 ????			    .CYCLES    SET	{1}
     13  10000 ????
     14  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     15  10000 ????				       NOP
     16  10000 ????			    .CYCLES    SET	.CYCLES - 2
     17  10000 ????				       ENDIF
     18  10000 ????
     19  10000 ????				       IF	[.CYCLES - 2] / 5
     20  10000 ????				       REPEAT	.CYCLES / 5
     21  10000 ????				       INC	foo
     22  10000 ????				       REPEND
     23  10000 ????			    .CYCLES    SET	.CYCLES % 5
     24  10000 ????				       ENDIF
     25  10000 ????
     26  10000 ????				       IF	.CYCLES % 3 == 1
     27  10000 ????				       NOP
     28  10000 ????			    .CYCLES    SET	.CYCLES - 2
     29  10000 ????				       ENDIF
     30  10000 ????
     31  10000 ????				       REPEAT	.CYCLES / 3
     32  10000 ????				       STA	DUMP
     33  10000 ????				       REPEND
     34  10000 ????
     35  10000 ????			    .CYCLES    SET	.CYCLES % 3
     36  10000 ????
     37  10000 ????				       REPEAT	.CYCLES / 2
     38  10000 ????				       NOP
     39  10000 ????				       REPEND
     40  10000 ????
     41  10000 ????			    .CYCLES    SET	.CYCLES % 2
     42  10000 ????
     43  10000 ????				       IF	.CYCLES
     44  10000 ????				       ERR
     45  10000 ????				       ENDIF
     46  10000 ????
     47  10000 ????				       ENDM
     48  10000 ????
     49  10000 ????				       MAC	usage_report
     50  10000 ????
     51  10000 ????			    NAM        SET	{1}
     52  10000 ????			    SPOS       SET	{2}
     53  10000 ????			    EPOS       SET	{3}
     54  10000 ????			    CPOS       SET	.
     55  10000 ????
     56  10000 ????			    CAP        SET	EPOS - SPOS
     57  10000 ????			    TKUP       SET	CPOS - SPOS
     58  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d
     59  10000 ????
     60  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     61  10000 ????
     62  10000 ????				       ENDM
     63  10000 ????
     64  10000 ????		00 00	    NULL       =	0	; The value of NULL
     65  10000 ????		00 01	    ONE        =	1	; The value of one
     66  10000 ????
     67  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
     68  10000 ????
     69  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
     70  10000 ????
     71  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     72  10000 ????
     73  10000 ????		00 1e	    UPPRWALL_S =	30
     74  10000 ????		00 06	    LOWRWALL_S =	6
     75  10000 ????
     76  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     77  10000 ????		00 10	    HADJ_B     =	$10
     78  10000 ????
     79  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     80  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     81  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     82  10000 ????
     83  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     84  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     85  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     86  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     87  10000 ????
     88  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     89  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     90  10000 ????
     91  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     92  10000 ????
     93  10000 ????		00 0e	    UPPAD_LIMIT =	14	; The upper pad amount
     94  10000 ????		00 1a	    LOPAD_LIMIT =	26	; The lower pad amount
     95  10000 ????
     96  10000 ????		00 ff	    FULLWALL   =	$FF
     97  10000 ????
     98  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     99  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
    100  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
    101  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
    102  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
    103  10000 ????
    104  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
    105  10000 ????
    106  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
    107  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
    108  10000 ????
    109  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
    110  10000 ????
    111  10000 ????		00 0f	    CWAITCNT   =	#15	; The amount of frames to wait before input is repeated
    112  10000 ????
    113  10000 ????		00 00	    DNORTH     =	0	; The possible directions
    114  10000 ????		00 02	    DSOUTH     =	2
    115  10000 ????		00 01	    DWEST      =	1
    116  10000 ????		00 03	    DEAST      =	3
------- FILE include/vepseu.h
      4  10000 ????
      5 U028a ????				      SEG.U	addresses
      6 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   shift      DC	0
     49 U00ab		       00	   playerPos  DC	0
     50 U00ac		       00	   mapWidth   DC	0
     51 U00ad		       00	   xGain      DC	0
     52 U00ae		       00	   xLoss      DC	0
     53 U00af		       00	   yGain      DC	0
     54 U00b0		       00	   yLoss      DC	0
     55 U00b1		       00	   fordPressed DC	0
     56 U00b2		       00	   backPressed DC	0
     57 U00b3		       00	   leftPressed DC	0
     58 U00b4		       00	   rigtPressed DC	0
     59 U00b5		       00	   wallColour DC	0
     60 U00b6		       00	   shadowColour DC	0
     61 U00b7		       00	   horzPos_mA DC	0
     62 U00b8		       00	   horzPos_mB DC	0
     63 U00b9		       00	   horzPos_plyr DC	0
     64 U00ba		       00	   drawingPlyr DC	0
     65 U00bb		       00	   direction  DC	0
     66 U00bc		       00	   spriteHeight DC	0
     67 U00bd		       00	   halfJump   DC	0
     68 U00be		       00 00	   miniMapPtr DC.W	0
     69 U00c0		       00 00	   mapPtr     DC.W	0
     70 U00c2		       00 00	   sprite     DC.W	0
     71 U00c4		       00	   foo	      DC	0
     72 U00c5
      0 U00c5					      USAGE_REPORT	"RAM", $80, $100
      1 U00c5
      2 U00c5				   NAM	      SET	"RAM"
      3 U00c5				   SPOS       SET	$80
      4 U00c5				   EPOS       SET	$100
      5 U00c5				   CPOS       SET	.
      6 U00c5
      7 U00c5				   CAP	      SET	EPOS - SPOS
      8 U00c5				   TKUP       SET	CPOS - SPOS
      9 U00c5				   PCNT       SET	[TKUP * 100 / CAP]d
     10 U00c5
 53 % of your RAM is used up ( 69 / 128 ) bytes
     11 U00c5					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12 U00c5
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c5					      INCLUDE	"include/pia_addr.h"
      1 U00c5							; PIA addresses
      2 U00c5
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     12 U028a
     13 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   jerry
      8  f078		       00		      DC	%00000000
      9  f079		       42		      DC	%01000010
     10  f07a		       42		      DC	%01000010
     11  f07b		       42		      DC	%01000010
     12  f07c		       42		      DC	%01000010
     13  f07d		       42		      DC	%01000010
     14  f07e		       42		      DC	%01000010
     15  f07f		       42		      DC	%01000010
     16  f080		       42		      DC	%01000010
     17  f081		       42		      DC	%01000010
     18  f082		       42		      DC	%01000010
     19  f083		       42		      DC	%01000010
     20  f084		       ff		      DC	%11111111
     21  f085		       81		      DC	%10000001
     22  f086		       89		      DC	%10001001
     23  f087		       81		      DC	%10000001
     24  f088		       89		      DC	%10001001
     25  f089		       81		      DC	%10000001
     26  f08a		       89		      DC	%10001001
     27  f08b		       81		      DC	%10000001
     28  f08c		       89		      DC	%10001001
     29  f08d		       81		      DC	%10000001
     30  f08e		       99		      DC	%10011001
     31  f08f		       a5		      DC	%10100101
     32  f090		       42		      DC	%01000010
     33  f091		       42		      DC	%01000010
     34  f092		       6a		      DC	%01101010
     35  f093		       42		      DC	%01000010
     36  f094		       99		      DC	%10011001
     37  f095		       a5		      DC	%10100101
     38  f096		       c3		      DC	%11000011
     39  f097
     40  f097				   miniMap_01
     41  f097		       e0 07		      DC.W	%0000011111100000
     42  f099		       bf fd		      DC.W	%1111110110111111
     43  f09b		       80 01		      DC.W	%0000000110000000
     44  f09d		       80 01		      DC.W	%0000000110000000
     45  f09f		       be bd		      DC.W	%1011110110111110
     46  f0a1		       a2 a5		      DC.W	%1010010110100010
     47  f0a3		       a2 a7		      DC.W	%1010011110100010
     48  f0a5		       e2 a7		      DC.W	%1010011111100010
     49  f0a7		       e2 a5		      DC.W	%1010010111100010
     50  f0a9		       be bd		      DC.W	%1011110110111110
     51  f0ab		       80 81		      DC.W	%1000000110000000
     52  f0ad		       80 81		      DC.W	%1000000110000000
     53  f0af		       bf fd		      DC.W	%1111110110111111
     54  f0b1		       a0 05		      DC.W	%0000010110100000
     55  f0b3		       a0 05		      DC.W	%0000010110100000
     56  f0b5		       e0 07		      DC.W	%0000011111100000
     57  f0b7
     58  f0b7				   map_01_load
     59  f0b7		       a9 d1		      LDA	#MAP_01_POS
     60  f0b9		       85 ab		      STA	playerPos
     61  f0bb		       a9 10		      LDA	#MAP_01_WDTH
     62  f0bd		       85 ac		      STA	mapWidth
     63  f0bf
     64  f0bf		       a9 00		      LDA	#<map_01
     65  f0c1		       85 c0		      STA	mapPtr
     66  f0c3		       a9 f1		      LDA	#>map_01
     67  f0c5		       85 c1		      STA	mapPtr + 1
     68  f0c7
     69  f0c7		       a9 97		      LDA	#<miniMap_01
     70  f0c9		       85 be		      STA	miniMapPtr
     71  f0cb		       a9 f0		      LDA	#>miniMap_01
     72  f0cd		       85 bf		      STA	miniMapPtr + 1
     73  f0cf		       60		      RTS
     74  f0d0
     75  f0d0
     76  f100		       00 00 00 00*	      ALIGN	256
     77  f100
     78  f100				   map_01
     79  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     80  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     81  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     82  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     83  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     84  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     85  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     86  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     87  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     88  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     89  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     90  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     91  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     92  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     93  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     94  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F800
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F800
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     10  f200
 25 % of your map space is used up ( 512 / 2048 ) bytes
     11  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12  f200
     15  f200
     16  f800					      ORG	$F800
     17  f800
     18  f800				   start
     19  f800
     20  f800							; Initialize everything
     21  f800
------- FILE init.asm LEVEL 2 PASS 4
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800		       a2 ff		      LDX	#stack
      4  f802		       9a		      TXS
      5  f803
      6  f803		       a9 00		      LDA	#NULL
      7  f805
      8  f805		       d8		      CLD
      9  f806		       18		      CLC
     10  f807		       58		      CLI
     11  f808		       b8		      CLV
     12  f809
     13  f809		       a2 00		      LDX	#INDEXINIT
     14  f80b
     15  f80b				   cleanLoop
     16  f80b
     17  f80b		       95 00		      STA	cleanStart,X
     18  f80d		       e8		      INX
     19  f80e
     20  f80e		       e0 00		      CPX	#cleanEnd
     21  f810		       d0 f9		      BNE	cleanLoop
     22  f812
     23  f812		       20 b7 f0 	      JSR	map_01_load
     24  f815
     25  f815		       a5 ac		      LDA	mapWidth
     26  f817		       85 b0		      STA	yLoss
     27  f819		       a9 01		      LDA	#ONE
     28  f81b		       85 ad		      STA	xGain
     29  f81d		       a9 00		      LDA	#NULL
     30  f81f		       85 af		      STA	yGain
     31  f821		       85 ae		      STA	xLoss
     32  f823
     33  f823		       a9 86		      LDA	#WCOLU
     34  f825		       85 b5		      STA	wallColour
     35  f827		       a9 82		      LDA	#SCOLU
     36  f829		       85 b6		      STA	shadowColour
------- FILE main.asm
     23  f82b
     24  f82b		       a9 02		      LDA	#VSYNC_SET
     25  f82d
     26  f82d				   screenStart
     27  f82d
     28  f82d							; Start vsync (3 scanlines)
     29  f82d		       85 00		      STA	VSYNC
     30  f82f
     31  f82f		       85 02		      STA	WSYNC
     32  f831		       85 02		      STA	WSYNC
     33  f833		       a9 00		      LDA	#NULL
     34  f835		       85 02		      STA	WSYNC
     35  f837
     36  f837		       85 00		      STA	VSYNC
     37  f839
     38  f839							; Render everything (23 scanlines) (491 bytes)
     39  f839
     40  f839
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f839					      INCLUDE	"walrend.asm"	; 9 scanlines
      1  f839							; VePseu's wall renderer
      2  f839
      3  f839		       a4 ab		      LDY	playerPos
      4  f83b
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f83b					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f83b							; Peripheral vision rendering (54 cycles)
      2  f83b
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f83b					      INCLUDE	"include/ands_0.h"
      1  f83b							; The AND constants for peripheral vision
      2  f83b
      3  f83b		       00 c0	   AND_W0S1P1 =	%11000000
      4  f83b		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f83b
      0  f83b					      X_POS_LOS		; 24 cycles
      1  f83b
      2  f83b		       98		      TYA
      3  f83c		       18		      CLC
      4  f83d		       65 ae		      ADC	xLoss
      5  f83f		       38		      SEC
      6  f840		       e5 ad		      SBC	xGain
      7  f842		       a8		      TAY
      8  f843
      6  f843		       b1 c0		      LDA	(mapPtr),Y
      7  f845		       29 c0		      AND	#AND_W0S1P1
      8  f847		       85 9b		      STA	shadow1a
      9  f849
     10  f849		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f84a		       18		      CLC
     12  f84b		       65 ad		      ADC	xGain
     13  f84d		       65 ad		      ADC	xGain
     14  f84f		       38		      SEC
     15  f850		       e5 ae		      SBC	xLoss
     16  f852		       e5 ae		      SBC	xLoss
     17  f854		       a8		      TAY
     18  f855
     19  f855		       b1 c0		      LDA	(mapPtr),Y	; 10 cycles
     20  f857		       29 03		      AND	#AND_W0S1P2
     21  f859		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f85b
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f85b					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f85b							; Render the first layer (not that ugly) (86 cycles)
      2  f85b
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f85b					      INCLUDE	"include/ands_1.h"
      1  f85b							; The AND constants for layer 1
      2  f85b
      3  f85b		       00 03	   AND_W1S1P1 =	%00000011
      4  f85b		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f85b
      0  f85b					      Y_POS_ADV		; 30 cycles
      1  f85b
      2  f85b		       98		      TYA
      3  f85c		       18		      CLC
      4  f85d		       65 af		      ADC	yGain
      5  f85f		       38		      SEC
      6  f860		       e5 b0		      SBC	yLoss
      7  f862		       a8		      TAY
      8  f863
      6  f863		       b1 c0		      LDA	(mapPtr),Y
      7  f865		       85 9e		      STA	shadow1d
      8  f867		       05 9f		      ORA	shadow1e
      9  f869		       29 03		      AND	#AND_W1S1P1
     10  f86b		       85 9f		      STA	shadow1e
     11  f86d
      0  f86d					      X_POS_LOS		; 22 cycles
      1  f86d
      2  f86d		       98		      TYA
      3  f86e		       18		      CLC
      4  f86f		       65 ae		      ADC	xLoss
      5  f871		       38		      SEC
      6  f872		       e5 ad		      SBC	xGain
      7  f874		       a8		      TAY
      8  f875
     13  f875		       b1 c0		      LDA	(mapPtr),Y
     14  f877		       85 80		      STA	wall1
     15  f879
      0  f879					      X_POS_LOS		; 34 cycles
      1  f879
      2  f879		       98		      TYA
      3  f87a		       18		      CLC
      4  f87b		       65 ae		      ADC	xLoss
      5  f87d		       38		      SEC
      6  f87e		       e5 ad		      SBC	xGain
      7  f880		       a8		      TAY
      8  f881
     17  f881		       b1 c0		      LDA	(mapPtr),Y
     18  f883		       aa		      TAX
     19  f884		       05 9b		      ORA	shadow1a
     20  f886		       85 9b		      STA	shadow1a
     21  f888		       8a		      TXA
     22  f889		       29 03		      AND	#AND_W1S1P2
     23  f88b		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f88d
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f88d					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f88d							; Render the second layer (186 cycles)
      2  f88d
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f88d					      INCLUDE	"include/ands_2.h"
      1  f88d							; The AND constants for layer 2
      2  f88d
      3  f88d		       00 e0	   AND_W2S1P1 =	%11100000
      4  f88d		       00 fc	   AND_W2S2P1 =	%11111100
      5  f88d
      6  f88d		       00 03	   AND_W2S0P1 =	%00000011
      7  f88d		       00 04	   AND_W2S1P2 =	%00000100
      8  f88d		       00 0c	   AND_W2S2P2 =	%00001100
      9  f88d
     10  f88d		       00 fc	   AND_W2S0P2 =	%11111100
     11  f88d
     12  f88d		       00 80	   AND_W2S1P3 =	%10000000
     13  f88d		       00 c0	   AND_W2S2P3 =	%11000000
     14  f88d
     15  f88d		       00 01	   AND_W2S1P4 =	%00000001
     16  f88d		       00 0f	   AND_W2S2P4 =	%00001111
     17  f88d		       00 03	   AND_W2S1P5 =	%00000011
     18  f88d		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f88d
      0  f88d					      Y_POS_ADV_AL		; 35 cycles
      1  f88d
      2  f88d		       98		      TYA
      3  f88e		       18		      CLC
      4  f88f		       65 af		      ADC	yGain
      5  f891		       65 ae		      ADC	xLoss
      6  f893		       38		      SEC
      7  f894		       e5 b0		      SBC	yLoss
      8  f896		       e5 ad		      SBC	xGain
      9  f898		       a8		      TAY
     10  f899
      6  f899		       b1 c0		      LDA	(mapPtr),Y
      7  f89b		       29 fc		      AND	#AND_W2S2P1
      8  f89d		       85 a0		      STA	shadow2ab
      9  f89f		       29 e0		      AND	#AND_W2S1P1
     10  f8a1		       85 91		      STA	shadow2aa
     11  f8a3
      0  f8a3					      X_POS_GAN		; 41 cycles
      1  f8a3
      2  f8a3		       98		      TYA
      3  f8a4		       18		      CLC
      4  f8a5		       65 ad		      ADC	xGain
      5  f8a7		       38		      SEC
      6  f8a8		       e5 ae		      SBC	xLoss
      7  f8aa		       a8		      TAY
      8  f8ab
     13  f8ab		       b1 c0		      LDA	(mapPtr),Y
     14  f8ad		       aa		      TAX
     15  f8ae		       85 85		      STA	wall2a
     16  f8b0		       29 03		      AND	#AND_W2S0P1
     17  f8b2		       85 86		      STA	wall2b
     18  f8b4		       8a		      TXA
     19  f8b5		       29 0c		      AND	#AND_W2S2P2
     20  f8b7		       85 a1		      STA	shadow2bb
     21  f8b9		       29 04		      AND	#AND_W2S1P2
     22  f8bb		       85 92		      STA	shadow2ba
     23  f8bd
      0  f8bd					      X_POS_GAN		; 30 cycles
      1  f8bd
      2  f8bd		       98		      TYA
      3  f8be		       18		      CLC
      4  f8bf		       65 ad		      ADC	xGain
      5  f8c1		       38		      SEC
      6  f8c2		       e5 ae		      SBC	xLoss
      7  f8c4		       a8		      TAY
      8  f8c5
     25  f8c5		       b1 c0		      LDA	(mapPtr),Y
     26  f8c7		       85 87		      STA	wall2c
     27  f8c9		       29 fc		      AND	#AND_W2S0P2
     28  f8cb		       05 86		      ORA	wall2b
     29  f8cd		       85 86		      STA	wall2b
     30  f8cf
      0  f8cf					      X_POS_GAN		; 35 cycles
      1  f8cf
      2  f8cf		       98		      TYA
      3  f8d0		       18		      CLC
      4  f8d1		       65 ad		      ADC	xGain
      5  f8d3		       38		      SEC
      6  f8d4		       e5 ae		      SBC	xLoss
      7  f8d6		       a8		      TAY
      8  f8d7
     32  f8d7		       b1 c0		      LDA	(mapPtr),Y
     33  f8d9		       85 88		      STA	wall2d
     34  f8db		       85 89		      STA	wall2e
     35  f8dd		       29 c0		      AND	#AND_W2S2P3
     36  f8df		       85 a2		      STA	shadow2cb
     37  f8e1		       29 80		      AND	#AND_W2S1P3
     38  f8e3		       85 93		      STA	shadow2ca
     39  f8e5
      0  f8e5					      X_POS_GAN		; 37 cycles
      1  f8e5
      2  f8e5		       98		      TYA
      3  f8e6		       18		      CLC
      4  f8e7		       65 ad		      ADC	xGain
      5  f8e9		       38		      SEC
      6  f8ea		       e5 ae		      SBC	xLoss
      7  f8ec		       a8		      TAY
      8  f8ed
     41  f8ed		       b1 c0		      LDA	(mapPtr),Y
     42  f8ef		       29 0f		      AND	#AND_W2S2P4
     43  f8f1		       85 a3		      STA	shadow2db
     44  f8f3		       29 03		      AND	#AND_W2S1P5
     45  f8f5		       85 95		      STA	shadow2ea
     46  f8f7		       85 a4		      STA	shadow2eb
     47  f8f9		       29 01		      AND	#AND_W2S1P4
     48  f8fb		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f8fd
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f8fd					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f8fd							; Render the third layer (it's really ugly, at 281 cycles)
      2  f8fd
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f8fd					      INCLUDE	"include/ands_3.h"
      1  f8fd							; The AND constants for render layer 3
      2  f8fd
      3  f8fd		       00 80	   AND_W3S1P1 =	%10000000
      4  f8fd		       00 c0	   AND_W3S2P1 =	%11000000
      5  f8fd
      6  f8fd		       00 fc	   AND_W3S0P1 =	%11111100
      7  f8fd		       00 02	   AND_W3S1P2 =	%00000010
      8  f8fd		       00 03	   AND_W3S2P2 =	%00000011
      9  f8fd
     10  f8fd		       00 03	   AND_W3S0P2 =	%00000011
     11  f8fd		       00 0f	   AND_W3S0P3 =	%00001111
     12  f8fd		       00 10	   AND_W3S1P3 =	%00010000
     13  f8fd		       00 30	   AND_W3S2P3 =	%00110000
     14  f8fd
     15  f8fd		       00 f0	   AND_W3S0P4 =	%11110000
     16  f8fd		       00 30	   AND_W3S0P5 =	%00110000
     17  f8fd
     18  f8fd		       00 c0	   AND_W3S0P6 =	%11000000
     19  f8fd		       00 f0	   AND_W3S0P7 =	%11110000
     20  f8fd		       00 20	   AND_W3S1P4 =	%00100000
     21  f8fd		       00 30	   AND_W3S2P4 =	%00110000
     22  f8fd
     23  f8fd		       00 0f	   AND_W3S0P8 =	%00001111
     24  f8fd		       00 03	   AND_W3S0P9 =	%00000011
     25  f8fd		       00 10	   AND_W3S1P5 =	%00010000
     26  f8fd		       00 30	   AND_W3S2P5 =	%00110000
     27  f8fd
     28  f8fd		       00 02	   AND_W3S1P6 =	%00000010
     29  f8fd		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f8fd
      0  f8fd					      Y_POS_ADV_AG		; 35 cycles
      1  f8fd
      2  f8fd		       98		      TYA
      3  f8fe		       18		      CLC
      4  f8ff		       65 af		      ADC	yGain
      5  f901		       65 ad		      ADC	xGain
      6  f903		       38		      SEC
      7  f904		       e5 b0		      SBC	yLoss
      8  f906		       e5 ae		      SBC	xLoss
      9  f908		       a8		      TAY
     10  f909
      6  f909		       b1 c0		      LDA	(mapPtr),Y
      7  f90b		       29 03		      AND	#AND_W3S2P6
      8  f90d		       85 a9		      STA	shadow3eb
      9  f90f		       29 02		      AND	#AND_W3S1P6
     10  f911		       85 9a		      STA	shadow3ea
     11  f913
      0  f913					      X_POS_LOS		; 38 cycles
      1  f913
      2  f913		       98		      TYA
      3  f914		       18		      CLC
      4  f915		       65 ae		      ADC	xLoss
      5  f917		       38		      SEC
      6  f918		       e5 ad		      SBC	xGain
      7  f91a		       a8		      TAY
      8  f91b
     13  f91b		       b1 c0		      LDA	(mapPtr),Y
     14  f91d		       aa		      TAX
     15  f91e		       29 0f		      AND	#AND_W3S0P8
     16  f920		       85 8d		      STA	wall3d
     17  f922		       29 03		      AND	#AND_W3S0P9
     18  f924		       85 8e		      STA	wall3e
     19  f926		       8a		      TXA
     20  f927		       29 30		      AND	#AND_W3S2P5
     21  f929		       85 a8		      STA	shadow3db
     22  f92b		       29 10		      AND	#AND_W3S1P5
     23  f92d		       85 99		      STA	shadow3da
     24  f92f
      0  f92f					      X_POS_LOS		; 46 cycles
      1  f92f
      2  f92f		       98		      TYA
      3  f930		       18		      CLC
      4  f931		       65 ae		      ADC	xLoss
      5  f933		       38		      SEC
      6  f934		       e5 ad		      SBC	xGain
      7  f936		       a8		      TAY
      8  f937
     26  f937		       b1 c0		      LDA	(mapPtr),Y
     27  f939		       aa		      TAX
     28  f93a		       29 f0		      AND	#AND_W3S0P7
     29  f93c		       05 8d		      ORA	wall3d
     30  f93e		       85 8d		      STA	wall3d
     31  f940		       29 c0		      AND	#AND_W3S0P6
     32  f942		       85 8c		      STA	wall3c
     33  f944		       8a		      TXA
     34  f945		       29 30		      AND	#AND_W3S2P4
     35  f947		       85 a7		      STA	shadow3cb
     36  f949		       29 20		      AND	#AND_W3S1P4
     37  f94b		       85 98		      STA	shadow3ca
     38  f94d
      0  f94d					      X_POS_LOS		; 32 cycles
      1  f94d
      2  f94d		       98		      TYA
      3  f94e		       18		      CLC
      4  f94f		       65 ae		      ADC	xLoss
      5  f951		       38		      SEC
      6  f952		       e5 ad		      SBC	xGain
      7  f954		       a8		      TAY
      8  f955
     40  f955		       b1 c0		      LDA	(mapPtr),Y
     41  f957		       29 f0		      AND	#AND_W3S0P4
     42  f959		       85 8b		      STA	wall3b
     43  f95b		       29 30		      AND	#AND_W3S0P5
     44  f95d		       05 8c		      ORA	wall3c
     45  f95f		       85 8c		      STA	wall3c
     46  f961
      0  f961					      X_POS_LOS		; 46 cycles
      1  f961
      2  f961		       98		      TYA
      3  f962		       18		      CLC
      4  f963		       65 ae		      ADC	xLoss
      5  f965		       38		      SEC
      6  f966		       e5 ad		      SBC	xGain
      7  f968		       a8		      TAY
      8  f969
     48  f969		       b1 c0		      LDA	(mapPtr),Y
     49  f96b		       aa		      TAX
     50  f96c		       29 0f		      AND	#AND_W3S0P3
     51  f96e		       05 8b		      ORA	wall3b
     52  f970		       85 8b		      STA	wall3b
     53  f972		       29 03		      AND	#AND_W3S0P2
     54  f974		       85 8a		      STA	wall3a
     55  f976		       8a		      TXA
     56  f977		       29 30		      AND	#AND_W3S2P3
     57  f979		       85 a6		      STA	shadow3bb
     58  f97b		       29 10		      AND	#AND_W3S1P3
     59  f97d		       85 97		      STA	shadow3ba
     60  f97f
      0  f97f					      X_POS_LOS		; 41 cycles
      1  f97f
      2  f97f		       98		      TYA
      3  f980		       18		      CLC
      4  f981		       65 ae		      ADC	xLoss
      5  f983		       38		      SEC
      6  f984		       e5 ad		      SBC	xGain
      7  f986		       a8		      TAY
      8  f987
     62  f987		       b1 c0		      LDA	(mapPtr),Y
     63  f989		       aa		      TAX
     64  f98a		       29 fc		      AND	#AND_W3S0P1
     65  f98c		       05 8a		      ORA	wall3a
     66  f98e		       85 8a		      STA	wall3a
     67  f990		       8a		      TXA
     68  f991		       29 03		      AND	#AND_W3S2P2
     69  f993		       85 a5		      STA	shadow3ab
     70  f995		       29 02		      AND	#AND_W3S1P2
     71  f997		       85 96		      STA	shadow3aa
     72  f999
      0  f999					      X_POS_LOS		; 35 cycles
      1  f999
      2  f999		       98		      TYA
      3  f99a		       18		      CLC
      4  f99b		       65 ae		      ADC	xLoss
      5  f99d		       38		      SEC
      6  f99e		       e5 ad		      SBC	xGain
      7  f9a0		       a8		      TAY
      8  f9a1
     74  f9a1		       b1 c0		      LDA	(mapPtr),Y
     75  f9a3		       29 c0		      AND	#AND_W3S2P1
     76  f9a5		       05 a5		      ORA	shadow3ab
     77  f9a7		       85 a5		      STA	shadow3ab
     78  f9a9		       29 80		      AND	#AND_W3S1P1
     79  f9ab		       05 96		      ORA	shadow3aa
     80  f9ad		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9af
     13  f9af		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9b1					      INCLUDE	"scrend.asm"	; 14 Scanlines
      1  f9b1							; VePseu's screen renderer
      2  f9b1
      3  f9b1							; Remove the shadows incase only 1 wall is drawn
      4  f9b1
      5  f9b1					      SUBROUTINE
      6  f9b1
      7  f9b1		       a5 9b		      LDA	shadow1a	; 12 cycles
      8  f9b3		       05 80		      ORA	wall1
      9  f9b5		       45 80		      EOR	wall1
     10  f9b7		       85 9b		      STA	shadow1a
     11  f9b9
     12  f9b9		       a5 9c		      LDA	shadow1b	; 12 cycles
     13  f9bb		       05 80		      ORA	wall1
     14  f9bd		       45 80		      EOR	wall1
     15  f9bf		       85 9c		      STA	shadow1b
     16  f9c1
     17  f9c1		       a5 9e		      LDA	shadow1d	; 12 cycles
     18  f9c3		       05 80		      ORA	wall1
     19  f9c5		       45 80		      EOR	wall1
     20  f9c7		       85 9e		      STA	shadow1d
     21  f9c9
     22  f9c9		       a5 9f		      LDA	shadow1e	; 12 cycles
     23  f9cb		       05 80		      ORA	wall1
     24  f9cd		       45 80		      EOR	wall1
     25  f9cf		       85 9f		      STA	shadow1e
     26  f9d1
     27  f9d1		       a5 80		      LDA	wall1	; Copy wall one to the four addresses preceding it (15 cycles)
     28  f9d3		       85 81		      STA	wall1+1
     29  f9d5		       85 82		      STA	wall1+2
     30  f9d7		       85 83		      STA	wall1+3
     31  f9d9		       85 84		      STA	wall1+4
     32  f9db
     33  f9db		       a2 00		      LDX	#INDEXINIT	; 2 cycles
     34  f9dd
     35  f9dd				   .loop		; Totals at 909 cycles
     36  f9dd
     37  f9dd		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     38  f9df		       15 80		      ORA	wall1,X
     39  f9e1		       95 85		      STA	wall2a,X
     40  f9e3
     41  f9e3		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     42  f9e5		       15 9b		      ORA	shadow1a,X
     43  f9e7		       95 91		      STA	shadow2aa,X
     44  f9e9
     45  f9e9		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     46  f9eb		       15 9b		      ORA	shadow1a,X
     47  f9ed		       95 a0		      STA	shadow2ab,X
     48  f9ef
     49  f9ef		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     50  f9f1		       15 9b		      ORA	shadow1a,X
     51  f9f3		       55 9b		      EOR	shadow1a,X
     52  f9f5		       95 85		      STA	wall2a,X
     53  f9f7
     54  f9f7		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     55  f9f9		       15 85		      ORA	wall2a,X
     56  f9fb		       55 85		      EOR	wall2a,X
     57  f9fd		       95 91		      STA	shadow2aa,X
     58  f9ff
     59  f9ff		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     60  fa01		       15 85		      ORA	wall2a,X
     61  fa03		       55 85		      EOR	wall2a,X
     62  fa05		       95 a0		      STA	shadow2ab,X
     63  fa07
     64  fa07		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     65  fa08		       e0 0a		      CPX	#WALLCNT
     66  fa0a		       d0 d1		      BNE	.loop
     67  fa0c
     68  fa0c		       a2 ff		      LDX	#FULLWALL
     69  fa0e
     70  fa0e		       8a		      TXA
     71  fa0f		       45 a5		      EOR	shadow3ab
     72  fa11		       85 8f		      STA	wall4a
     73  fa13
     74  fa13		       8a		      TXA
     75  fa14		       45 a6		      EOR	shadow3bb
     76  fa16		       85 90		      STA	wall4b
     77  fa18
     78  fa18		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     43  fa1a
     44  fa1a		       a9 78		      LDA	#<jerry
     45  fa1c		       85 c2		      STA	sprite
     46  fa1e		       a9 f0		      LDA	#>jerry
     47  fa20		       85 c3		      STA	sprite+1
     48  fa22		       a9 0c		      LDA	#$0C
     49  fa24		       85 06		      STA	COLUP0
     50  fa26
     51  fa26		       a9 1f		      LDA	#31
     52  fa28		       85 bc		      STA	spriteHeight
     53  fa2a
     54  fa2a							; Pad!
     55  fa2a
     56  fa2a		       a2 0e		      LDX	#UPPAD_LIMIT
     57  fa2c
     58  fa2c				   upperPad
     59  fa2c		       85 02		      STA	WSYNC
     60  fa2e
     61  fa2e		       ca		      DEX
     62  fa2f		       d0 fb		      BNE	upperPad
     63  fa31
     64  fa31		       85 02		      STA	WSYNC
     65  fa33
     66  fa33							; Draw everything (956 bytes)
     67  fa33
     68  fa33		       a0 00		      LDY	#0
     69  fa35
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa35					      INCLUDE	"dispkern.asm"	; 186 scanlines
      1  fa35							; VePseu's display kernel
      2  fa35
      3  fa35		       4c 38 fa 	      JMP	drawStart
      4  fa38
      5  fa38							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa38							;
      7  fa38							; dc_w1s1.asm
      8  fa38							; |   | |
      9  fa38							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa38							; |   |
     11  fa38							; |   |- The wall it draws
     12  fa38							; |
     13  fa38							; |- Draw-code identifies
     14  fa38
     15  fa38				   drawStart
     16  fa38
     17  fa38		       b8		      CLV
     18  fa39
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa39					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa39							; The draw code for the 1st wall and shadow
      2  fa39
      3  fa39				   dc_w1s1    SUBROUTINE
      4  fa39
      5  fa39		       a2 00		      LDX	#INDEXINIT
      6  fa3b		       4c 4b fa 	      JMP	.loop
      7  fa3e
      8  fa3e				   .noSprite_1
      9  fa3e							; Depending on the location in the program the branch here might cross a
     10  fa3e							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa3e							; delay simply check if the page number (the MSB of the address) is
     12  fa3e							; different between the branch and it's destination
     13  fa3e					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa3e					      DELAY	11
      1  fa3e				   .CYCLES    SET	11
      2  fa3e
      3  fa3e					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa3e		       ea		      NOP
      5  fa3e				   .CYCLES    SET	.CYCLES - 2
      6  fa3f					      ENDIF
      7  fa3f
      8  fa3f					      IF	[.CYCLES - 2] / 5
      9  fa3f					      REPEAT	.CYCLES / 5
     10  fa3f		       e6 c4		      INC	foo
     11  fa41					      REPEND
     12  fa41				   .CYCLES    SET	.CYCLES % 5
     13  fa41					      ENDIF
     14  fa41
     15  fa41					      IF	.CYCLES % 3 == 1
     16  fa41		       ea		      NOP
     17  fa41				   .CYCLES    SET	.CYCLES - 2
     18  fa42					      ENDIF
     19  fa42
     20  fa42				  -	      REPEAT	.CYCLES / 3
     21  fa42				  -	      STA	DUMP
     22  fa42					      REPEND
     23  fa42
     24  fa42				   .CYCLES    SET	.CYCLES % 3
     25  fa42
     26  fa42					      REPEAT	.CYCLES / 2
     27  fa42		       ea		      NOP
     28  fa43					      REPEND
     29  fa43
     30  fa43				   .CYCLES    SET	.CYCLES % 2
     31  fa43
     32  fa43				  -	      IF	.CYCLES
     33  fa43				  -	      ERR
     34  fa43					      ENDIF
     35  fa43
     15  fa43				  -	      ELSE
     16  fa43				  -	      DELAY	10
     17  fa43					      ENDIF
     18  fa43		       4c 61 fa 	      JMP	.noSprite_ret
     19  fa46
     20  fa46				   .noSprite_2
     21  fa46					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa46					      DELAY	4
      1  fa46				   .CYCLES    SET	4
      2  fa46
      3  fa46				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa46				  -	      NOP
      5  fa46				  -.CYCLES    SET	.CYCLES - 2
      6  fa46					      ENDIF
      7  fa46
      8  fa46				  -	      IF	[.CYCLES - 2] / 5
      9  fa46				  -	      REPEAT	.CYCLES / 5
     10  fa46				  -	      INC	foo
     11  fa46				  -	      REPEND
     12  fa46				  -.CYCLES    SET	.CYCLES % 5
     13  fa46					      ENDIF
     14  fa46
     15  fa46					      IF	.CYCLES % 3 == 1
     16  fa46		       ea		      NOP
     17  fa46				   .CYCLES    SET	.CYCLES - 2
     18  fa47					      ENDIF
     19  fa47
     20  fa47				  -	      REPEAT	.CYCLES / 3
     21  fa47				  -	      STA	DUMP
     22  fa47					      REPEND
     23  fa47
     24  fa47				   .CYCLES    SET	.CYCLES % 3
     25  fa47
     26  fa47					      REPEAT	.CYCLES / 2
     27  fa47		       ea		      NOP
     28  fa48					      REPEND
     29  fa48
     30  fa48				   .CYCLES    SET	.CYCLES % 2
     31  fa48
     32  fa48				  -	      IF	.CYCLES
     33  fa48				  -	      ERR
     34  fa48					      ENDIF
     35  fa48
     23  fa48				  -	      ELSE
     24  fa48				  -	      DELAY	3
     25  fa48					      ENDIF
     26  fa48		       4c 61 fa 	      JMP	.noSprite_ret
     27  fa4b
     28  fa4b				   .loop
     29  fa4b		       a5 b5		      LDA	wallColour
     30  fa4d		       85 02		      STA	WSYNC
     31  fa4f		       85 08		      STA	COLUPF
     32  fa51		       a5 80		      LDA	wall1
     33  fa53		       85 0e		      STA	PF1
     34  fa55		       98		      TYA
     35  fa56				   .branchPoint_1
     36  fa56		       f0 e6		      BEQ	.noSprite_1
     37  fa58		       88		      DEY
     38  fa59		       c4 bc		      CPY	spriteHeight
     39  fa5b				   .branchPoint_2
     40  fa5b		       b0 e9		      BCS	.noSprite_2
     41  fa5d		       b1 c2		      LDA	(sprite),Y
     42  fa5f		       85 1b		      STA	GRP0
     43  fa61				   .noSprite_ret
     44  fa61		       a5 80		      LDA	wall1
     45  fa63		       85 0f		      STA	PF2
      0  fa65					      DELAY	6
      1  fa65				   .CYCLES    SET	6
      2  fa65
      3  fa65				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa65				  -	      NOP
      5  fa65				  -.CYCLES    SET	.CYCLES - 2
      6  fa65					      ENDIF
      7  fa65
      8  fa65				  -	      IF	[.CYCLES - 2] / 5
      9  fa65				  -	      REPEAT	.CYCLES / 5
     10  fa65				  -	      INC	foo
     11  fa65				  -	      REPEND
     12  fa65				  -.CYCLES    SET	.CYCLES % 5
     13  fa65					      ENDIF
     14  fa65
     15  fa65				  -	      IF	.CYCLES % 3 == 1
     16  fa65				  -	      NOP
     17  fa65				  -.CYCLES    SET	.CYCLES - 2
     18  fa65					      ENDIF
     19  fa65
     20  fa65					      REPEAT	.CYCLES / 3
     21  fa65		       85 30		      STA	DUMP
     20  fa65					      REPEND
     21  fa67		       85 30		      STA	DUMP
     22  fa69					      REPEND
     23  fa69
     24  fa69				   .CYCLES    SET	.CYCLES % 3
     25  fa69
     26  fa69				  -	      REPEAT	.CYCLES / 2
     27  fa69				  -	      NOP
     28  fa69					      REPEND
     29  fa69
     30  fa69				   .CYCLES    SET	.CYCLES % 2
     31  fa69
     32  fa69				  -	      IF	.CYCLES
     33  fa69				  -	      ERR
     34  fa69					      ENDIF
     35  fa69
     47  fa69		       85 0d		      STA	PF0
      0  fa6b					      DELAY	19
      1  fa6b				   .CYCLES    SET	19
      2  fa6b
      3  fa6b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa6b				  -	      NOP
      5  fa6b				  -.CYCLES    SET	.CYCLES - 2
      6  fa6b					      ENDIF
      7  fa6b
      8  fa6b					      IF	[.CYCLES - 2] / 5
      9  fa6b					      REPEAT	.CYCLES / 5
     10  fa6b		       e6 c4		      INC	foo
      9  fa6b					      REPEND
     10  fa6d		       e6 c4		      INC	foo
      9  fa6d					      REPEND
     10  fa6f		       e6 c4		      INC	foo
     11  fa71					      REPEND
     12  fa71				   .CYCLES    SET	.CYCLES % 5
     13  fa71					      ENDIF
     14  fa71
     15  fa71					      IF	.CYCLES % 3 == 1
     16  fa71		       ea		      NOP
     17  fa71				   .CYCLES    SET	.CYCLES - 2
     18  fa72					      ENDIF
     19  fa72
     20  fa72				  -	      REPEAT	.CYCLES / 3
     21  fa72				  -	      STA	DUMP
     22  fa72					      REPEND
     23  fa72
     24  fa72				   .CYCLES    SET	.CYCLES % 3
     25  fa72
     26  fa72					      REPEAT	.CYCLES / 2
     27  fa72		       ea		      NOP
     28  fa73					      REPEND
     29  fa73
     30  fa73				   .CYCLES    SET	.CYCLES % 2
     31  fa73
     32  fa73				  -	      IF	.CYCLES
     33  fa73				  -	      ERR
     34  fa73					      ENDIF
     35  fa73
     49  fa73		       a9 00		      LDA	#NULL
     50  fa75		       85 0f		      STA	PF2
     51  fa77		       85 0d		      STA	PF0
     52  fa79
     53  fa79		       85 02		      STA	WSYNC
     54  fa7b		       a5 b6		      LDA	shadowColour
     55  fa7d		       85 08		      STA	COLUPF
     56  fa7f		       a5 9b		      LDA	shadow1a
     57  fa81		       3d 00 f0 	      AND	and_1a,X
     58  fa84		       85 0e		      STA	PF1
     59  fa86		       a5 9c		      LDA	shadow1b
     60  fa88		       3d 1e f0 	      AND	and_1b,X
     61  fa8b		       85 0f		      STA	PF2
      0  fa8d					      DELAY	9
      1  fa8d				   .CYCLES    SET	9
      2  fa8d
      3  fa8d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa8d				  -	      NOP
      5  fa8d				  -.CYCLES    SET	.CYCLES - 2
      6  fa8d					      ENDIF
      7  fa8d
      8  fa8d					      IF	[.CYCLES - 2] / 5
      9  fa8d					      REPEAT	.CYCLES / 5
     10  fa8d		       e6 c4		      INC	foo
     11  fa8f					      REPEND
     12  fa8f				   .CYCLES    SET	.CYCLES % 5
     13  fa8f					      ENDIF
     14  fa8f
     15  fa8f					      IF	.CYCLES % 3 == 1
     16  fa8f		       ea		      NOP
     17  fa8f				   .CYCLES    SET	.CYCLES - 2
     18  fa90					      ENDIF
     19  fa90
     20  fa90				  -	      REPEAT	.CYCLES / 3
     21  fa90				  -	      STA	DUMP
     22  fa90					      REPEND
     23  fa90
     24  fa90				   .CYCLES    SET	.CYCLES % 3
     25  fa90
     26  fa90					      REPEAT	.CYCLES / 2
     27  fa90		       ea		      NOP
     28  fa91					      REPEND
     29  fa91
     30  fa91				   .CYCLES    SET	.CYCLES % 2
     31  fa91
     32  fa91				  -	      IF	.CYCLES
     33  fa91				  -	      ERR
     34  fa91					      ENDIF
     35  fa91
     63  fa91		       a5 9e		      LDA	shadow1d
     64  fa93		       3d 3c f0 	      AND	and_1c,X
     65  fa96		       85 0e		      STA	PF1
     66  fa98		       a5 9f		      LDA	shadow1e
     67  fa9a		       3d 5a f0 	      AND	and_1d,X
     68  fa9d		       85 0f		      STA	PF2
     69  fa9f
     70  fa9f		       a9 00		      LDA	#NULL
     71  faa1		       85 1b		      STA	GRP0
     72  faa3
     73  faa3		       e8		      INX
     74  faa4		       e0 1e		      CPX	#UPPRWALL_S
     75  faa6		       d0 a3		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  faa8					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  faa8							; The second wall and it's first shadow
      2  faa8
      3  faa8				   dc_w2s1    SUBROUTINE
      4  faa8
      5  faa8		       a2 03		      LDX	#PIXH
      6  faaa		       a5 b5		      LDA	wallColour
      0  faac					      DELAY	2
      1  faac				   .CYCLES    SET	2
      2  faac
      3  faac				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faac				  -	      NOP
      5  faac				  -.CYCLES    SET	.CYCLES - 2
      6  faac					      ENDIF
      7  faac
      8  faac				  -	      IF	[.CYCLES - 2] / 5
      9  faac				  -	      REPEAT	.CYCLES / 5
     10  faac				  -	      INC	foo
     11  faac				  -	      REPEND
     12  faac				  -.CYCLES    SET	.CYCLES % 5
     13  faac					      ENDIF
     14  faac
     15  faac				  -	      IF	.CYCLES % 3 == 1
     16  faac				  -	      NOP
     17  faac				  -.CYCLES    SET	.CYCLES - 2
     18  faac					      ENDIF
     19  faac
     20  faac				  -	      REPEAT	.CYCLES / 3
     21  faac				  -	      STA	DUMP
     22  faac					      REPEND
     23  faac
     24  faac				   .CYCLES    SET	.CYCLES % 3
     25  faac
     26  faac					      REPEAT	.CYCLES / 2
     27  faac		       ea		      NOP
     28  faad					      REPEND
     29  faad
     30  faad				   .CYCLES    SET	.CYCLES % 2
     31  faad
     32  faad				  -	      IF	.CYCLES
     33  faad				  -	      ERR
     34  faad					      ENDIF
     35  faad
      8  faad		       4c c1 fa 	      JMP	.joinIn
      9  fab0
     10  fab0				   .noSprite_1
     11  fab0					      IF	>.branchPoint_1 == >.noSprite_1
      0  fab0					      DELAY	11
      1  fab0				   .CYCLES    SET	11
      2  fab0
      3  fab0					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab0		       ea		      NOP
      5  fab0				   .CYCLES    SET	.CYCLES - 2
      6  fab1					      ENDIF
      7  fab1
      8  fab1					      IF	[.CYCLES - 2] / 5
      9  fab1					      REPEAT	.CYCLES / 5
     10  fab1		       e6 c4		      INC	foo
     11  fab3					      REPEND
     12  fab3				   .CYCLES    SET	.CYCLES % 5
     13  fab3					      ENDIF
     14  fab3
     15  fab3					      IF	.CYCLES % 3 == 1
     16  fab3		       ea		      NOP
     17  fab3				   .CYCLES    SET	.CYCLES - 2
     18  fab4					      ENDIF
     19  fab4
     20  fab4				  -	      REPEAT	.CYCLES / 3
     21  fab4				  -	      STA	DUMP
     22  fab4					      REPEND
     23  fab4
     24  fab4				   .CYCLES    SET	.CYCLES % 3
     25  fab4
     26  fab4					      REPEAT	.CYCLES / 2
     27  fab4		       ea		      NOP
     28  fab5					      REPEND
     29  fab5
     30  fab5				   .CYCLES    SET	.CYCLES % 2
     31  fab5
     32  fab5				  -	      IF	.CYCLES
     33  fab5				  -	      ERR
     34  fab5					      ENDIF
     35  fab5
     13  fab5				  -	      ELSE
     14  fab5				  -	      DELAY	10
     15  fab5					      ENDIF
     16  fab5		       4c d3 fa 	      JMP	.noSprite_ret
     17  fab8
     18  fab8				   .noSprite_2
     19  fab8					      IF	>.branchPoint_2 == >.noSprite_2
      0  fab8					      DELAY	4
      1  fab8				   .CYCLES    SET	4
      2  fab8
      3  fab8				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab8				  -	      NOP
      5  fab8				  -.CYCLES    SET	.CYCLES - 2
      6  fab8					      ENDIF
      7  fab8
      8  fab8				  -	      IF	[.CYCLES - 2] / 5
      9  fab8				  -	      REPEAT	.CYCLES / 5
     10  fab8				  -	      INC	foo
     11  fab8				  -	      REPEND
     12  fab8				  -.CYCLES    SET	.CYCLES % 5
     13  fab8					      ENDIF
     14  fab8
     15  fab8					      IF	.CYCLES % 3 == 1
     16  fab8		       ea		      NOP
     17  fab8				   .CYCLES    SET	.CYCLES - 2
     18  fab9					      ENDIF
     19  fab9
     20  fab9				  -	      REPEAT	.CYCLES / 3
     21  fab9				  -	      STA	DUMP
     22  fab9					      REPEND
     23  fab9
     24  fab9				   .CYCLES    SET	.CYCLES % 3
     25  fab9
     26  fab9					      REPEAT	.CYCLES / 2
     27  fab9		       ea		      NOP
     28  faba					      REPEND
     29  faba
     30  faba				   .CYCLES    SET	.CYCLES % 2
     31  faba
     32  faba				  -	      IF	.CYCLES
     33  faba				  -	      ERR
     34  faba					      ENDIF
     35  faba
     21  faba				  -	      ELSE
     22  faba				  -	      DELAY	3
     23  faba					      ENDIF
     24  faba		       4c d3 fa 	      JMP	.noSprite_ret
     25  fabd
     26  fabd				   .loop
     27  fabd		       a5 b5		      LDA	wallColour
     28  fabf		       85 02		      STA	WSYNC
     29  fac1				   .joinIn
     30  fac1		       85 08		      STA	COLUPF
     31  fac3		       a5 85		      LDA	wall2a
     32  fac5		       85 0e		      STA	PF1
     33  fac7		       98		      TYA
     34  fac8				   .branchPoint_1
     35  fac8		       f0 e6		      BEQ	.noSprite_1
     36  faca		       88		      DEY
     37  facb		       c4 bc		      CPY	spriteHeight
     38  facd				   .branchPoint_2
     39  facd		       b0 e9		      BCS	.noSprite_2
     40  facf		       b1 c2		      LDA	(sprite),Y
     41  fad1		       85 1b		      STA	GRP0
     42  fad3				   .noSprite_ret
     43  fad3		       a5 86		      LDA	wall2b
     44  fad5		       85 0f		      STA	PF2
     45  fad7
     46  fad7		       a5 87		      LDA	wall2c
     47  fad9		       85 0d		      STA	PF0
     48  fadb		       a5 88		      LDA	wall2d
     49  fadd		       85 0e		      STA	PF1
     50  fadf		       a5 89		      LDA	wall2e
     51  fae1		       85 0f		      STA	PF2
     52  fae3		       a9 00		      LDA	#NULL
      0  fae5					      DELAY	10
      1  fae5				   .CYCLES    SET	10
      2  fae5
      3  fae5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fae5				  -	      NOP
      5  fae5				  -.CYCLES    SET	.CYCLES - 2
      6  fae5					      ENDIF
      7  fae5
      8  fae5					      IF	[.CYCLES - 2] / 5
      9  fae5					      REPEAT	.CYCLES / 5
     10  fae5		       e6 c4		      INC	foo
      9  fae5					      REPEND
     10  fae7		       e6 c4		      INC	foo
     11  fae9					      REPEND
     12  fae9				   .CYCLES    SET	.CYCLES % 5
     13  fae9					      ENDIF
     14  fae9
     15  fae9				  -	      IF	.CYCLES % 3 == 1
     16  fae9				  -	      NOP
     17  fae9				  -.CYCLES    SET	.CYCLES - 2
     18  fae9					      ENDIF
     19  fae9
     20  fae9				  -	      REPEAT	.CYCLES / 3
     21  fae9				  -	      STA	DUMP
     22  fae9					      REPEND
     23  fae9
     24  fae9				   .CYCLES    SET	.CYCLES % 3
     25  fae9
     26  fae9				  -	      REPEAT	.CYCLES / 2
     27  fae9				  -	      NOP
     28  fae9					      REPEND
     29  fae9
     30  fae9				   .CYCLES    SET	.CYCLES % 2
     31  fae9
     32  fae9				  -	      IF	.CYCLES
     33  fae9				  -	      ERR
     34  fae9					      ENDIF
     35  fae9
     54  fae9		       85 0f		      STA	PF2
     55  faeb		       85 0d		      STA	PF0
     56  faed
     57  faed		       85 02		      STA	WSYNC	; Draw the shadow
     58  faef		       a5 b6		      LDA	shadowColour
     59  faf1		       85 08		      STA	COLUPF
     60  faf3		       a5 91		      LDA	shadow2aa
     61  faf5		       05 9b		      ORA	shadow1a
     62  faf7		       85 0e		      STA	PF1
     63  faf9		       a5 92		      LDA	shadow2ba
     64  fafb		       05 9c		      ORA	shadow1b
     65  fafd		       85 0f		      STA	PF2
     66  faff		       a5 93		      LDA	shadow2ca
     67  fb01		       85 0d		      STA	PF0
     68  fb03		       a5 94		      LDA	shadow2da
     69  fb05		       05 9e		      ORA	shadow1d
     70  fb07		       85 0e		      STA	PF1
     71  fb09		       a5 95		      LDA	shadow2ea
     72  fb0b		       05 9f		      ORA	shadow1e
     73  fb0d		       85 0f		      STA	PF2
     74  fb0f		       a9 00		      LDA	#NULL
     75  fb11		       85 0d		      STA	PF0
     76  fb13
     77  fb13		       ca		      DEX
     78  fb14		       d0 a7		      BNE	.loop
     79  fb16
     80  fb16		       50 03		      BVC	dc_w2s2_delayed
     81  fb18		       4c e5 fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fb1b					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fb1b							; The second wall and it's second shadow
      2  fb1b
      3  fb1b				   dc_w2s2_delayed
      0  fb1b					      DELAY	2
      1  fb1b				   .CYCLES    SET	2
      2  fb1b
      3  fb1b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb1b				  -	      NOP
      5  fb1b				  -.CYCLES    SET	.CYCLES - 2
      6  fb1b					      ENDIF
      7  fb1b
      8  fb1b				  -	      IF	[.CYCLES - 2] / 5
      9  fb1b				  -	      REPEAT	.CYCLES / 5
     10  fb1b				  -	      INC	foo
     11  fb1b				  -	      REPEND
     12  fb1b				  -.CYCLES    SET	.CYCLES % 5
     13  fb1b					      ENDIF
     14  fb1b
     15  fb1b				  -	      IF	.CYCLES % 3 == 1
     16  fb1b				  -	      NOP
     17  fb1b				  -.CYCLES    SET	.CYCLES - 2
     18  fb1b					      ENDIF
     19  fb1b
     20  fb1b				  -	      REPEAT	.CYCLES / 3
     21  fb1b				  -	      STA	DUMP
     22  fb1b					      REPEND
     23  fb1b
     24  fb1b				   .CYCLES    SET	.CYCLES % 3
     25  fb1b
     26  fb1b					      REPEAT	.CYCLES / 2
     27  fb1b		       ea		      NOP
     28  fb1c					      REPEND
     29  fb1c
     30  fb1c				   .CYCLES    SET	.CYCLES % 2
     31  fb1c
     32  fb1c				  -	      IF	.CYCLES
     33  fb1c				  -	      ERR
     34  fb1c					      ENDIF
     35  fb1c
      5  fb1c				   dc_w2s2    SUBROUTINE
      6  fb1c
      7  fb1c		       a2 03		      LDX	#PIXH
      8  fb1e
      9  fb1e				   .loop
     10  fb1e		       a5 b5		      LDA	wallColour
     11  fb20		       85 02		      STA	WSYNC
     12  fb22		       85 08		      STA	COLUPF
     13  fb24		       a5 85		      LDA	wall2a
     14  fb26		       85 0e		      STA	PF1
     15  fb28		       98		      TYA
     16  fb29				   .branchPoint_1
     17  fb29		       f0 53		      BEQ	.noSprite_1
     18  fb2b		       88		      DEY
     19  fb2c		       c4 bc		      CPY	spriteHeight
     20  fb2e				   .branchPoint_2
     21  fb2e		       b0 56		      BCS	.noSprite_2
     22  fb30		       b1 c2		      LDA	(sprite),Y
     23  fb32		       85 1b		      STA	GRP0
     24  fb34				   .noSprite_ret
     25  fb34		       a5 86		      LDA	wall2b
     26  fb36		       85 0f		      STA	PF2
     27  fb38
     28  fb38		       a5 87		      LDA	wall2c
     29  fb3a		       85 0d		      STA	PF0
     30  fb3c		       a5 88		      LDA	wall2d
     31  fb3e		       85 0e		      STA	PF1
     32  fb40		       a5 89		      LDA	wall2e
     33  fb42		       85 0f		      STA	PF2
     34  fb44		       a9 00		      LDA	#NULL
      0  fb46					      DELAY	10
      1  fb46				   .CYCLES    SET	10
      2  fb46
      3  fb46				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb46				  -	      NOP
      5  fb46				  -.CYCLES    SET	.CYCLES - 2
      6  fb46					      ENDIF
      7  fb46
      8  fb46					      IF	[.CYCLES - 2] / 5
      9  fb46					      REPEAT	.CYCLES / 5
     10  fb46		       e6 c4		      INC	foo
      9  fb46					      REPEND
     10  fb48		       e6 c4		      INC	foo
     11  fb4a					      REPEND
     12  fb4a				   .CYCLES    SET	.CYCLES % 5
     13  fb4a					      ENDIF
     14  fb4a
     15  fb4a				  -	      IF	.CYCLES % 3 == 1
     16  fb4a				  -	      NOP
     17  fb4a				  -.CYCLES    SET	.CYCLES - 2
     18  fb4a					      ENDIF
     19  fb4a
     20  fb4a				  -	      REPEAT	.CYCLES / 3
     21  fb4a				  -	      STA	DUMP
     22  fb4a					      REPEND
     23  fb4a
     24  fb4a				   .CYCLES    SET	.CYCLES % 3
     25  fb4a
     26  fb4a				  -	      REPEAT	.CYCLES / 2
     27  fb4a				  -	      NOP
     28  fb4a					      REPEND
     29  fb4a
     30  fb4a				   .CYCLES    SET	.CYCLES % 2
     31  fb4a
     32  fb4a				  -	      IF	.CYCLES
     33  fb4a				  -	      ERR
     34  fb4a					      ENDIF
     35  fb4a
     36  fb4a		       85 0f		      STA	PF2
     37  fb4c		       85 0d		      STA	PF0
     38  fb4e
     39  fb4e		       85 02		      STA	WSYNC	; Draw the shadow
     40  fb50		       a5 b6		      LDA	shadowColour
     41  fb52		       85 08		      STA	COLUPF
     42  fb54		       a5 a0		      LDA	shadow2ab
     43  fb56		       05 9b		      ORA	shadow1a
     44  fb58		       85 0e		      STA	PF1
     45  fb5a		       a5 a1		      LDA	shadow2bb
     46  fb5c		       05 9c		      ORA	shadow1b
     47  fb5e		       85 0f		      STA	PF2
     48  fb60		       a5 a2		      LDA	shadow2cb
     49  fb62		       85 0d		      STA	PF0
     50  fb64		       a5 a3		      LDA	shadow2db
     51  fb66		       05 9e		      ORA	shadow1d
     52  fb68		       85 0e		      STA	PF1
     53  fb6a		       a5 a4		      LDA	shadow2eb
     54  fb6c		       05 9f		      ORA	shadow1e
     55  fb6e		       85 0f		      STA	PF2
     56  fb70		       a9 00		      LDA	#NULL
     57  fb72		       85 0d		      STA	PF0
     58  fb74
     59  fb74		       ca		      DEX
     60  fb75		       d0 a7		      BNE	.loop
     61  fb77
     62  fb77		       50 12		      BVC	dc_w3s1_delayed
      0  fb79					      DELAY	4
      1  fb79				   .CYCLES    SET	4
      2  fb79
      3  fb79				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb79				  -	      NOP
      5  fb79				  -.CYCLES    SET	.CYCLES - 2
      6  fb79					      ENDIF
      7  fb79
      8  fb79				  -	      IF	[.CYCLES - 2] / 5
      9  fb79				  -	      REPEAT	.CYCLES / 5
     10  fb79				  -	      INC	foo
     11  fb79				  -	      REPEND
     12  fb79				  -.CYCLES    SET	.CYCLES % 5
     13  fb79					      ENDIF
     14  fb79
     15  fb79					      IF	.CYCLES % 3 == 1
     16  fb79		       ea		      NOP
     17  fb79				   .CYCLES    SET	.CYCLES - 2
     18  fb7a					      ENDIF
     19  fb7a
     20  fb7a				  -	      REPEAT	.CYCLES / 3
     21  fb7a				  -	      STA	DUMP
     22  fb7a					      REPEND
     23  fb7a
     24  fb7a				   .CYCLES    SET	.CYCLES % 3
     25  fb7a
     26  fb7a					      REPEAT	.CYCLES / 2
     27  fb7a		       ea		      NOP
     28  fb7b					      REPEND
     29  fb7b
     30  fb7b				   .CYCLES    SET	.CYCLES % 2
     31  fb7b
     32  fb7b				  -	      IF	.CYCLES
     33  fb7b				  -	      ERR
     34  fb7b					      ENDIF
     35  fb7b
     64  fb7b		       4c a8 fa 	      JMP	dc_w2s1
     65  fb7e
     66  fb7e				   .noSprite_1
     67  fb7e					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb7e					      DELAY	11
      1  fb7e				   .CYCLES    SET	11
      2  fb7e
      3  fb7e					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb7e		       ea		      NOP
      5  fb7e				   .CYCLES    SET	.CYCLES - 2
      6  fb7f					      ENDIF
      7  fb7f
      8  fb7f					      IF	[.CYCLES - 2] / 5
      9  fb7f					      REPEAT	.CYCLES / 5
     10  fb7f		       e6 c4		      INC	foo
     11  fb81					      REPEND
     12  fb81				   .CYCLES    SET	.CYCLES % 5
     13  fb81					      ENDIF
     14  fb81
     15  fb81					      IF	.CYCLES % 3 == 1
     16  fb81		       ea		      NOP
     17  fb81				   .CYCLES    SET	.CYCLES - 2
     18  fb82					      ENDIF
     19  fb82
     20  fb82				  -	      REPEAT	.CYCLES / 3
     21  fb82				  -	      STA	DUMP
     22  fb82					      REPEND
     23  fb82
     24  fb82				   .CYCLES    SET	.CYCLES % 3
     25  fb82
     26  fb82					      REPEAT	.CYCLES / 2
     27  fb82		       ea		      NOP
     28  fb83					      REPEND
     29  fb83
     30  fb83				   .CYCLES    SET	.CYCLES % 2
     31  fb83
     32  fb83				  -	      IF	.CYCLES
     33  fb83				  -	      ERR
     34  fb83					      ENDIF
     35  fb83
     69  fb83				  -	      ELSE
     70  fb83				  -	      DELAY	10
     71  fb83					      ENDIF
     72  fb83		       4c 34 fb 	      JMP	.noSprite_ret
     73  fb86
     74  fb86				   .noSprite_2
     75  fb86					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb86					      DELAY	4
      1  fb86				   .CYCLES    SET	4
      2  fb86
      3  fb86				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb86				  -	      NOP
      5  fb86				  -.CYCLES    SET	.CYCLES - 2
      6  fb86					      ENDIF
      7  fb86
      8  fb86				  -	      IF	[.CYCLES - 2] / 5
      9  fb86				  -	      REPEAT	.CYCLES / 5
     10  fb86				  -	      INC	foo
     11  fb86				  -	      REPEND
     12  fb86				  -.CYCLES    SET	.CYCLES % 5
     13  fb86					      ENDIF
     14  fb86
     15  fb86					      IF	.CYCLES % 3 == 1
     16  fb86		       ea		      NOP
     17  fb86				   .CYCLES    SET	.CYCLES - 2
     18  fb87					      ENDIF
     19  fb87
     20  fb87				  -	      REPEAT	.CYCLES / 3
     21  fb87				  -	      STA	DUMP
     22  fb87					      REPEND
     23  fb87
     24  fb87				   .CYCLES    SET	.CYCLES % 3
     25  fb87
     26  fb87					      REPEAT	.CYCLES / 2
     27  fb87		       ea		      NOP
     28  fb88					      REPEND
     29  fb88
     30  fb88				   .CYCLES    SET	.CYCLES % 2
     31  fb88
     32  fb88				  -	      IF	.CYCLES
     33  fb88				  -	      ERR
     34  fb88					      ENDIF
     35  fb88
     77  fb88				  -	      ELSE
     78  fb88				  -	      DELAY	3
     79  fb88					      ENDIF
     80  fb88		       4c 34 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb8b					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb8b							; The third wall and it's first shadow
      2  fb8b
      3  fb8b				   dc_w3s1_delayed
      0  fb8b					      DELAY	2
      1  fb8b				   .CYCLES    SET	2
      2  fb8b
      3  fb8b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb8b				  -	      NOP
      5  fb8b				  -.CYCLES    SET	.CYCLES - 2
      6  fb8b					      ENDIF
      7  fb8b
      8  fb8b				  -	      IF	[.CYCLES - 2] / 5
      9  fb8b				  -	      REPEAT	.CYCLES / 5
     10  fb8b				  -	      INC	foo
     11  fb8b				  -	      REPEND
     12  fb8b				  -.CYCLES    SET	.CYCLES % 5
     13  fb8b					      ENDIF
     14  fb8b
     15  fb8b				  -	      IF	.CYCLES % 3 == 1
     16  fb8b				  -	      NOP
     17  fb8b				  -.CYCLES    SET	.CYCLES - 2
     18  fb8b					      ENDIF
     19  fb8b
     20  fb8b				  -	      REPEAT	.CYCLES / 3
     21  fb8b				  -	      STA	DUMP
     22  fb8b					      REPEND
     23  fb8b
     24  fb8b				   .CYCLES    SET	.CYCLES % 3
     25  fb8b
     26  fb8b					      REPEAT	.CYCLES / 2
     27  fb8b		       ea		      NOP
     28  fb8c					      REPEND
     29  fb8c
     30  fb8c				   .CYCLES    SET	.CYCLES % 2
     31  fb8c
     32  fb8c				  -	      IF	.CYCLES
     33  fb8c				  -	      ERR
     34  fb8c					      ENDIF
     35  fb8c
      5  fb8c				   dc_w3s1    SUBROUTINE
      6  fb8c
      7  fb8c		       a2 03		      LDX	#PIXH
      8  fb8e
      9  fb8e				   .loop
     10  fb8e		       a5 b5		      LDA	wallColour
     11  fb90		       85 02		      STA	WSYNC
     12  fb92		       85 08		      STA	COLUPF
     13  fb94		       a5 8a		      LDA	wall3a
     14  fb96		       85 0e		      STA	PF1
     15  fb98		       98		      TYA
     16  fb99				   .branchPoint_1
     17  fb99		       f0 53		      BEQ	.noSprite_1
     18  fb9b		       88		      DEY
     19  fb9c		       c4 bc		      CPY	spriteHeight
     20  fb9e				   .branchPoint_2
     21  fb9e		       b0 56		      BCS	.noSprite_2
     22  fba0		       b1 c2		      LDA	(sprite),Y
     23  fba2		       85 1b		      STA	GRP0
     24  fba4				   .noSprite_ret
     25  fba4		       a5 8b		      LDA	wall3b
     26  fba6		       85 0f		      STA	PF2
     27  fba8
     28  fba8		       a5 8c		      LDA	wall3c
     29  fbaa		       85 0d		      STA	PF0
     30  fbac		       a5 8d		      LDA	wall3d
     31  fbae		       85 0e		      STA	PF1
     32  fbb0		       a5 8e		      LDA	wall3e
     33  fbb2		       85 0f		      STA	PF2
     34  fbb4		       a9 00		      LDA	#NULL
      0  fbb6					      DELAY	10
      1  fbb6				   .CYCLES    SET	10
      2  fbb6
      3  fbb6				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbb6				  -	      NOP
      5  fbb6				  -.CYCLES    SET	.CYCLES - 2
      6  fbb6					      ENDIF
      7  fbb6
      8  fbb6					      IF	[.CYCLES - 2] / 5
      9  fbb6					      REPEAT	.CYCLES / 5
     10  fbb6		       e6 c4		      INC	foo
      9  fbb6					      REPEND
     10  fbb8		       e6 c4		      INC	foo
     11  fbba					      REPEND
     12  fbba				   .CYCLES    SET	.CYCLES % 5
     13  fbba					      ENDIF
     14  fbba
     15  fbba				  -	      IF	.CYCLES % 3 == 1
     16  fbba				  -	      NOP
     17  fbba				  -.CYCLES    SET	.CYCLES - 2
     18  fbba					      ENDIF
     19  fbba
     20  fbba				  -	      REPEAT	.CYCLES / 3
     21  fbba				  -	      STA	DUMP
     22  fbba					      REPEND
     23  fbba
     24  fbba				   .CYCLES    SET	.CYCLES % 3
     25  fbba
     26  fbba				  -	      REPEAT	.CYCLES / 2
     27  fbba				  -	      NOP
     28  fbba					      REPEND
     29  fbba
     30  fbba				   .CYCLES    SET	.CYCLES % 2
     31  fbba
     32  fbba				  -	      IF	.CYCLES
     33  fbba				  -	      ERR
     34  fbba					      ENDIF
     35  fbba
     36  fbba		       85 0f		      STA	PF2
     37  fbbc		       85 0d		      STA	PF0
     38  fbbe
     39  fbbe		       85 02		      STA	WSYNC	; Draw the shadow
     40  fbc0		       a5 b6		      LDA	shadowColour
     41  fbc2		       85 08		      STA	COLUPF
     42  fbc4		       a5 96		      LDA	shadow3aa
     43  fbc6		       05 a0		      ORA	shadow2ab
     44  fbc8		       85 0e		      STA	PF1
     45  fbca		       a5 97		      LDA	shadow3ba
     46  fbcc		       05 a1		      ORA	shadow2bb
     47  fbce		       85 0f		      STA	PF2
     48  fbd0		       a5 98		      LDA	shadow3ca
     49  fbd2		       05 a2		      ORA	shadow2cb
     50  fbd4		       85 0d		      STA	PF0
     51  fbd6		       a5 99		      LDA	shadow3da
     52  fbd8		       05 a3		      ORA	shadow2db
     53  fbda		       85 0e		      STA	PF1
     54  fbdc		       a5 9a		      LDA	shadow3ea
     55  fbde		       05 a4		      ORA	shadow2eb
     56  fbe0		       85 0f		      STA	PF2
     57  fbe2		       a9 00		      LDA	#NULL
     58  fbe4		       85 0d		      STA	PF0
     59  fbe6
     60  fbe6		       ca		      DEX
     61  fbe7		       d0 a5		      BNE	.loop
     62  fbe9
     63  fbe9		       50 10		      BVC	dc_w3s2_delayed
     64  fbeb		       4c 1c fb 	      JMP	dc_w2s2
     65  fbee
     66  fbee				   .noSprite_1
     67  fbee					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbee					      DELAY	11
      1  fbee				   .CYCLES    SET	11
      2  fbee
      3  fbee					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbee		       ea		      NOP
      5  fbee				   .CYCLES    SET	.CYCLES - 2
      6  fbef					      ENDIF
      7  fbef
      8  fbef					      IF	[.CYCLES - 2] / 5
      9  fbef					      REPEAT	.CYCLES / 5
     10  fbef		       e6 c4		      INC	foo
     11  fbf1					      REPEND
     12  fbf1				   .CYCLES    SET	.CYCLES % 5
     13  fbf1					      ENDIF
     14  fbf1
     15  fbf1					      IF	.CYCLES % 3 == 1
     16  fbf1		       ea		      NOP
     17  fbf1				   .CYCLES    SET	.CYCLES - 2
     18  fbf2					      ENDIF
     19  fbf2
     20  fbf2				  -	      REPEAT	.CYCLES / 3
     21  fbf2				  -	      STA	DUMP
     22  fbf2					      REPEND
     23  fbf2
     24  fbf2				   .CYCLES    SET	.CYCLES % 3
     25  fbf2
     26  fbf2					      REPEAT	.CYCLES / 2
     27  fbf2		       ea		      NOP
     28  fbf3					      REPEND
     29  fbf3
     30  fbf3				   .CYCLES    SET	.CYCLES % 2
     31  fbf3
     32  fbf3				  -	      IF	.CYCLES
     33  fbf3				  -	      ERR
     34  fbf3					      ENDIF
     35  fbf3
     69  fbf3				  -	      ELSE
     70  fbf3				  -	      DELAY	10
     71  fbf3					      ENDIF
     72  fbf3		       4c a4 fb 	      JMP	.noSprite_ret
     73  fbf6
     74  fbf6				   .noSprite_2
     75  fbf6					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbf6					      DELAY	3
      1  fbf6				   .CYCLES    SET	3
      2  fbf6
      3  fbf6				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbf6				  -	      NOP
      5  fbf6				  -.CYCLES    SET	.CYCLES - 2
      6  fbf6					      ENDIF
      7  fbf6
      8  fbf6				  -	      IF	[.CYCLES - 2] / 5
      9  fbf6				  -	      REPEAT	.CYCLES / 5
     10  fbf6				  -	      INC	foo
     11  fbf6				  -	      REPEND
     12  fbf6				  -.CYCLES    SET	.CYCLES % 5
     13  fbf6					      ENDIF
     14  fbf6
     15  fbf6				  -	      IF	.CYCLES % 3 == 1
     16  fbf6				  -	      NOP
     17  fbf6				  -.CYCLES    SET	.CYCLES - 2
     18  fbf6					      ENDIF
     19  fbf6
     20  fbf6					      REPEAT	.CYCLES / 3
     21  fbf6		       85 30		      STA	DUMP
     22  fbf8					      REPEND
     23  fbf8
     24  fbf8				   .CYCLES    SET	.CYCLES % 3
     25  fbf8
     26  fbf8				  -	      REPEAT	.CYCLES / 2
     27  fbf8				  -	      NOP
     28  fbf8					      REPEND
     29  fbf8
     30  fbf8				   .CYCLES    SET	.CYCLES % 2
     31  fbf8
     32  fbf8				  -	      IF	.CYCLES
     33  fbf8				  -	      ERR
     34  fbf8					      ENDIF
     35  fbf8
     77  fbf8				  -	      ELSE
     78  fbf8				  -	      DELAY	4
     79  fbf8					      ENDIF
     80  fbf8		       4c a4 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fbfb					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fbfb							; The third wall and it's second shadow
      2  fbfb
      3  fbfb				   dc_w3s2_delayed
      0  fbfb					      DELAY	2
      1  fbfb				   .CYCLES    SET	2
      2  fbfb
      3  fbfb				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbfb				  -	      NOP
      5  fbfb				  -.CYCLES    SET	.CYCLES - 2
      6  fbfb					      ENDIF
      7  fbfb
      8  fbfb				  -	      IF	[.CYCLES - 2] / 5
      9  fbfb				  -	      REPEAT	.CYCLES / 5
     10  fbfb				  -	      INC	foo
     11  fbfb				  -	      REPEND
     12  fbfb				  -.CYCLES    SET	.CYCLES % 5
     13  fbfb					      ENDIF
     14  fbfb
     15  fbfb				  -	      IF	.CYCLES % 3 == 1
     16  fbfb				  -	      NOP
     17  fbfb				  -.CYCLES    SET	.CYCLES - 2
     18  fbfb					      ENDIF
     19  fbfb
     20  fbfb				  -	      REPEAT	.CYCLES / 3
     21  fbfb				  -	      STA	DUMP
     22  fbfb					      REPEND
     23  fbfb
     24  fbfb				   .CYCLES    SET	.CYCLES % 3
     25  fbfb
     26  fbfb					      REPEAT	.CYCLES / 2
     27  fbfb		       ea		      NOP
     28  fbfc					      REPEND
     29  fbfc
     30  fbfc				   .CYCLES    SET	.CYCLES % 2
     31  fbfc
     32  fbfc				  -	      IF	.CYCLES
     33  fbfc				  -	      ERR
     34  fbfc					      ENDIF
     35  fbfc
      5  fbfc				   dc_w3s2    SUBROUTINE
      6  fbfc
      7  fbfc		       a2 03		      LDX	#PIXH
      8  fbfe
      9  fbfe				   .loop
     10  fbfe		       a5 b5		      LDA	wallColour
     11  fc00		       85 02		      STA	WSYNC
     12  fc02				   .joinIn
     13  fc02		       85 08		      STA	COLUPF
     14  fc04		       a5 8a		      LDA	wall3a
     15  fc06		       85 0e		      STA	PF1
     16  fc08		       98		      TYA
     17  fc09				   .branchPoint_1
     18  fc09		       f0 53		      BEQ	.noSprite_1
     19  fc0b		       88		      DEY
     20  fc0c		       c4 bc		      CPY	spriteHeight
     21  fc0e				   .branchPoint_2
     22  fc0e		       b0 56		      BCS	.noSprite_2
     23  fc10		       b1 c2		      LDA	(sprite),Y
     24  fc12		       85 1b		      STA	GRP0
     25  fc14				   .noSprite_ret
     26  fc14		       a5 8b		      LDA	wall3b
     27  fc16		       85 0f		      STA	PF2
     28  fc18
     29  fc18		       a5 8c		      LDA	wall3c
     30  fc1a		       85 0d		      STA	PF0
     31  fc1c		       a5 8d		      LDA	wall3d
     32  fc1e		       85 0e		      STA	PF1
     33  fc20		       a5 8e		      LDA	wall3e
     34  fc22		       85 0f		      STA	PF2
     35  fc24		       a9 00		      LDA	#NULL
      0  fc26					      DELAY	10
      1  fc26				   .CYCLES    SET	10
      2  fc26
      3  fc26				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc26				  -	      NOP
      5  fc26				  -.CYCLES    SET	.CYCLES - 2
      6  fc26					      ENDIF
      7  fc26
      8  fc26					      IF	[.CYCLES - 2] / 5
      9  fc26					      REPEAT	.CYCLES / 5
     10  fc26		       e6 c4		      INC	foo
      9  fc26					      REPEND
     10  fc28		       e6 c4		      INC	foo
     11  fc2a					      REPEND
     12  fc2a				   .CYCLES    SET	.CYCLES % 5
     13  fc2a					      ENDIF
     14  fc2a
     15  fc2a				  -	      IF	.CYCLES % 3 == 1
     16  fc2a				  -	      NOP
     17  fc2a				  -.CYCLES    SET	.CYCLES - 2
     18  fc2a					      ENDIF
     19  fc2a
     20  fc2a				  -	      REPEAT	.CYCLES / 3
     21  fc2a				  -	      STA	DUMP
     22  fc2a					      REPEND
     23  fc2a
     24  fc2a				   .CYCLES    SET	.CYCLES % 3
     25  fc2a
     26  fc2a				  -	      REPEAT	.CYCLES / 2
     27  fc2a				  -	      NOP
     28  fc2a					      REPEND
     29  fc2a
     30  fc2a				   .CYCLES    SET	.CYCLES % 2
     31  fc2a
     32  fc2a				  -	      IF	.CYCLES
     33  fc2a				  -	      ERR
     34  fc2a					      ENDIF
     35  fc2a
     37  fc2a		       85 0f		      STA	PF2
     38  fc2c		       85 0d		      STA	PF0
     39  fc2e
     40  fc2e		       85 02		      STA	WSYNC	; Draw the shadow
     41  fc30		       a5 b6		      LDA	shadowColour
     42  fc32		       85 08		      STA	COLUPF
     43  fc34		       a5 a5		      LDA	shadow3ab
     44  fc36		       05 a0		      ORA	shadow2ab
     45  fc38		       85 0e		      STA	PF1
     46  fc3a		       a5 a6		      LDA	shadow3bb
     47  fc3c		       05 a1		      ORA	shadow2bb
     48  fc3e		       85 0f		      STA	PF2
     49  fc40		       a5 a7		      LDA	shadow3cb
     50  fc42		       05 a2		      ORA	shadow2cb
     51  fc44		       85 0d		      STA	PF0
     52  fc46		       a5 a8		      LDA	shadow3db
     53  fc48		       05 a3		      ORA	shadow2db
     54  fc4a		       85 0e		      STA	PF1
     55  fc4c		       a5 a9		      LDA	shadow3eb
     56  fc4e		       05 a4		      ORA	shadow2eb
     57  fc50		       85 0f		      STA	PF2
     58  fc52		       a9 00		      LDA	#NULL
     59  fc54		       85 0d		      STA	PF0
     60  fc56
     61  fc56		       ca		      DEX
     62  fc57		       d0 a5		      BNE	.loop
     63  fc59
     64  fc59		       50 10		      BVC	dc_w4s0_delayed
     65  fc5b		       4c 8c fb 	      JMP	dc_w3s1
     66  fc5e
     67  fc5e				   .noSprite_1
     68  fc5e					      IF	>.branchPoint_1 == >.noSprite_1
      0  fc5e					      DELAY	11
      1  fc5e				   .CYCLES    SET	11
      2  fc5e
      3  fc5e					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc5e		       ea		      NOP
      5  fc5e				   .CYCLES    SET	.CYCLES - 2
      6  fc5f					      ENDIF
      7  fc5f
      8  fc5f					      IF	[.CYCLES - 2] / 5
      9  fc5f					      REPEAT	.CYCLES / 5
     10  fc5f		       e6 c4		      INC	foo
     11  fc61					      REPEND
     12  fc61				   .CYCLES    SET	.CYCLES % 5
     13  fc61					      ENDIF
     14  fc61
     15  fc61					      IF	.CYCLES % 3 == 1
     16  fc61		       ea		      NOP
     17  fc61				   .CYCLES    SET	.CYCLES - 2
     18  fc62					      ENDIF
     19  fc62
     20  fc62				  -	      REPEAT	.CYCLES / 3
     21  fc62				  -	      STA	DUMP
     22  fc62					      REPEND
     23  fc62
     24  fc62				   .CYCLES    SET	.CYCLES % 3
     25  fc62
     26  fc62					      REPEAT	.CYCLES / 2
     27  fc62		       ea		      NOP
     28  fc63					      REPEND
     29  fc63
     30  fc63				   .CYCLES    SET	.CYCLES % 2
     31  fc63
     32  fc63				  -	      IF	.CYCLES
     33  fc63				  -	      ERR
     34  fc63					      ENDIF
     35  fc63
     70  fc63				  -	      ELSE
     71  fc63				  -	      DELAY	10
     72  fc63					      ENDIF
     73  fc63		       4c 14 fc 	      JMP	.noSprite_ret
     74  fc66
     75  fc66				   .noSprite_2
     76  fc66					      IF	>.branchPoint_2 == >.noSprite_2
      0  fc66					      DELAY	4
      1  fc66				   .CYCLES    SET	4
      2  fc66
      3  fc66				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc66				  -	      NOP
      5  fc66				  -.CYCLES    SET	.CYCLES - 2
      6  fc66					      ENDIF
      7  fc66
      8  fc66				  -	      IF	[.CYCLES - 2] / 5
      9  fc66				  -	      REPEAT	.CYCLES / 5
     10  fc66				  -	      INC	foo
     11  fc66				  -	      REPEND
     12  fc66				  -.CYCLES    SET	.CYCLES % 5
     13  fc66					      ENDIF
     14  fc66
     15  fc66					      IF	.CYCLES % 3 == 1
     16  fc66		       ea		      NOP
     17  fc66				   .CYCLES    SET	.CYCLES - 2
     18  fc67					      ENDIF
     19  fc67
     20  fc67				  -	      REPEAT	.CYCLES / 3
     21  fc67				  -	      STA	DUMP
     22  fc67					      REPEND
     23  fc67
     24  fc67				   .CYCLES    SET	.CYCLES % 3
     25  fc67
     26  fc67					      REPEAT	.CYCLES / 2
     27  fc67		       ea		      NOP
     28  fc68					      REPEND
     29  fc68
     30  fc68				   .CYCLES    SET	.CYCLES % 2
     31  fc68
     32  fc68				  -	      IF	.CYCLES
     33  fc68				  -	      ERR
     34  fc68					      ENDIF
     35  fc68
     78  fc68				  -	      ELSE
     79  fc68				  -	      DELAY	3
     80  fc68					      ENDIF
     81  fc68		       4c 14 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc6b					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc6b							; The fourth wall
      2  fc6b
      3  fc6b				   dc_w4s0_delayed
      4  fc6b		       4c 72 fc 	      JMP	dc_w4s0
      5  fc6e
      6  fc6e				   dc_w4s0_switch
      7  fc6e		       a9 7f		      LDA	#$7F
      8  fc70		       69 01		      ADC	#$01
      9  fc72
     10  fc72				   dc_w4s0    SUBROUTINE
     11  fc72
     12  fc72		       a2 03		      LDX	#PIXH
     13  fc74
     14  fc74				   .loop
     15  fc74		       a5 b5		      LDA	wallColour
     16  fc76		       85 02		      STA	WSYNC
     17  fc78				   .joinIn
     18  fc78		       85 08		      STA	COLUPF
     19  fc7a		       a5 8f		      LDA	wall4a
     20  fc7c		       85 0e		      STA	PF1
     21  fc7e		       98		      TYA
     22  fc7f				   .branchPoint_1
     23  fc7f		       f0 57		      BEQ	.noSprite_1
     24  fc81		       88		      DEY
     25  fc82		       c4 bc		      CPY	spriteHeight
     26  fc84				   .branchPoint_2
     27  fc84		       b0 5a		      BCS	.noSprite_2
     28  fc86		       b1 c2		      LDA	(sprite),Y
     29  fc88		       85 1b		      STA	GRP0
     30  fc8a				   .noSprite_ret
     31  fc8a		       a5 90		      LDA	wall4b
     32  fc8c		       85 0f		      STA	PF2
     33  fc8e
     34  fc8e		       a9 ff		      LDA	#FULLWALL
     35  fc90		       45 a7		      EOR	shadow3cb
     36  fc92		       85 0d		      STA	PF0
     37  fc94		       a9 ff		      LDA	#FULLWALL
     38  fc96		       45 a8		      EOR	shadow3db
     39  fc98		       85 0e		      STA	PF1
     40  fc9a		       a9 ff		      LDA	#FULLWALL
     41  fc9c		       45 a9		      EOR	shadow3eb
     42  fc9e		       85 0f		      STA	PF2
     43  fca0		       a9 00		      LDA	#NULL
      0  fca2					      DELAY	4
      1  fca2				   .CYCLES    SET	4
      2  fca2
      3  fca2				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fca2				  -	      NOP
      5  fca2				  -.CYCLES    SET	.CYCLES - 2
      6  fca2					      ENDIF
      7  fca2
      8  fca2				  -	      IF	[.CYCLES - 2] / 5
      9  fca2				  -	      REPEAT	.CYCLES / 5
     10  fca2				  -	      INC	foo
     11  fca2				  -	      REPEND
     12  fca2				  -.CYCLES    SET	.CYCLES % 5
     13  fca2					      ENDIF
     14  fca2
     15  fca2					      IF	.CYCLES % 3 == 1
     16  fca2		       ea		      NOP
     17  fca2				   .CYCLES    SET	.CYCLES - 2
     18  fca3					      ENDIF
     19  fca3
     20  fca3				  -	      REPEAT	.CYCLES / 3
     21  fca3				  -	      STA	DUMP
     22  fca3					      REPEND
     23  fca3
     24  fca3				   .CYCLES    SET	.CYCLES % 3
     25  fca3
     26  fca3					      REPEAT	.CYCLES / 2
     27  fca3		       ea		      NOP
     28  fca4					      REPEND
     29  fca4
     30  fca4				   .CYCLES    SET	.CYCLES % 2
     31  fca4
     32  fca4				  -	      IF	.CYCLES
     33  fca4				  -	      ERR
     34  fca4					      ENDIF
     35  fca4
     45  fca4		       85 0f		      STA	PF2
     46  fca6		       85 0d		      STA	PF0
     47  fca8
     48  fca8		       85 02		      STA	WSYNC	; Draw the shadow
     49  fcaa		       a5 b6		      LDA	shadowColour
     50  fcac		       85 08		      STA	COLUPF
     51  fcae		       a5 a5		      LDA	shadow3ab
     52  fcb0		       05 a0		      ORA	shadow2ab
     53  fcb2		       85 0e		      STA	PF1
     54  fcb4		       a5 a6		      LDA	shadow3bb
     55  fcb6		       05 a1		      ORA	shadow2bb
     56  fcb8		       85 0f		      STA	PF2
     57  fcba		       a5 a7		      LDA	shadow3cb
     58  fcbc		       05 a2		      ORA	shadow2cb
     59  fcbe		       85 0d		      STA	PF0
     60  fcc0		       a5 a8		      LDA	shadow3db
     61  fcc2		       05 a3		      ORA	shadow2db
     62  fcc4		       85 0e		      STA	PF1
     63  fcc6		       a5 a9		      LDA	shadow3eb
     64  fcc8		       05 a4		      ORA	shadow2eb
     65  fcca		       85 0f		      STA	PF2
     66  fccc		       a9 00		      LDA	#NULL
     67  fcce		       85 0d		      STA	PF0
     68  fcd0
     69  fcd0		       ca		      DEX
     70  fcd1		       d0 a1		      BNE	.loop
     71  fcd3
     72  fcd3		       50 99		      BVC	dc_w4s0_switch
     73  fcd5		       4c fc fb 	      JMP	dc_w3s2
     74  fcd8
     75  fcd8				   .noSprite_1
     76  fcd8					      IF	>.branchPoint_1 == >.noSprite_1
      0  fcd8					      DELAY	11
      1  fcd8				   .CYCLES    SET	11
      2  fcd8
      3  fcd8					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcd8		       ea		      NOP
      5  fcd8				   .CYCLES    SET	.CYCLES - 2
      6  fcd9					      ENDIF
      7  fcd9
      8  fcd9					      IF	[.CYCLES - 2] / 5
      9  fcd9					      REPEAT	.CYCLES / 5
     10  fcd9		       e6 c4		      INC	foo
     11  fcdb					      REPEND
     12  fcdb				   .CYCLES    SET	.CYCLES % 5
     13  fcdb					      ENDIF
     14  fcdb
     15  fcdb					      IF	.CYCLES % 3 == 1
     16  fcdb		       ea		      NOP
     17  fcdb				   .CYCLES    SET	.CYCLES - 2
     18  fcdc					      ENDIF
     19  fcdc
     20  fcdc				  -	      REPEAT	.CYCLES / 3
     21  fcdc				  -	      STA	DUMP
     22  fcdc					      REPEND
     23  fcdc
     24  fcdc				   .CYCLES    SET	.CYCLES % 3
     25  fcdc
     26  fcdc					      REPEAT	.CYCLES / 2
     27  fcdc		       ea		      NOP
     28  fcdd					      REPEND
     29  fcdd
     30  fcdd				   .CYCLES    SET	.CYCLES % 2
     31  fcdd
     32  fcdd				  -	      IF	.CYCLES
     33  fcdd				  -	      ERR
     34  fcdd					      ENDIF
     35  fcdd
     78  fcdd				  -	      ELSE
     79  fcdd				  -	      DELAY	10
     80  fcdd					      ENDIF
     81  fcdd		       4c 8a fc 	      JMP	.noSprite_ret
     82  fce0
     83  fce0				   .noSprite_2
     84  fce0					      IF	>.branchPoint_2 == >.noSprite_2
      0  fce0					      DELAY	4
      1  fce0				   .CYCLES    SET	4
      2  fce0
      3  fce0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce0				  -	      NOP
      5  fce0				  -.CYCLES    SET	.CYCLES - 2
      6  fce0					      ENDIF
      7  fce0
      8  fce0				  -	      IF	[.CYCLES - 2] / 5
      9  fce0				  -	      REPEAT	.CYCLES / 5
     10  fce0				  -	      INC	foo
     11  fce0				  -	      REPEND
     12  fce0				  -.CYCLES    SET	.CYCLES % 5
     13  fce0					      ENDIF
     14  fce0
     15  fce0					      IF	.CYCLES % 3 == 1
     16  fce0		       ea		      NOP
     17  fce0				   .CYCLES    SET	.CYCLES - 2
     18  fce1					      ENDIF
     19  fce1
     20  fce1				  -	      REPEAT	.CYCLES / 3
     21  fce1				  -	      STA	DUMP
     22  fce1					      REPEND
     23  fce1
     24  fce1				   .CYCLES    SET	.CYCLES % 3
     25  fce1
     26  fce1					      REPEAT	.CYCLES / 2
     27  fce1		       ea		      NOP
     28  fce2					      REPEND
     29  fce2
     30  fce2				   .CYCLES    SET	.CYCLES % 2
     31  fce2
     32  fce2				  -	      IF	.CYCLES
     33  fce2				  -	      ERR
     34  fce2					      ENDIF
     35  fce2
     86  fce2				  -	      ELSE
     87  fce2				  -	      DELAY	3
     88  fce2					      ENDIF
     89  fce2		       4c 8a fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     25  fce5
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fce5					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fce5							; The draw code for the 1st wall and  it's second shadow
      2  fce5
      3  fce5				   dc_w1s2    SUBROUTINE
      4  fce5
      5  fce5		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fce7
      7  fce7				   .loop
      8  fce7		       a5 b5		      LDA	wallColour
      9  fce9		       85 02		      STA	WSYNC
     10  fceb		       85 08		      STA	COLUPF
     11  fced		       a5 80		      LDA	wall1
     12  fcef		       85 0e		      STA	PF1
     13  fcf1		       98		      TYA
     14  fcf2				   .branchPoint_1
     15  fcf2		       f0 53		      BEQ	.noSprite_1
     16  fcf4		       88		      DEY
     17  fcf5		       c4 bc		      CPY	spriteHeight
     18  fcf7				   .branchPoint_2
     19  fcf7		       b0 55		      BCS	.noSprite_2
     20  fcf9		       b1 c2		      LDA	(sprite),Y
     21  fcfb		       85 1b		      STA	GRP0
     22  fcfd				   .noSprite_ret
     23  fcfd		       a5 80		      LDA	wall1
     24  fcff		       85 0f		      STA	PF2
      0  fd01					      DELAY	6
      1  fd01				   .CYCLES    SET	6
      2  fd01
      3  fd01				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd01				  -	      NOP
      5  fd01				  -.CYCLES    SET	.CYCLES - 2
      6  fd01					      ENDIF
      7  fd01
      8  fd01				  -	      IF	[.CYCLES - 2] / 5
      9  fd01				  -	      REPEAT	.CYCLES / 5
     10  fd01				  -	      INC	foo
     11  fd01				  -	      REPEND
     12  fd01				  -.CYCLES    SET	.CYCLES % 5
     13  fd01					      ENDIF
     14  fd01
     15  fd01				  -	      IF	.CYCLES % 3 == 1
     16  fd01				  -	      NOP
     17  fd01				  -.CYCLES    SET	.CYCLES - 2
     18  fd01					      ENDIF
     19  fd01
     20  fd01					      REPEAT	.CYCLES / 3
     21  fd01		       85 30		      STA	DUMP
     20  fd01					      REPEND
     21  fd03		       85 30		      STA	DUMP
     22  fd05					      REPEND
     23  fd05
     24  fd05				   .CYCLES    SET	.CYCLES % 3
     25  fd05
     26  fd05				  -	      REPEAT	.CYCLES / 2
     27  fd05				  -	      NOP
     28  fd05					      REPEND
     29  fd05
     30  fd05				   .CYCLES    SET	.CYCLES % 2
     31  fd05
     32  fd05				  -	      IF	.CYCLES
     33  fd05				  -	      ERR
     34  fd05					      ENDIF
     35  fd05
     26  fd05		       85 0d		      STA	PF0
      0  fd07					      DELAY	19
      1  fd07				   .CYCLES    SET	19
      2  fd07
      3  fd07				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd07				  -	      NOP
      5  fd07				  -.CYCLES    SET	.CYCLES - 2
      6  fd07					      ENDIF
      7  fd07
      8  fd07					      IF	[.CYCLES - 2] / 5
      9  fd07					      REPEAT	.CYCLES / 5
     10  fd07		       e6 c4		      INC	foo
      9  fd07					      REPEND
     10  fd09		       e6 c4		      INC	foo
      9  fd09					      REPEND
     10  fd0b		       e6 c4		      INC	foo
     11  fd0d					      REPEND
     12  fd0d				   .CYCLES    SET	.CYCLES % 5
     13  fd0d					      ENDIF
     14  fd0d
     15  fd0d					      IF	.CYCLES % 3 == 1
     16  fd0d		       ea		      NOP
     17  fd0d				   .CYCLES    SET	.CYCLES - 2
     18  fd0e					      ENDIF
     19  fd0e
     20  fd0e				  -	      REPEAT	.CYCLES / 3
     21  fd0e				  -	      STA	DUMP
     22  fd0e					      REPEND
     23  fd0e
     24  fd0e				   .CYCLES    SET	.CYCLES % 3
     25  fd0e
     26  fd0e					      REPEAT	.CYCLES / 2
     27  fd0e		       ea		      NOP
     28  fd0f					      REPEND
     29  fd0f
     30  fd0f				   .CYCLES    SET	.CYCLES % 2
     31  fd0f
     32  fd0f				  -	      IF	.CYCLES
     33  fd0f				  -	      ERR
     34  fd0f					      ENDIF
     35  fd0f
     28  fd0f		       a9 00		      LDA	#NULL
     29  fd11		       85 0f		      STA	PF2
     30  fd13		       85 0d		      STA	PF0
     31  fd15
     32  fd15		       85 02		      STA	WSYNC
     33  fd17		       a5 b6		      LDA	shadowColour
     34  fd19		       85 08		      STA	COLUPF
     35  fd1b		       a5 9b		      LDA	shadow1a
     36  fd1d		       3d 00 f0 	      AND	and_1a,X
     37  fd20		       85 0e		      STA	PF1
     38  fd22		       a5 9c		      LDA	shadow1b
     39  fd24		       3d 1e f0 	      AND	and_1b,X
     40  fd27		       85 0f		      STA	PF2
      0  fd29					      DELAY	9
      1  fd29				   .CYCLES    SET	9
      2  fd29
      3  fd29				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd29				  -	      NOP
      5  fd29				  -.CYCLES    SET	.CYCLES - 2
      6  fd29					      ENDIF
      7  fd29
      8  fd29					      IF	[.CYCLES - 2] / 5
      9  fd29					      REPEAT	.CYCLES / 5
     10  fd29		       e6 c4		      INC	foo
     11  fd2b					      REPEND
     12  fd2b				   .CYCLES    SET	.CYCLES % 5
     13  fd2b					      ENDIF
     14  fd2b
     15  fd2b					      IF	.CYCLES % 3 == 1
     16  fd2b		       ea		      NOP
     17  fd2b				   .CYCLES    SET	.CYCLES - 2
     18  fd2c					      ENDIF
     19  fd2c
     20  fd2c				  -	      REPEAT	.CYCLES / 3
     21  fd2c				  -	      STA	DUMP
     22  fd2c					      REPEND
     23  fd2c
     24  fd2c				   .CYCLES    SET	.CYCLES % 3
     25  fd2c
     26  fd2c					      REPEAT	.CYCLES / 2
     27  fd2c		       ea		      NOP
     28  fd2d					      REPEND
     29  fd2d
     30  fd2d				   .CYCLES    SET	.CYCLES % 2
     31  fd2d
     32  fd2d				  -	      IF	.CYCLES
     33  fd2d				  -	      ERR
     34  fd2d					      ENDIF
     35  fd2d
     42  fd2d		       a5 9e		      LDA	shadow1d
     43  fd2f		       3d 3c f0 	      AND	and_1c,X
     44  fd32		       85 0e		      STA	PF1
     45  fd34		       a5 9f		      LDA	shadow1e
     46  fd36		       3d 5a f0 	      AND	and_1d,X
     47  fd39		       85 0f		      STA	PF2
     48  fd3b
     49  fd3b		       a9 00		      LDA	#NULL
     50  fd3d		       85 1b		      STA	GRP0
     51  fd3f
     52  fd3f		       ca		      DEX
     53  fd40		       e0 06		      CPX	#LOWRWALL_S
     54  fd42		       d0 a3		      BNE	.loop
     55  fd44
     56  fd44		       4c 53 fd 	      JMP	dc_wallsEnd
     57  fd47
     58  fd47				   .noSprite_1
     59  fd47				  -	      IF	>.branchPoint_1 == >.noSprite_1
     60  fd47				  -	      DELAY	11
     61  fd47					      ELSE
      0  fd47					      DELAY	10
      1  fd47				   .CYCLES    SET	10
      2  fd47
      3  fd47				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd47				  -	      NOP
      5  fd47				  -.CYCLES    SET	.CYCLES - 2
      6  fd47					      ENDIF
      7  fd47
      8  fd47					      IF	[.CYCLES - 2] / 5
      9  fd47					      REPEAT	.CYCLES / 5
     10  fd47		       e6 c4		      INC	foo
      9  fd47					      REPEND
     10  fd49		       e6 c4		      INC	foo
     11  fd4b					      REPEND
     12  fd4b				   .CYCLES    SET	.CYCLES % 5
     13  fd4b					      ENDIF
     14  fd4b
     15  fd4b				  -	      IF	.CYCLES % 3 == 1
     16  fd4b				  -	      NOP
     17  fd4b				  -.CYCLES    SET	.CYCLES - 2
     18  fd4b					      ENDIF
     19  fd4b
     20  fd4b				  -	      REPEAT	.CYCLES / 3
     21  fd4b				  -	      STA	DUMP
     22  fd4b					      REPEND
     23  fd4b
     24  fd4b				   .CYCLES    SET	.CYCLES % 3
     25  fd4b
     26  fd4b				  -	      REPEAT	.CYCLES / 2
     27  fd4b				  -	      NOP
     28  fd4b					      REPEND
     29  fd4b
     30  fd4b				   .CYCLES    SET	.CYCLES % 2
     31  fd4b
     32  fd4b				  -	      IF	.CYCLES
     33  fd4b				  -	      ERR
     34  fd4b					      ENDIF
     35  fd4b
     63  fd4b					      ENDIF
     64  fd4b		       4c fd fc 	      JMP	.noSprite_ret
     65  fd4e
     66  fd4e				   .noSprite_2
     67  fd4e				  -	      IF	>.branchPoint_2 == >.noSprite_2
     68  fd4e				  -	      DELAY	4
     69  fd4e					      ELSE
      0  fd4e					      DELAY	3
      1  fd4e				   .CYCLES    SET	3
      2  fd4e
      3  fd4e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd4e				  -	      NOP
      5  fd4e				  -.CYCLES    SET	.CYCLES - 2
      6  fd4e					      ENDIF
      7  fd4e
      8  fd4e				  -	      IF	[.CYCLES - 2] / 5
      9  fd4e				  -	      REPEAT	.CYCLES / 5
     10  fd4e				  -	      INC	foo
     11  fd4e				  -	      REPEND
     12  fd4e				  -.CYCLES    SET	.CYCLES % 5
     13  fd4e					      ENDIF
     14  fd4e
     15  fd4e				  -	      IF	.CYCLES % 3 == 1
     16  fd4e				  -	      NOP
     17  fd4e				  -.CYCLES    SET	.CYCLES - 2
     18  fd4e					      ENDIF
     19  fd4e
     20  fd4e					      REPEAT	.CYCLES / 3
     21  fd4e		       85 30		      STA	DUMP
     22  fd50					      REPEND
     23  fd50
     24  fd50				   .CYCLES    SET	.CYCLES % 3
     25  fd50
     26  fd50				  -	      REPEAT	.CYCLES / 2
     27  fd50				  -	      NOP
     28  fd50					      REPEND
     29  fd50
     30  fd50				   .CYCLES    SET	.CYCLES % 2
     31  fd50
     32  fd50				  -	      IF	.CYCLES
     33  fd50				  -	      ERR
     34  fd50					      ENDIF
     35  fd50
     71  fd50					      ENDIF
     72  fd50		       4c fd fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     27  fd53
     28  fd53				   dc_wallsEnd
     29  fd53
     30  fd53		       b8		      CLV
     31  fd54
     32  fd54		       a9 00		      LDA	#NULL
     33  fd56		       85 0e		      STA	PF1
     34  fd58		       85 0f		      STA	PF2
     35  fd5a
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd5a					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd5a							; Draws the compass to the screen
      2  fd5a
      3  fd5a				   mmDraw
      4  fd5a
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd5a					      INCLUDE	"drawCode/mmRender.asm"
      1  fd5a							; Render the minimap
      2  fd5a
      3  fd5a				   mmRender   SUBROUTINE
      4  fd5a							; Set the colour of the player
      5  fd5a		       a9 cc		      LDA	#PLYRCOLU
      6  fd5c		       85 08		      STA	COLUPF
      7  fd5e							; Set the colour of the map
      8  fd5e		       a9 0e		      LDA	#MAPCOLU
      9  fd60		       85 06		      STA	COLUP0
     10  fd62		       85 07		      STA	COLUP1
     11  fd64							; Get the player's position and translate it into horizontal movement
     12  fd64		       a9 08		      LDA	#%00001000
     13  fd66		       18		      CLC
     14  fd67		       38		      SEC
     15  fd68		       e5 ab		      SBC	playerPos
     16  fd6a		       0a		      ASL
     17  fd6b		       0a		      ASL
     18  fd6c		       0a		      ASL
     19  fd6d		       0a		      ASL
     20  fd6e		       85 24		      STA	HMBL
     21  fd70
     22  fd70							; Set the map's position to the right values
     23  fd70		       a9 00		      LDA	#HADJ_A
     24  fd72		       85 20		      STA	HMP0
     25  fd74		       a9 10		      LDA	#HADJ_B
     26  fd76		       85 21		      STA	HMP1
     27  fd78
     28  fd78		       85 02		      STA	WSYNC
     29  fd7a		       a2 07		      LDX	#HWAIT
     30  fd7c
     31  fd7c				   .wait1
     32  fd7c		       ca		      DEX
     33  fd7d		       d0 fd		      BNE	.wait1
      0  fd7f					      DELAY	HDELAY1
      1  fd7f				   .CYCLES    SET	HDELAY1
      2  fd7f
      3  fd7f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd7f				  -	      NOP
      5  fd7f				  -.CYCLES    SET	.CYCLES - 2
      6  fd7f					      ENDIF
      7  fd7f
      8  fd7f				  -	      IF	[.CYCLES - 2] / 5
      9  fd7f				  -	      REPEAT	.CYCLES / 5
     10  fd7f				  -	      INC	foo
     11  fd7f				  -	      REPEND
     12  fd7f				  -.CYCLES    SET	.CYCLES % 5
     13  fd7f					      ENDIF
     14  fd7f
     15  fd7f				  -	      IF	.CYCLES % 3 == 1
     16  fd7f				  -	      NOP
     17  fd7f				  -.CYCLES    SET	.CYCLES - 2
     18  fd7f					      ENDIF
     19  fd7f
     20  fd7f					      REPEAT	.CYCLES / 3
     21  fd7f		       85 30		      STA	DUMP
     22  fd81					      REPEND
     23  fd81
     24  fd81				   .CYCLES    SET	.CYCLES % 3
     25  fd81
     26  fd81					      REPEAT	.CYCLES / 2
     27  fd81		       ea		      NOP
     28  fd82					      REPEND
     29  fd82
     30  fd82				   .CYCLES    SET	.CYCLES % 2
     31  fd82
     32  fd82				  -	      IF	.CYCLES
     33  fd82				  -	      ERR
     34  fd82					      ENDIF
     35  fd82
     35  fd82		       85 10		      STA	RESP0
     36  fd84		       85 11		      STA	RESP1
     37  fd86
     38  fd86		       a5 ab		      LDA	playerPos
     39  fd88
     40  fd88		       85 02		      STA	WSYNC
     41  fd8a		       a2 07		      LDX	#HWAIT
     42  fd8c
     43  fd8c				   .wait2
     44  fd8c		       ca		      DEX
     45  fd8d		       d0 fd		      BNE	.wait2
      0  fd8f					      DELAY	HDELAY2
      1  fd8f				   .CYCLES    SET	HDELAY2
      2  fd8f
      3  fd8f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd8f				  -	      NOP
      5  fd8f				  -.CYCLES    SET	.CYCLES - 2
      6  fd8f					      ENDIF
      7  fd8f
      8  fd8f					      IF	[.CYCLES - 2] / 5
      9  fd8f					      REPEAT	.CYCLES / 5
     10  fd8f		       e6 c4		      INC	foo
     11  fd91					      REPEND
     12  fd91				   .CYCLES    SET	.CYCLES % 5
     13  fd91					      ENDIF
     14  fd91
     15  fd91				  -	      IF	.CYCLES % 3 == 1
     16  fd91				  -	      NOP
     17  fd91				  -.CYCLES    SET	.CYCLES - 2
     18  fd91					      ENDIF
     19  fd91
     20  fd91					      REPEAT	.CYCLES / 3
     21  fd91		       85 30		      STA	DUMP
     22  fd93					      REPEND
     23  fd93
     24  fd93				   .CYCLES    SET	.CYCLES % 3
     25  fd93
     26  fd93				  -	      REPEAT	.CYCLES / 2
     27  fd93				  -	      NOP
     28  fd93					      REPEND
     29  fd93
     30  fd93				   .CYCLES    SET	.CYCLES % 2
     31  fd93
     32  fd93				  -	      IF	.CYCLES
     33  fd93				  -	      ERR
     34  fd93					      ENDIF
     35  fd93
     47  fd93		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      6  fd95
      7  fd95					      SUBROUTINE		; The preceeding file declares it's own subroutine
      8  fd95
      9  fd95		       a0 00		      LDY	#NULL
     10  fd97		       84 1b		      STY	GRP0
     11  fd99		       84 1c		      STY	GRP1
     12  fd9b		       84 02		      STY	WSYNC
     13  fd9d		       84 2a		      STY	HMOVE
     14  fd9f
     15  fd9f		       a6 ab		      LDX	playerPos
     16  fda1
     17  fda1				   .loop
     18  fda1		       85 02		      STA	WSYNC
     19  fda3
     20  fda3		       b1 be		      LDA	(miniMapPtr),Y
     21  fda5		       85 1b		      STA	GRP0
     22  fda7		       c8		      INY
     23  fda8		       b1 be		      LDA	(miniMapPtr),Y
     24  fdaa		       85 1c		      STA	GRP1
     25  fdac		       c8		      INY
     26  fdad
     27  fdad		       8a		      TXA
     28  fdae		       38		      SEC
     29  fdaf		       e5 ac		      SBC	mapWidth
     30  fdb1		       aa		      TAX
     31  fdb2		       29 f0		      AND	#$F0
     32  fdb4
     33  fdb4		       d0 0a		      BNE	.noDraw
     34  fdb6
     35  fdb6		       a9 02		      LDA	#2
     36  fdb8		       85 1f		      STA	ENABL
     37  fdba		       85 ba		      STA	drawingPlyr
     38  fdbc		       a9 01		      LDA	#1
     39  fdbe		       85 27		      STA	VDELBL
     40  fdc0
     41  fdc0				   .noDraw
     42  fdc0
     43  fdc0		       a5 ba		      LDA	drawingPlyr
     44  fdc2		       85 1f		      STA	ENABL
     45  fdc4		       a9 00		      LDA	#NULL
     46  fdc6		       85 ba		      STA	drawingPlyr
     47  fdc8		       c0 20		      CPY	#MMSIZE
     48  fdca		       d0 d5		      BNE	.loop
     49  fdcc
     50  fdcc		       a9 00		      LDA	#NULL
     51  fdce		       85 1f		      STA	ENABL
     52  fdd0
     53  fdd0		       85 02		      STA	WSYNC
     54  fdd2
     55  fdd2		       a9 00		      LDA	#NULL
     56  fdd4		       85 1b		      STA	GRP0
     57  fdd6		       85 1c		      STA	GRP1
     58  fdd8		       85 06		      STA	COLUP0
     59  fdda		       85 07		      STA	COLUP1
------- FILE dispkern.asm
     37  fddc
     38  fddc		       85 09		      STA	COLUBK
------- FILE main.asm
     71  fdde
     72  fdde							; Start VBLANK
     73  fdde
     74  fdde		       a9 c2		      LDA	#VBLANK_SET
     75  fde0		       85 01		      STA	VBLANK
     76  fde2
     77  fde2							; Process input
     78  fde2
------- FILE input.asm LEVEL 2 PASS 4
      0  fde2					      INCLUDE	"input.asm"
      1  fde2							; VePseu's controller input
      2  fde2
      3  fde2		       85 02		      STA	WSYNC
      4  fde4
      5  fde4		       ad 80 02 	      LDA	SWCHA
      6  fde7		       29 10		      AND	#FFORD
      7  fde9		       d0 22		      BNE	CIN1_NOPRESS
      8  fdeb
      9  fdeb		       a5 ab		      LDA	playerPos
     10  fded		       38		      SEC
     11  fdee		       e5 b0		      SBC	yLoss
     12  fdf0		       18		      CLC
     13  fdf1		       65 af		      ADC	yGain
     14  fdf3		       a8		      TAY
     15  fdf4
     16  fdf4		       b1 c0		      LDA	(mapPtr),Y
     17  fdf6		       d0 19		      BNE	CIN2
     18  fdf8
     19  fdf8		       a5 b1		      LDA	fordPressed
     20  fdfa		       d0 09		      BNE	CIN1_WAIT
     21  fdfc
     22  fdfc		       84 ab		      STY	playerPos
     23  fdfe		       a9 0f		      LDA	#CWAITCNT
     24  fe00		       85 b1		      STA	fordPressed
     25  fe02		       4c 11 fe 	      JMP	CIN2
     26  fe05
     27  fe05				   CIN1_WAIT
      0  fe05					      DEA
      1  fe05		       38		      SEC
      2  fe06		       e9 01		      SBC	#1
     29  fe08		       85 b1		      STA	fordPressed
     30  fe0a		       4c 11 fe 	      JMP	CIN2
     31  fe0d
     32  fe0d				   CIN1_NOPRESS
     33  fe0d		       a9 00		      LDA	#NULL
     34  fe0f		       85 b1		      STA	fordPressed
     35  fe11
     36  fe11				   CIN2
     37  fe11		       85 02		      STA	WSYNC
     38  fe13		       ad 80 02 	      LDA	SWCHA
     39  fe16		       29 20		      AND	#FBACK
     40  fe18		       d0 22		      BNE	CIN2_NOPRESS
     41  fe1a
     42  fe1a		       a5 ab		      LDA	playerPos
     43  fe1c		       38		      SEC
     44  fe1d		       e5 af		      SBC	yGain
     45  fe1f		       18		      CLC
     46  fe20		       65 b0		      ADC	yLoss
     47  fe22		       a8		      TAY
     48  fe23
     49  fe23		       b1 c0		      LDA	(mapPtr),Y
     50  fe25		       d0 19		      BNE	CIN3
     51  fe27
     52  fe27		       a5 b2		      LDA	backPressed
     53  fe29		       d0 09		      BNE	CIN2_WAIT
     54  fe2b
     55  fe2b		       84 ab		      STY	playerPos
     56  fe2d		       a9 0f		      LDA	#CWAITCNT
     57  fe2f		       85 b2		      STA	backPressed
     58  fe31		       4c 40 fe 	      JMP	CIN3
     59  fe34
     60  fe34				   CIN2_WAIT
      0  fe34					      DEA
      1  fe34		       38		      SEC
      2  fe35		       e9 01		      SBC	#1
     62  fe37		       85 b2		      STA	backPressed
     63  fe39		       4c 40 fe 	      JMP	CIN3
     64  fe3c
     65  fe3c				   CIN2_NOPRESS
     66  fe3c		       a9 00		      LDA	#NULL
     67  fe3e		       85 b2		      STA	backPressed
     68  fe40
     69  fe40				   CIN3
     70  fe40		       85 02		      STA	WSYNC
     71  fe42		       ad 80 02 	      LDA	SWCHA
     72  fe45		       29 80		      AND	#FLEFT
     73  fe47		       d0 1a		      BNE	CIN3_NOPRESS
     74  fe49
     75  fe49		       a5 bb		      LDA	direction
      0  fe4b					      INA
      1  fe4b		       18		      CLC
      2  fe4c		       69 01		      ADC	#1
     77  fe4e		       29 03		      AND	#%00000011
     78  fe50
     79  fe50		       a6 b4		      LDX	rigtPressed
     80  fe52		       d0 09		      BNE	CIN3_WAIT
     81  fe54
     82  fe54		       85 bb		      STA	direction
     83  fe56
     84  fe56		       a9 0f		      LDA	#CWAITCNT
     85  fe58		       85 b4		      STA	rigtPressed
     86  fe5a		       4c 67 fe 	      JMP	CIN4
     87  fe5d
     88  fe5d				   CIN3_WAIT
     89  fe5d		       ca		      DEX
     90  fe5e		       86 b4		      STX	rigtPressed
     91  fe60		       4c 67 fe 	      JMP	CIN4
     92  fe63
     93  fe63				   CIN3_NOPRESS
     94  fe63		       a9 00		      LDA	#NULL
     95  fe65		       85 b4		      STA	rigtPressed
     96  fe67
     97  fe67				   CIN4
     98  fe67		       85 02		      STA	WSYNC
     99  fe69		       ad 80 02 	      LDA	SWCHA
    100  fe6c		       29 40		      AND	#FRIGT
    101  fe6e		       d0 1a		      BNE	CIN4_NOPRESS
    102  fe70
    103  fe70		       a5 bb		      LDA	direction
      0  fe72					      DEA
      1  fe72		       38		      SEC
      2  fe73		       e9 01		      SBC	#1
    105  fe75		       29 03		      AND	#%11
    106  fe77
    107  fe77		       a6 b3		      LDX	leftPressed
    108  fe79		       d0 09		      BNE	CIN4_WAIT
    109  fe7b
    110  fe7b		       85 bb		      STA	direction
    111  fe7d
    112  fe7d		       a9 0f		      LDA	#CWAITCNT
    113  fe7f		       85 b3		      STA	leftPressed
    114  fe81		       4c 8e fe 	      JMP	CDIR1
    115  fe84
    116  fe84				   CIN4_WAIT
    117  fe84		       ca		      DEX
    118  fe85		       86 b3		      STX	leftPressed
    119  fe87		       4c 8e fe 	      JMP	CDIR1
    120  fe8a
    121  fe8a				   CIN4_NOPRESS
    122  fe8a		       a9 00		      LDA	#NULL
    123  fe8c		       85 b3		      STA	leftPressed
    124  fe8e
    125  fe8e				   CDIR1
    126  fe8e		       85 02		      STA	WSYNC
    127  fe90		       a5 bb		      LDA	direction
    128  fe92		       c9 00		      CMP	#DNORTH
    129  fe94		       d0 16		      BNE	CDIR2
    130  fe96
    131  fe96		       a5 ac		      LDA	mapWidth
    132  fe98		       85 b0		      STA	yLoss
    133  fe9a		       a9 01		      LDA	#ONE
    134  fe9c		       85 ad		      STA	xGain
    135  fe9e		       a9 86		      LDA	#WCOLU
    136  fea0		       85 b5		      STA	wallColour
    137  fea2		       a9 82		      LDA	#SCOLU
    138  fea4		       85 b6		      STA	shadowColour
    139  fea6		       a9 00		      LDA	#NULL
    140  fea8		       85 af		      STA	yGain
    141  feaa		       85 ae		      STA	xLoss
    142  feac
    143  feac				   CDIR2
    144  feac		       a5 bb		      LDA	direction
    145  feae		       c9 02		      CMP	#DSOUTH
    146  feb0		       d0 16		      BNE	CDIR3
    147  feb2
    148  feb2		       a5 ac		      LDA	mapWidth
    149  feb4		       85 af		      STA	yGain
    150  feb6		       a9 01		      LDA	#ONE
    151  feb8		       85 ae		      STA	xLoss
    152  feba		       a9 86		      LDA	#WCOLU
    153  febc		       85 b5		      STA	wallColour
    154  febe		       a9 82		      LDA	#SCOLU
    155  fec0		       85 b6		      STA	shadowColour
    156  fec2		       a9 00		      LDA	#NULL
    157  fec4		       85 b0		      STA	yLoss
    158  fec6		       85 ad		      STA	xGain
    159  fec8
    160  fec8				   CDIR3
    161  fec8		       a5 bb		      LDA	direction
    162  feca		       c9 01		      CMP	#DWEST
    163  fecc		       d0 16		      BNE	CDIR4
    164  fece
    165  fece		       a5 ac		      LDA	mapWidth
    166  fed0		       85 ad		      STA	xGain
    167  fed2		       a9 01		      LDA	#ONE
    168  fed4		       85 af		      STA	yGain
    169  fed6		       a9 82		      LDA	#SCOLU
    170  fed8		       85 b5		      STA	wallColour
    171  feda		       a9 86		      LDA	#WCOLU
    172  fedc		       85 b6		      STA	shadowColour
    173  fede		       a9 00		      LDA	#NULL
    174  fee0		       85 b0		      STA	yLoss
    175  fee2		       85 ae		      STA	xLoss
    176  fee4
    177  fee4				   CDIR4
    178  fee4		       a5 bb		      LDA	direction
    179  fee6		       c9 03		      CMP	#DEAST
    180  fee8		       d0 16		      BNE	CEND
    181  feea
    182  feea		       a5 ac		      LDA	mapWidth
    183  feec		       85 ae		      STA	xLoss
    184  feee		       a9 01		      LDA	#ONE
    185  fef0		       85 b0		      STA	yLoss
    186  fef2		       a9 82		      LDA	#SCOLU
    187  fef4		       85 b5		      STA	wallColour
    188  fef6		       a9 86		      LDA	#WCOLU
    189  fef8		       85 b6		      STA	shadowColour
    190  fefa		       a9 00		      LDA	#NULL
    191  fefc		       85 af		      STA	yGain
    192  fefe		       85 ad		      STA	xGain
    193  ff00
    194  ff00				   CEND
    195  ff00		       85 02		      STA	WSYNC
------- FILE main.asm
     80  ff02
     81  ff02							; Pad again
     82  ff02
     83  ff02		       a2 1a		      LDX	#LOPAD_LIMIT
     84  ff04
     85  ff04				   lowerPad
     86  ff04		       85 02		      STA	WSYNC
     87  ff06
     88  ff06		       ca		      DEX
     89  ff07		       d0 fb		      BNE	lowerPad
     90  ff09
     91  ff09							; Get everything ready for VSYNC
     92  ff09
     93  ff09		       86 01		      STX	VBLANK
     94  ff0b		       a9 02		      LDA	#VSYNC_SET
     95  ff0d		       85 02		      STA	WSYNC
     96  ff0f		       4c 2d f8 	      JMP	screenStart
     97  ff12
     98  ff12							; Tell us how many bytes we have used up
     99  ff12
      0  ff12					      USAGE_REPORT	"ROM", $F800, $FFFA
      1  ff12
      2  ff12				   NAM	      SET	"ROM"
      3  ff12				   SPOS       SET	$F800
      4  ff12				   EPOS       SET	$FFFA
      5  ff12				   CPOS       SET	.
      6  ff12
      7  ff12				   CAP	      SET	EPOS - SPOS
      8  ff12				   TKUP       SET	CPOS - SPOS
      9  ff12				   PCNT       SET	[TKUP * 100 / CAP]d
     10  ff12
 88 % of your ROM is used up ( 1810 / 2042 ) bytes
     11  ff12					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     12  ff12
    101  ff12
    102  fffa					      ORG	$FFFA
    103  fffa
    104  fffa		       00 f8		      DC.W	start	; Something
    105  fffc		       00 f8		      DC.W	start	; Entrypoint
    106  fffe		       2d f8		      DC.W	screenStart	; Something else
    107  10000
    108  10000					       END
