------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
      3 U028a ????				      SEG.U	addresses
      4 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	x_pos_gan
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	xGain
     17 U028a ????				      SEC
     18 U028a ????				      SBC	xLoss
     19 U028a ????				      TAY
     20 U028a ????
     21 U028a ????				      ENDM		; 14 cycles
     22 U028a ????
     23 U028a ????				      MAC	x_pos_los
     24 U028a ????
     25 U028a ????				      TYA
     26 U028a ????				      CLC
     27 U028a ????				      ADC	xLoss
     28 U028a ????				      SEC
     29 U028a ????				      SBC	xGain
     30 U028a ????				      TAY
     31 U028a ????
     32 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   shift      DC	0
     49 U00ab		       00	   playerPos  DC	0
     50 U00ac		       00	   mapWidth   DC	0
     51 U00ad		       00	   xGain      DC	0
     52 U00ae		       00	   xLoss      DC	0
     53 U00af		       00	   yGain      DC	0
     54 U00b0		       00	   yLoss      DC	0
     55 U00b1		       00	   fordPressed DC	0
     56 U00b2		       00	   backPressed DC	0
     57 U00b3		       00	   leftPressed DC	0
     58 U00b4		       00	   rigtPressed DC	0
     59 U00b5		       00	   wallColour DC	0
     60 U00b6		       00	   shadowColour DC	0
     61 U00b7		       00	   horzPos_mA DC	0
     62 U00b8		       00	   horzPos_mB DC	0
     63 U00b9		       00	   horzPos_plyr DC	0
     64 U00ba		       00	   drawingPlyr DC	0
     65 U00bb		       00	   direction  DC	0
     66 U00bc		       00	   spriteHeight DC	0
     67 U00bd		       00	   halfJump   DC	0
     68 U00be		       00 00	   miniMapPtr DC.W	0
     69 U00c0		       00 00	   mapPtr     DC.W	0
     70 U00c2		       00 00	   sprite     DC.W	0
     71 U00c4		       00	   foo	      DC	0
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c5					      INCLUDE	"include/pia_addr.h"
      1 U00c5							; PIA addresses
      2 U00c5
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
------- FILE include/defs.h LEVEL 3 PASS 4
      0 U028a					      INCLUDE	"include/defs.h"
      1 U028a					      MAC	ina
      2 U028a					      CLC
      3 U028a					      ADC	#1
      4 U028a					      ENDM
      5 U028a
      6 U028a					      MAC	dea
      7 U028a					      SEC
      8 U028a					      SBC	#1
      9 U028a					      ENDM
     10 U028a
     11 U028a					      MAC	delay
     12 U028a				   .CYCLES    SET	{1}
     13 U028a
     14 U028a					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
     15 U028a					      NOP
     16 U028a				   .CYCLES    SET	.CYCLES - 2
     17 U028a					      ENDIF
     18 U028a
     19 U028a					      IF	[.CYCLES - 2] / 5
     20 U028a					      REPEAT	.CYCLES / 5
     21 U028a					      INC	foo
     22 U028a					      REPEND
     23 U028a				   .CYCLES    SET	.CYCLES % 5
     24 U028a					      ENDIF
     25 U028a
     26 U028a					      IF	.CYCLES % 3 == 1
     27 U028a					      NOP
     28 U028a				   .CYCLES    SET	.CYCLES - 2
     29 U028a					      ENDIF
     30 U028a
     31 U028a					      REPEAT	.CYCLES / 3
     32 U028a					      STA	DUMP
     33 U028a					      REPEND
     34 U028a
     35 U028a				   .CYCLES    SET	.CYCLES % 3
     36 U028a
     37 U028a					      REPEAT	.CYCLES / 2
     38 U028a					      NOP
     39 U028a					      REPEND
     40 U028a
     41 U028a				   .CYCLES    SET	.CYCLES % 2
     42 U028a
     43 U028a					      IF	.CYCLES
     44 U028a					      ERR
     45 U028a					      ENDIF
     46 U028a
     47 U028a					      ENDM
     48 U028a
     49 U028a		       00 00	   NULL       =	0	; The value of NULL
     50 U028a		       00 01	   ONE	      =	1	; The value of one
     51 U028a
     52 U028a		       00 0a	   WALLCNT    =	10	; The number of walls to render in scrend
     53 U028a
     54 U028a		       00 03	   PIXH       =	3	; The height of each pixel, in scanlines (x2)
     55 U028a
     56 U028a		       00 1e	   UPPRWALL_S =	30
     57 U028a		       00 06	   LOWRWALL_S =	6
     58 U028a
     59 U028a		       00 00	   HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     60 U028a		       00 10	   HADJ_B     =	$10
     61 U028a
     62 U028a		       00 07	   HWAIT      =	7	; The horizontal wait for the minimap
     63 U028a		       00 05	   HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     64 U028a		       00 08	   HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     65 U028a
     66 U028a		       00 86	   WCOLU      =	$86	; The initial colour of walls
     67 U028a		       00 82	   SCOLU      =	$82	; The initial colour of shadows
     68 U028a		       00 0e	   MAPCOLU    =	$0E	; The colour of the map on the minimap
     69 U028a		       00 cc	   PLYRCOLU   =	$CC	; The colour of the player on the minimap
     70 U028a
     71 U028a		       00 c2	   VBLANK_SET =	%11000010	; The value to push to the vblank register
     72 U028a		       00 02	   VSYNC_SET  =	2	; The value to push to the vsync register
     73 U028a
     74 U028a		       00 00	   INDEXINIT  =	0	; The value to initialize indexes to
     75 U028a
     76 U028a		       00 0e	   UPPAD_LIMIT =	14	; The upper pad amount
     77 U028a		       00 1a	   LOPAD_LIMIT =	26	; The lower pad amount
     78 U028a
     79 U028a		       00 ff	   FULLWALL   =	$FF
     80 U028a
     81 U028a		       00 10	   FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     82 U028a		       00 20	   FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     83 U028a		       00 80	   FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     84 U028a		       00 40	   FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     85 U028a		       00 80	   ITRIG      =	%10000000	; The bit set when the trigger is set
     86 U028a
     87 U028a		       00 01	   LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     88 U028a
     89 U028a		       00 00	   cleanStart =	0	; The value to initialize X to in clearLoop
     90 U028a		       00 00	   cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     91 U028a
     92 U028a		       00 ff	   stack      =	$FF	; The address of the stack
     93 U028a
     94 U028a		       00 0f	   CWAITCNT   =	#15	; The amount of frames to wait before input is repeated
     95 U028a
     96 U028a		       00 00	   DNORTH     =	0	; The possible directions
     97 U028a		       00 02	   DSOUTH     =	2
     98 U028a		       00 01	   DWEST      =	1
     99 U028a		       00 03	   DEAST      =	3
------- FILE include/vepseu.h
     11 U028a
     12 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"andtable.asm"
      1  f000							; The AND-tables for the shadows
      2  f000
      3  f000				   and_1a
      4  f000		       80		      DC	%10000000
      5  f001		       80		      DC	%10000000
      6  f002		       80		      DC	%10000000
      7  f003		       c0		      DC	%11000000
      8  f004		       c0		      DC	%11000000
      9  f005		       c0		      DC	%11000000
     10  f006		       e0		      DC	%11100000
     11  f007		       e0		      DC	%11100000
     12  f008		       e0		      DC	%11100000
     13  f009		       f0		      DC	%11110000
     14  f00a		       f0		      DC	%11110000
     15  f00b		       f0		      DC	%11110000
     16  f00c		       f8		      DC	%11111000
     17  f00d		       f8		      DC	%11111000
     18  f00e		       f8		      DC	%11111000
     19  f00f		       fc		      DC	%11111100
     20  f010		       fc		      DC	%11111100
     21  f011		       fc		      DC	%11111100
     22  f012		       fe		      DC	%11111110
     23  f013		       fe		      DC	%11111110
     24  f014		       fe		      DC	%11111110
     25  f015		       ff		      DC	%11111111
     26  f016		       ff		      DC	%11111111
     27  f017		       ff		      DC	%11111111
     28  f018		       ff		      DC	%11111111
     29  f019		       ff		      DC	%11111111
     30  f01a		       ff		      DC	%11111111
     31  f01b		       ff		      DC	%11111111
     32  f01c		       ff		      DC	%11111111
     33  f01d		       ff		      DC	%11111111
     34  f01e
     35  f01e				   and_1b
     36  f01e		       00		      DC	%00000000
     37  f01f		       00		      DC	%00000000
     38  f020		       00		      DC	%00000000
     39  f021		       00		      DC	%00000000
     40  f022		       00		      DC	%00000000
     41  f023		       00		      DC	%00000000
     42  f024		       00		      DC	%00000000
     43  f025		       00		      DC	%00000000
     44  f026		       00		      DC	%00000000
     45  f027		       00		      DC	%00000000
     46  f028		       00		      DC	%00000000
     47  f029		       00		      DC	%00000000
     48  f02a		       00		      DC	%00000000
     49  f02b		       00		      DC	%00000000
     50  f02c		       00		      DC	%00000000
     51  f02d		       00		      DC	%00000000
     52  f02e		       00		      DC	%00000000
     53  f02f		       00		      DC	%00000000
     54  f030		       00		      DC	%00000000
     55  f031		       00		      DC	%00000000
     56  f032		       00		      DC	%00000000
     57  f033		       00		      DC	%00000000
     58  f034		       00		      DC	%00000000
     59  f035		       00		      DC	%00000000
     60  f036		       01		      DC	%00000001
     61  f037		       01		      DC	%00000001
     62  f038		       01		      DC	%00000001
     63  f039		       03		      DC	%00000011
     64  f03a		       03		      DC	%00000011
     65  f03b		       03		      DC	%00000011
     66  f03c
     67  f03c				   and_1c
     68  f03c		       00		      DC	%00000000
     69  f03d		       00		      DC	%00000000
     70  f03e		       00		      DC	%00000000
     71  f03f		       00		      DC	%00000000
     72  f040		       00		      DC	%00000000
     73  f041		       00		      DC	%00000000
     74  f042		       01		      DC	%00000001
     75  f043		       01		      DC	%00000001
     76  f044		       01		      DC	%00000001
     77  f045		       03		      DC	%00000011
     78  f046		       03		      DC	%00000011
     79  f047		       03		      DC	%00000011
     80  f048		       07		      DC	%00000111
     81  f049		       07		      DC	%00000111
     82  f04a		       07		      DC	%00000111
     83  f04b		       0f		      DC	%00001111
     84  f04c		       0f		      DC	%00001111
     85  f04d		       0f		      DC	%00001111
     86  f04e		       1f		      DC	%00011111
     87  f04f		       1f		      DC	%00011111
     88  f050		       1f		      DC	%00011111
     89  f051		       3f		      DC	%00111111
     90  f052		       3f		      DC	%00111111
     91  f053		       3f		      DC	%00111111
     92  f054		       7f		      DC	%01111111
     93  f055		       7f		      DC	%01111111
     94  f056		       7f		      DC	%01111111
     95  f057		       ff		      DC	%11111111
     96  f058		       ff		      DC	%11111111
     97  f059		       ff		      DC	%11111111
     98  f05a
     99  f05a				   and_1d
    100  f05a		       02		      DC	%00000010
    101  f05b		       02		      DC	%00000010
    102  f05c		       02		      DC	%00000010
    103  f05d		       03		      DC	%00000011
    104  f05e		       03		      DC	%00000011
    105  f05f		       03		      DC	%00000011
    106  f060		       03		      DC	%00000011
    107  f061		       03		      DC	%00000011
    108  f062		       03		      DC	%00000011
    109  f063		       03		      DC	%00000011
    110  f064		       03		      DC	%00000011
    111  f065		       03		      DC	%00000011
    112  f066		       03		      DC	%00000011
    113  f067		       03		      DC	%00000011
    114  f068		       03		      DC	%00000011
    115  f069		       03		      DC	%00000011
    116  f06a		       03		      DC	%00000011
    117  f06b		       03		      DC	%00000011
    118  f06c		       03		      DC	%00000011
    119  f06d		       03		      DC	%00000011
    120  f06e		       03		      DC	%00000011
    121  f06f		       03		      DC	%00000011
    122  f070		       03		      DC	%00000011
    123  f071		       03		      DC	%00000011
    124  f072		       03		      DC	%00000011
    125  f073		       03		      DC	%00000011
    126  f074		       03		      DC	%00000011
    127  f075		       03		      DC	%00000011
    128  f076		       03		      DC	%00000011
    129  f077		       03		      DC	%00000011
------- FILE main.asm
------- FILE map.asm LEVEL 2 PASS 4
      0  f078					      INCLUDE	"map.asm"
      1  f078							; VePseu's maps
      2  f078
      3  f078		       00 d1	   MAP_01_POS =	$D1
      4  f078		       00 10	   MAP_01_WDTH =	$10
      5  f078		       01 00	   MAP_01_SZ  =	$100
      6  f078
      7  f078				   jerry
      8  f078		       00		      DC	%00000000
      9  f079		       42		      DC	%01000010
     10  f07a		       42		      DC	%01000010
     11  f07b		       42		      DC	%01000010
     12  f07c		       42		      DC	%01000010
     13  f07d		       42		      DC	%01000010
     14  f07e		       42		      DC	%01000010
     15  f07f		       42		      DC	%01000010
     16  f080		       42		      DC	%01000010
     17  f081		       42		      DC	%01000010
     18  f082		       42		      DC	%01000010
     19  f083		       42		      DC	%01000010
     20  f084		       ff		      DC	%11111111
     21  f085		       81		      DC	%10000001
     22  f086		       89		      DC	%10001001
     23  f087		       81		      DC	%10000001
     24  f088		       89		      DC	%10001001
     25  f089		       81		      DC	%10000001
     26  f08a		       89		      DC	%10001001
     27  f08b		       81		      DC	%10000001
     28  f08c		       89		      DC	%10001001
     29  f08d		       81		      DC	%10000001
     30  f08e		       99		      DC	%10011001
     31  f08f		       a5		      DC	%10100101
     32  f090		       42		      DC	%01000010
     33  f091		       42		      DC	%01000010
     34  f092		       6a		      DC	%01101010
     35  f093		       42		      DC	%01000010
     36  f094		       99		      DC	%10011001
     37  f095		       a5		      DC	%10100101
     38  f096		       c3		      DC	%11000011
     39  f097
     40  f097				   miniMap_01
     41  f097		       e0 07		      DC.W	%0000011111100000
     42  f099		       bf fd		      DC.W	%1111110110111111
     43  f09b		       80 01		      DC.W	%0000000110000000
     44  f09d		       80 01		      DC.W	%0000000110000000
     45  f09f		       be bd		      DC.W	%1011110110111110
     46  f0a1		       a2 a5		      DC.W	%1010010110100010
     47  f0a3		       a2 a7		      DC.W	%1010011110100010
     48  f0a5		       e2 a7		      DC.W	%1010011111100010
     49  f0a7		       e2 a5		      DC.W	%1010010111100010
     50  f0a9		       be bd		      DC.W	%1011110110111110
     51  f0ab		       80 81		      DC.W	%1000000110000000
     52  f0ad		       80 81		      DC.W	%1000000110000000
     53  f0af		       bf fd		      DC.W	%1111110110111111
     54  f0b1		       a0 05		      DC.W	%0000010110100000
     55  f0b3		       a0 05		      DC.W	%0000010110100000
     56  f0b5		       e0 07		      DC.W	%0000011111100000
     57  f0b7
     58  f0b7				   map_01_load
     59  f0b7		       a9 d1		      LDA	#MAP_01_POS
     60  f0b9		       85 ab		      STA	playerPos
     61  f0bb		       a9 10		      LDA	#MAP_01_WDTH
     62  f0bd		       85 ac		      STA	mapWidth
     63  f0bf
     64  f0bf		       a9 00		      LDA	#<map_01
     65  f0c1		       85 c0		      STA	mapPtr
     66  f0c3		       a9 f1		      LDA	#>map_01
     67  f0c5		       85 c1		      STA	mapPtr + 1
     68  f0c7
     69  f0c7		       a9 97		      LDA	#<miniMap_01
     70  f0c9		       85 be		      STA	miniMapPtr
     71  f0cb		       a9 f0		      LDA	#>miniMap_01
     72  f0cd		       85 bf		      STA	miniMapPtr + 1
     73  f0cf		       60		      RTS
     74  f0d0
     75  f0d0
     76  f100		       00 00 00 00*	      ALIGN	256
     77  f100
     78  f100				   map_01
     79  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     80  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     81  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     82  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     83  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     84  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     85  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     86  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     87  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     88  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     89  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     90  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     91  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     92  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     93  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     94  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     13  f200
     14  f800					      ORG	$F800
     15  f800
     16  f800				   start
     17  f800
     18  f800							; Initialize everything
     19  f800
------- FILE init.asm LEVEL 2 PASS 4
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800		       a2 ff		      LDX	#stack
      4  f802		       9a		      TXS
      5  f803
      6  f803		       a9 00		      LDA	#NULL
      7  f805
      8  f805		       d8		      CLD
      9  f806		       18		      CLC
     10  f807		       58		      CLI
     11  f808		       b8		      CLV
     12  f809
     13  f809		       a2 00		      LDX	#INDEXINIT
     14  f80b
     15  f80b				   cleanLoop
     16  f80b
     17  f80b		       95 00		      STA	cleanStart,X
     18  f80d		       e8		      INX
     19  f80e
     20  f80e		       e0 00		      CPX	#cleanEnd
     21  f810		       d0 f9		      BNE	cleanLoop
     22  f812
     23  f812		       20 b7 f0 	      JSR	map_01_load
     24  f815
     25  f815		       a5 ac		      LDA	mapWidth
     26  f817		       85 b0		      STA	yLoss
     27  f819		       a9 01		      LDA	#ONE
     28  f81b		       85 ad		      STA	xGain
     29  f81d		       a9 00		      LDA	#NULL
     30  f81f		       85 af		      STA	yGain
     31  f821		       85 ae		      STA	xLoss
     32  f823
     33  f823		       a9 86		      LDA	#WCOLU
     34  f825		       85 b5		      STA	wallColour
     35  f827		       a9 82		      LDA	#SCOLU
     36  f829		       85 b6		      STA	shadowColour
------- FILE main.asm
     21  f82b
     22  f82b		       a9 02		      LDA	#VSYNC_SET
     23  f82d
     24  f82d				   screenStart
     25  f82d
     26  f82d							; Start vsync (3 scanlines)
     27  f82d		       85 00		      STA	VSYNC
     28  f82f
     29  f82f		       85 02		      STA	WSYNC
     30  f831		       85 02		      STA	WSYNC
     31  f833		       a9 00		      LDA	#NULL
     32  f835		       85 02		      STA	WSYNC
     33  f837
     34  f837		       85 00		      STA	VSYNC
     35  f839
     36  f839							; Render everything (23 scanlines) (491 bytes)
     37  f839
     38  f839
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f839					      INCLUDE	"walrend.asm"	; 9 scanlines
      1  f839							; VePseu's wall renderer
      2  f839
      3  f839		       a4 ab		      LDY	playerPos
      4  f83b
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f83b					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f83b							; Peripheral vision rendering (54 cycles)
      2  f83b
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f83b					      INCLUDE	"include/ands_0.h"
      1  f83b							; The AND constants for peripheral vision
      2  f83b
      3  f83b		       00 c0	   AND_W0S1P1 =	%11000000
      4  f83b		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f83b
      0  f83b					      X_POS_LOS		; 24 cycles
      1  f83b
      2  f83b		       98		      TYA
      3  f83c		       18		      CLC
      4  f83d		       65 ae		      ADC	xLoss
      5  f83f		       38		      SEC
      6  f840		       e5 ad		      SBC	xGain
      7  f842		       a8		      TAY
      8  f843
      6  f843		       b1 c0		      LDA	(mapPtr),Y
      7  f845		       29 c0		      AND	#AND_W0S1P1
      8  f847		       85 9b		      STA	shadow1a
      9  f849
     10  f849		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f84a		       18		      CLC
     12  f84b		       65 ad		      ADC	xGain
     13  f84d		       65 ad		      ADC	xGain
     14  f84f		       38		      SEC
     15  f850		       e5 ae		      SBC	xLoss
     16  f852		       e5 ae		      SBC	xLoss
     17  f854		       a8		      TAY
     18  f855
     19  f855		       b1 c0		      LDA	(mapPtr),Y	; 10 cycles
     20  f857		       29 03		      AND	#AND_W0S1P2
     21  f859		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f85b
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f85b					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f85b							; Render the first layer (not that ugly) (86 cycles)
      2  f85b
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f85b					      INCLUDE	"include/ands_1.h"
      1  f85b							; The AND constants for layer 1
      2  f85b
      3  f85b		       00 03	   AND_W1S1P1 =	%00000011
      4  f85b		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f85b
      0  f85b					      Y_POS_ADV		; 30 cycles
      1  f85b
      2  f85b		       98		      TYA
      3  f85c		       18		      CLC
      4  f85d		       65 af		      ADC	yGain
      5  f85f		       38		      SEC
      6  f860		       e5 b0		      SBC	yLoss
      7  f862		       a8		      TAY
      8  f863
      6  f863		       b1 c0		      LDA	(mapPtr),Y
      7  f865		       85 9e		      STA	shadow1d
      8  f867		       05 9f		      ORA	shadow1e
      9  f869		       29 03		      AND	#AND_W1S1P1
     10  f86b		       85 9f		      STA	shadow1e
     11  f86d
      0  f86d					      X_POS_LOS		; 22 cycles
      1  f86d
      2  f86d		       98		      TYA
      3  f86e		       18		      CLC
      4  f86f		       65 ae		      ADC	xLoss
      5  f871		       38		      SEC
      6  f872		       e5 ad		      SBC	xGain
      7  f874		       a8		      TAY
      8  f875
     13  f875		       b1 c0		      LDA	(mapPtr),Y
     14  f877		       85 80		      STA	wall1
     15  f879
      0  f879					      X_POS_LOS		; 34 cycles
      1  f879
      2  f879		       98		      TYA
      3  f87a		       18		      CLC
      4  f87b		       65 ae		      ADC	xLoss
      5  f87d		       38		      SEC
      6  f87e		       e5 ad		      SBC	xGain
      7  f880		       a8		      TAY
      8  f881
     17  f881		       b1 c0		      LDA	(mapPtr),Y
     18  f883		       aa		      TAX
     19  f884		       05 9b		      ORA	shadow1a
     20  f886		       85 9b		      STA	shadow1a
     21  f888		       8a		      TXA
     22  f889		       29 03		      AND	#AND_W1S1P2
     23  f88b		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f88d
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f88d					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f88d							; Render the second layer (186 cycles)
      2  f88d
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f88d					      INCLUDE	"include/ands_2.h"
      1  f88d							; The AND constants for layer 2
      2  f88d
      3  f88d		       00 e0	   AND_W2S1P1 =	%11100000
      4  f88d		       00 fc	   AND_W2S2P1 =	%11111100
      5  f88d
      6  f88d		       00 03	   AND_W2S0P1 =	%00000011
      7  f88d		       00 04	   AND_W2S1P2 =	%00000100
      8  f88d		       00 0c	   AND_W2S2P2 =	%00001100
      9  f88d
     10  f88d		       00 fc	   AND_W2S0P2 =	%11111100
     11  f88d
     12  f88d		       00 80	   AND_W2S1P3 =	%10000000
     13  f88d		       00 c0	   AND_W2S2P3 =	%11000000
     14  f88d
     15  f88d		       00 01	   AND_W2S1P4 =	%00000001
     16  f88d		       00 0f	   AND_W2S2P4 =	%00001111
     17  f88d		       00 03	   AND_W2S1P5 =	%00000011
     18  f88d		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f88d
      0  f88d					      Y_POS_ADV		; 14 cycles
      1  f88d
      2  f88d		       98		      TYA
      3  f88e		       18		      CLC
      4  f88f		       65 af		      ADC	yGain
      5  f891		       38		      SEC
      6  f892		       e5 b0		      SBC	yLoss
      7  f894		       a8		      TAY
      8  f895
      6  f895
      0  f895					      X_POS_LOS		; 29 cycles
      1  f895
      2  f895		       98		      TYA
      3  f896		       18		      CLC
      4  f897		       65 ae		      ADC	xLoss
      5  f899		       38		      SEC
      6  f89a		       e5 ad		      SBC	xGain
      7  f89c		       a8		      TAY
      8  f89d
      8  f89d		       b1 c0		      LDA	(mapPtr),Y
      9  f89f		       29 fc		      AND	#AND_W2S2P1
     10  f8a1		       85 a0		      STA	shadow2ab
     11  f8a3		       29 e0		      AND	#AND_W2S1P1
     12  f8a5		       85 91		      STA	shadow2aa
     13  f8a7
      0  f8a7					      X_POS_GAN		; 41 cycles
      1  f8a7
      2  f8a7		       98		      TYA
      3  f8a8		       18		      CLC
      4  f8a9		       65 ad		      ADC	xGain
      5  f8ab		       38		      SEC
      6  f8ac		       e5 ae		      SBC	xLoss
      7  f8ae		       a8		      TAY
      8  f8af
     15  f8af		       b1 c0		      LDA	(mapPtr),Y
     16  f8b1		       aa		      TAX
     17  f8b2		       85 85		      STA	wall2a
     18  f8b4		       29 03		      AND	#AND_W2S0P1
     19  f8b6		       85 86		      STA	wall2b
     20  f8b8		       8a		      TXA
     21  f8b9		       29 0c		      AND	#AND_W2S2P2
     22  f8bb		       85 a1		      STA	shadow2bb
     23  f8bd		       29 04		      AND	#AND_W2S1P2
     24  f8bf		       85 92		      STA	shadow2ba
     25  f8c1
      0  f8c1					      X_POS_GAN		; 30 cycles
      1  f8c1
      2  f8c1		       98		      TYA
      3  f8c2		       18		      CLC
      4  f8c3		       65 ad		      ADC	xGain
      5  f8c5		       38		      SEC
      6  f8c6		       e5 ae		      SBC	xLoss
      7  f8c8		       a8		      TAY
      8  f8c9
     27  f8c9		       b1 c0		      LDA	(mapPtr),Y
     28  f8cb		       85 87		      STA	wall2c
     29  f8cd		       29 fc		      AND	#AND_W2S0P2
     30  f8cf		       05 86		      ORA	wall2b
     31  f8d1		       85 86		      STA	wall2b
     32  f8d3
      0  f8d3					      X_POS_GAN		; 35 cycles
      1  f8d3
      2  f8d3		       98		      TYA
      3  f8d4		       18		      CLC
      4  f8d5		       65 ad		      ADC	xGain
      5  f8d7		       38		      SEC
      6  f8d8		       e5 ae		      SBC	xLoss
      7  f8da		       a8		      TAY
      8  f8db
     34  f8db		       b1 c0		      LDA	(mapPtr),Y
     35  f8dd		       85 88		      STA	wall2d
     36  f8df		       85 89		      STA	wall2e
     37  f8e1		       29 c0		      AND	#AND_W2S2P3
     38  f8e3		       85 a2		      STA	shadow2cb
     39  f8e5		       29 80		      AND	#AND_W2S1P3
     40  f8e7		       85 93		      STA	shadow2ca
     41  f8e9
      0  f8e9					      X_POS_GAN		; 37 cycles
      1  f8e9
      2  f8e9		       98		      TYA
      3  f8ea		       18		      CLC
      4  f8eb		       65 ad		      ADC	xGain
      5  f8ed		       38		      SEC
      6  f8ee		       e5 ae		      SBC	xLoss
      7  f8f0		       a8		      TAY
      8  f8f1
     43  f8f1		       b1 c0		      LDA	(mapPtr),Y
     44  f8f3		       29 0f		      AND	#AND_W2S2P4
     45  f8f5		       85 a3		      STA	shadow2db
     46  f8f7		       29 03		      AND	#AND_W2S1P5
     47  f8f9		       85 95		      STA	shadow2ea
     48  f8fb		       85 a4		      STA	shadow2eb
     49  f8fd		       29 01		      AND	#AND_W2S1P4
     50  f8ff		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f901
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f901					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f901							; Render the third layer (it's really ugly, at 281 cycles)
      2  f901
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f901					      INCLUDE	"include/ands_3.h"
      1  f901							; The AND constants for render layer 3
      2  f901
      3  f901		       00 80	   AND_W3S1P1 =	%10000000
      4  f901		       00 c0	   AND_W3S2P1 =	%11000000
      5  f901
      6  f901		       00 fc	   AND_W3S0P1 =	%11111100
      7  f901		       00 02	   AND_W3S1P2 =	%00000010
      8  f901		       00 03	   AND_W3S2P2 =	%00000011
      9  f901
     10  f901		       00 03	   AND_W3S0P2 =	%00000011
     11  f901		       00 0f	   AND_W3S0P3 =	%00001111
     12  f901		       00 10	   AND_W3S1P3 =	%00010000
     13  f901		       00 30	   AND_W3S2P3 =	%00110000
     14  f901
     15  f901		       00 f0	   AND_W3S0P4 =	%11110000
     16  f901		       00 30	   AND_W3S0P5 =	%00110000
     17  f901
     18  f901		       00 c0	   AND_W3S0P6 =	%11000000
     19  f901		       00 f0	   AND_W3S0P7 =	%11110000
     20  f901		       00 20	   AND_W3S1P4 =	%00100000
     21  f901		       00 30	   AND_W3S2P4 =	%00110000
     22  f901
     23  f901		       00 0f	   AND_W3S0P8 =	%00001111
     24  f901		       00 03	   AND_W3S0P9 =	%00000011
     25  f901		       00 10	   AND_W3S1P5 =	%00010000
     26  f901		       00 30	   AND_W3S2P5 =	%00110000
     27  f901
     28  f901		       00 02	   AND_W3S1P6 =	%00000010
     29  f901		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f901
      0  f901					      Y_POS_ADV		; 14 cycles
      1  f901
      2  f901		       98		      TYA
      3  f902		       18		      CLC
      4  f903		       65 af		      ADC	yGain
      5  f905		       38		      SEC
      6  f906		       e5 b0		      SBC	yLoss
      7  f908		       a8		      TAY
      8  f909
      6  f909
      0  f909					      X_POS_GAN		; 29 cycles
      1  f909
      2  f909		       98		      TYA
      3  f90a		       18		      CLC
      4  f90b		       65 ad		      ADC	xGain
      5  f90d		       38		      SEC
      6  f90e		       e5 ae		      SBC	xLoss
      7  f910		       a8		      TAY
      8  f911
      8  f911		       b1 c0		      LDA	(mapPtr),Y
      9  f913		       29 03		      AND	#AND_W3S2P6
     10  f915		       85 a9		      STA	shadow3eb
     11  f917		       29 02		      AND	#AND_W3S1P6
     12  f919		       85 9a		      STA	shadow3ea
     13  f91b
      0  f91b					      X_POS_LOS		; 38 cycles
      1  f91b
      2  f91b		       98		      TYA
      3  f91c		       18		      CLC
      4  f91d		       65 ae		      ADC	xLoss
      5  f91f		       38		      SEC
      6  f920		       e5 ad		      SBC	xGain
      7  f922		       a8		      TAY
      8  f923
     15  f923		       b1 c0		      LDA	(mapPtr),Y
     16  f925		       aa		      TAX
     17  f926		       29 0f		      AND	#AND_W3S0P8
     18  f928		       85 8d		      STA	wall3d
     19  f92a		       29 03		      AND	#AND_W3S0P9
     20  f92c		       85 8e		      STA	wall3e
     21  f92e		       8a		      TXA
     22  f92f		       29 30		      AND	#AND_W3S2P5
     23  f931		       85 a8		      STA	shadow3db
     24  f933		       29 10		      AND	#AND_W3S1P5
     25  f935		       85 99		      STA	shadow3da
     26  f937
      0  f937					      X_POS_LOS		; 46 cycles
      1  f937
      2  f937		       98		      TYA
      3  f938		       18		      CLC
      4  f939		       65 ae		      ADC	xLoss
      5  f93b		       38		      SEC
      6  f93c		       e5 ad		      SBC	xGain
      7  f93e		       a8		      TAY
      8  f93f
     28  f93f		       b1 c0		      LDA	(mapPtr),Y
     29  f941		       aa		      TAX
     30  f942		       29 f0		      AND	#AND_W3S0P7
     31  f944		       05 8d		      ORA	wall3d
     32  f946		       85 8d		      STA	wall3d
     33  f948		       29 c0		      AND	#AND_W3S0P6
     34  f94a		       85 8c		      STA	wall3c
     35  f94c		       8a		      TXA
     36  f94d		       29 30		      AND	#AND_W3S2P4
     37  f94f		       85 a7		      STA	shadow3cb
     38  f951		       29 20		      AND	#AND_W3S1P4
     39  f953		       85 98		      STA	shadow3ca
     40  f955
      0  f955					      X_POS_LOS		; 32 cycles
      1  f955
      2  f955		       98		      TYA
      3  f956		       18		      CLC
      4  f957		       65 ae		      ADC	xLoss
      5  f959		       38		      SEC
      6  f95a		       e5 ad		      SBC	xGain
      7  f95c		       a8		      TAY
      8  f95d
     42  f95d		       b1 c0		      LDA	(mapPtr),Y
     43  f95f		       29 f0		      AND	#AND_W3S0P4
     44  f961		       85 8b		      STA	wall3b
     45  f963		       29 30		      AND	#AND_W3S0P5
     46  f965		       05 8c		      ORA	wall3c
     47  f967		       85 8c		      STA	wall3c
     48  f969
      0  f969					      X_POS_LOS		; 46 cycles
      1  f969
      2  f969		       98		      TYA
      3  f96a		       18		      CLC
      4  f96b		       65 ae		      ADC	xLoss
      5  f96d		       38		      SEC
      6  f96e		       e5 ad		      SBC	xGain
      7  f970		       a8		      TAY
      8  f971
     50  f971		       b1 c0		      LDA	(mapPtr),Y
     51  f973		       aa		      TAX
     52  f974		       29 0f		      AND	#AND_W3S0P3
     53  f976		       05 8b		      ORA	wall3b
     54  f978		       85 8b		      STA	wall3b
     55  f97a		       29 03		      AND	#AND_W3S0P2
     56  f97c		       85 8a		      STA	wall3a
     57  f97e		       8a		      TXA
     58  f97f		       29 30		      AND	#AND_W3S2P3
     59  f981		       85 a6		      STA	shadow3bb
     60  f983		       29 10		      AND	#AND_W3S1P3
     61  f985		       85 97		      STA	shadow3ba
     62  f987
      0  f987					      X_POS_LOS		; 41 cycles
      1  f987
      2  f987		       98		      TYA
      3  f988		       18		      CLC
      4  f989		       65 ae		      ADC	xLoss
      5  f98b		       38		      SEC
      6  f98c		       e5 ad		      SBC	xGain
      7  f98e		       a8		      TAY
      8  f98f
     64  f98f		       b1 c0		      LDA	(mapPtr),Y
     65  f991		       aa		      TAX
     66  f992		       29 fc		      AND	#AND_W3S0P1
     67  f994		       05 8a		      ORA	wall3a
     68  f996		       85 8a		      STA	wall3a
     69  f998		       8a		      TXA
     70  f999		       29 03		      AND	#AND_W3S2P2
     71  f99b		       85 a5		      STA	shadow3ab
     72  f99d		       29 02		      AND	#AND_W3S1P2
     73  f99f		       85 96		      STA	shadow3aa
     74  f9a1
      0  f9a1					      X_POS_LOS		; 35 cycles
      1  f9a1
      2  f9a1		       98		      TYA
      3  f9a2		       18		      CLC
      4  f9a3		       65 ae		      ADC	xLoss
      5  f9a5		       38		      SEC
      6  f9a6		       e5 ad		      SBC	xGain
      7  f9a8		       a8		      TAY
      8  f9a9
     76  f9a9		       b1 c0		      LDA	(mapPtr),Y
     77  f9ab		       29 c0		      AND	#AND_W3S2P1
     78  f9ad		       05 a5		      ORA	shadow3ab
     79  f9af		       85 a5		      STA	shadow3ab
     80  f9b1		       29 80		      AND	#AND_W3S1P1
     81  f9b3		       05 96		      ORA	shadow3aa
     82  f9b5		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f9b7
     13  f9b7		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f9b9					      INCLUDE	"scrend.asm"	; 14 Scanlines
      1  f9b9							; VePseu's screen renderer
      2  f9b9
      3  f9b9							; Remove the shadows incase only 1 wall is drawn
      4  f9b9
      5  f9b9		       a5 9b		      LDA	shadow1a	; 12 cycles
      6  f9bb		       05 80		      ORA	wall1
      7  f9bd		       45 80		      EOR	wall1
      8  f9bf		       85 9b		      STA	shadow1a
      9  f9c1
     10  f9c1		       a5 9c		      LDA	shadow1b	; 12 cycles
     11  f9c3		       05 80		      ORA	wall1
     12  f9c5		       45 80		      EOR	wall1
     13  f9c7		       85 9c		      STA	shadow1b
     14  f9c9
     15  f9c9		       a5 9e		      LDA	shadow1d	; 12 cycles
     16  f9cb		       05 80		      ORA	wall1
     17  f9cd		       45 80		      EOR	wall1
     18  f9cf		       85 9e		      STA	shadow1d
     19  f9d1
     20  f9d1		       a5 9f		      LDA	shadow1e	; 12 cycles
     21  f9d3		       05 80		      ORA	wall1
     22  f9d5		       45 80		      EOR	wall1
     23  f9d7		       85 9f		      STA	shadow1e
     24  f9d9
     25  f9d9		       a5 80		      LDA	wall1	; Copy wall one to the four addresses preceding it (15 cycles)
     26  f9db		       85 81		      STA	wall1+1
     27  f9dd		       85 82		      STA	wall1+2
     28  f9df		       85 83		      STA	wall1+3
     29  f9e1		       85 84		      STA	wall1+4
     30  f9e3
     31  f9e3		       a2 00		      LDX	#INDEXINIT	; 2 cycles
     32  f9e5
     33  f9e5				   scrRendLoop		; Totals at 909 cycles
     34  f9e5
     35  f9e5		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     36  f9e7		       15 80		      ORA	wall1,X
     37  f9e9		       95 85		      STA	wall2a,X
     38  f9eb
     39  f9eb		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     40  f9ed		       15 9b		      ORA	shadow1a,X
     41  f9ef		       95 91		      STA	shadow2aa,X
     42  f9f1
     43  f9f1		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     44  f9f3		       15 9b		      ORA	shadow1a,X
     45  f9f5		       95 a0		      STA	shadow2ab,X
     46  f9f7
     47  f9f7		       b5 85		      LDA	wall2a,X	; Overlap walls (16 cycles)
     48  f9f9		       15 9b		      ORA	shadow1a,X
     49  f9fb		       55 9b		      EOR	shadow1a,X
     50  f9fd		       95 85		      STA	wall2a,X
     51  f9ff
     52  f9ff		       b5 91		      LDA	shadow2aa,X	; Overlap A shadows (16 cycles)
     53  fa01		       15 85		      ORA	wall2a,X
     54  fa03		       55 85		      EOR	wall2a,X
     55  fa05		       95 91		      STA	shadow2aa,X
     56  fa07
     57  fa07		       b5 a0		      LDA	shadow2ab,X	; Overlap B shadows (16 cycles)
     58  fa09		       15 85		      ORA	wall2a,X
     59  fa0b		       55 85		      EOR	wall2a,X
     60  fa0d		       95 a0		      STA	shadow2ab,X
     61  fa0f
     62  fa0f		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     63  fa10		       e0 0a		      CPX	#WALLCNT
     64  fa12		       d0 d1		      BNE	scrRendLoop
     65  fa14
     66  fa14		       a9 ff		      LDA	#FULLWALL
     67  fa16		       45 a5		      EOR	shadow3ab
     68  fa18		       85 8f		      STA	wall4a
     69  fa1a
     70  fa1a		       a9 ff		      LDA	#FULLWALL
     71  fa1c		       45 a6		      EOR	shadow3bb
     72  fa1e		       85 90		      STA	wall4b
     73  fa20
     74  fa20		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     41  fa22
     42  fa22		       a9 78		      LDA	#<jerry
     43  fa24		       85 c2		      STA	sprite
     44  fa26		       a9 f0		      LDA	#>jerry
     45  fa28		       85 c3		      STA	sprite+1
     46  fa2a		       a9 0c		      LDA	#$0C
     47  fa2c		       85 06		      STA	COLUP0
     48  fa2e
     49  fa2e		       a9 1f		      LDA	#31
     50  fa30		       85 bc		      STA	spriteHeight
     51  fa32
     52  fa32							; Pad!
     53  fa32
     54  fa32		       a2 0e		      LDX	#UPPAD_LIMIT
     55  fa34
     56  fa34				   upperPad
     57  fa34		       85 02		      STA	WSYNC
     58  fa36
     59  fa36		       ca		      DEX
     60  fa37		       d0 fb		      BNE	upperPad
     61  fa39
     62  fa39		       85 02		      STA	WSYNC
     63  fa3b
     64  fa3b							; Draw everything (956 bytes)
     65  fa3b
     66  fa3b		       a0 00		      LDY	#0
     67  fa3d
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  fa3d					      INCLUDE	"dispkern.asm"	; 186 scanlines
      1  fa3d							; VePseu's display kernel
      2  fa3d
      3  fa3d		       4c 40 fa 	      JMP	drawStart
      4  fa40
      5  fa40							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  fa40							;
      7  fa40							; dc_w1s1.asm
      8  fa40							; |   | |
      9  fa40							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  fa40							; |   |
     11  fa40							; |   |- The wall it draws
     12  fa40							; |
     13  fa40							; |- Draw-code identifies
     14  fa40
     15  fa40				   drawStart
     16  fa40
     17  fa40		       b8		      CLV
     18  fa41
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  fa41					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  fa41							; The draw code for the 1st wall and shadow
      2  fa41
      3  fa41				   dc_w1s1    SUBROUTINE
      4  fa41
      5  fa41		       a2 00		      LDX	#INDEXINIT
      6  fa43		       4c 53 fa 	      JMP	.loop
      7  fa46
      8  fa46				   .noSprite_1
      9  fa46							; Depending on the location in the program the branch here might cross a
     10  fa46							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  fa46							; delay simply check if the page number (the MSB of the address) is
     12  fa46							; different between the branch and it's destination
     13  fa46					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa46					      DELAY	11
      1  fa46				   .CYCLES    SET	11
      2  fa46
      3  fa46					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa46		       ea		      NOP
      5  fa46				   .CYCLES    SET	.CYCLES - 2
      6  fa47					      ENDIF
      7  fa47
      8  fa47					      IF	[.CYCLES - 2] / 5
      9  fa47					      REPEAT	.CYCLES / 5
     10  fa47		       e6 c4		      INC	foo
     11  fa49					      REPEND
     12  fa49				   .CYCLES    SET	.CYCLES % 5
     13  fa49					      ENDIF
     14  fa49
     15  fa49					      IF	.CYCLES % 3 == 1
     16  fa49		       ea		      NOP
     17  fa49				   .CYCLES    SET	.CYCLES - 2
     18  fa4a					      ENDIF
     19  fa4a
     20  fa4a				  -	      REPEAT	.CYCLES / 3
     21  fa4a				  -	      STA	DUMP
     22  fa4a					      REPEND
     23  fa4a
     24  fa4a				   .CYCLES    SET	.CYCLES % 3
     25  fa4a
     26  fa4a					      REPEAT	.CYCLES / 2
     27  fa4a		       ea		      NOP
     28  fa4b					      REPEND
     29  fa4b
     30  fa4b				   .CYCLES    SET	.CYCLES % 2
     31  fa4b
     32  fa4b				  -	      IF	.CYCLES
     33  fa4b				  -	      ERR
     34  fa4b					      ENDIF
     35  fa4b
     15  fa4b				  -	      ELSE
     16  fa4b				  -	      DELAY	10
     17  fa4b					      ENDIF
     18  fa4b		       4c 69 fa 	      JMP	.noSprite_ret
     19  fa4e
     20  fa4e				   .noSprite_2
     21  fa4e					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa4e					      DELAY	4
      1  fa4e				   .CYCLES    SET	4
      2  fa4e
      3  fa4e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa4e				  -	      NOP
      5  fa4e				  -.CYCLES    SET	.CYCLES - 2
      6  fa4e					      ENDIF
      7  fa4e
      8  fa4e				  -	      IF	[.CYCLES - 2] / 5
      9  fa4e				  -	      REPEAT	.CYCLES / 5
     10  fa4e				  -	      INC	foo
     11  fa4e				  -	      REPEND
     12  fa4e				  -.CYCLES    SET	.CYCLES % 5
     13  fa4e					      ENDIF
     14  fa4e
     15  fa4e					      IF	.CYCLES % 3 == 1
     16  fa4e		       ea		      NOP
     17  fa4e				   .CYCLES    SET	.CYCLES - 2
     18  fa4f					      ENDIF
     19  fa4f
     20  fa4f				  -	      REPEAT	.CYCLES / 3
     21  fa4f				  -	      STA	DUMP
     22  fa4f					      REPEND
     23  fa4f
     24  fa4f				   .CYCLES    SET	.CYCLES % 3
     25  fa4f
     26  fa4f					      REPEAT	.CYCLES / 2
     27  fa4f		       ea		      NOP
     28  fa50					      REPEND
     29  fa50
     30  fa50				   .CYCLES    SET	.CYCLES % 2
     31  fa50
     32  fa50				  -	      IF	.CYCLES
     33  fa50				  -	      ERR
     34  fa50					      ENDIF
     35  fa50
     23  fa50				  -	      ELSE
     24  fa50				  -	      DELAY	3
     25  fa50					      ENDIF
     26  fa50		       4c 69 fa 	      JMP	.noSprite_ret
     27  fa53
     28  fa53				   .loop
     29  fa53		       a5 b5		      LDA	wallColour
     30  fa55		       85 02		      STA	WSYNC
     31  fa57		       85 08		      STA	COLUPF
     32  fa59		       a5 80		      LDA	wall1
     33  fa5b		       85 0e		      STA	PF1
     34  fa5d		       98		      TYA
     35  fa5e				   .branchPoint_1
     36  fa5e		       f0 e6		      BEQ	.noSprite_1
     37  fa60		       88		      DEY
     38  fa61		       c4 bc		      CPY	spriteHeight
     39  fa63				   .branchPoint_2
     40  fa63		       b0 e9		      BCS	.noSprite_2
     41  fa65		       b1 c2		      LDA	(sprite),Y
     42  fa67		       85 1b		      STA	GRP0
     43  fa69				   .noSprite_ret
     44  fa69		       a5 80		      LDA	wall1
     45  fa6b		       85 0f		      STA	PF2
      0  fa6d					      DELAY	6
      1  fa6d				   .CYCLES    SET	6
      2  fa6d
      3  fa6d				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa6d				  -	      NOP
      5  fa6d				  -.CYCLES    SET	.CYCLES - 2
      6  fa6d					      ENDIF
      7  fa6d
      8  fa6d				  -	      IF	[.CYCLES - 2] / 5
      9  fa6d				  -	      REPEAT	.CYCLES / 5
     10  fa6d				  -	      INC	foo
     11  fa6d				  -	      REPEND
     12  fa6d				  -.CYCLES    SET	.CYCLES % 5
     13  fa6d					      ENDIF
     14  fa6d
     15  fa6d				  -	      IF	.CYCLES % 3 == 1
     16  fa6d				  -	      NOP
     17  fa6d				  -.CYCLES    SET	.CYCLES - 2
     18  fa6d					      ENDIF
     19  fa6d
     20  fa6d					      REPEAT	.CYCLES / 3
     21  fa6d		       85 30		      STA	DUMP
     20  fa6d					      REPEND
     21  fa6f		       85 30		      STA	DUMP
     22  fa71					      REPEND
     23  fa71
     24  fa71				   .CYCLES    SET	.CYCLES % 3
     25  fa71
     26  fa71				  -	      REPEAT	.CYCLES / 2
     27  fa71				  -	      NOP
     28  fa71					      REPEND
     29  fa71
     30  fa71				   .CYCLES    SET	.CYCLES % 2
     31  fa71
     32  fa71				  -	      IF	.CYCLES
     33  fa71				  -	      ERR
     34  fa71					      ENDIF
     35  fa71
     47  fa71		       85 0d		      STA	PF0
      0  fa73					      DELAY	19
      1  fa73				   .CYCLES    SET	19
      2  fa73
      3  fa73				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa73				  -	      NOP
      5  fa73				  -.CYCLES    SET	.CYCLES - 2
      6  fa73					      ENDIF
      7  fa73
      8  fa73					      IF	[.CYCLES - 2] / 5
      9  fa73					      REPEAT	.CYCLES / 5
     10  fa73		       e6 c4		      INC	foo
      9  fa73					      REPEND
     10  fa75		       e6 c4		      INC	foo
      9  fa75					      REPEND
     10  fa77		       e6 c4		      INC	foo
     11  fa79					      REPEND
     12  fa79				   .CYCLES    SET	.CYCLES % 5
     13  fa79					      ENDIF
     14  fa79
     15  fa79					      IF	.CYCLES % 3 == 1
     16  fa79		       ea		      NOP
     17  fa79				   .CYCLES    SET	.CYCLES - 2
     18  fa7a					      ENDIF
     19  fa7a
     20  fa7a				  -	      REPEAT	.CYCLES / 3
     21  fa7a				  -	      STA	DUMP
     22  fa7a					      REPEND
     23  fa7a
     24  fa7a				   .CYCLES    SET	.CYCLES % 3
     25  fa7a
     26  fa7a					      REPEAT	.CYCLES / 2
     27  fa7a		       ea		      NOP
     28  fa7b					      REPEND
     29  fa7b
     30  fa7b				   .CYCLES    SET	.CYCLES % 2
     31  fa7b
     32  fa7b				  -	      IF	.CYCLES
     33  fa7b				  -	      ERR
     34  fa7b					      ENDIF
     35  fa7b
     49  fa7b		       a9 00		      LDA	#NULL
     50  fa7d		       85 0f		      STA	PF2
     51  fa7f		       85 0d		      STA	PF0
     52  fa81
     53  fa81		       85 02		      STA	WSYNC
     54  fa83		       a5 b6		      LDA	shadowColour
     55  fa85		       85 08		      STA	COLUPF
     56  fa87		       a5 9b		      LDA	shadow1a
     57  fa89		       3d 00 f0 	      AND	and_1a,X
     58  fa8c		       85 0e		      STA	PF1
     59  fa8e		       a5 9c		      LDA	shadow1b
     60  fa90		       3d 1e f0 	      AND	and_1b,X
     61  fa93		       85 0f		      STA	PF2
      0  fa95					      DELAY	9
      1  fa95				   .CYCLES    SET	9
      2  fa95
      3  fa95				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa95				  -	      NOP
      5  fa95				  -.CYCLES    SET	.CYCLES - 2
      6  fa95					      ENDIF
      7  fa95
      8  fa95					      IF	[.CYCLES - 2] / 5
      9  fa95					      REPEAT	.CYCLES / 5
     10  fa95		       e6 c4		      INC	foo
     11  fa97					      REPEND
     12  fa97				   .CYCLES    SET	.CYCLES % 5
     13  fa97					      ENDIF
     14  fa97
     15  fa97					      IF	.CYCLES % 3 == 1
     16  fa97		       ea		      NOP
     17  fa97				   .CYCLES    SET	.CYCLES - 2
     18  fa98					      ENDIF
     19  fa98
     20  fa98				  -	      REPEAT	.CYCLES / 3
     21  fa98				  -	      STA	DUMP
     22  fa98					      REPEND
     23  fa98
     24  fa98				   .CYCLES    SET	.CYCLES % 3
     25  fa98
     26  fa98					      REPEAT	.CYCLES / 2
     27  fa98		       ea		      NOP
     28  fa99					      REPEND
     29  fa99
     30  fa99				   .CYCLES    SET	.CYCLES % 2
     31  fa99
     32  fa99				  -	      IF	.CYCLES
     33  fa99				  -	      ERR
     34  fa99					      ENDIF
     35  fa99
     63  fa99		       a5 9e		      LDA	shadow1d
     64  fa9b		       3d 3c f0 	      AND	and_1c,X
     65  fa9e		       85 0e		      STA	PF1
     66  faa0		       a5 9f		      LDA	shadow1e
     67  faa2		       3d 5a f0 	      AND	and_1d,X
     68  faa5		       85 0f		      STA	PF2
     69  faa7
     70  faa7		       a9 00		      LDA	#NULL
     71  faa9		       85 1b		      STA	GRP0
     72  faab
     73  faab		       e8		      INX
     74  faac		       e0 1e		      CPX	#UPPRWALL_S
     75  faae		       d0 a3		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  fab0					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  fab0							; The second wall and it's first shadow
      2  fab0
      3  fab0				   dc_w2s1    SUBROUTINE
      4  fab0
      5  fab0		       a2 03		      LDX	#PIXH
      6  fab2		       a5 b5		      LDA	wallColour
      0  fab4					      DELAY	2
      1  fab4				   .CYCLES    SET	2
      2  fab4
      3  fab4				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab4				  -	      NOP
      5  fab4				  -.CYCLES    SET	.CYCLES - 2
      6  fab4					      ENDIF
      7  fab4
      8  fab4				  -	      IF	[.CYCLES - 2] / 5
      9  fab4				  -	      REPEAT	.CYCLES / 5
     10  fab4				  -	      INC	foo
     11  fab4				  -	      REPEND
     12  fab4				  -.CYCLES    SET	.CYCLES % 5
     13  fab4					      ENDIF
     14  fab4
     15  fab4				  -	      IF	.CYCLES % 3 == 1
     16  fab4				  -	      NOP
     17  fab4				  -.CYCLES    SET	.CYCLES - 2
     18  fab4					      ENDIF
     19  fab4
     20  fab4				  -	      REPEAT	.CYCLES / 3
     21  fab4				  -	      STA	DUMP
     22  fab4					      REPEND
     23  fab4
     24  fab4				   .CYCLES    SET	.CYCLES % 3
     25  fab4
     26  fab4					      REPEAT	.CYCLES / 2
     27  fab4		       ea		      NOP
     28  fab5					      REPEND
     29  fab5
     30  fab5				   .CYCLES    SET	.CYCLES % 2
     31  fab5
     32  fab5				  -	      IF	.CYCLES
     33  fab5				  -	      ERR
     34  fab5					      ENDIF
     35  fab5
      8  fab5		       4c c9 fa 	      JMP	.joinIn
      9  fab8
     10  fab8				   .noSprite_1
     11  fab8					      IF	>.branchPoint_1 == >.noSprite_1
      0  fab8					      DELAY	11
      1  fab8				   .CYCLES    SET	11
      2  fab8
      3  fab8					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab8		       ea		      NOP
      5  fab8				   .CYCLES    SET	.CYCLES - 2
      6  fab9					      ENDIF
      7  fab9
      8  fab9					      IF	[.CYCLES - 2] / 5
      9  fab9					      REPEAT	.CYCLES / 5
     10  fab9		       e6 c4		      INC	foo
     11  fabb					      REPEND
     12  fabb				   .CYCLES    SET	.CYCLES % 5
     13  fabb					      ENDIF
     14  fabb
     15  fabb					      IF	.CYCLES % 3 == 1
     16  fabb		       ea		      NOP
     17  fabb				   .CYCLES    SET	.CYCLES - 2
     18  fabc					      ENDIF
     19  fabc
     20  fabc				  -	      REPEAT	.CYCLES / 3
     21  fabc				  -	      STA	DUMP
     22  fabc					      REPEND
     23  fabc
     24  fabc				   .CYCLES    SET	.CYCLES % 3
     25  fabc
     26  fabc					      REPEAT	.CYCLES / 2
     27  fabc		       ea		      NOP
     28  fabd					      REPEND
     29  fabd
     30  fabd				   .CYCLES    SET	.CYCLES % 2
     31  fabd
     32  fabd				  -	      IF	.CYCLES
     33  fabd				  -	      ERR
     34  fabd					      ENDIF
     35  fabd
     13  fabd				  -	      ELSE
     14  fabd				  -	      DELAY	10
     15  fabd					      ENDIF
     16  fabd		       4c db fa 	      JMP	.noSprite_ret
     17  fac0
     18  fac0				   .noSprite_2
     19  fac0					      IF	>.branchPoint_2 == >.noSprite_2
      0  fac0					      DELAY	4
      1  fac0				   .CYCLES    SET	4
      2  fac0
      3  fac0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fac0				  -	      NOP
      5  fac0				  -.CYCLES    SET	.CYCLES - 2
      6  fac0					      ENDIF
      7  fac0
      8  fac0				  -	      IF	[.CYCLES - 2] / 5
      9  fac0				  -	      REPEAT	.CYCLES / 5
     10  fac0				  -	      INC	foo
     11  fac0				  -	      REPEND
     12  fac0				  -.CYCLES    SET	.CYCLES % 5
     13  fac0					      ENDIF
     14  fac0
     15  fac0					      IF	.CYCLES % 3 == 1
     16  fac0		       ea		      NOP
     17  fac0				   .CYCLES    SET	.CYCLES - 2
     18  fac1					      ENDIF
     19  fac1
     20  fac1				  -	      REPEAT	.CYCLES / 3
     21  fac1				  -	      STA	DUMP
     22  fac1					      REPEND
     23  fac1
     24  fac1				   .CYCLES    SET	.CYCLES % 3
     25  fac1
     26  fac1					      REPEAT	.CYCLES / 2
     27  fac1		       ea		      NOP
     28  fac2					      REPEND
     29  fac2
     30  fac2				   .CYCLES    SET	.CYCLES % 2
     31  fac2
     32  fac2				  -	      IF	.CYCLES
     33  fac2				  -	      ERR
     34  fac2					      ENDIF
     35  fac2
     21  fac2				  -	      ELSE
     22  fac2				  -	      DELAY	3
     23  fac2					      ENDIF
     24  fac2		       4c db fa 	      JMP	.noSprite_ret
     25  fac5
     26  fac5				   .loop
     27  fac5		       a5 b5		      LDA	wallColour
     28  fac7		       85 02		      STA	WSYNC
     29  fac9				   .joinIn
     30  fac9		       85 08		      STA	COLUPF
     31  facb		       a5 85		      LDA	wall2a
     32  facd		       85 0e		      STA	PF1
     33  facf		       98		      TYA
     34  fad0				   .branchPoint_1
     35  fad0		       f0 e6		      BEQ	.noSprite_1
     36  fad2		       88		      DEY
     37  fad3		       c4 bc		      CPY	spriteHeight
     38  fad5				   .branchPoint_2
     39  fad5		       b0 e9		      BCS	.noSprite_2
     40  fad7		       b1 c2		      LDA	(sprite),Y
     41  fad9		       85 1b		      STA	GRP0
     42  fadb				   .noSprite_ret
     43  fadb		       a5 86		      LDA	wall2b
     44  fadd		       85 0f		      STA	PF2
     45  fadf
     46  fadf		       a5 87		      LDA	wall2c
     47  fae1		       85 0d		      STA	PF0
     48  fae3		       a5 88		      LDA	wall2d
     49  fae5		       85 0e		      STA	PF1
     50  fae7		       a5 89		      LDA	wall2e
     51  fae9		       85 0f		      STA	PF2
     52  faeb		       a9 00		      LDA	#NULL
      0  faed					      DELAY	10
      1  faed				   .CYCLES    SET	10
      2  faed
      3  faed				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  faed				  -	      NOP
      5  faed				  -.CYCLES    SET	.CYCLES - 2
      6  faed					      ENDIF
      7  faed
      8  faed					      IF	[.CYCLES - 2] / 5
      9  faed					      REPEAT	.CYCLES / 5
     10  faed		       e6 c4		      INC	foo
      9  faed					      REPEND
     10  faef		       e6 c4		      INC	foo
     11  faf1					      REPEND
     12  faf1				   .CYCLES    SET	.CYCLES % 5
     13  faf1					      ENDIF
     14  faf1
     15  faf1				  -	      IF	.CYCLES % 3 == 1
     16  faf1				  -	      NOP
     17  faf1				  -.CYCLES    SET	.CYCLES - 2
     18  faf1					      ENDIF
     19  faf1
     20  faf1				  -	      REPEAT	.CYCLES / 3
     21  faf1				  -	      STA	DUMP
     22  faf1					      REPEND
     23  faf1
     24  faf1				   .CYCLES    SET	.CYCLES % 3
     25  faf1
     26  faf1				  -	      REPEAT	.CYCLES / 2
     27  faf1				  -	      NOP
     28  faf1					      REPEND
     29  faf1
     30  faf1				   .CYCLES    SET	.CYCLES % 2
     31  faf1
     32  faf1				  -	      IF	.CYCLES
     33  faf1				  -	      ERR
     34  faf1					      ENDIF
     35  faf1
     54  faf1		       85 0f		      STA	PF2
     55  faf3		       85 0d		      STA	PF0
     56  faf5
     57  faf5		       85 02		      STA	WSYNC	; Draw the shadow
     58  faf7		       a5 b6		      LDA	shadowColour
     59  faf9		       85 08		      STA	COLUPF
     60  fafb		       a5 91		      LDA	shadow2aa
     61  fafd		       05 9b		      ORA	shadow1a
     62  faff		       85 0e		      STA	PF1
     63  fb01		       a5 92		      LDA	shadow2ba
     64  fb03		       05 9c		      ORA	shadow1b
     65  fb05		       85 0f		      STA	PF2
     66  fb07		       a5 93		      LDA	shadow2ca
     67  fb09		       85 0d		      STA	PF0
     68  fb0b		       a5 94		      LDA	shadow2da
     69  fb0d		       05 9e		      ORA	shadow1d
     70  fb0f		       85 0e		      STA	PF1
     71  fb11		       a5 95		      LDA	shadow2ea
     72  fb13		       05 9f		      ORA	shadow1e
     73  fb15		       85 0f		      STA	PF2
     74  fb17		       a9 00		      LDA	#NULL
     75  fb19		       85 0d		      STA	PF0
     76  fb1b
     77  fb1b		       ca		      DEX
     78  fb1c		       d0 a7		      BNE	.loop
     79  fb1e
     80  fb1e		       50 03		      BVC	dc_w2s2_delayed
     81  fb20		       4c ed fc 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  fb23					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  fb23							; The second wall and it's second shadow
      2  fb23
      3  fb23				   dc_w2s2_delayed
      0  fb23					      DELAY	2
      1  fb23				   .CYCLES    SET	2
      2  fb23
      3  fb23				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb23				  -	      NOP
      5  fb23				  -.CYCLES    SET	.CYCLES - 2
      6  fb23					      ENDIF
      7  fb23
      8  fb23				  -	      IF	[.CYCLES - 2] / 5
      9  fb23				  -	      REPEAT	.CYCLES / 5
     10  fb23				  -	      INC	foo
     11  fb23				  -	      REPEND
     12  fb23				  -.CYCLES    SET	.CYCLES % 5
     13  fb23					      ENDIF
     14  fb23
     15  fb23				  -	      IF	.CYCLES % 3 == 1
     16  fb23				  -	      NOP
     17  fb23				  -.CYCLES    SET	.CYCLES - 2
     18  fb23					      ENDIF
     19  fb23
     20  fb23				  -	      REPEAT	.CYCLES / 3
     21  fb23				  -	      STA	DUMP
     22  fb23					      REPEND
     23  fb23
     24  fb23				   .CYCLES    SET	.CYCLES % 3
     25  fb23
     26  fb23					      REPEAT	.CYCLES / 2
     27  fb23		       ea		      NOP
     28  fb24					      REPEND
     29  fb24
     30  fb24				   .CYCLES    SET	.CYCLES % 2
     31  fb24
     32  fb24				  -	      IF	.CYCLES
     33  fb24				  -	      ERR
     34  fb24					      ENDIF
     35  fb24
      5  fb24				   dc_w2s2    SUBROUTINE
      6  fb24
      7  fb24		       a2 03		      LDX	#PIXH
      8  fb26
      9  fb26				   .loop
     10  fb26		       a5 b5		      LDA	wallColour
     11  fb28		       85 02		      STA	WSYNC
     12  fb2a		       85 08		      STA	COLUPF
     13  fb2c		       a5 85		      LDA	wall2a
     14  fb2e		       85 0e		      STA	PF1
     15  fb30		       98		      TYA
     16  fb31				   .branchPoint_1
     17  fb31		       f0 53		      BEQ	.noSprite_1
     18  fb33		       88		      DEY
     19  fb34		       c4 bc		      CPY	spriteHeight
     20  fb36				   .branchPoint_2
     21  fb36		       b0 56		      BCS	.noSprite_2
     22  fb38		       b1 c2		      LDA	(sprite),Y
     23  fb3a		       85 1b		      STA	GRP0
     24  fb3c				   .noSprite_ret
     25  fb3c		       a5 86		      LDA	wall2b
     26  fb3e		       85 0f		      STA	PF2
     27  fb40
     28  fb40		       a5 87		      LDA	wall2c
     29  fb42		       85 0d		      STA	PF0
     30  fb44		       a5 88		      LDA	wall2d
     31  fb46		       85 0e		      STA	PF1
     32  fb48		       a5 89		      LDA	wall2e
     33  fb4a		       85 0f		      STA	PF2
     34  fb4c		       a9 00		      LDA	#NULL
      0  fb4e					      DELAY	10
      1  fb4e				   .CYCLES    SET	10
      2  fb4e
      3  fb4e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb4e				  -	      NOP
      5  fb4e				  -.CYCLES    SET	.CYCLES - 2
      6  fb4e					      ENDIF
      7  fb4e
      8  fb4e					      IF	[.CYCLES - 2] / 5
      9  fb4e					      REPEAT	.CYCLES / 5
     10  fb4e		       e6 c4		      INC	foo
      9  fb4e					      REPEND
     10  fb50		       e6 c4		      INC	foo
     11  fb52					      REPEND
     12  fb52				   .CYCLES    SET	.CYCLES % 5
     13  fb52					      ENDIF
     14  fb52
     15  fb52				  -	      IF	.CYCLES % 3 == 1
     16  fb52				  -	      NOP
     17  fb52				  -.CYCLES    SET	.CYCLES - 2
     18  fb52					      ENDIF
     19  fb52
     20  fb52				  -	      REPEAT	.CYCLES / 3
     21  fb52				  -	      STA	DUMP
     22  fb52					      REPEND
     23  fb52
     24  fb52				   .CYCLES    SET	.CYCLES % 3
     25  fb52
     26  fb52				  -	      REPEAT	.CYCLES / 2
     27  fb52				  -	      NOP
     28  fb52					      REPEND
     29  fb52
     30  fb52				   .CYCLES    SET	.CYCLES % 2
     31  fb52
     32  fb52				  -	      IF	.CYCLES
     33  fb52				  -	      ERR
     34  fb52					      ENDIF
     35  fb52
     36  fb52		       85 0f		      STA	PF2
     37  fb54		       85 0d		      STA	PF0
     38  fb56
     39  fb56		       85 02		      STA	WSYNC	; Draw the shadow
     40  fb58		       a5 b6		      LDA	shadowColour
     41  fb5a		       85 08		      STA	COLUPF
     42  fb5c		       a5 a0		      LDA	shadow2ab
     43  fb5e		       05 9b		      ORA	shadow1a
     44  fb60		       85 0e		      STA	PF1
     45  fb62		       a5 a1		      LDA	shadow2bb
     46  fb64		       05 9c		      ORA	shadow1b
     47  fb66		       85 0f		      STA	PF2
     48  fb68		       a5 a2		      LDA	shadow2cb
     49  fb6a		       85 0d		      STA	PF0
     50  fb6c		       a5 a3		      LDA	shadow2db
     51  fb6e		       05 9e		      ORA	shadow1d
     52  fb70		       85 0e		      STA	PF1
     53  fb72		       a5 a4		      LDA	shadow2eb
     54  fb74		       05 9f		      ORA	shadow1e
     55  fb76		       85 0f		      STA	PF2
     56  fb78		       a9 00		      LDA	#NULL
     57  fb7a		       85 0d		      STA	PF0
     58  fb7c
     59  fb7c		       ca		      DEX
     60  fb7d		       d0 a7		      BNE	.loop
     61  fb7f
     62  fb7f		       50 12		      BVC	dc_w3s1_delayed
      0  fb81					      DELAY	4
      1  fb81				   .CYCLES    SET	4
      2  fb81
      3  fb81				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb81				  -	      NOP
      5  fb81				  -.CYCLES    SET	.CYCLES - 2
      6  fb81					      ENDIF
      7  fb81
      8  fb81				  -	      IF	[.CYCLES - 2] / 5
      9  fb81				  -	      REPEAT	.CYCLES / 5
     10  fb81				  -	      INC	foo
     11  fb81				  -	      REPEND
     12  fb81				  -.CYCLES    SET	.CYCLES % 5
     13  fb81					      ENDIF
     14  fb81
     15  fb81					      IF	.CYCLES % 3 == 1
     16  fb81		       ea		      NOP
     17  fb81				   .CYCLES    SET	.CYCLES - 2
     18  fb82					      ENDIF
     19  fb82
     20  fb82				  -	      REPEAT	.CYCLES / 3
     21  fb82				  -	      STA	DUMP
     22  fb82					      REPEND
     23  fb82
     24  fb82				   .CYCLES    SET	.CYCLES % 3
     25  fb82
     26  fb82					      REPEAT	.CYCLES / 2
     27  fb82		       ea		      NOP
     28  fb83					      REPEND
     29  fb83
     30  fb83				   .CYCLES    SET	.CYCLES % 2
     31  fb83
     32  fb83				  -	      IF	.CYCLES
     33  fb83				  -	      ERR
     34  fb83					      ENDIF
     35  fb83
     64  fb83		       4c b0 fa 	      JMP	dc_w2s1
     65  fb86
     66  fb86				   .noSprite_1
     67  fb86					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb86					      DELAY	11
      1  fb86				   .CYCLES    SET	11
      2  fb86
      3  fb86					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb86		       ea		      NOP
      5  fb86				   .CYCLES    SET	.CYCLES - 2
      6  fb87					      ENDIF
      7  fb87
      8  fb87					      IF	[.CYCLES - 2] / 5
      9  fb87					      REPEAT	.CYCLES / 5
     10  fb87		       e6 c4		      INC	foo
     11  fb89					      REPEND
     12  fb89				   .CYCLES    SET	.CYCLES % 5
     13  fb89					      ENDIF
     14  fb89
     15  fb89					      IF	.CYCLES % 3 == 1
     16  fb89		       ea		      NOP
     17  fb89				   .CYCLES    SET	.CYCLES - 2
     18  fb8a					      ENDIF
     19  fb8a
     20  fb8a				  -	      REPEAT	.CYCLES / 3
     21  fb8a				  -	      STA	DUMP
     22  fb8a					      REPEND
     23  fb8a
     24  fb8a				   .CYCLES    SET	.CYCLES % 3
     25  fb8a
     26  fb8a					      REPEAT	.CYCLES / 2
     27  fb8a		       ea		      NOP
     28  fb8b					      REPEND
     29  fb8b
     30  fb8b				   .CYCLES    SET	.CYCLES % 2
     31  fb8b
     32  fb8b				  -	      IF	.CYCLES
     33  fb8b				  -	      ERR
     34  fb8b					      ENDIF
     35  fb8b
     69  fb8b				  -	      ELSE
     70  fb8b				  -	      DELAY	10
     71  fb8b					      ENDIF
     72  fb8b		       4c 3c fb 	      JMP	.noSprite_ret
     73  fb8e
     74  fb8e				   .noSprite_2
     75  fb8e					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb8e					      DELAY	4
      1  fb8e				   .CYCLES    SET	4
      2  fb8e
      3  fb8e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb8e				  -	      NOP
      5  fb8e				  -.CYCLES    SET	.CYCLES - 2
      6  fb8e					      ENDIF
      7  fb8e
      8  fb8e				  -	      IF	[.CYCLES - 2] / 5
      9  fb8e				  -	      REPEAT	.CYCLES / 5
     10  fb8e				  -	      INC	foo
     11  fb8e				  -	      REPEND
     12  fb8e				  -.CYCLES    SET	.CYCLES % 5
     13  fb8e					      ENDIF
     14  fb8e
     15  fb8e					      IF	.CYCLES % 3 == 1
     16  fb8e		       ea		      NOP
     17  fb8e				   .CYCLES    SET	.CYCLES - 2
     18  fb8f					      ENDIF
     19  fb8f
     20  fb8f				  -	      REPEAT	.CYCLES / 3
     21  fb8f				  -	      STA	DUMP
     22  fb8f					      REPEND
     23  fb8f
     24  fb8f				   .CYCLES    SET	.CYCLES % 3
     25  fb8f
     26  fb8f					      REPEAT	.CYCLES / 2
     27  fb8f		       ea		      NOP
     28  fb90					      REPEND
     29  fb90
     30  fb90				   .CYCLES    SET	.CYCLES % 2
     31  fb90
     32  fb90				  -	      IF	.CYCLES
     33  fb90				  -	      ERR
     34  fb90					      ENDIF
     35  fb90
     77  fb90				  -	      ELSE
     78  fb90				  -	      DELAY	3
     79  fb90					      ENDIF
     80  fb90		       4c 3c fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  fb93					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  fb93							; The third wall and it's first shadow
      2  fb93
      3  fb93				   dc_w3s1_delayed
      0  fb93					      DELAY	2
      1  fb93				   .CYCLES    SET	2
      2  fb93
      3  fb93				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb93				  -	      NOP
      5  fb93				  -.CYCLES    SET	.CYCLES - 2
      6  fb93					      ENDIF
      7  fb93
      8  fb93				  -	      IF	[.CYCLES - 2] / 5
      9  fb93				  -	      REPEAT	.CYCLES / 5
     10  fb93				  -	      INC	foo
     11  fb93				  -	      REPEND
     12  fb93				  -.CYCLES    SET	.CYCLES % 5
     13  fb93					      ENDIF
     14  fb93
     15  fb93				  -	      IF	.CYCLES % 3 == 1
     16  fb93				  -	      NOP
     17  fb93				  -.CYCLES    SET	.CYCLES - 2
     18  fb93					      ENDIF
     19  fb93
     20  fb93				  -	      REPEAT	.CYCLES / 3
     21  fb93				  -	      STA	DUMP
     22  fb93					      REPEND
     23  fb93
     24  fb93				   .CYCLES    SET	.CYCLES % 3
     25  fb93
     26  fb93					      REPEAT	.CYCLES / 2
     27  fb93		       ea		      NOP
     28  fb94					      REPEND
     29  fb94
     30  fb94				   .CYCLES    SET	.CYCLES % 2
     31  fb94
     32  fb94				  -	      IF	.CYCLES
     33  fb94				  -	      ERR
     34  fb94					      ENDIF
     35  fb94
      5  fb94				   dc_w3s1    SUBROUTINE
      6  fb94
      7  fb94		       a2 03		      LDX	#PIXH
      8  fb96
      9  fb96				   .loop
     10  fb96		       a5 b5		      LDA	wallColour
     11  fb98		       85 02		      STA	WSYNC
     12  fb9a		       85 08		      STA	COLUPF
     13  fb9c		       a5 8a		      LDA	wall3a
     14  fb9e		       85 0e		      STA	PF1
     15  fba0		       98		      TYA
     16  fba1				   .branchPoint_1
     17  fba1		       f0 53		      BEQ	.noSprite_1
     18  fba3		       88		      DEY
     19  fba4		       c4 bc		      CPY	spriteHeight
     20  fba6				   .branchPoint_2
     21  fba6		       b0 56		      BCS	.noSprite_2
     22  fba8		       b1 c2		      LDA	(sprite),Y
     23  fbaa		       85 1b		      STA	GRP0
     24  fbac				   .noSprite_ret
     25  fbac		       a5 8b		      LDA	wall3b
     26  fbae		       85 0f		      STA	PF2
     27  fbb0
     28  fbb0		       a5 8c		      LDA	wall3c
     29  fbb2		       85 0d		      STA	PF0
     30  fbb4		       a5 8d		      LDA	wall3d
     31  fbb6		       85 0e		      STA	PF1
     32  fbb8		       a5 8e		      LDA	wall3e
     33  fbba		       85 0f		      STA	PF2
     34  fbbc		       a9 00		      LDA	#NULL
      0  fbbe					      DELAY	10
      1  fbbe				   .CYCLES    SET	10
      2  fbbe
      3  fbbe				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbbe				  -	      NOP
      5  fbbe				  -.CYCLES    SET	.CYCLES - 2
      6  fbbe					      ENDIF
      7  fbbe
      8  fbbe					      IF	[.CYCLES - 2] / 5
      9  fbbe					      REPEAT	.CYCLES / 5
     10  fbbe		       e6 c4		      INC	foo
      9  fbbe					      REPEND
     10  fbc0		       e6 c4		      INC	foo
     11  fbc2					      REPEND
     12  fbc2				   .CYCLES    SET	.CYCLES % 5
     13  fbc2					      ENDIF
     14  fbc2
     15  fbc2				  -	      IF	.CYCLES % 3 == 1
     16  fbc2				  -	      NOP
     17  fbc2				  -.CYCLES    SET	.CYCLES - 2
     18  fbc2					      ENDIF
     19  fbc2
     20  fbc2				  -	      REPEAT	.CYCLES / 3
     21  fbc2				  -	      STA	DUMP
     22  fbc2					      REPEND
     23  fbc2
     24  fbc2				   .CYCLES    SET	.CYCLES % 3
     25  fbc2
     26  fbc2				  -	      REPEAT	.CYCLES / 2
     27  fbc2				  -	      NOP
     28  fbc2					      REPEND
     29  fbc2
     30  fbc2				   .CYCLES    SET	.CYCLES % 2
     31  fbc2
     32  fbc2				  -	      IF	.CYCLES
     33  fbc2				  -	      ERR
     34  fbc2					      ENDIF
     35  fbc2
     36  fbc2		       85 0f		      STA	PF2
     37  fbc4		       85 0d		      STA	PF0
     38  fbc6
     39  fbc6		       85 02		      STA	WSYNC	; Draw the shadow
     40  fbc8		       a5 b6		      LDA	shadowColour
     41  fbca		       85 08		      STA	COLUPF
     42  fbcc		       a5 96		      LDA	shadow3aa
     43  fbce		       05 a0		      ORA	shadow2ab
     44  fbd0		       85 0e		      STA	PF1
     45  fbd2		       a5 97		      LDA	shadow3ba
     46  fbd4		       05 a1		      ORA	shadow2bb
     47  fbd6		       85 0f		      STA	PF2
     48  fbd8		       a5 98		      LDA	shadow3ca
     49  fbda		       05 a2		      ORA	shadow2cb
     50  fbdc		       85 0d		      STA	PF0
     51  fbde		       a5 99		      LDA	shadow3da
     52  fbe0		       05 a3		      ORA	shadow2db
     53  fbe2		       85 0e		      STA	PF1
     54  fbe4		       a5 9a		      LDA	shadow3ea
     55  fbe6		       05 a4		      ORA	shadow2eb
     56  fbe8		       85 0f		      STA	PF2
     57  fbea		       a9 00		      LDA	#NULL
     58  fbec		       85 0d		      STA	PF0
     59  fbee
     60  fbee		       ca		      DEX
     61  fbef		       d0 a5		      BNE	.loop
     62  fbf1
     63  fbf1		       50 10		      BVC	dc_w3s2_delayed
     64  fbf3		       4c 24 fb 	      JMP	dc_w2s2
     65  fbf6
     66  fbf6				   .noSprite_1
     67  fbf6					      IF	>.branchPoint_1 == >.noSprite_1
      0  fbf6					      DELAY	11
      1  fbf6				   .CYCLES    SET	11
      2  fbf6
      3  fbf6					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbf6		       ea		      NOP
      5  fbf6				   .CYCLES    SET	.CYCLES - 2
      6  fbf7					      ENDIF
      7  fbf7
      8  fbf7					      IF	[.CYCLES - 2] / 5
      9  fbf7					      REPEAT	.CYCLES / 5
     10  fbf7		       e6 c4		      INC	foo
     11  fbf9					      REPEND
     12  fbf9				   .CYCLES    SET	.CYCLES % 5
     13  fbf9					      ENDIF
     14  fbf9
     15  fbf9					      IF	.CYCLES % 3 == 1
     16  fbf9		       ea		      NOP
     17  fbf9				   .CYCLES    SET	.CYCLES - 2
     18  fbfa					      ENDIF
     19  fbfa
     20  fbfa				  -	      REPEAT	.CYCLES / 3
     21  fbfa				  -	      STA	DUMP
     22  fbfa					      REPEND
     23  fbfa
     24  fbfa				   .CYCLES    SET	.CYCLES % 3
     25  fbfa
     26  fbfa					      REPEAT	.CYCLES / 2
     27  fbfa		       ea		      NOP
     28  fbfb					      REPEND
     29  fbfb
     30  fbfb				   .CYCLES    SET	.CYCLES % 2
     31  fbfb
     32  fbfb				  -	      IF	.CYCLES
     33  fbfb				  -	      ERR
     34  fbfb					      ENDIF
     35  fbfb
     69  fbfb				  -	      ELSE
     70  fbfb				  -	      DELAY	10
     71  fbfb					      ENDIF
     72  fbfb		       4c ac fb 	      JMP	.noSprite_ret
     73  fbfe
     74  fbfe				   .noSprite_2
     75  fbfe					      IF	>.branchPoint_2 == >.noSprite_2
      0  fbfe					      DELAY	3
      1  fbfe				   .CYCLES    SET	3
      2  fbfe
      3  fbfe				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbfe				  -	      NOP
      5  fbfe				  -.CYCLES    SET	.CYCLES - 2
      6  fbfe					      ENDIF
      7  fbfe
      8  fbfe				  -	      IF	[.CYCLES - 2] / 5
      9  fbfe				  -	      REPEAT	.CYCLES / 5
     10  fbfe				  -	      INC	foo
     11  fbfe				  -	      REPEND
     12  fbfe				  -.CYCLES    SET	.CYCLES % 5
     13  fbfe					      ENDIF
     14  fbfe
     15  fbfe				  -	      IF	.CYCLES % 3 == 1
     16  fbfe				  -	      NOP
     17  fbfe				  -.CYCLES    SET	.CYCLES - 2
     18  fbfe					      ENDIF
     19  fbfe
     20  fbfe					      REPEAT	.CYCLES / 3
     21  fbfe		       85 30		      STA	DUMP
     22  fc00					      REPEND
     23  fc00
     24  fc00				   .CYCLES    SET	.CYCLES % 3
     25  fc00
     26  fc00				  -	      REPEAT	.CYCLES / 2
     27  fc00				  -	      NOP
     28  fc00					      REPEND
     29  fc00
     30  fc00				   .CYCLES    SET	.CYCLES % 2
     31  fc00
     32  fc00				  -	      IF	.CYCLES
     33  fc00				  -	      ERR
     34  fc00					      ENDIF
     35  fc00
     77  fc00				  -	      ELSE
     78  fc00				  -	      DELAY	4
     79  fc00					      ENDIF
     80  fc00		       4c ac fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fc03					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fc03							; The third wall and it's second shadow
      2  fc03
      3  fc03				   dc_w3s2_delayed
      0  fc03					      DELAY	2
      1  fc03				   .CYCLES    SET	2
      2  fc03
      3  fc03				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc03				  -	      NOP
      5  fc03				  -.CYCLES    SET	.CYCLES - 2
      6  fc03					      ENDIF
      7  fc03
      8  fc03				  -	      IF	[.CYCLES - 2] / 5
      9  fc03				  -	      REPEAT	.CYCLES / 5
     10  fc03				  -	      INC	foo
     11  fc03				  -	      REPEND
     12  fc03				  -.CYCLES    SET	.CYCLES % 5
     13  fc03					      ENDIF
     14  fc03
     15  fc03				  -	      IF	.CYCLES % 3 == 1
     16  fc03				  -	      NOP
     17  fc03				  -.CYCLES    SET	.CYCLES - 2
     18  fc03					      ENDIF
     19  fc03
     20  fc03				  -	      REPEAT	.CYCLES / 3
     21  fc03				  -	      STA	DUMP
     22  fc03					      REPEND
     23  fc03
     24  fc03				   .CYCLES    SET	.CYCLES % 3
     25  fc03
     26  fc03					      REPEAT	.CYCLES / 2
     27  fc03		       ea		      NOP
     28  fc04					      REPEND
     29  fc04
     30  fc04				   .CYCLES    SET	.CYCLES % 2
     31  fc04
     32  fc04				  -	      IF	.CYCLES
     33  fc04				  -	      ERR
     34  fc04					      ENDIF
     35  fc04
      5  fc04				   dc_w3s2    SUBROUTINE
      6  fc04
      7  fc04		       a2 03		      LDX	#PIXH
      8  fc06
      9  fc06				   .loop
     10  fc06		       a5 b5		      LDA	wallColour
     11  fc08		       85 02		      STA	WSYNC
     12  fc0a				   .joinIn
     13  fc0a		       85 08		      STA	COLUPF
     14  fc0c		       a5 8a		      LDA	wall3a
     15  fc0e		       85 0e		      STA	PF1
     16  fc10		       98		      TYA
     17  fc11				   .branchPoint_1
     18  fc11		       f0 53		      BEQ	.noSprite_1
     19  fc13		       88		      DEY
     20  fc14		       c4 bc		      CPY	spriteHeight
     21  fc16				   .branchPoint_2
     22  fc16		       b0 56		      BCS	.noSprite_2
     23  fc18		       b1 c2		      LDA	(sprite),Y
     24  fc1a		       85 1b		      STA	GRP0
     25  fc1c				   .noSprite_ret
     26  fc1c		       a5 8b		      LDA	wall3b
     27  fc1e		       85 0f		      STA	PF2
     28  fc20
     29  fc20		       a5 8c		      LDA	wall3c
     30  fc22		       85 0d		      STA	PF0
     31  fc24		       a5 8d		      LDA	wall3d
     32  fc26		       85 0e		      STA	PF1
     33  fc28		       a5 8e		      LDA	wall3e
     34  fc2a		       85 0f		      STA	PF2
     35  fc2c		       a9 00		      LDA	#NULL
      0  fc2e					      DELAY	10
      1  fc2e				   .CYCLES    SET	10
      2  fc2e
      3  fc2e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc2e				  -	      NOP
      5  fc2e				  -.CYCLES    SET	.CYCLES - 2
      6  fc2e					      ENDIF
      7  fc2e
      8  fc2e					      IF	[.CYCLES - 2] / 5
      9  fc2e					      REPEAT	.CYCLES / 5
     10  fc2e		       e6 c4		      INC	foo
      9  fc2e					      REPEND
     10  fc30		       e6 c4		      INC	foo
     11  fc32					      REPEND
     12  fc32				   .CYCLES    SET	.CYCLES % 5
     13  fc32					      ENDIF
     14  fc32
     15  fc32				  -	      IF	.CYCLES % 3 == 1
     16  fc32				  -	      NOP
     17  fc32				  -.CYCLES    SET	.CYCLES - 2
     18  fc32					      ENDIF
     19  fc32
     20  fc32				  -	      REPEAT	.CYCLES / 3
     21  fc32				  -	      STA	DUMP
     22  fc32					      REPEND
     23  fc32
     24  fc32				   .CYCLES    SET	.CYCLES % 3
     25  fc32
     26  fc32				  -	      REPEAT	.CYCLES / 2
     27  fc32				  -	      NOP
     28  fc32					      REPEND
     29  fc32
     30  fc32				   .CYCLES    SET	.CYCLES % 2
     31  fc32
     32  fc32				  -	      IF	.CYCLES
     33  fc32				  -	      ERR
     34  fc32					      ENDIF
     35  fc32
     37  fc32		       85 0f		      STA	PF2
     38  fc34		       85 0d		      STA	PF0
     39  fc36
     40  fc36		       85 02		      STA	WSYNC	; Draw the shadow
     41  fc38		       a5 b6		      LDA	shadowColour
     42  fc3a		       85 08		      STA	COLUPF
     43  fc3c		       a5 a5		      LDA	shadow3ab
     44  fc3e		       05 a0		      ORA	shadow2ab
     45  fc40		       85 0e		      STA	PF1
     46  fc42		       a5 a6		      LDA	shadow3bb
     47  fc44		       05 a1		      ORA	shadow2bb
     48  fc46		       85 0f		      STA	PF2
     49  fc48		       a5 a7		      LDA	shadow3cb
     50  fc4a		       05 a2		      ORA	shadow2cb
     51  fc4c		       85 0d		      STA	PF0
     52  fc4e		       a5 a8		      LDA	shadow3db
     53  fc50		       05 a3		      ORA	shadow2db
     54  fc52		       85 0e		      STA	PF1
     55  fc54		       a5 a9		      LDA	shadow3eb
     56  fc56		       05 a4		      ORA	shadow2eb
     57  fc58		       85 0f		      STA	PF2
     58  fc5a		       a9 00		      LDA	#NULL
     59  fc5c		       85 0d		      STA	PF0
     60  fc5e
     61  fc5e		       ca		      DEX
     62  fc5f		       d0 a5		      BNE	.loop
     63  fc61
     64  fc61		       50 10		      BVC	dc_w4s0_delayed
     65  fc63		       4c 94 fb 	      JMP	dc_w3s1
     66  fc66
     67  fc66				   .noSprite_1
     68  fc66					      IF	>.branchPoint_1 == >.noSprite_1
      0  fc66					      DELAY	11
      1  fc66				   .CYCLES    SET	11
      2  fc66
      3  fc66					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc66		       ea		      NOP
      5  fc66				   .CYCLES    SET	.CYCLES - 2
      6  fc67					      ENDIF
      7  fc67
      8  fc67					      IF	[.CYCLES - 2] / 5
      9  fc67					      REPEAT	.CYCLES / 5
     10  fc67		       e6 c4		      INC	foo
     11  fc69					      REPEND
     12  fc69				   .CYCLES    SET	.CYCLES % 5
     13  fc69					      ENDIF
     14  fc69
     15  fc69					      IF	.CYCLES % 3 == 1
     16  fc69		       ea		      NOP
     17  fc69				   .CYCLES    SET	.CYCLES - 2
     18  fc6a					      ENDIF
     19  fc6a
     20  fc6a				  -	      REPEAT	.CYCLES / 3
     21  fc6a				  -	      STA	DUMP
     22  fc6a					      REPEND
     23  fc6a
     24  fc6a				   .CYCLES    SET	.CYCLES % 3
     25  fc6a
     26  fc6a					      REPEAT	.CYCLES / 2
     27  fc6a		       ea		      NOP
     28  fc6b					      REPEND
     29  fc6b
     30  fc6b				   .CYCLES    SET	.CYCLES % 2
     31  fc6b
     32  fc6b				  -	      IF	.CYCLES
     33  fc6b				  -	      ERR
     34  fc6b					      ENDIF
     35  fc6b
     70  fc6b				  -	      ELSE
     71  fc6b				  -	      DELAY	10
     72  fc6b					      ENDIF
     73  fc6b		       4c 1c fc 	      JMP	.noSprite_ret
     74  fc6e
     75  fc6e				   .noSprite_2
     76  fc6e					      IF	>.branchPoint_2 == >.noSprite_2
      0  fc6e					      DELAY	4
      1  fc6e				   .CYCLES    SET	4
      2  fc6e
      3  fc6e				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fc6e				  -	      NOP
      5  fc6e				  -.CYCLES    SET	.CYCLES - 2
      6  fc6e					      ENDIF
      7  fc6e
      8  fc6e				  -	      IF	[.CYCLES - 2] / 5
      9  fc6e				  -	      REPEAT	.CYCLES / 5
     10  fc6e				  -	      INC	foo
     11  fc6e				  -	      REPEND
     12  fc6e				  -.CYCLES    SET	.CYCLES % 5
     13  fc6e					      ENDIF
     14  fc6e
     15  fc6e					      IF	.CYCLES % 3 == 1
     16  fc6e		       ea		      NOP
     17  fc6e				   .CYCLES    SET	.CYCLES - 2
     18  fc6f					      ENDIF
     19  fc6f
     20  fc6f				  -	      REPEAT	.CYCLES / 3
     21  fc6f				  -	      STA	DUMP
     22  fc6f					      REPEND
     23  fc6f
     24  fc6f				   .CYCLES    SET	.CYCLES % 3
     25  fc6f
     26  fc6f					      REPEAT	.CYCLES / 2
     27  fc6f		       ea		      NOP
     28  fc70					      REPEND
     29  fc70
     30  fc70				   .CYCLES    SET	.CYCLES % 2
     31  fc70
     32  fc70				  -	      IF	.CYCLES
     33  fc70				  -	      ERR
     34  fc70					      ENDIF
     35  fc70
     78  fc70				  -	      ELSE
     79  fc70				  -	      DELAY	3
     80  fc70					      ENDIF
     81  fc70		       4c 1c fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fc73					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fc73							; The fourth wall
      2  fc73
      3  fc73				   dc_w4s0_delayed
      4  fc73		       4c 7a fc 	      JMP	dc_w4s0
      5  fc76
      6  fc76				   dc_w4s0_switch
      7  fc76		       a9 7f		      LDA	#$7F
      8  fc78		       69 01		      ADC	#$01
      9  fc7a
     10  fc7a				   dc_w4s0    SUBROUTINE
     11  fc7a
     12  fc7a		       a2 03		      LDX	#PIXH
     13  fc7c
     14  fc7c				   .loop
     15  fc7c		       a5 b5		      LDA	wallColour
     16  fc7e		       85 02		      STA	WSYNC
     17  fc80				   .joinIn
     18  fc80		       85 08		      STA	COLUPF
     19  fc82		       a5 8f		      LDA	wall4a
     20  fc84		       85 0e		      STA	PF1
     21  fc86		       98		      TYA
     22  fc87				   .branchPoint_1
     23  fc87		       f0 57		      BEQ	.noSprite_1
     24  fc89		       88		      DEY
     25  fc8a		       c4 bc		      CPY	spriteHeight
     26  fc8c				   .branchPoint_2
     27  fc8c		       b0 5a		      BCS	.noSprite_2
     28  fc8e		       b1 c2		      LDA	(sprite),Y
     29  fc90		       85 1b		      STA	GRP0
     30  fc92				   .noSprite_ret
     31  fc92		       a5 90		      LDA	wall4b
     32  fc94		       85 0f		      STA	PF2
     33  fc96
     34  fc96		       a9 ff		      LDA	#FULLWALL
     35  fc98		       45 a7		      EOR	shadow3cb
     36  fc9a		       85 0d		      STA	PF0
     37  fc9c		       a9 ff		      LDA	#FULLWALL
     38  fc9e		       45 a8		      EOR	shadow3db
     39  fca0		       85 0e		      STA	PF1
     40  fca2		       a9 ff		      LDA	#FULLWALL
     41  fca4		       45 a9		      EOR	shadow3eb
     42  fca6		       85 0f		      STA	PF2
     43  fca8		       a9 00		      LDA	#NULL
      0  fcaa					      DELAY	4
      1  fcaa				   .CYCLES    SET	4
      2  fcaa
      3  fcaa				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fcaa				  -	      NOP
      5  fcaa				  -.CYCLES    SET	.CYCLES - 2
      6  fcaa					      ENDIF
      7  fcaa
      8  fcaa				  -	      IF	[.CYCLES - 2] / 5
      9  fcaa				  -	      REPEAT	.CYCLES / 5
     10  fcaa				  -	      INC	foo
     11  fcaa				  -	      REPEND
     12  fcaa				  -.CYCLES    SET	.CYCLES % 5
     13  fcaa					      ENDIF
     14  fcaa
     15  fcaa					      IF	.CYCLES % 3 == 1
     16  fcaa		       ea		      NOP
     17  fcaa				   .CYCLES    SET	.CYCLES - 2
     18  fcab					      ENDIF
     19  fcab
     20  fcab				  -	      REPEAT	.CYCLES / 3
     21  fcab				  -	      STA	DUMP
     22  fcab					      REPEND
     23  fcab
     24  fcab				   .CYCLES    SET	.CYCLES % 3
     25  fcab
     26  fcab					      REPEAT	.CYCLES / 2
     27  fcab		       ea		      NOP
     28  fcac					      REPEND
     29  fcac
     30  fcac				   .CYCLES    SET	.CYCLES % 2
     31  fcac
     32  fcac				  -	      IF	.CYCLES
     33  fcac				  -	      ERR
     34  fcac					      ENDIF
     35  fcac
     45  fcac		       85 0f		      STA	PF2
     46  fcae		       85 0d		      STA	PF0
     47  fcb0
     48  fcb0		       85 02		      STA	WSYNC	; Draw the shadow
     49  fcb2		       a5 b6		      LDA	shadowColour
     50  fcb4		       85 08		      STA	COLUPF
     51  fcb6		       a5 a5		      LDA	shadow3ab
     52  fcb8		       05 a0		      ORA	shadow2ab
     53  fcba		       85 0e		      STA	PF1
     54  fcbc		       a5 a6		      LDA	shadow3bb
     55  fcbe		       05 a1		      ORA	shadow2bb
     56  fcc0		       85 0f		      STA	PF2
     57  fcc2		       a5 a7		      LDA	shadow3cb
     58  fcc4		       05 a2		      ORA	shadow2cb
     59  fcc6		       85 0d		      STA	PF0
     60  fcc8		       a5 a8		      LDA	shadow3db
     61  fcca		       05 a3		      ORA	shadow2db
     62  fccc		       85 0e		      STA	PF1
     63  fcce		       a5 a9		      LDA	shadow3eb
     64  fcd0		       05 a4		      ORA	shadow2eb
     65  fcd2		       85 0f		      STA	PF2
     66  fcd4		       a9 00		      LDA	#NULL
     67  fcd6		       85 0d		      STA	PF0
     68  fcd8
     69  fcd8		       ca		      DEX
     70  fcd9		       d0 a1		      BNE	.loop
     71  fcdb
     72  fcdb		       50 99		      BVC	dc_w4s0_switch
     73  fcdd		       4c 04 fc 	      JMP	dc_w3s2
     74  fce0
     75  fce0				   .noSprite_1
     76  fce0					      IF	>.branchPoint_1 == >.noSprite_1
      0  fce0					      DELAY	11
      1  fce0				   .CYCLES    SET	11
      2  fce0
      3  fce0					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce0		       ea		      NOP
      5  fce0				   .CYCLES    SET	.CYCLES - 2
      6  fce1					      ENDIF
      7  fce1
      8  fce1					      IF	[.CYCLES - 2] / 5
      9  fce1					      REPEAT	.CYCLES / 5
     10  fce1		       e6 c4		      INC	foo
     11  fce3					      REPEND
     12  fce3				   .CYCLES    SET	.CYCLES % 5
     13  fce3					      ENDIF
     14  fce3
     15  fce3					      IF	.CYCLES % 3 == 1
     16  fce3		       ea		      NOP
     17  fce3				   .CYCLES    SET	.CYCLES - 2
     18  fce4					      ENDIF
     19  fce4
     20  fce4				  -	      REPEAT	.CYCLES / 3
     21  fce4				  -	      STA	DUMP
     22  fce4					      REPEND
     23  fce4
     24  fce4				   .CYCLES    SET	.CYCLES % 3
     25  fce4
     26  fce4					      REPEAT	.CYCLES / 2
     27  fce4		       ea		      NOP
     28  fce5					      REPEND
     29  fce5
     30  fce5				   .CYCLES    SET	.CYCLES % 2
     31  fce5
     32  fce5				  -	      IF	.CYCLES
     33  fce5				  -	      ERR
     34  fce5					      ENDIF
     35  fce5
     78  fce5				  -	      ELSE
     79  fce5				  -	      DELAY	10
     80  fce5					      ENDIF
     81  fce5		       4c 92 fc 	      JMP	.noSprite_ret
     82  fce8
     83  fce8				   .noSprite_2
     84  fce8					      IF	>.branchPoint_2 == >.noSprite_2
      0  fce8					      DELAY	4
      1  fce8				   .CYCLES    SET	4
      2  fce8
      3  fce8				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fce8				  -	      NOP
      5  fce8				  -.CYCLES    SET	.CYCLES - 2
      6  fce8					      ENDIF
      7  fce8
      8  fce8				  -	      IF	[.CYCLES - 2] / 5
      9  fce8				  -	      REPEAT	.CYCLES / 5
     10  fce8				  -	      INC	foo
     11  fce8				  -	      REPEND
     12  fce8				  -.CYCLES    SET	.CYCLES % 5
     13  fce8					      ENDIF
     14  fce8
     15  fce8					      IF	.CYCLES % 3 == 1
     16  fce8		       ea		      NOP
     17  fce8				   .CYCLES    SET	.CYCLES - 2
     18  fce9					      ENDIF
     19  fce9
     20  fce9				  -	      REPEAT	.CYCLES / 3
     21  fce9				  -	      STA	DUMP
     22  fce9					      REPEND
     23  fce9
     24  fce9				   .CYCLES    SET	.CYCLES % 3
     25  fce9
     26  fce9					      REPEAT	.CYCLES / 2
     27  fce9		       ea		      NOP
     28  fcea					      REPEND
     29  fcea
     30  fcea				   .CYCLES    SET	.CYCLES % 2
     31  fcea
     32  fcea				  -	      IF	.CYCLES
     33  fcea				  -	      ERR
     34  fcea					      ENDIF
     35  fcea
     86  fcea				  -	      ELSE
     87  fcea				  -	      DELAY	3
     88  fcea					      ENDIF
     89  fcea		       4c 92 fc 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     25  fced
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fced					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fced							; The draw code for the 1st wall and  it's second shadow
      2  fced
      3  fced				   dc_w1s2    SUBROUTINE
      4  fced
      5  fced		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fcef
      7  fcef				   .loop
      8  fcef		       a5 b5		      LDA	wallColour
      9  fcf1		       85 02		      STA	WSYNC
     10  fcf3		       85 08		      STA	COLUPF
     11  fcf5		       a5 80		      LDA	wall1
     12  fcf7		       85 0e		      STA	PF1
     13  fcf9		       98		      TYA
     14  fcfa				   .branchPoint_1
     15  fcfa		       f0 53		      BEQ	.noSprite_1
     16  fcfc		       88		      DEY
     17  fcfd		       c4 bc		      CPY	spriteHeight
     18  fcff				   .branchPoint_2
     19  fcff		       b0 55		      BCS	.noSprite_2
     20  fd01		       b1 c2		      LDA	(sprite),Y
     21  fd03		       85 1b		      STA	GRP0
     22  fd05				   .noSprite_ret
     23  fd05		       a5 80		      LDA	wall1
     24  fd07		       85 0f		      STA	PF2
      0  fd09					      DELAY	6
      1  fd09				   .CYCLES    SET	6
      2  fd09
      3  fd09				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd09				  -	      NOP
      5  fd09				  -.CYCLES    SET	.CYCLES - 2
      6  fd09					      ENDIF
      7  fd09
      8  fd09				  -	      IF	[.CYCLES - 2] / 5
      9  fd09				  -	      REPEAT	.CYCLES / 5
     10  fd09				  -	      INC	foo
     11  fd09				  -	      REPEND
     12  fd09				  -.CYCLES    SET	.CYCLES % 5
     13  fd09					      ENDIF
     14  fd09
     15  fd09				  -	      IF	.CYCLES % 3 == 1
     16  fd09				  -	      NOP
     17  fd09				  -.CYCLES    SET	.CYCLES - 2
     18  fd09					      ENDIF
     19  fd09
     20  fd09					      REPEAT	.CYCLES / 3
     21  fd09		       85 30		      STA	DUMP
     20  fd09					      REPEND
     21  fd0b		       85 30		      STA	DUMP
     22  fd0d					      REPEND
     23  fd0d
     24  fd0d				   .CYCLES    SET	.CYCLES % 3
     25  fd0d
     26  fd0d				  -	      REPEAT	.CYCLES / 2
     27  fd0d				  -	      NOP
     28  fd0d					      REPEND
     29  fd0d
     30  fd0d				   .CYCLES    SET	.CYCLES % 2
     31  fd0d
     32  fd0d				  -	      IF	.CYCLES
     33  fd0d				  -	      ERR
     34  fd0d					      ENDIF
     35  fd0d
     26  fd0d		       85 0d		      STA	PF0
      0  fd0f					      DELAY	19
      1  fd0f				   .CYCLES    SET	19
      2  fd0f
      3  fd0f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd0f				  -	      NOP
      5  fd0f				  -.CYCLES    SET	.CYCLES - 2
      6  fd0f					      ENDIF
      7  fd0f
      8  fd0f					      IF	[.CYCLES - 2] / 5
      9  fd0f					      REPEAT	.CYCLES / 5
     10  fd0f		       e6 c4		      INC	foo
      9  fd0f					      REPEND
     10  fd11		       e6 c4		      INC	foo
      9  fd11					      REPEND
     10  fd13		       e6 c4		      INC	foo
     11  fd15					      REPEND
     12  fd15				   .CYCLES    SET	.CYCLES % 5
     13  fd15					      ENDIF
     14  fd15
     15  fd15					      IF	.CYCLES % 3 == 1
     16  fd15		       ea		      NOP
     17  fd15				   .CYCLES    SET	.CYCLES - 2
     18  fd16					      ENDIF
     19  fd16
     20  fd16				  -	      REPEAT	.CYCLES / 3
     21  fd16				  -	      STA	DUMP
     22  fd16					      REPEND
     23  fd16
     24  fd16				   .CYCLES    SET	.CYCLES % 3
     25  fd16
     26  fd16					      REPEAT	.CYCLES / 2
     27  fd16		       ea		      NOP
     28  fd17					      REPEND
     29  fd17
     30  fd17				   .CYCLES    SET	.CYCLES % 2
     31  fd17
     32  fd17				  -	      IF	.CYCLES
     33  fd17				  -	      ERR
     34  fd17					      ENDIF
     35  fd17
     28  fd17		       a9 00		      LDA	#NULL
     29  fd19		       85 0f		      STA	PF2
     30  fd1b		       85 0d		      STA	PF0
     31  fd1d
     32  fd1d		       85 02		      STA	WSYNC
     33  fd1f		       a5 b6		      LDA	shadowColour
     34  fd21		       85 08		      STA	COLUPF
     35  fd23		       a5 9b		      LDA	shadow1a
     36  fd25		       3d 00 f0 	      AND	and_1a,X
     37  fd28		       85 0e		      STA	PF1
     38  fd2a		       a5 9c		      LDA	shadow1b
     39  fd2c		       3d 1e f0 	      AND	and_1b,X
     40  fd2f		       85 0f		      STA	PF2
      0  fd31					      DELAY	9
      1  fd31				   .CYCLES    SET	9
      2  fd31
      3  fd31				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd31				  -	      NOP
      5  fd31				  -.CYCLES    SET	.CYCLES - 2
      6  fd31					      ENDIF
      7  fd31
      8  fd31					      IF	[.CYCLES - 2] / 5
      9  fd31					      REPEAT	.CYCLES / 5
     10  fd31		       e6 c4		      INC	foo
     11  fd33					      REPEND
     12  fd33				   .CYCLES    SET	.CYCLES % 5
     13  fd33					      ENDIF
     14  fd33
     15  fd33					      IF	.CYCLES % 3 == 1
     16  fd33		       ea		      NOP
     17  fd33				   .CYCLES    SET	.CYCLES - 2
     18  fd34					      ENDIF
     19  fd34
     20  fd34				  -	      REPEAT	.CYCLES / 3
     21  fd34				  -	      STA	DUMP
     22  fd34					      REPEND
     23  fd34
     24  fd34				   .CYCLES    SET	.CYCLES % 3
     25  fd34
     26  fd34					      REPEAT	.CYCLES / 2
     27  fd34		       ea		      NOP
     28  fd35					      REPEND
     29  fd35
     30  fd35				   .CYCLES    SET	.CYCLES % 2
     31  fd35
     32  fd35				  -	      IF	.CYCLES
     33  fd35				  -	      ERR
     34  fd35					      ENDIF
     35  fd35
     42  fd35		       a5 9e		      LDA	shadow1d
     43  fd37		       3d 3c f0 	      AND	and_1c,X
     44  fd3a		       85 0e		      STA	PF1
     45  fd3c		       a5 9f		      LDA	shadow1e
     46  fd3e		       3d 5a f0 	      AND	and_1d,X
     47  fd41		       85 0f		      STA	PF2
     48  fd43
     49  fd43		       a9 00		      LDA	#NULL
     50  fd45		       85 1b		      STA	GRP0
     51  fd47
     52  fd47		       ca		      DEX
     53  fd48		       e0 06		      CPX	#LOWRWALL_S
     54  fd4a		       d0 a3		      BNE	.loop
     55  fd4c
     56  fd4c		       4c 5b fd 	      JMP	dc_wallsEnd
     57  fd4f
     58  fd4f				   .noSprite_1
     59  fd4f				  -	      IF	>.branchPoint_1 == >.noSprite_1
     60  fd4f				  -	      DELAY	11
     61  fd4f					      ELSE
      0  fd4f					      DELAY	10
      1  fd4f				   .CYCLES    SET	10
      2  fd4f
      3  fd4f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd4f				  -	      NOP
      5  fd4f				  -.CYCLES    SET	.CYCLES - 2
      6  fd4f					      ENDIF
      7  fd4f
      8  fd4f					      IF	[.CYCLES - 2] / 5
      9  fd4f					      REPEAT	.CYCLES / 5
     10  fd4f		       e6 c4		      INC	foo
      9  fd4f					      REPEND
     10  fd51		       e6 c4		      INC	foo
     11  fd53					      REPEND
     12  fd53				   .CYCLES    SET	.CYCLES % 5
     13  fd53					      ENDIF
     14  fd53
     15  fd53				  -	      IF	.CYCLES % 3 == 1
     16  fd53				  -	      NOP
     17  fd53				  -.CYCLES    SET	.CYCLES - 2
     18  fd53					      ENDIF
     19  fd53
     20  fd53				  -	      REPEAT	.CYCLES / 3
     21  fd53				  -	      STA	DUMP
     22  fd53					      REPEND
     23  fd53
     24  fd53				   .CYCLES    SET	.CYCLES % 3
     25  fd53
     26  fd53				  -	      REPEAT	.CYCLES / 2
     27  fd53				  -	      NOP
     28  fd53					      REPEND
     29  fd53
     30  fd53				   .CYCLES    SET	.CYCLES % 2
     31  fd53
     32  fd53				  -	      IF	.CYCLES
     33  fd53				  -	      ERR
     34  fd53					      ENDIF
     35  fd53
     63  fd53					      ENDIF
     64  fd53		       4c 05 fd 	      JMP	.noSprite_ret
     65  fd56
     66  fd56				   .noSprite_2
     67  fd56				  -	      IF	>.branchPoint_2 == >.noSprite_2
     68  fd56				  -	      DELAY	4
     69  fd56					      ELSE
      0  fd56					      DELAY	3
      1  fd56				   .CYCLES    SET	3
      2  fd56
      3  fd56				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd56				  -	      NOP
      5  fd56				  -.CYCLES    SET	.CYCLES - 2
      6  fd56					      ENDIF
      7  fd56
      8  fd56				  -	      IF	[.CYCLES - 2] / 5
      9  fd56				  -	      REPEAT	.CYCLES / 5
     10  fd56				  -	      INC	foo
     11  fd56				  -	      REPEND
     12  fd56				  -.CYCLES    SET	.CYCLES % 5
     13  fd56					      ENDIF
     14  fd56
     15  fd56				  -	      IF	.CYCLES % 3 == 1
     16  fd56				  -	      NOP
     17  fd56				  -.CYCLES    SET	.CYCLES - 2
     18  fd56					      ENDIF
     19  fd56
     20  fd56					      REPEAT	.CYCLES / 3
     21  fd56		       85 30		      STA	DUMP
     22  fd58					      REPEND
     23  fd58
     24  fd58				   .CYCLES    SET	.CYCLES % 3
     25  fd58
     26  fd58				  -	      REPEAT	.CYCLES / 2
     27  fd58				  -	      NOP
     28  fd58					      REPEND
     29  fd58
     30  fd58				   .CYCLES    SET	.CYCLES % 2
     31  fd58
     32  fd58				  -	      IF	.CYCLES
     33  fd58				  -	      ERR
     34  fd58					      ENDIF
     35  fd58
     71  fd58					      ENDIF
     72  fd58		       4c 05 fd 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     27  fd5b
     28  fd5b				   dc_wallsEnd
     29  fd5b
     30  fd5b		       b8		      CLV
     31  fd5c
     32  fd5c		       a9 00		      LDA	#NULL
     33  fd5e		       85 0e		      STA	PF1
     34  fd60		       85 0f		      STA	PF2
     35  fd62
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fd62					      INCLUDE	"drawCode/mmDraw.asm"
      1  fd62							; Draws the compass to the screen
      2  fd62
      3  fd62				   mmDraw
      4  fd62
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fd62					      INCLUDE	"drawCode/mmRender.asm"
      1  fd62							; Render the minimap
      2  fd62
      3  fd62				   mmRender   SUBROUTINE
      4  fd62							; Set the colour of the player
      5  fd62		       a9 cc		      LDA	#PLYRCOLU
      6  fd64		       85 08		      STA	COLUPF
      7  fd66							; Set the colour of the map
      8  fd66		       a9 0e		      LDA	#MAPCOLU
      9  fd68		       85 06		      STA	COLUP0
     10  fd6a		       85 07		      STA	COLUP1
     11  fd6c							; Get the player's position and translate it into horizontal movement
     12  fd6c		       a9 08		      LDA	#%00001000
     13  fd6e		       18		      CLC
     14  fd6f		       38		      SEC
     15  fd70		       e5 ab		      SBC	playerPos
     16  fd72		       0a		      ASL
     17  fd73		       0a		      ASL
     18  fd74		       0a		      ASL
     19  fd75		       0a		      ASL
     20  fd76		       85 b9		      STA	horzPos_plyr
     21  fd78
     22  fd78							; Set the map's position to the right values
     23  fd78		       a9 00		      LDA	#HADJ_A
     24  fd7a		       85 b7		      STA	horzPos_mA
     25  fd7c		       a9 10		      LDA	#HADJ_B
     26  fd7e		       85 b8		      STA	horzPos_mB
     27  fd80
     28  fd80		       85 02		      STA	WSYNC
     29  fd82		       a2 07		      LDX	#HWAIT
     30  fd84
     31  fd84				   .wait1
     32  fd84		       ca		      DEX
     33  fd85		       d0 fd		      BNE	.wait1
      0  fd87					      DELAY	HDELAY1
      1  fd87				   .CYCLES    SET	HDELAY1
      2  fd87
      3  fd87				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd87				  -	      NOP
      5  fd87				  -.CYCLES    SET	.CYCLES - 2
      6  fd87					      ENDIF
      7  fd87
      8  fd87				  -	      IF	[.CYCLES - 2] / 5
      9  fd87				  -	      REPEAT	.CYCLES / 5
     10  fd87				  -	      INC	foo
     11  fd87				  -	      REPEND
     12  fd87				  -.CYCLES    SET	.CYCLES % 5
     13  fd87					      ENDIF
     14  fd87
     15  fd87				  -	      IF	.CYCLES % 3 == 1
     16  fd87				  -	      NOP
     17  fd87				  -.CYCLES    SET	.CYCLES - 2
     18  fd87					      ENDIF
     19  fd87
     20  fd87					      REPEAT	.CYCLES / 3
     21  fd87		       85 30		      STA	DUMP
     22  fd89					      REPEND
     23  fd89
     24  fd89				   .CYCLES    SET	.CYCLES % 3
     25  fd89
     26  fd89					      REPEAT	.CYCLES / 2
     27  fd89		       ea		      NOP
     28  fd8a					      REPEND
     29  fd8a
     30  fd8a				   .CYCLES    SET	.CYCLES % 2
     31  fd8a
     32  fd8a				  -	      IF	.CYCLES
     33  fd8a				  -	      ERR
     34  fd8a					      ENDIF
     35  fd8a
     35  fd8a		       85 10		      STA	RESP0
     36  fd8c		       85 11		      STA	RESP1
     37  fd8e
     38  fd8e		       a5 ab		      LDA	playerPos
     39  fd90
     40  fd90		       85 02		      STA	WSYNC
     41  fd92		       a2 07		      LDX	#HWAIT
     42  fd94
     43  fd94				   .wait2
     44  fd94		       ca		      DEX
     45  fd95		       d0 fd		      BNE	.wait2
      0  fd97					      DELAY	HDELAY2
      1  fd97				   .CYCLES    SET	HDELAY2
      2  fd97
      3  fd97				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fd97				  -	      NOP
      5  fd97				  -.CYCLES    SET	.CYCLES - 2
      6  fd97					      ENDIF
      7  fd97
      8  fd97					      IF	[.CYCLES - 2] / 5
      9  fd97					      REPEAT	.CYCLES / 5
     10  fd97		       e6 c4		      INC	foo
     11  fd99					      REPEND
     12  fd99				   .CYCLES    SET	.CYCLES % 5
     13  fd99					      ENDIF
     14  fd99
     15  fd99				  -	      IF	.CYCLES % 3 == 1
     16  fd99				  -	      NOP
     17  fd99				  -.CYCLES    SET	.CYCLES - 2
     18  fd99					      ENDIF
     19  fd99
     20  fd99					      REPEAT	.CYCLES / 3
     21  fd99		       85 30		      STA	DUMP
     22  fd9b					      REPEND
     23  fd9b
     24  fd9b				   .CYCLES    SET	.CYCLES % 3
     25  fd9b
     26  fd9b				  -	      REPEAT	.CYCLES / 2
     27  fd9b				  -	      NOP
     28  fd9b					      REPEND
     29  fd9b
     30  fd9b				   .CYCLES    SET	.CYCLES % 2
     31  fd9b
     32  fd9b				  -	      IF	.CYCLES
     33  fd9b				  -	      ERR
     34  fd9b					      ENDIF
     35  fd9b
     47  fd9b		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      6  fd9d
      7  fd9d					      SUBROUTINE		; The preceeding file declares it's own subroutine
      8  fd9d
      9  fd9d							; Load the player's position
     10  fd9d
     11  fd9d		       a5 b9		      LDA	horzPos_plyr
     12  fd9f		       85 24		      STA	HMBL
     13  fda1		       a5 b7		      LDA	horzPos_mA
     14  fda3		       85 20		      STA	HMP0
     15  fda5		       a5 b8		      LDA	horzPos_mB
     16  fda7		       85 21		      STA	HMP1
     17  fda9
     18  fda9		       a9 00		      LDA	#NULL
     19  fdab		       85 1b		      STA	GRP0
     20  fdad		       85 1c		      STA	GRP1
     21  fdaf		       85 02		      STA	WSYNC
     22  fdb1		       85 2a		      STA	HMOVE
     23  fdb3
     24  fdb3		       a0 00		      LDY	#INDEXINIT
     25  fdb5		       a6 ab		      LDX	playerPos
     26  fdb7
     27  fdb7				   .loop
     28  fdb7		       85 02		      STA	WSYNC
     29  fdb9
     30  fdb9		       b1 be		      LDA	(miniMapPtr),Y
     31  fdbb		       85 1b		      STA	GRP0
     32  fdbd		       c8		      INY
     33  fdbe		       b1 be		      LDA	(miniMapPtr),Y
     34  fdc0		       85 1c		      STA	GRP1
     35  fdc2		       c8		      INY
     36  fdc3
     37  fdc3		       8a		      TXA
     38  fdc4		       38		      SEC
     39  fdc5		       e5 ac		      SBC	mapWidth
     40  fdc7		       aa		      TAX
     41  fdc8		       29 f0		      AND	#%11110000
     42  fdca
     43  fdca		       c9 00		      CMP	#0
     44  fdcc		       d0 0a		      BNE	.noDraw
     45  fdce
     46  fdce		       a9 02		      LDA	#2
     47  fdd0		       85 1f		      STA	ENABL
     48  fdd2		       85 ba		      STA	drawingPlyr
     49  fdd4		       a9 01		      LDA	#1
     50  fdd6		       85 27		      STA	VDELBL
     51  fdd8
     52  fdd8				   .noDraw
     53  fdd8
     54  fdd8		       a5 ba		      LDA	drawingPlyr
     55  fdda		       85 1f		      STA	ENABL
     56  fddc		       a9 00		      LDA	#0
     57  fdde		       85 ba		      STA	drawingPlyr
     58  fde0		       c0 20		      CPY	#32
     59  fde2		       d0 d3		      BNE	.loop
     60  fde4
     61  fde4		       a9 00		      LDA	#0
     62  fde6		       85 1f		      STA	ENABL
     63  fde8
     64  fde8		       85 02		      STA	WSYNC
     65  fdea
     66  fdea		       a9 00		      LDA	#NULL
     67  fdec		       85 1b		      STA	GRP0
     68  fdee		       85 1c		      STA	GRP1
     69  fdf0		       85 06		      STA	COLUP0
     70  fdf2		       85 07		      STA	COLUP1
------- FILE dispkern.asm
     37  fdf4
     38  fdf4		       4c f7 fd 	      JMP	stop
     39  fdf7
     40  fdf7				   stop
     41  fdf7
     42  fdf7
     43  fdf7		       85 09		      STA	COLUBK
------- FILE main.asm
     69  fdf9
     70  fdf9							; Start VBLANK
     71  fdf9
     72  fdf9		       a9 c2		      LDA	#VBLANK_SET
     73  fdfb		       85 01		      STA	VBLANK
     74  fdfd
     75  fdfd							; Process input
     76  fdfd
------- FILE input.asm LEVEL 2 PASS 4
      0  fdfd					      INCLUDE	"input.asm"
      1  fdfd							; VePseu's controller input
      2  fdfd
      3  fdfd		       85 02		      STA	WSYNC
      4  fdff
      5  fdff		       ad 80 02 	      LDA	SWCHA
      6  fe02		       29 10		      AND	#FFORD
      7  fe04		       d0 26		      BNE	CIN1_NOPRESS
      8  fe06
      9  fe06		       a5 ab		      LDA	playerPos
     10  fe08		       38		      SEC
     11  fe09		       e5 b0		      SBC	yLoss
     12  fe0b		       18		      CLC
     13  fe0c		       65 af		      ADC	yGain
     14  fe0e		       a8		      TAY
     15  fe0f
     16  fe0f		       b1 c0		      LDA	(mapPtr),Y
     17  fe11		       c9 00		      CMP	#NULL
     18  fe13		       d0 1b		      BNE	CIN2
     19  fe15
     20  fe15		       a5 b1		      LDA	fordPressed
     21  fe17		       c9 00		      CMP	#NULL
     22  fe19		       d0 09		      BNE	CIN1_WAIT
     23  fe1b
     24  fe1b		       84 ab		      STY	playerPos
     25  fe1d		       a9 0f		      LDA	#CWAITCNT
     26  fe1f		       85 b1		      STA	fordPressed
     27  fe21		       4c 30 fe 	      JMP	CIN2
     28  fe24
     29  fe24				   CIN1_WAIT
      0  fe24					      DEA
      1  fe24		       38		      SEC
      2  fe25		       e9 01		      SBC	#1
     31  fe27		       85 b1		      STA	fordPressed
     32  fe29		       4c 30 fe 	      JMP	CIN2
     33  fe2c
     34  fe2c				   CIN1_NOPRESS
     35  fe2c		       a9 00		      LDA	#NULL
     36  fe2e		       85 b1		      STA	fordPressed
     37  fe30
     38  fe30				   CIN2
     39  fe30		       85 02		      STA	WSYNC
     40  fe32		       ad 80 02 	      LDA	SWCHA
     41  fe35		       29 20		      AND	#FBACK
     42  fe37		       d0 26		      BNE	CIN2_NOPRESS
     43  fe39
     44  fe39		       a5 ab		      LDA	playerPos
     45  fe3b		       38		      SEC
     46  fe3c		       e5 af		      SBC	yGain
     47  fe3e		       18		      CLC
     48  fe3f		       65 b0		      ADC	yLoss
     49  fe41		       a8		      TAY
     50  fe42
     51  fe42		       b1 c0		      LDA	(mapPtr),Y
     52  fe44		       c9 00		      CMP	#NULL
     53  fe46		       d0 1b		      BNE	CIN3
     54  fe48
     55  fe48		       a5 b2		      LDA	backPressed
     56  fe4a		       c9 00		      CMP	#NULL
     57  fe4c		       d0 09		      BNE	CIN2_WAIT
     58  fe4e
     59  fe4e		       84 ab		      STY	playerPos
     60  fe50		       a9 0f		      LDA	#CWAITCNT
     61  fe52		       85 b2		      STA	backPressed
     62  fe54		       4c 63 fe 	      JMP	CIN3
     63  fe57
     64  fe57				   CIN2_WAIT
      0  fe57					      DEA
      1  fe57		       38		      SEC
      2  fe58		       e9 01		      SBC	#1
     66  fe5a		       85 b2		      STA	backPressed
     67  fe5c		       4c 63 fe 	      JMP	CIN3
     68  fe5f
     69  fe5f				   CIN2_NOPRESS
     70  fe5f		       a9 00		      LDA	#NULL
     71  fe61		       85 b2		      STA	backPressed
     72  fe63
     73  fe63				   CIN3
     74  fe63		       85 02		      STA	WSYNC
     75  fe65		       ad 80 02 	      LDA	SWCHA
     76  fe68		       29 80		      AND	#FLEFT
     77  fe6a		       d0 1c		      BNE	CIN3_NOPRESS
     78  fe6c
     79  fe6c		       a5 bb		      LDA	direction
      0  fe6e					      INA
      1  fe6e		       18		      CLC
      2  fe6f		       69 01		      ADC	#1
     81  fe71		       29 03		      AND	#%00000011
     82  fe73
     83  fe73		       a6 b4		      LDX	rigtPressed
     84  fe75		       e0 00		      CPX	#NULL
     85  fe77		       d0 09		      BNE	CIN3_WAIT
     86  fe79
     87  fe79		       85 bb		      STA	direction
     88  fe7b
     89  fe7b		       a9 0f		      LDA	#CWAITCNT
     90  fe7d		       85 b4		      STA	rigtPressed
     91  fe7f		       4c 8c fe 	      JMP	CIN4
     92  fe82
     93  fe82				   CIN3_WAIT
     94  fe82		       ca		      DEX
     95  fe83		       86 b4		      STX	rigtPressed
     96  fe85		       4c 8c fe 	      JMP	CIN4
     97  fe88
     98  fe88				   CIN3_NOPRESS
     99  fe88		       a9 00		      LDA	#NULL
    100  fe8a		       85 b4		      STA	rigtPressed
    101  fe8c
    102  fe8c				   CIN4
    103  fe8c		       85 02		      STA	WSYNC
    104  fe8e		       ad 80 02 	      LDA	SWCHA
    105  fe91		       29 40		      AND	#FRIGT
    106  fe93		       d0 1c		      BNE	CIN4_NOPRESS
    107  fe95
    108  fe95		       a5 bb		      LDA	direction
      0  fe97					      DEA
      1  fe97		       38		      SEC
      2  fe98		       e9 01		      SBC	#1
    110  fe9a		       29 03		      AND	#%00000011
    111  fe9c
    112  fe9c		       a6 b3		      LDX	leftPressed
    113  fe9e		       e0 00		      CPX	#NULL
    114  fea0		       d0 09		      BNE	CIN4_WAIT
    115  fea2
    116  fea2		       85 bb		      STA	direction
    117  fea4
    118  fea4		       a9 0f		      LDA	#CWAITCNT
    119  fea6		       85 b3		      STA	leftPressed
    120  fea8		       4c b5 fe 	      JMP	CDIR1
    121  feab
    122  feab				   CIN4_WAIT
    123  feab		       ca		      DEX
    124  feac		       86 b3		      STX	leftPressed
    125  feae		       4c b5 fe 	      JMP	CDIR1
    126  feb1
    127  feb1				   CIN4_NOPRESS
    128  feb1		       a9 00		      LDA	#NULL
    129  feb3		       85 b3		      STA	leftPressed
    130  feb5
    131  feb5				   CDIR1
    132  feb5		       85 02		      STA	WSYNC
    133  feb7		       a5 bb		      LDA	direction
    134  feb9		       c9 00		      CMP	#DNORTH
    135  febb		       d0 16		      BNE	CDIR2
    136  febd
    137  febd		       a5 ac		      LDA	mapWidth
    138  febf		       85 b0		      STA	yLoss
    139  fec1		       a9 01		      LDA	#ONE
    140  fec3		       85 ad		      STA	xGain
    141  fec5		       a9 86		      LDA	#WCOLU
    142  fec7		       85 b5		      STA	wallColour
    143  fec9		       a9 82		      LDA	#SCOLU
    144  fecb		       85 b6		      STA	shadowColour
    145  fecd		       a9 00		      LDA	#NULL
    146  fecf		       85 af		      STA	yGain
    147  fed1		       85 ae		      STA	xLoss
    148  fed3
    149  fed3				   CDIR2
    150  fed3		       a5 bb		      LDA	direction
    151  fed5		       c9 02		      CMP	#DSOUTH
    152  fed7		       d0 16		      BNE	CDIR3
    153  fed9
    154  fed9		       a5 ac		      LDA	mapWidth
    155  fedb		       85 af		      STA	yGain
    156  fedd		       a9 01		      LDA	#ONE
    157  fedf		       85 ae		      STA	xLoss
    158  fee1		       a9 86		      LDA	#WCOLU
    159  fee3		       85 b5		      STA	wallColour
    160  fee5		       a9 82		      LDA	#SCOLU
    161  fee7		       85 b6		      STA	shadowColour
    162  fee9		       a9 00		      LDA	#NULL
    163  feeb		       85 b0		      STA	yLoss
    164  feed		       85 ad		      STA	xGain
    165  feef
    166  feef				   CDIR3
    167  feef		       a5 bb		      LDA	direction
    168  fef1		       c9 01		      CMP	#DWEST
    169  fef3		       d0 16		      BNE	CDIR4
    170  fef5
    171  fef5		       a5 ac		      LDA	mapWidth
    172  fef7		       85 ad		      STA	xGain
    173  fef9		       a9 01		      LDA	#ONE
    174  fefb		       85 af		      STA	yGain
    175  fefd		       a9 82		      LDA	#SCOLU
    176  feff		       85 b5		      STA	wallColour
    177  ff01		       a9 86		      LDA	#WCOLU
    178  ff03		       85 b6		      STA	shadowColour
    179  ff05		       a9 00		      LDA	#NULL
    180  ff07		       85 b0		      STA	yLoss
    181  ff09		       85 ae		      STA	xLoss
    182  ff0b
    183  ff0b				   CDIR4
    184  ff0b		       a5 bb		      LDA	direction
    185  ff0d		       c9 03		      CMP	#DEAST
    186  ff0f		       d0 16		      BNE	CEND
    187  ff11
    188  ff11		       a5 ac		      LDA	mapWidth
    189  ff13		       85 ae		      STA	xLoss
    190  ff15		       a9 01		      LDA	#ONE
    191  ff17		       85 b0		      STA	yLoss
    192  ff19		       a9 82		      LDA	#SCOLU
    193  ff1b		       85 b5		      STA	wallColour
    194  ff1d		       a9 86		      LDA	#WCOLU
    195  ff1f		       85 b6		      STA	shadowColour
    196  ff21		       a9 00		      LDA	#NULL
    197  ff23		       85 af		      STA	yGain
    198  ff25		       85 ad		      STA	xGain
    199  ff27
    200  ff27				   CEND
    201  ff27		       85 02		      STA	WSYNC
------- FILE main.asm
     78  ff29
     79  ff29							; Pad again
     80  ff29
     81  ff29		       a2 1a		      LDX	#LOPAD_LIMIT
     82  ff2b
     83  ff2b				   lowerPad
     84  ff2b		       85 02		      STA	WSYNC
     85  ff2d
     86  ff2d		       ca		      DEX
     87  ff2e		       d0 fb		      BNE	lowerPad
     88  ff30
     89  ff30							; Get everything ready for VSYNC
     90  ff30
     91  ff30		       86 01		      STX	VBLANK
     92  ff32		       a9 02		      LDA	#VSYNC_SET
     93  ff34		       85 02		      STA	WSYNC
     94  ff36		       4c 2d f8 	      JMP	screenStart
     95  ff39
     96  ff39							; Tell us how many bytes we have used up
     97  ff39
 95 % of your rom has been used up ( 3903 / 4096 bytes)
     98  ff39					      ECHO	[[. - $F000] * 100 / $1000]d, "% of your rom has been used up (", [. - $EFFA]d, "/ 4096 bytes)"
     99  ff39
    100  fffa					      ORG	$FFFA
    101  fffa
    102  fffa		       00 f8		      DC.W	start	; Something
    103  fffc		       00 f8		      DC.W	start	; Entrypoint
    104  fffe		       2d f8		      DC.W	screenStart	; Something else
    105  10000
    106  10000					       END
