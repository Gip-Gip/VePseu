------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0f	    UPPAD_LIMIT =	15	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 19	    CWAITCNT   =	25	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
     56  10000 ????
     57  10000 ????		00 07	    PLAYER_STEPV =	7	; The volume of the player's steps
     58  10000 ????		00 02	    PLAYER_STEPS =	2
     59  10000 ????		00 06	    PLAYER_TURNS =	6
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros & stuff
      2  10000 ????
      3  10000 ????						; Scanline padding macro
      4  10000 ????				       MAC	pad
      5  10000 ????
      6  10000 ????			    .SCANLINES SET	{1}	; Scanlines to essentially skip
      7  10000 ????
      8  10000 ????				       LDX	#.SCANLINES
      9  10000 ????
     10  10000 ????			    .loop
     11  10000 ????				       STA	WSYNC
     12  10000 ????
     13  10000 ????				       DEX
     14  10000 ????				       BNE	.loop
     15  10000 ????
     16  10000 ????				       ENDM
     17  10000 ????
     18  10000 ????						; Precision delay macro
     19  10000 ????
     20  10000 ????				       MAC	delay
     21  10000 ????			    .CYCLES    SET	{1}
     22  10000 ????
     23  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     24  10000 ????				       NOP
     25  10000 ????			    .CYCLES    SET	.CYCLES - 2
     26  10000 ????				       ENDIF
     27  10000 ????
     28  10000 ????				       IF	[.CYCLES - 2] / 5
     29  10000 ????				       REPEAT	.CYCLES / 5
     30  10000 ????				       INC	DUMP
     31  10000 ????				       REPEND
     32  10000 ????			    .CYCLES    SET	.CYCLES % 5
     33  10000 ????				       ENDIF
     34  10000 ????
     35  10000 ????				       IF	.CYCLES % 3 == 1
     36  10000 ????				       NOP
     37  10000 ????			    .CYCLES    SET	.CYCLES - 2
     38  10000 ????				       ENDIF
     39  10000 ????
     40  10000 ????				       REPEAT	.CYCLES / 3
     41  10000 ????				       STA	DUMP
     42  10000 ????				       REPEND
     43  10000 ????
     44  10000 ????			    .CYCLES    SET	.CYCLES % 3
     45  10000 ????
     46  10000 ????				       REPEAT	.CYCLES / 2
     47  10000 ????				       NOP
     48  10000 ????				       REPEND
     49  10000 ????
     50  10000 ????			    .CYCLES    SET	.CYCLES % 2
     51  10000 ????
     52  10000 ????				       IF	.CYCLES
     53  10000 ????				       ERR
     54  10000 ????				       ENDIF
     55  10000 ????
     56  10000 ????				       ENDM
     57  10000 ????
     58  10000 ????						; Macro used to find the space used up in a certain section of ram
     59  10000 ????
     60  10000 ????				       MAC	usage_report
     61  10000 ????
     62  10000 ????			    NAM        SET	{1}	; Name of the section
     63  10000 ????			    SPOS       SET	{2}	; Start address of the section
     64  10000 ????			    EPOS       SET	{3}	; End address of the section
     65  10000 ????			    CPOS       SET	.	; The current position of the macro in the section
     66  10000 ????
     67  10000 ????			    CAP        SET	EPOS - SPOS	; Space that exists
     68  10000 ????			    TKUP       SET	CPOS - SPOS	; Space taken up by data
     69  10000 ????
     70  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d	; Percent of space taken by data, converted to
     71  10000 ????						; a string so the following line doesn't exceed
     72  10000 ????						; 80 characters
     73  10000 ????
     74  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     75  10000 ????				       ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
     76  10000 ????				       ECHO	""
     77  10000 ????
     78  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   frameNum   DC	0
     57 U00b1
     58 U00b1		       00	   wallColour DC	0
     59 U00b2		       00	   shadowColour DC	0
     60 U00b3		       00	   drawingPlyr DC	0
     61 U00b4
     62 U00b4		       00 00	   miniMapPtr DC.W	0
     63 U00b6		       00 00	   mapPtr     DC.W	0
     64 U00b8
     65 U00b8				   sprite
     66 U00b8		       00	   spriteAddrH DC	0
     67 U00b9		       00	   spriteAddrL DC	0
     68 U00ba
     69 U00ba		       00	   spriteHeight DC	0
     70 U00bb		       00	   spritePosY DC	0
     71 U00bc
     72 U00bc		       00	   stepVol    DC	0
     73 U00bd		       00	   stepSnd    DC	0
     74 U00be
      0 U00be					      USAGE_REPORT	"RAM", $80, $100
      1 U00be
      2 U00be				   NAM	      SET	"RAM"
      3 U00be				   SPOS       SET	$80
      4 U00be				   EPOS       SET	$100
      5 U00be				   CPOS       SET	.
      6 U00be
      7 U00be				   CAP	      SET	EPOS - SPOS
      8 U00be				   TKUP       SET	CPOS - SPOS
      9 U00be
     10 U00be				   PCNT       SET	[TKUP * 100 / CAP]d
     11 U00be
     12 U00be
     13 U00be
 48 % of your RAM is used up ( 62 / 128  bytes )
     14 U00be					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  RAM ,  66 bytes are free
     15 U00be					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16 U00be					      ECHO	""
     17 U00be
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00be					      INCLUDE	"include/pia_addr.h"
      1 U00be							; PIA addresses
      2 U00be
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE map.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1	; Player's position
      4  f000		       00 10	   MAP_01_WDTH =	$10	; Map 1's width
      5  f000		       01 00	   MAP_01_SZ  =	$100	; Map 1's size in bytes
      6  f000
      7  f000				   miniMap_01
      8  f000		       e0 07		      DC.W	%0000011111100000
      9  f002		       bf fd		      DC.W	%1111110110111111
     10  f004		       80 01		      DC.W	%0000000110000000
     11  f006		       80 01		      DC.W	%0000000110000000
     12  f008		       be bd		      DC.W	%1011110110111110
     13  f00a		       a2 a5		      DC.W	%1010010110100010
     14  f00c		       a2 a7		      DC.W	%1010011110100010
     15  f00e		       e2 a7		      DC.W	%1010011111100010
     16  f010		       e2 a5		      DC.W	%1010010111100010
     17  f012		       be bd		      DC.W	%1011110110111110
     18  f014		       80 81		      DC.W	%1000000110000000
     19  f016		       80 81		      DC.W	%1000000110000000
     20  f018		       bf fd		      DC.W	%1111110110111111
     21  f01a		       a0 05		      DC.W	%0000010110100000
     22  f01c		       a0 05		      DC.W	%0000010110100000
     23  f01e		       e0 07		      DC.W	%0000011111100000
     24  f020
     25  f020				   map_01_load
     26  f020		       a9 d1		      LDA	#MAP_01_POS
     27  f022		       85 aa		      STA	playerPos
     28  f024		       a9 10		      LDA	#MAP_01_WDTH
     29  f026		       85 ab		      STA	mapWidth
     30  f028		       85 af		      STA	yLoss
     31  f02a		       a9 01		      LDA	#ONE
     32  f02c		       85 ac		      STA	xGain
     33  f02e		       a9 00		      LDA	#NULL
     34  f030		       85 ad		      STA	xLoss
     35  f032		       85 ae		      STA	yGain
     36  f034
     37  f034		       a9 00		      LDA	#<map_01
     38  f036		       85 b6		      STA	mapPtr
     39  f038		       a9 f1		      LDA	#>map_01
     40  f03a		       85 b7		      STA	mapPtr + 1
     41  f03c
     42  f03c		       a9 00		      LDA	#<miniMap_01
     43  f03e		       85 b4		      STA	miniMapPtr
     44  f040		       a9 f0		      LDA	#>miniMap_01
     45  f042		       85 b5		      STA	miniMapPtr + 1
     46  f044
     47  f044		       a9 86		      LDA	#WCOLU
     48  f046		       85 b1		      STA	wallColour
     49  f048		       a9 82		      LDA	#SCOLU
     50  f04a		       85 b2		      STA	shadowColour
     51  f04c
     52  f04c		       60		      RTS
     53  f04d
     54  f04d
     55  f100		       00 00 00 00*	      ALIGN	256
     56  f100
     57  f100				   map_01
     58  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     59  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     60  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     61  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     62  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     63  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     64  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     65  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     66  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     67  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     68  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     69  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     70  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     71  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     72  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     73  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     12  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F600
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F600
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200
     10  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     11  f200
     12  f200
     13  f200
 33 % of your map space is used up ( 512 / 1536  bytes )
     14  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  map space ,  1024 bytes are free
     15  f200					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16  f200					      ECHO	""
     17  f200
     14  f200
     15  f600					      ORG	$F600
     16  f600
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f600					      INCLUDE	"andtable.asm"
      1  f600							; The AND-tables for the shadows
      2  f600
      3  f600				   and_1a
      4  f600		       80		      DC	%10000000
      5  f601		       80		      DC	%10000000
      6  f602		       80		      DC	%10000000
      7  f603		       c0		      DC	%11000000
      8  f604		       c0		      DC	%11000000
      9  f605		       c0		      DC	%11000000
     10  f606		       e0		      DC	%11100000
     11  f607		       e0		      DC	%11100000
     12  f608		       e0		      DC	%11100000
     13  f609		       f0		      DC	%11110000
     14  f60a		       f0		      DC	%11110000
     15  f60b		       f0		      DC	%11110000
     16  f60c		       f8		      DC	%11111000
     17  f60d		       f8		      DC	%11111000
     18  f60e		       f8		      DC	%11111000
     19  f60f		       fc		      DC	%11111100
     20  f610		       fc		      DC	%11111100
     21  f611		       fc		      DC	%11111100
     22  f612		       fe		      DC	%11111110
     23  f613		       fe		      DC	%11111110
     24  f614		       fe		      DC	%11111110
     25  f615		       ff		      DC	%11111111
     26  f616		       ff		      DC	%11111111
     27  f617		       ff		      DC	%11111111
     28  f618		       ff		      DC	%11111111
     29  f619		       ff		      DC	%11111111
     30  f61a		       ff		      DC	%11111111
     31  f61b		       ff		      DC	%11111111
     32  f61c		       ff		      DC	%11111111
     33  f61d		       ff		      DC	%11111111
     34  f61e
     35  f61e				   and_1b
     36  f61e		       00		      DC	%00000000
     37  f61f		       00		      DC	%00000000
     38  f620		       00		      DC	%00000000
     39  f621		       00		      DC	%00000000
     40  f622		       00		      DC	%00000000
     41  f623		       00		      DC	%00000000
     42  f624		       00		      DC	%00000000
     43  f625		       00		      DC	%00000000
     44  f626		       00		      DC	%00000000
     45  f627		       00		      DC	%00000000
     46  f628		       00		      DC	%00000000
     47  f629		       00		      DC	%00000000
     48  f62a		       00		      DC	%00000000
     49  f62b		       00		      DC	%00000000
     50  f62c		       00		      DC	%00000000
     51  f62d		       00		      DC	%00000000
     52  f62e		       00		      DC	%00000000
     53  f62f		       00		      DC	%00000000
     54  f630		       00		      DC	%00000000
     55  f631		       00		      DC	%00000000
     56  f632		       00		      DC	%00000000
     57  f633		       00		      DC	%00000000
     58  f634		       00		      DC	%00000000
     59  f635		       00		      DC	%00000000
     60  f636		       01		      DC	%00000001
     61  f637		       01		      DC	%00000001
     62  f638		       01		      DC	%00000001
     63  f639		       03		      DC	%00000011
     64  f63a		       03		      DC	%00000011
     65  f63b		       03		      DC	%00000011
     66  f63c
     67  f63c				   and_1c
     68  f63c		       00		      DC	%00000000
     69  f63d		       00		      DC	%00000000
     70  f63e		       00		      DC	%00000000
     71  f63f		       00		      DC	%00000000
     72  f640		       00		      DC	%00000000
     73  f641		       00		      DC	%00000000
     74  f642		       01		      DC	%00000001
     75  f643		       01		      DC	%00000001
     76  f644		       01		      DC	%00000001
     77  f645		       03		      DC	%00000011
     78  f646		       03		      DC	%00000011
     79  f647		       03		      DC	%00000011
     80  f648		       07		      DC	%00000111
     81  f649		       07		      DC	%00000111
     82  f64a		       07		      DC	%00000111
     83  f64b		       0f		      DC	%00001111
     84  f64c		       0f		      DC	%00001111
     85  f64d		       0f		      DC	%00001111
     86  f64e		       1f		      DC	%00011111
     87  f64f		       1f		      DC	%00011111
     88  f650		       1f		      DC	%00011111
     89  f651		       3f		      DC	%00111111
     90  f652		       3f		      DC	%00111111
     91  f653		       3f		      DC	%00111111
     92  f654		       7f		      DC	%01111111
     93  f655		       7f		      DC	%01111111
     94  f656		       7f		      DC	%01111111
     95  f657		       ff		      DC	%11111111
     96  f658		       ff		      DC	%11111111
     97  f659		       ff		      DC	%11111111
     98  f65a
     99  f65a				   and_1d
    100  f65a		       02		      DC	%00000010
    101  f65b		       02		      DC	%00000010
    102  f65c		       02		      DC	%00000010
    103  f65d		       03		      DC	%00000011
    104  f65e		       03		      DC	%00000011
    105  f65f		       03		      DC	%00000011
    106  f660		       03		      DC	%00000011
    107  f661		       03		      DC	%00000011
    108  f662		       03		      DC	%00000011
    109  f663		       03		      DC	%00000011
    110  f664		       03		      DC	%00000011
    111  f665		       03		      DC	%00000011
    112  f666		       03		      DC	%00000011
    113  f667		       03		      DC	%00000011
    114  f668		       03		      DC	%00000011
    115  f669		       03		      DC	%00000011
    116  f66a		       03		      DC	%00000011
    117  f66b		       03		      DC	%00000011
    118  f66c		       03		      DC	%00000011
    119  f66d		       03		      DC	%00000011
    120  f66e		       03		      DC	%00000011
    121  f66f		       03		      DC	%00000011
    122  f670		       03		      DC	%00000011
    123  f671		       03		      DC	%00000011
    124  f672		       03		      DC	%00000011
    125  f673		       03		      DC	%00000011
    126  f674		       03		      DC	%00000011
    127  f675		       03		      DC	%00000011
    128  f676		       03		      DC	%00000011
    129  f677		       03		      DC	%00000011
------- FILE main.asm
------- FILE gamecode.asm LEVEL 2 PASS 4
      0  f678					      INCLUDE	"gamecode.asm"
      1  f678				   carl
      2  f678		       00		      DC	%00000000
      3  f679		       66		      DC	%01100110
      4  f67a		       24		      DC	%00100100
      5  f67b		       3c		      DC	%00111100
      6  f67c		       42		      DC	%01000010
      7  f67d		       bd		      DC	%10111101
      8  f67e		       c3		      DC	%11000011
      9  f67f		       81		      DC	%10000001
     10  f680		       a5		      DC	%10100101
     11  f681		       42		      DC	%01000010
     12  f682		       3c		      DC	%00111100
     13  f683
     14  f683				   carlH      SET	. - carl
------- FILE main.asm
     19  f683
     20  f683				   start
     21  f683
     22  f683							; Initialize everything
     23  f683
------- FILE init.asm LEVEL 2 PASS 4
      0  f683					      INCLUDE	"init.asm"
      1  f683							; VePseu's init file
      2  f683
      3  f683					      SUBROUTINE
      4  f683
      5  f683		       a2 ff		      LDX	#stack
      6  f685		       9a		      TXS
      7  f686
      8  f686		       a9 00		      LDA	#NULL
      9  f688		       aa		      TAX
     10  f689
     11  f689		       d8		      CLD
     12  f68a		       18		      CLC
     13  f68b		       58		      CLI
     14  f68c		       b8		      CLV
     15  f68d
     16  f68d				   .loop
     17  f68d
     18  f68d		       95 00		      STA	cleanStart,X
     19  f68f		       ca		      DEX
     20  f690
     21  f690		       d0 fb		      BNE	.loop
     22  f692
     23  f692		       20 20 f0 	      JSR	map_01_load
     24  f695
     25  f695		       a9 02		      LDA	#2
     26  f697		       85 17		      STA	AUDF0
------- FILE main.asm
     25  f699
     26  f699		       a9 02		      LDA	#VSYNC_SET
     27  f69b
     28  f69b				   screenStart
     29  f69b
     30  f69b							; Start vsync (3 scanlines)
     31  f69b		       85 00		      STA	VSYNC
     32  f69d
     33  f69d		       85 02		      STA	WSYNC
     34  f69f		       85 02		      STA	WSYNC
     35  f6a1		       e6 b0		      INC	frameNum
     36  f6a3		       a9 00		      LDA	#NULL
     37  f6a5		       85 02		      STA	WSYNC
     38  f6a7
     39  f6a7		       85 00		      STA	VSYNC
     40  f6a9
     41  f6a9							; Render everything
     42  f6a9
     43  f6a9
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f6a9					      INCLUDE	"walrend.asm"
      1  f6a9							; VePseu's wall renderer
      2  f6a9
      3  f6a9		       a4 aa		      LDY	playerPos
      4  f6ab
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f6ab					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f6ab							; Peripheral vision rendering (54 cycles)
      2  f6ab
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f6ab					      INCLUDE	"include/ands_0.h"
      1  f6ab							; The AND constants for peripheral vision
      2  f6ab
      3  f6ab		       00 c0	   AND_W0S1P1 =	%11000000
      4  f6ab		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f6ab
      0  f6ab					      X_POS_LOS		; 24 cycles
      1  f6ab
      2  f6ab		       98		      TYA
      3  f6ac		       18		      CLC
      4  f6ad		       65 ad		      ADC	xLoss
      5  f6af		       38		      SEC
      6  f6b0		       e5 ac		      SBC	xGain
      7  f6b2		       a8		      TAY
      8  f6b3
      6  f6b3		       b1 b6		      LDA	(mapPtr),Y
      7  f6b5		       29 c0		      AND	#AND_W0S1P1
      8  f6b7		       85 9b		      STA	shadow1a
      9  f6b9
     10  f6b9		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f6ba		       18		      CLC
     12  f6bb		       65 ac		      ADC	xGain
     13  f6bd		       65 ac		      ADC	xGain
     14  f6bf		       38		      SEC
     15  f6c0		       e5 ad		      SBC	xLoss
     16  f6c2		       e5 ad		      SBC	xLoss
     17  f6c4		       a8		      TAY
     18  f6c5
     19  f6c5		       b1 b6		      LDA	(mapPtr),Y	; 10 cycles
     20  f6c7		       29 03		      AND	#AND_W0S1P2
     21  f6c9		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f6cb
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f6cb					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f6cb							; Render the first layer (not that ugly) (86 cycles)
      2  f6cb
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f6cb					      INCLUDE	"include/ands_1.h"
      1  f6cb							; The AND constants for layer 1
      2  f6cb
      3  f6cb		       00 03	   AND_W1S1P1 =	%00000011
      4  f6cb		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f6cb
      0  f6cb					      Y_POS_ADV		; 30 cycles
      1  f6cb
      2  f6cb		       98		      TYA
      3  f6cc		       18		      CLC
      4  f6cd		       65 ae		      ADC	yGain
      5  f6cf		       38		      SEC
      6  f6d0		       e5 af		      SBC	yLoss
      7  f6d2		       a8		      TAY
      8  f6d3
      6  f6d3		       b1 b6		      LDA	(mapPtr),Y
      7  f6d5		       85 9e		      STA	shadow1d
      8  f6d7
      0  f6d7					      X_POS_LOS		; 22 cycles
      1  f6d7
      2  f6d7		       98		      TYA
      3  f6d8		       18		      CLC
      4  f6d9		       65 ad		      ADC	xLoss
      5  f6db		       38		      SEC
      6  f6dc		       e5 ac		      SBC	xGain
      7  f6de		       a8		      TAY
      8  f6df
     10  f6df		       b1 b6		      LDA	(mapPtr),Y
     11  f6e1		       85 80		      STA	wall1
     12  f6e3		       85 81		      STA	wall1+1
     13  f6e5		       85 82		      STA	wall1+2
     14  f6e7		       85 83		      STA	wall1+3
     15  f6e9		       85 84		      STA	wall1+4
     16  f6eb
     17  f6eb		       a5 9e		      LDA	shadow1d
     18  f6ed		       aa		      TAX
     19  f6ee		       05 80		      ORA	wall1
     20  f6f0		       45 80		      EOR	wall1
     21  f6f2		       85 9e		      STA	shadow1d
     22  f6f4		       8a		      TXA
     23  f6f5		       05 9f		      ORA	shadow1e
     24  f6f7		       05 80		      ORA	wall1
     25  f6f9		       45 80		      EOR	wall1
     26  f6fb		       29 03		      AND	#AND_W1S1P2
     27  f6fd		       85 9f		      STA	shadow1e
     28  f6ff
      0  f6ff					      X_POS_LOS		; 34 cycles
      1  f6ff
      2  f6ff		       98		      TYA
      3  f700		       18		      CLC
      4  f701		       65 ad		      ADC	xLoss
      5  f703		       38		      SEC
      6  f704		       e5 ac		      SBC	xGain
      7  f706		       a8		      TAY
      8  f707
     30  f707		       b1 b6		      LDA	(mapPtr),Y
     31  f709		       05 80		      ORA	wall1
     32  f70b		       aa		      TAX
     33  f70c		       05 9b		      ORA	shadow1a
     34  f70e		       45 80		      EOR	wall1
     35  f710		       85 9b		      STA	shadow1a
     36  f712		       8a		      TXA
     37  f713		       45 80		      EOR	wall1
     38  f715		       29 03		      AND	#AND_W1S1P2
     39  f717		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f719
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f719					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f719							; Render the second layer (186 cycles)
      2  f719
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f719					      INCLUDE	"include/ands_2.h"
      1  f719							; The AND constants for layer 2
      2  f719
      3  f719		       00 e0	   AND_W2S1P1 =	%11100000
      4  f719		       00 fc	   AND_W2S2P1 =	%11111100
      5  f719
      6  f719		       00 03	   AND_W2S0P1 =	%00000011
      7  f719		       00 04	   AND_W2S1P2 =	%00000100
      8  f719		       00 0c	   AND_W2S2P2 =	%00001100
      9  f719
     10  f719		       00 fc	   AND_W2S0P2 =	%11111100
     11  f719
     12  f719		       00 80	   AND_W2S1P3 =	%10000000
     13  f719		       00 c0	   AND_W2S2P3 =	%11000000
     14  f719
     15  f719		       00 01	   AND_W2S1P4 =	%00000001
     16  f719		       00 0f	   AND_W2S2P4 =	%00001111
     17  f719		       00 03	   AND_W2S1P5 =	%00000011
     18  f719		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f719
      0  f719					      Y_POS_ADV_AL		; 35 cycles
      1  f719
      2  f719		       98		      TYA
      3  f71a		       18		      CLC
      4  f71b		       65 ae		      ADC	yGain
      5  f71d		       65 ad		      ADC	xLoss
      6  f71f		       38		      SEC
      7  f720		       e5 af		      SBC	yLoss
      8  f722		       e5 ac		      SBC	xGain
      9  f724		       a8		      TAY
     10  f725
      6  f725		       b1 b6		      LDA	(mapPtr),Y
      7  f727		       29 fc		      AND	#AND_W2S2P1
      8  f729		       85 a0		      STA	shadow2ab
      9  f72b		       29 e0		      AND	#AND_W2S1P1
     10  f72d		       85 91		      STA	shadow2aa
     11  f72f
      0  f72f					      X_POS_GAN		; 41 cycles
      1  f72f
      2  f72f		       98		      TYA
      3  f730		       18		      CLC
      4  f731		       65 ac		      ADC	xGain
      5  f733		       38		      SEC
      6  f734		       e5 ad		      SBC	xLoss
      7  f736		       a8		      TAY
      8  f737
     13  f737		       b1 b6		      LDA	(mapPtr),Y
     14  f739		       aa		      TAX
     15  f73a		       85 85		      STA	wall2a
     16  f73c		       29 03		      AND	#AND_W2S0P1
     17  f73e		       85 86		      STA	wall2b
     18  f740		       8a		      TXA
     19  f741		       29 0c		      AND	#AND_W2S2P2
     20  f743		       85 a1		      STA	shadow2bb
     21  f745		       29 04		      AND	#AND_W2S1P2
     22  f747		       85 92		      STA	shadow2ba
     23  f749
      0  f749					      X_POS_GAN		; 30 cycles
      1  f749
      2  f749		       98		      TYA
      3  f74a		       18		      CLC
      4  f74b		       65 ac		      ADC	xGain
      5  f74d		       38		      SEC
      6  f74e		       e5 ad		      SBC	xLoss
      7  f750		       a8		      TAY
      8  f751
     25  f751		       b1 b6		      LDA	(mapPtr),Y
     26  f753		       85 87		      STA	wall2c
     27  f755		       29 fc		      AND	#AND_W2S0P2
     28  f757		       05 86		      ORA	wall2b
     29  f759		       85 86		      STA	wall2b
     30  f75b
      0  f75b					      X_POS_GAN		; 35 cycles
      1  f75b
      2  f75b		       98		      TYA
      3  f75c		       18		      CLC
      4  f75d		       65 ac		      ADC	xGain
      5  f75f		       38		      SEC
      6  f760		       e5 ad		      SBC	xLoss
      7  f762		       a8		      TAY
      8  f763
     32  f763		       b1 b6		      LDA	(mapPtr),Y
     33  f765		       85 88		      STA	wall2d
     34  f767		       85 89		      STA	wall2e
     35  f769		       29 c0		      AND	#AND_W2S2P3
     36  f76b		       85 a2		      STA	shadow2cb
     37  f76d		       29 80		      AND	#AND_W2S1P3
     38  f76f		       85 93		      STA	shadow2ca
     39  f771
      0  f771					      X_POS_GAN		; 37 cycles
      1  f771
      2  f771		       98		      TYA
      3  f772		       18		      CLC
      4  f773		       65 ac		      ADC	xGain
      5  f775		       38		      SEC
      6  f776		       e5 ad		      SBC	xLoss
      7  f778		       a8		      TAY
      8  f779
     41  f779		       b1 b6		      LDA	(mapPtr),Y
     42  f77b		       29 0f		      AND	#AND_W2S2P4
     43  f77d		       85 a3		      STA	shadow2db
     44  f77f		       29 03		      AND	#AND_W2S1P5
     45  f781		       85 95		      STA	shadow2ea
     46  f783		       85 a4		      STA	shadow2eb
     47  f785		       29 01		      AND	#AND_W2S1P4
     48  f787		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f789
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f789					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f789							; Render the third layer (it's really ugly, at 281 cycles)
      2  f789
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f789					      INCLUDE	"include/ands_3.h"
      1  f789							; The AND constants for render layer 3
      2  f789
      3  f789		       00 80	   AND_W3S1P1 =	%10000000
      4  f789		       00 c0	   AND_W3S2P1 =	%11000000
      5  f789
      6  f789		       00 fc	   AND_W3S0P1 =	%11111100
      7  f789		       00 02	   AND_W3S1P2 =	%00000010
      8  f789		       00 03	   AND_W3S2P2 =	%00000011
      9  f789
     10  f789		       00 03	   AND_W3S0P2 =	%00000011
     11  f789		       00 0f	   AND_W3S0P3 =	%00001111
     12  f789		       00 10	   AND_W3S1P3 =	%00010000
     13  f789		       00 30	   AND_W3S2P3 =	%00110000
     14  f789
     15  f789		       00 f0	   AND_W3S0P4 =	%11110000
     16  f789		       00 30	   AND_W3S0P5 =	%00110000
     17  f789
     18  f789		       00 c0	   AND_W3S0P6 =	%11000000
     19  f789		       00 f0	   AND_W3S0P7 =	%11110000
     20  f789		       00 20	   AND_W3S1P4 =	%00100000
     21  f789		       00 30	   AND_W3S2P4 =	%00110000
     22  f789
     23  f789		       00 0f	   AND_W3S0P8 =	%00001111
     24  f789		       00 03	   AND_W3S0P9 =	%00000011
     25  f789		       00 10	   AND_W3S1P5 =	%00010000
     26  f789		       00 30	   AND_W3S2P5 =	%00110000
     27  f789
     28  f789		       00 02	   AND_W3S1P6 =	%00000010
     29  f789		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f789
      0  f789					      Y_POS_ADV_AG		; 35 cycles
      1  f789
      2  f789		       98		      TYA
      3  f78a		       18		      CLC
      4  f78b		       65 ae		      ADC	yGain
      5  f78d		       65 ac		      ADC	xGain
      6  f78f		       38		      SEC
      7  f790		       e5 af		      SBC	yLoss
      8  f792		       e5 ad		      SBC	xLoss
      9  f794		       a8		      TAY
     10  f795
      6  f795		       b1 b6		      LDA	(mapPtr),Y
      7  f797		       29 03		      AND	#AND_W3S2P6
      8  f799		       85 a9		      STA	shadow3eb
      9  f79b		       29 02		      AND	#AND_W3S1P6
     10  f79d		       85 9a		      STA	shadow3ea
     11  f79f
      0  f79f					      X_POS_LOS		; 38 cycles
      1  f79f
      2  f79f		       98		      TYA
      3  f7a0		       18		      CLC
      4  f7a1		       65 ad		      ADC	xLoss
      5  f7a3		       38		      SEC
      6  f7a4		       e5 ac		      SBC	xGain
      7  f7a6		       a8		      TAY
      8  f7a7
     13  f7a7		       b1 b6		      LDA	(mapPtr),Y
     14  f7a9		       aa		      TAX
     15  f7aa		       29 0f		      AND	#AND_W3S0P8
     16  f7ac		       85 8d		      STA	wall3d
     17  f7ae		       29 03		      AND	#AND_W3S0P9
     18  f7b0		       85 8e		      STA	wall3e
     19  f7b2		       8a		      TXA
     20  f7b3		       29 30		      AND	#AND_W3S2P5
     21  f7b5		       85 a8		      STA	shadow3db
     22  f7b7		       29 10		      AND	#AND_W3S1P5
     23  f7b9		       85 99		      STA	shadow3da
     24  f7bb
      0  f7bb					      X_POS_LOS		; 46 cycles
      1  f7bb
      2  f7bb		       98		      TYA
      3  f7bc		       18		      CLC
      4  f7bd		       65 ad		      ADC	xLoss
      5  f7bf		       38		      SEC
      6  f7c0		       e5 ac		      SBC	xGain
      7  f7c2		       a8		      TAY
      8  f7c3
     26  f7c3		       b1 b6		      LDA	(mapPtr),Y
     27  f7c5		       aa		      TAX
     28  f7c6		       29 f0		      AND	#AND_W3S0P7
     29  f7c8		       05 8d		      ORA	wall3d
     30  f7ca		       85 8d		      STA	wall3d
     31  f7cc		       29 c0		      AND	#AND_W3S0P6
     32  f7ce		       85 8c		      STA	wall3c
     33  f7d0		       8a		      TXA
     34  f7d1		       29 30		      AND	#AND_W3S2P4
     35  f7d3		       85 a7		      STA	shadow3cb
     36  f7d5		       29 20		      AND	#AND_W3S1P4
     37  f7d7		       85 98		      STA	shadow3ca
     38  f7d9
      0  f7d9					      X_POS_LOS		; 32 cycles
      1  f7d9
      2  f7d9		       98		      TYA
      3  f7da		       18		      CLC
      4  f7db		       65 ad		      ADC	xLoss
      5  f7dd		       38		      SEC
      6  f7de		       e5 ac		      SBC	xGain
      7  f7e0		       a8		      TAY
      8  f7e1
     40  f7e1		       b1 b6		      LDA	(mapPtr),Y
     41  f7e3		       29 f0		      AND	#AND_W3S0P4
     42  f7e5		       85 8b		      STA	wall3b
     43  f7e7		       29 30		      AND	#AND_W3S0P5
     44  f7e9		       05 8c		      ORA	wall3c
     45  f7eb		       85 8c		      STA	wall3c
     46  f7ed
      0  f7ed					      X_POS_LOS		; 46 cycles
      1  f7ed
      2  f7ed		       98		      TYA
      3  f7ee		       18		      CLC
      4  f7ef		       65 ad		      ADC	xLoss
      5  f7f1		       38		      SEC
      6  f7f2		       e5 ac		      SBC	xGain
      7  f7f4		       a8		      TAY
      8  f7f5
     48  f7f5		       b1 b6		      LDA	(mapPtr),Y
     49  f7f7		       aa		      TAX
     50  f7f8		       29 0f		      AND	#AND_W3S0P3
     51  f7fa		       05 8b		      ORA	wall3b
     52  f7fc		       85 8b		      STA	wall3b
     53  f7fe		       29 03		      AND	#AND_W3S0P2
     54  f800		       85 8a		      STA	wall3a
     55  f802		       8a		      TXA
     56  f803		       29 30		      AND	#AND_W3S2P3
     57  f805		       85 a6		      STA	shadow3bb
     58  f807		       29 10		      AND	#AND_W3S1P3
     59  f809		       85 97		      STA	shadow3ba
     60  f80b
      0  f80b					      X_POS_LOS		; 41 cycles
      1  f80b
      2  f80b		       98		      TYA
      3  f80c		       18		      CLC
      4  f80d		       65 ad		      ADC	xLoss
      5  f80f		       38		      SEC
      6  f810		       e5 ac		      SBC	xGain
      7  f812		       a8		      TAY
      8  f813
     62  f813		       b1 b6		      LDA	(mapPtr),Y
     63  f815		       aa		      TAX
     64  f816		       29 fc		      AND	#AND_W3S0P1
     65  f818		       05 8a		      ORA	wall3a
     66  f81a		       85 8a		      STA	wall3a
     67  f81c		       8a		      TXA
     68  f81d		       29 03		      AND	#AND_W3S2P2
     69  f81f		       85 a5		      STA	shadow3ab
     70  f821		       29 02		      AND	#AND_W3S1P2
     71  f823		       85 96		      STA	shadow3aa
     72  f825
      0  f825					      X_POS_LOS		; 35 cycles
      1  f825
      2  f825		       98		      TYA
      3  f826		       18		      CLC
      4  f827		       65 ad		      ADC	xLoss
      5  f829		       38		      SEC
      6  f82a		       e5 ac		      SBC	xGain
      7  f82c		       a8		      TAY
      8  f82d
     74  f82d		       b1 b6		      LDA	(mapPtr),Y
     75  f82f		       29 c0		      AND	#AND_W3S2P1
     76  f831		       05 a5		      ORA	shadow3ab
     77  f833		       85 a5		      STA	shadow3ab
     78  f835		       29 80		      AND	#AND_W3S1P1
     79  f837		       05 96		      ORA	shadow3aa
     80  f839		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f83b
     13  f83b		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f83d					      INCLUDE	"scrend.asm"
      1  f83d							; VePseu's screen renderer
      2  f83d
      3  f83d					      SUBROUTINE
      4  f83d
      5  f83d		       a2 00		      LDX	#INDEXINIT	; 2 cycles
      6  f83f
      7  f83f				   .loop		; Totals at 909 cycles
      8  f83f
      9  f83f		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     10  f841		       15 80		      ORA	wall1,X
     11  f843		       15 9b		      ORA	shadow1a,X
     12  f845		       55 9b		      EOR	shadow1a,X
     13  f847		       95 85		      STA	wall2a,X
     14  f849
     15  f849		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     16  f84b		       15 9b		      ORA	shadow1a,X
     17  f84d		       15 85		      ORA	wall2a,X
     18  f84f		       55 85		      EOR	wall2a,X
     19  f851		       95 91		      STA	shadow2aa,X
     20  f853
     21  f853		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     22  f855		       15 9b		      ORA	shadow1a,X
     23  f857		       15 85		      ORA	wall2a,X
     24  f859		       55 85		      EOR	wall2a,X
     25  f85b		       95 a0		      STA	shadow2ab,X
     26  f85d
     27  f85d		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     28  f85e		       e0 0a		      CPX	#WALLCNT
     29  f860		       d0 dd		      BNE	.loop
     30  f862
     31  f862		       a2 ff		      LDX	#FULLWALL
     32  f864
     33  f864		       8a		      TXA
     34  f865		       45 a5		      EOR	shadow3ab
     35  f867		       85 8f		      STA	wall4a
     36  f869
     37  f869		       8a		      TXA
     38  f86a		       45 a6		      EOR	shadow3bb
     39  f86c		       85 90		      STA	wall4b
     40  f86e
     41  f86e		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     46  f870
     47  f870							; Pad!
     48  f870
      0  f870					      PAD	UPPAD_LIMIT + 2
      1  f870
      2  f870				   .SCANLINES SET	UPPAD_LIMIT + 2
      3  f870
      4  f870		       a2 11		      LDX	#.SCANLINES
      5  f872
      6  f872				   .loop
      7  f872		       85 02		      STA	WSYNC
      8  f874
      9  f874		       ca		      DEX
     10  f875		       d0 fb		      BNE	.loop
     11  f877
     50  f877
     51  f877							; Draw everything
     52  f877
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  f877					      INCLUDE	"dispkern.asm"
      1  f877							; VePseu's display kernel
      2  f877
      3  f877		       4c 7a f8 	      JMP	drawStart
      4  f87a
      5  f87a							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  f87a							;
      7  f87a							; dc_w1s1.asm
      8  f87a							; |   | |
      9  f87a							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  f87a							; |   |
     11  f87a							; |   |- The wall it draws
     12  f87a							; |
     13  f87a							; |- Draw-code identifies
     14  f87a							;
     15  f87a							; See GLOSSARY.TXT for definitions of vague words
     16  f87a
     17  f87a				   drawStart
     18  f87a
     19  f87a		       a4 bb		      LDY	spritePosY	; The Y register is expected to hold the sprite's Y position
     20  f87c
     21  f87c							; Also note that if the sprite position = 0 then the sprite
     22  f87c							; will not be drawn
     23  f87c
     24  f87c
     25  f87c		       b8		      CLV		; The overflow flag is used to determine which half of the screen is
     26  f87d							; being drawn, allowing code to be easily re-used. This requires that
     27  f87d							; the overflow flag be set to zero at start, otherwise things won't turn
     28  f87d							; out so well...
     29  f87d
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  f87d					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  f87d							; The draw code for the 1st wall and shadow
      2  f87d
      3  f87d				   dc_w1s1    SUBROUTINE
      4  f87d
      5  f87d		       a2 00		      LDX	#INDEXINIT
      6  f87f		       4c 8f f8 	      JMP	.loop
      7  f882
      8  f882				   .noSprite_1
      9  f882							; Depending on the location in the program the branch here might cross a
     10  f882							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  f882							; delay simply check if the page number (the MSB of the address) is
     12  f882							; different between the branch and it's destination
     13  f882					      IF	>.branchPoint_1 == >.noSprite_1
      0  f882					      DELAY	11
      1  f882				   .CYCLES    SET	11
      2  f882
      3  f882					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f882		       ea		      NOP
      5  f882				   .CYCLES    SET	.CYCLES - 2
      6  f883					      ENDIF
      7  f883
      8  f883					      IF	[.CYCLES - 2] / 5
      9  f883					      REPEAT	.CYCLES / 5
     10  f883		       e6 30		      INC	DUMP
     11  f885					      REPEND
     12  f885				   .CYCLES    SET	.CYCLES % 5
     13  f885					      ENDIF
     14  f885
     15  f885					      IF	.CYCLES % 3 == 1
     16  f885		       ea		      NOP
     17  f885				   .CYCLES    SET	.CYCLES - 2
     18  f886					      ENDIF
     19  f886
     20  f886				  -	      REPEAT	.CYCLES / 3
     21  f886				  -	      STA	DUMP
     22  f886					      REPEND
     23  f886
     24  f886				   .CYCLES    SET	.CYCLES % 3
     25  f886
     26  f886					      REPEAT	.CYCLES / 2
     27  f886		       ea		      NOP
     28  f887					      REPEND
     29  f887
     30  f887				   .CYCLES    SET	.CYCLES % 2
     31  f887
     32  f887				  -	      IF	.CYCLES
     33  f887				  -	      ERR
     34  f887					      ENDIF
     35  f887
     15  f887				  -	      ELSE
     16  f887				  -	      DELAY	10
     17  f887					      ENDIF
     18  f887		       4c a5 f8 	      JMP	.noSprite_ret
     19  f88a
     20  f88a				   .noSprite_2
     21  f88a					      IF	>.branchPoint_2 == >.noSprite_2
      0  f88a					      DELAY	4
      1  f88a				   .CYCLES    SET	4
      2  f88a
      3  f88a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f88a				  -	      NOP
      5  f88a				  -.CYCLES    SET	.CYCLES - 2
      6  f88a					      ENDIF
      7  f88a
      8  f88a				  -	      IF	[.CYCLES - 2] / 5
      9  f88a				  -	      REPEAT	.CYCLES / 5
     10  f88a				  -	      INC	DUMP
     11  f88a				  -	      REPEND
     12  f88a				  -.CYCLES    SET	.CYCLES % 5
     13  f88a					      ENDIF
     14  f88a
     15  f88a					      IF	.CYCLES % 3 == 1
     16  f88a		       ea		      NOP
     17  f88a				   .CYCLES    SET	.CYCLES - 2
     18  f88b					      ENDIF
     19  f88b
     20  f88b				  -	      REPEAT	.CYCLES / 3
     21  f88b				  -	      STA	DUMP
     22  f88b					      REPEND
     23  f88b
     24  f88b				   .CYCLES    SET	.CYCLES % 3
     25  f88b
     26  f88b					      REPEAT	.CYCLES / 2
     27  f88b		       ea		      NOP
     28  f88c					      REPEND
     29  f88c
     30  f88c				   .CYCLES    SET	.CYCLES % 2
     31  f88c
     32  f88c				  -	      IF	.CYCLES
     33  f88c				  -	      ERR
     34  f88c					      ENDIF
     35  f88c
     23  f88c				  -	      ELSE
     24  f88c				  -	      DELAY	3
     25  f88c					      ENDIF
     26  f88c		       4c a5 f8 	      JMP	.noSprite_ret
     27  f88f
     28  f88f				   .loop
     29  f88f		       a5 b1		      LDA	wallColour
     30  f891		       85 02		      STA	WSYNC
     31  f893		       85 08		      STA	COLUPF
     32  f895		       a5 80		      LDA	wall1
     33  f897		       85 0e		      STA	PF1
     34  f899		       98		      TYA
     35  f89a
     36  f89a		       f0 e6		      BEQ	.noSprite_1
     37  f89c				   .branchPoint_1
     38  f89c		       88		      DEY
     39  f89d		       c4 ba		      CPY	spriteHeight
     40  f89f
     41  f89f		       b0 e9		      BCS	.noSprite_2
     42  f8a1				   .branchPoint_2
     43  f8a1		       b1 b8		      LDA	(sprite),Y
     44  f8a3		       85 1b		      STA	GRP0
     45  f8a5
     46  f8a5				   .noSprite_ret
     47  f8a5		       a5 80		      LDA	wall1
     48  f8a7		       85 0f		      STA	PF2
      0  f8a9					      DELAY	6
      1  f8a9				   .CYCLES    SET	6
      2  f8a9
      3  f8a9				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8a9				  -	      NOP
      5  f8a9				  -.CYCLES    SET	.CYCLES - 2
      6  f8a9					      ENDIF
      7  f8a9
      8  f8a9				  -	      IF	[.CYCLES - 2] / 5
      9  f8a9				  -	      REPEAT	.CYCLES / 5
     10  f8a9				  -	      INC	DUMP
     11  f8a9				  -	      REPEND
     12  f8a9				  -.CYCLES    SET	.CYCLES % 5
     13  f8a9					      ENDIF
     14  f8a9
     15  f8a9				  -	      IF	.CYCLES % 3 == 1
     16  f8a9				  -	      NOP
     17  f8a9				  -.CYCLES    SET	.CYCLES - 2
     18  f8a9					      ENDIF
     19  f8a9
     20  f8a9					      REPEAT	.CYCLES / 3
     21  f8a9		       85 30		      STA	DUMP
     20  f8a9					      REPEND
     21  f8ab		       85 30		      STA	DUMP
     22  f8ad					      REPEND
     23  f8ad
     24  f8ad				   .CYCLES    SET	.CYCLES % 3
     25  f8ad
     26  f8ad				  -	      REPEAT	.CYCLES / 2
     27  f8ad				  -	      NOP
     28  f8ad					      REPEND
     29  f8ad
     30  f8ad				   .CYCLES    SET	.CYCLES % 2
     31  f8ad
     32  f8ad				  -	      IF	.CYCLES
     33  f8ad				  -	      ERR
     34  f8ad					      ENDIF
     35  f8ad
     50  f8ad		       85 0d		      STA	PF0
      0  f8af					      DELAY	19
      1  f8af				   .CYCLES    SET	19
      2  f8af
      3  f8af				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8af				  -	      NOP
      5  f8af				  -.CYCLES    SET	.CYCLES - 2
      6  f8af					      ENDIF
      7  f8af
      8  f8af					      IF	[.CYCLES - 2] / 5
      9  f8af					      REPEAT	.CYCLES / 5
     10  f8af		       e6 30		      INC	DUMP
      9  f8af					      REPEND
     10  f8b1		       e6 30		      INC	DUMP
      9  f8b1					      REPEND
     10  f8b3		       e6 30		      INC	DUMP
     11  f8b5					      REPEND
     12  f8b5				   .CYCLES    SET	.CYCLES % 5
     13  f8b5					      ENDIF
     14  f8b5
     15  f8b5					      IF	.CYCLES % 3 == 1
     16  f8b5		       ea		      NOP
     17  f8b5				   .CYCLES    SET	.CYCLES - 2
     18  f8b6					      ENDIF
     19  f8b6
     20  f8b6				  -	      REPEAT	.CYCLES / 3
     21  f8b6				  -	      STA	DUMP
     22  f8b6					      REPEND
     23  f8b6
     24  f8b6				   .CYCLES    SET	.CYCLES % 3
     25  f8b6
     26  f8b6					      REPEAT	.CYCLES / 2
     27  f8b6		       ea		      NOP
     28  f8b7					      REPEND
     29  f8b7
     30  f8b7				   .CYCLES    SET	.CYCLES % 2
     31  f8b7
     32  f8b7				  -	      IF	.CYCLES
     33  f8b7				  -	      ERR
     34  f8b7					      ENDIF
     35  f8b7
     52  f8b7		       a9 00		      LDA	#NULL
     53  f8b9		       85 0f		      STA	PF2
     54  f8bb		       85 0d		      STA	PF0
     55  f8bd
     56  f8bd		       85 02		      STA	WSYNC
     57  f8bf		       a5 b2		      LDA	shadowColour
     58  f8c1		       85 08		      STA	COLUPF
     59  f8c3		       a5 9b		      LDA	shadow1a
     60  f8c5		       3d 00 f6 	      AND	and_1a,X
     61  f8c8		       85 0e		      STA	PF1
     62  f8ca		       a5 9c		      LDA	shadow1b
     63  f8cc		       3d 1e f6 	      AND	and_1b,X
     64  f8cf		       85 0f		      STA	PF2
      0  f8d1					      DELAY	9
      1  f8d1				   .CYCLES    SET	9
      2  f8d1
      3  f8d1				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8d1				  -	      NOP
      5  f8d1				  -.CYCLES    SET	.CYCLES - 2
      6  f8d1					      ENDIF
      7  f8d1
      8  f8d1					      IF	[.CYCLES - 2] / 5
      9  f8d1					      REPEAT	.CYCLES / 5
     10  f8d1		       e6 30		      INC	DUMP
     11  f8d3					      REPEND
     12  f8d3				   .CYCLES    SET	.CYCLES % 5
     13  f8d3					      ENDIF
     14  f8d3
     15  f8d3					      IF	.CYCLES % 3 == 1
     16  f8d3		       ea		      NOP
     17  f8d3				   .CYCLES    SET	.CYCLES - 2
     18  f8d4					      ENDIF
     19  f8d4
     20  f8d4				  -	      REPEAT	.CYCLES / 3
     21  f8d4				  -	      STA	DUMP
     22  f8d4					      REPEND
     23  f8d4
     24  f8d4				   .CYCLES    SET	.CYCLES % 3
     25  f8d4
     26  f8d4					      REPEAT	.CYCLES / 2
     27  f8d4		       ea		      NOP
     28  f8d5					      REPEND
     29  f8d5
     30  f8d5				   .CYCLES    SET	.CYCLES % 2
     31  f8d5
     32  f8d5				  -	      IF	.CYCLES
     33  f8d5				  -	      ERR
     34  f8d5					      ENDIF
     35  f8d5
     66  f8d5		       a5 9e		      LDA	shadow1d
     67  f8d7		       3d 3c f6 	      AND	and_1c,X
     68  f8da		       85 0e		      STA	PF1
     69  f8dc		       a5 9f		      LDA	shadow1e
     70  f8de		       3d 5a f6 	      AND	and_1d,X
     71  f8e1		       85 0f		      STA	PF2
     72  f8e3
     73  f8e3		       e8		      INX
     74  f8e4		       e0 1e		      CPX	#UPPRWALL_S
     75  f8e6		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  f8e8					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  f8e8							; The second wall and it's first shadow
      2  f8e8
      3  f8e8				   dc_w2s1    SUBROUTINE
      4  f8e8
      5  f8e8		       a2 03		      LDX	#PIXH
      6  f8ea		       4c f9 f8 	      JMP	.loop
      7  f8ed
      8  f8ed				   .noSprite_1
      9  f8ed				  -	      IF	>.branchPoint_1 == >.noSprite_1
     10  f8ed				  -	      DELAY	11
     11  f8ed					      ELSE
      0  f8ed					      DELAY	10
      1  f8ed				   .CYCLES    SET	10
      2  f8ed
      3  f8ed				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8ed				  -	      NOP
      5  f8ed				  -.CYCLES    SET	.CYCLES - 2
      6  f8ed					      ENDIF
      7  f8ed
      8  f8ed					      IF	[.CYCLES - 2] / 5
      9  f8ed					      REPEAT	.CYCLES / 5
     10  f8ed		       e6 30		      INC	DUMP
      9  f8ed					      REPEND
     10  f8ef		       e6 30		      INC	DUMP
     11  f8f1					      REPEND
     12  f8f1				   .CYCLES    SET	.CYCLES % 5
     13  f8f1					      ENDIF
     14  f8f1
     15  f8f1				  -	      IF	.CYCLES % 3 == 1
     16  f8f1				  -	      NOP
     17  f8f1				  -.CYCLES    SET	.CYCLES - 2
     18  f8f1					      ENDIF
     19  f8f1
     20  f8f1				  -	      REPEAT	.CYCLES / 3
     21  f8f1				  -	      STA	DUMP
     22  f8f1					      REPEND
     23  f8f1
     24  f8f1				   .CYCLES    SET	.CYCLES % 3
     25  f8f1
     26  f8f1				  -	      REPEAT	.CYCLES / 2
     27  f8f1				  -	      NOP
     28  f8f1					      REPEND
     29  f8f1
     30  f8f1				   .CYCLES    SET	.CYCLES % 2
     31  f8f1
     32  f8f1				  -	      IF	.CYCLES
     33  f8f1				  -	      ERR
     34  f8f1					      ENDIF
     35  f8f1
     13  f8f1					      ENDIF
     14  f8f1		       4c 0f f9 	      JMP	.noSprite_ret
     15  f8f4
     16  f8f4				   .noSprite_2
     17  f8f4				  -	      IF	>.branchPoint_2 == >.noSprite_2
     18  f8f4				  -	      DELAY	4
     19  f8f4					      ELSE
      0  f8f4					      DELAY	3
      1  f8f4				   .CYCLES    SET	3
      2  f8f4
      3  f8f4				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8f4				  -	      NOP
      5  f8f4				  -.CYCLES    SET	.CYCLES - 2
      6  f8f4					      ENDIF
      7  f8f4
      8  f8f4				  -	      IF	[.CYCLES - 2] / 5
      9  f8f4				  -	      REPEAT	.CYCLES / 5
     10  f8f4				  -	      INC	DUMP
     11  f8f4				  -	      REPEND
     12  f8f4				  -.CYCLES    SET	.CYCLES % 5
     13  f8f4					      ENDIF
     14  f8f4
     15  f8f4				  -	      IF	.CYCLES % 3 == 1
     16  f8f4				  -	      NOP
     17  f8f4				  -.CYCLES    SET	.CYCLES - 2
     18  f8f4					      ENDIF
     19  f8f4
     20  f8f4					      REPEAT	.CYCLES / 3
     21  f8f4		       85 30		      STA	DUMP
     22  f8f6					      REPEND
     23  f8f6
     24  f8f6				   .CYCLES    SET	.CYCLES % 3
     25  f8f6
     26  f8f6				  -	      REPEAT	.CYCLES / 2
     27  f8f6				  -	      NOP
     28  f8f6					      REPEND
     29  f8f6
     30  f8f6				   .CYCLES    SET	.CYCLES % 2
     31  f8f6
     32  f8f6				  -	      IF	.CYCLES
     33  f8f6				  -	      ERR
     34  f8f6					      ENDIF
     35  f8f6
     21  f8f6					      ENDIF
     22  f8f6		       4c 0f f9 	      JMP	.noSprite_ret
     23  f8f9
     24  f8f9				   .loop
     25  f8f9		       a5 b1		      LDA	wallColour
     26  f8fb		       85 02		      STA	WSYNC
     27  f8fd				   .joinIn
     28  f8fd		       85 08		      STA	COLUPF
     29  f8ff		       a5 85		      LDA	wall2a
     30  f901		       85 0e		      STA	PF1
     31  f903		       98		      TYA
     32  f904
     33  f904		       f0 e7		      BEQ	.noSprite_1
     34  f906				   .branchPoint_1
     35  f906		       88		      DEY
     36  f907		       c4 ba		      CPY	spriteHeight
     37  f909
     38  f909		       b0 e9		      BCS	.noSprite_2
     39  f90b				   .branchPoint_2
     40  f90b		       b1 b8		      LDA	(sprite),Y
     41  f90d		       85 1b		      STA	GRP0
     42  f90f
     43  f90f				   .noSprite_ret
     44  f90f		       a5 86		      LDA	wall2b
     45  f911		       85 0f		      STA	PF2
     46  f913
     47  f913		       a5 87		      LDA	wall2c
     48  f915		       85 0d		      STA	PF0
     49  f917		       a5 88		      LDA	wall2d
     50  f919		       85 0e		      STA	PF1
     51  f91b		       a5 89		      LDA	wall2e
     52  f91d		       85 0f		      STA	PF2
     53  f91f		       a9 00		      LDA	#NULL
      0  f921					      DELAY	10
      1  f921				   .CYCLES    SET	10
      2  f921
      3  f921				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f921				  -	      NOP
      5  f921				  -.CYCLES    SET	.CYCLES - 2
      6  f921					      ENDIF
      7  f921
      8  f921					      IF	[.CYCLES - 2] / 5
      9  f921					      REPEAT	.CYCLES / 5
     10  f921		       e6 30		      INC	DUMP
      9  f921					      REPEND
     10  f923		       e6 30		      INC	DUMP
     11  f925					      REPEND
     12  f925				   .CYCLES    SET	.CYCLES % 5
     13  f925					      ENDIF
     14  f925
     15  f925				  -	      IF	.CYCLES % 3 == 1
     16  f925				  -	      NOP
     17  f925				  -.CYCLES    SET	.CYCLES - 2
     18  f925					      ENDIF
     19  f925
     20  f925				  -	      REPEAT	.CYCLES / 3
     21  f925				  -	      STA	DUMP
     22  f925					      REPEND
     23  f925
     24  f925				   .CYCLES    SET	.CYCLES % 3
     25  f925
     26  f925				  -	      REPEAT	.CYCLES / 2
     27  f925				  -	      NOP
     28  f925					      REPEND
     29  f925
     30  f925				   .CYCLES    SET	.CYCLES % 2
     31  f925
     32  f925				  -	      IF	.CYCLES
     33  f925				  -	      ERR
     34  f925					      ENDIF
     35  f925
     55  f925		       85 0f		      STA	PF2
     56  f927		       85 0d		      STA	PF0
     57  f929
     58  f929		       85 02		      STA	WSYNC	; Draw the shadow
     59  f92b		       a5 b2		      LDA	shadowColour
     60  f92d		       85 08		      STA	COLUPF
     61  f92f		       a5 91		      LDA	shadow2aa
     62  f931		       05 9b		      ORA	shadow1a
     63  f933		       85 0e		      STA	PF1
     64  f935		       a5 92		      LDA	shadow2ba
     65  f937		       05 9c		      ORA	shadow1b
     66  f939		       85 0f		      STA	PF2
     67  f93b		       a5 93		      LDA	shadow2ca
     68  f93d		       85 0d		      STA	PF0
     69  f93f		       a5 94		      LDA	shadow2da
     70  f941		       05 9e		      ORA	shadow1d
     71  f943		       85 0e		      STA	PF1
     72  f945		       a5 95		      LDA	shadow2ea
     73  f947		       05 9f		      ORA	shadow1e
     74  f949		       85 0f		      STA	PF2
     75  f94b		       a9 00		      LDA	#NULL
     76  f94d		       85 0d		      STA	PF0
     77  f94f
     78  f94f		       ca		      DEX
     79  f950		       d0 a7		      BNE	.loop
     80  f952
     81  f952		       50 03		      BVC	dc_w2s2_delayed
     82  f954		       4c 1d fb 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  f957					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  f957							; The second wall and it's second shadow
      2  f957
      3  f957				   dc_w2s2_delayed
      0  f957					      DELAY	2
      1  f957				   .CYCLES    SET	2
      2  f957
      3  f957				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f957				  -	      NOP
      5  f957				  -.CYCLES    SET	.CYCLES - 2
      6  f957					      ENDIF
      7  f957
      8  f957				  -	      IF	[.CYCLES - 2] / 5
      9  f957				  -	      REPEAT	.CYCLES / 5
     10  f957				  -	      INC	DUMP
     11  f957				  -	      REPEND
     12  f957				  -.CYCLES    SET	.CYCLES % 5
     13  f957					      ENDIF
     14  f957
     15  f957				  -	      IF	.CYCLES % 3 == 1
     16  f957				  -	      NOP
     17  f957				  -.CYCLES    SET	.CYCLES - 2
     18  f957					      ENDIF
     19  f957
     20  f957				  -	      REPEAT	.CYCLES / 3
     21  f957				  -	      STA	DUMP
     22  f957					      REPEND
     23  f957
     24  f957				   .CYCLES    SET	.CYCLES % 3
     25  f957
     26  f957					      REPEAT	.CYCLES / 2
     27  f957		       ea		      NOP
     28  f958					      REPEND
     29  f958
     30  f958				   .CYCLES    SET	.CYCLES % 2
     31  f958
     32  f958				  -	      IF	.CYCLES
     33  f958				  -	      ERR
     34  f958					      ENDIF
     35  f958
      5  f958				   dc_w2s2    SUBROUTINE
      6  f958
      7  f958		       a2 03		      LDX	#PIXH
      8  f95a
      9  f95a				   .loop
     10  f95a		       a5 b1		      LDA	wallColour
     11  f95c		       85 02		      STA	WSYNC
     12  f95e		       85 08		      STA	COLUPF
     13  f960		       a5 85		      LDA	wall2a
     14  f962		       85 0e		      STA	PF1
     15  f964		       98		      TYA
     16  f965
     17  f965		       f0 51		      BEQ	.noSprite_1
     18  f967				   .branchPoint_1
     19  f967		       88		      DEY
     20  f968		       c4 ba		      CPY	spriteHeight
     21  f96a
     22  f96a		       b0 54		      BCS	.noSprite_2
     23  f96c				   .branchPoint_2
     24  f96c		       b1 b8		      LDA	(sprite),Y
     25  f96e		       85 1b		      STA	GRP0
     26  f970
     27  f970				   .noSprite_ret
     28  f970		       a5 86		      LDA	wall2b
     29  f972		       85 0f		      STA	PF2
     30  f974
     31  f974		       a5 87		      LDA	wall2c
     32  f976		       85 0d		      STA	PF0
     33  f978		       a5 88		      LDA	wall2d
     34  f97a		       85 0e		      STA	PF1
     35  f97c		       a5 89		      LDA	wall2e
     36  f97e		       85 0f		      STA	PF2
     37  f980		       a9 00		      LDA	#NULL
      0  f982					      DELAY	10
      1  f982				   .CYCLES    SET	10
      2  f982
      3  f982				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f982				  -	      NOP
      5  f982				  -.CYCLES    SET	.CYCLES - 2
      6  f982					      ENDIF
      7  f982
      8  f982					      IF	[.CYCLES - 2] / 5
      9  f982					      REPEAT	.CYCLES / 5
     10  f982		       e6 30		      INC	DUMP
      9  f982					      REPEND
     10  f984		       e6 30		      INC	DUMP
     11  f986					      REPEND
     12  f986				   .CYCLES    SET	.CYCLES % 5
     13  f986					      ENDIF
     14  f986
     15  f986				  -	      IF	.CYCLES % 3 == 1
     16  f986				  -	      NOP
     17  f986				  -.CYCLES    SET	.CYCLES - 2
     18  f986					      ENDIF
     19  f986
     20  f986				  -	      REPEAT	.CYCLES / 3
     21  f986				  -	      STA	DUMP
     22  f986					      REPEND
     23  f986
     24  f986				   .CYCLES    SET	.CYCLES % 3
     25  f986
     26  f986				  -	      REPEAT	.CYCLES / 2
     27  f986				  -	      NOP
     28  f986					      REPEND
     29  f986
     30  f986				   .CYCLES    SET	.CYCLES % 2
     31  f986
     32  f986				  -	      IF	.CYCLES
     33  f986				  -	      ERR
     34  f986					      ENDIF
     35  f986
     39  f986		       85 0f		      STA	PF2
     40  f988		       85 0d		      STA	PF0
     41  f98a
     42  f98a		       85 02		      STA	WSYNC	; Draw the shadow
     43  f98c		       a5 b2		      LDA	shadowColour
     44  f98e		       85 08		      STA	COLUPF
     45  f990		       a5 a0		      LDA	shadow2ab
     46  f992		       05 9b		      ORA	shadow1a
     47  f994		       85 0e		      STA	PF1
     48  f996		       a5 a1		      LDA	shadow2bb
     49  f998		       05 9c		      ORA	shadow1b
     50  f99a		       85 0f		      STA	PF2
     51  f99c		       a5 a2		      LDA	shadow2cb
     52  f99e		       85 0d		      STA	PF0
     53  f9a0		       a5 a3		      LDA	shadow2db
     54  f9a2		       05 9e		      ORA	shadow1d
     55  f9a4		       85 0e		      STA	PF1
     56  f9a6		       a5 a4		      LDA	shadow2eb
     57  f9a8		       05 9f		      ORA	shadow1e
     58  f9aa		       85 0f		      STA	PF2
     59  f9ac		       a9 00		      LDA	#NULL
     60  f9ae		       85 0d		      STA	PF0
     61  f9b0
     62  f9b0		       ca		      DEX
     63  f9b1		       d0 a7		      BNE	.loop
     64  f9b3
     65  f9b3		       50 10		      BVC	dc_w3s1_delayed
     66  f9b5		       4c e8 f8 	      JMP	dc_w2s1
     67  f9b8
     68  f9b8				   .noSprite_1
     69  f9b8					      IF	>.branchPoint_1 == >.noSprite_1
      0  f9b8					      DELAY	11
      1  f9b8				   .CYCLES    SET	11
      2  f9b8
      3  f9b8					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9b8		       ea		      NOP
      5  f9b8				   .CYCLES    SET	.CYCLES - 2
      6  f9b9					      ENDIF
      7  f9b9
      8  f9b9					      IF	[.CYCLES - 2] / 5
      9  f9b9					      REPEAT	.CYCLES / 5
     10  f9b9		       e6 30		      INC	DUMP
     11  f9bb					      REPEND
     12  f9bb				   .CYCLES    SET	.CYCLES % 5
     13  f9bb					      ENDIF
     14  f9bb
     15  f9bb					      IF	.CYCLES % 3 == 1
     16  f9bb		       ea		      NOP
     17  f9bb				   .CYCLES    SET	.CYCLES - 2
     18  f9bc					      ENDIF
     19  f9bc
     20  f9bc				  -	      REPEAT	.CYCLES / 3
     21  f9bc				  -	      STA	DUMP
     22  f9bc					      REPEND
     23  f9bc
     24  f9bc				   .CYCLES    SET	.CYCLES % 3
     25  f9bc
     26  f9bc					      REPEAT	.CYCLES / 2
     27  f9bc		       ea		      NOP
     28  f9bd					      REPEND
     29  f9bd
     30  f9bd				   .CYCLES    SET	.CYCLES % 2
     31  f9bd
     32  f9bd				  -	      IF	.CYCLES
     33  f9bd				  -	      ERR
     34  f9bd					      ENDIF
     35  f9bd
     71  f9bd				  -	      ELSE
     72  f9bd				  -	      DELAY	10
     73  f9bd					      ENDIF
     74  f9bd		       4c 70 f9 	      JMP	.noSprite_ret
     75  f9c0
     76  f9c0				   .noSprite_2
     77  f9c0					      IF	>.branchPoint_2 == >.noSprite_2
      0  f9c0					      DELAY	4
      1  f9c0				   .CYCLES    SET	4
      2  f9c0
      3  f9c0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9c0				  -	      NOP
      5  f9c0				  -.CYCLES    SET	.CYCLES - 2
      6  f9c0					      ENDIF
      7  f9c0
      8  f9c0				  -	      IF	[.CYCLES - 2] / 5
      9  f9c0				  -	      REPEAT	.CYCLES / 5
     10  f9c0				  -	      INC	DUMP
     11  f9c0				  -	      REPEND
     12  f9c0				  -.CYCLES    SET	.CYCLES % 5
     13  f9c0					      ENDIF
     14  f9c0
     15  f9c0					      IF	.CYCLES % 3 == 1
     16  f9c0		       ea		      NOP
     17  f9c0				   .CYCLES    SET	.CYCLES - 2
     18  f9c1					      ENDIF
     19  f9c1
     20  f9c1				  -	      REPEAT	.CYCLES / 3
     21  f9c1				  -	      STA	DUMP
     22  f9c1					      REPEND
     23  f9c1
     24  f9c1				   .CYCLES    SET	.CYCLES % 3
     25  f9c1
     26  f9c1					      REPEAT	.CYCLES / 2
     27  f9c1		       ea		      NOP
     28  f9c2					      REPEND
     29  f9c2
     30  f9c2				   .CYCLES    SET	.CYCLES % 2
     31  f9c2
     32  f9c2				  -	      IF	.CYCLES
     33  f9c2				  -	      ERR
     34  f9c2					      ENDIF
     35  f9c2
     79  f9c2				  -	      ELSE
     80  f9c2				  -	      DELAY	3
     81  f9c2					      ENDIF
     82  f9c2		       4c 70 f9 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  f9c5					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  f9c5							; The third wall and it's first shadow
      2  f9c5							; See GLOSSARY.TXT for definitions of vague words
      3  f9c5
      4  f9c5				   dc_w3s1_delayed
      0  f9c5					      DELAY	2
      1  f9c5				   .CYCLES    SET	2
      2  f9c5
      3  f9c5				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9c5				  -	      NOP
      5  f9c5				  -.CYCLES    SET	.CYCLES - 2
      6  f9c5					      ENDIF
      7  f9c5
      8  f9c5				  -	      IF	[.CYCLES - 2] / 5
      9  f9c5				  -	      REPEAT	.CYCLES / 5
     10  f9c5				  -	      INC	DUMP
     11  f9c5				  -	      REPEND
     12  f9c5				  -.CYCLES    SET	.CYCLES % 5
     13  f9c5					      ENDIF
     14  f9c5
     15  f9c5				  -	      IF	.CYCLES % 3 == 1
     16  f9c5				  -	      NOP
     17  f9c5				  -.CYCLES    SET	.CYCLES - 2
     18  f9c5					      ENDIF
     19  f9c5
     20  f9c5				  -	      REPEAT	.CYCLES / 3
     21  f9c5				  -	      STA	DUMP
     22  f9c5					      REPEND
     23  f9c5
     24  f9c5				   .CYCLES    SET	.CYCLES % 3
     25  f9c5
     26  f9c5					      REPEAT	.CYCLES / 2
     27  f9c5		       ea		      NOP
     28  f9c6					      REPEND
     29  f9c6
     30  f9c6				   .CYCLES    SET	.CYCLES % 2
     31  f9c6
     32  f9c6				  -	      IF	.CYCLES
     33  f9c6				  -	      ERR
     34  f9c6					      ENDIF
     35  f9c6
      6  f9c6				   dc_w3s1    SUBROUTINE
      7  f9c6
      8  f9c6		       a2 03		      LDX	#PIXH
      9  f9c8
     10  f9c8				   .loop
     11  f9c8		       a5 b1		      LDA	wallColour
     12  f9ca		       85 02		      STA	WSYNC
     13  f9cc		       85 08		      STA	COLUPF
     14  f9ce		       a5 8a		      LDA	wall3a
     15  f9d0		       85 0e		      STA	PF1
     16  f9d2		       98		      TYA
     17  f9d3
     18  f9d3		       f0 53		      BEQ	.noSprite_1
     19  f9d5				   .branchPoint_1
     20  f9d5		       88		      DEY
     21  f9d6		       c4 ba		      CPY	spriteHeight
     22  f9d8
     23  f9d8		       b0 55		      BCS	.noSprite_2
     24  f9da				   .branchPoint_2
     25  f9da		       b1 b8		      LDA	(sprite),Y
     26  f9dc		       85 1b		      STA	GRP0
     27  f9de
     28  f9de				   .noSprite_ret
     29  f9de		       a5 8b		      LDA	wall3b
     30  f9e0		       85 0f		      STA	PF2
     31  f9e2
     32  f9e2		       a5 8c		      LDA	wall3c
     33  f9e4		       85 0d		      STA	PF0
     34  f9e6		       a5 8d		      LDA	wall3d
     35  f9e8		       85 0e		      STA	PF1
     36  f9ea		       a5 8e		      LDA	wall3e
     37  f9ec		       85 0f		      STA	PF2
     38  f9ee		       a9 00		      LDA	#NULL
      0  f9f0					      DELAY	10
      1  f9f0				   .CYCLES    SET	10
      2  f9f0
      3  f9f0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9f0				  -	      NOP
      5  f9f0				  -.CYCLES    SET	.CYCLES - 2
      6  f9f0					      ENDIF
      7  f9f0
      8  f9f0					      IF	[.CYCLES - 2] / 5
      9  f9f0					      REPEAT	.CYCLES / 5
     10  f9f0		       e6 30		      INC	DUMP
      9  f9f0					      REPEND
     10  f9f2		       e6 30		      INC	DUMP
     11  f9f4					      REPEND
     12  f9f4				   .CYCLES    SET	.CYCLES % 5
     13  f9f4					      ENDIF
     14  f9f4
     15  f9f4				  -	      IF	.CYCLES % 3 == 1
     16  f9f4				  -	      NOP
     17  f9f4				  -.CYCLES    SET	.CYCLES - 2
     18  f9f4					      ENDIF
     19  f9f4
     20  f9f4				  -	      REPEAT	.CYCLES / 3
     21  f9f4				  -	      STA	DUMP
     22  f9f4					      REPEND
     23  f9f4
     24  f9f4				   .CYCLES    SET	.CYCLES % 3
     25  f9f4
     26  f9f4				  -	      REPEAT	.CYCLES / 2
     27  f9f4				  -	      NOP
     28  f9f4					      REPEND
     29  f9f4
     30  f9f4				   .CYCLES    SET	.CYCLES % 2
     31  f9f4
     32  f9f4				  -	      IF	.CYCLES
     33  f9f4				  -	      ERR
     34  f9f4					      ENDIF
     35  f9f4
     40  f9f4		       85 0f		      STA	PF2
     41  f9f6		       85 0d		      STA	PF0
     42  f9f8
     43  f9f8		       85 02		      STA	WSYNC	; Draw the shadow
     44  f9fa		       a5 b2		      LDA	shadowColour
     45  f9fc		       85 08		      STA	COLUPF
     46  f9fe		       a5 96		      LDA	shadow3aa
     47  fa00		       05 a0		      ORA	shadow2ab
     48  fa02		       85 0e		      STA	PF1
     49  fa04		       a5 97		      LDA	shadow3ba
     50  fa06		       05 a1		      ORA	shadow2bb
     51  fa08		       85 0f		      STA	PF2
     52  fa0a		       a5 98		      LDA	shadow3ca
     53  fa0c		       05 a2		      ORA	shadow2cb
     54  fa0e		       85 0d		      STA	PF0
     55  fa10		       a5 99		      LDA	shadow3da
     56  fa12		       05 a3		      ORA	shadow2db
     57  fa14		       85 0e		      STA	PF1
     58  fa16		       a5 9a		      LDA	shadow3ea
     59  fa18		       05 a4		      ORA	shadow2eb
     60  fa1a		       85 0f		      STA	PF2
     61  fa1c		       a9 00		      LDA	#NULL
     62  fa1e		       85 0d		      STA	PF0
     63  fa20
     64  fa20		       ca		      DEX
     65  fa21		       d0 a5		      BNE	.loop
     66  fa23
     67  fa23		       50 0f		      BVC	dc_w3s2_delayed
     68  fa25		       4c 58 f9 	      JMP	dc_w2s2
     69  fa28
     70  fa28				   .noSprite_1
     71  fa28				  -	      IF	>.branchPoint_1 == >.noSprite_1
     72  fa28				  -	      DELAY	11
     73  fa28					      ELSE
      0  fa28					      DELAY	10
      1  fa28				   .CYCLES    SET	10
      2  fa28
      3  fa28				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa28				  -	      NOP
      5  fa28				  -.CYCLES    SET	.CYCLES - 2
      6  fa28					      ENDIF
      7  fa28
      8  fa28					      IF	[.CYCLES - 2] / 5
      9  fa28					      REPEAT	.CYCLES / 5
     10  fa28		       e6 30		      INC	DUMP
      9  fa28					      REPEND
     10  fa2a		       e6 30		      INC	DUMP
     11  fa2c					      REPEND
     12  fa2c				   .CYCLES    SET	.CYCLES % 5
     13  fa2c					      ENDIF
     14  fa2c
     15  fa2c				  -	      IF	.CYCLES % 3 == 1
     16  fa2c				  -	      NOP
     17  fa2c				  -.CYCLES    SET	.CYCLES - 2
     18  fa2c					      ENDIF
     19  fa2c
     20  fa2c				  -	      REPEAT	.CYCLES / 3
     21  fa2c				  -	      STA	DUMP
     22  fa2c					      REPEND
     23  fa2c
     24  fa2c				   .CYCLES    SET	.CYCLES % 3
     25  fa2c
     26  fa2c				  -	      REPEAT	.CYCLES / 2
     27  fa2c				  -	      NOP
     28  fa2c					      REPEND
     29  fa2c
     30  fa2c				   .CYCLES    SET	.CYCLES % 2
     31  fa2c
     32  fa2c				  -	      IF	.CYCLES
     33  fa2c				  -	      ERR
     34  fa2c					      ENDIF
     35  fa2c
     75  fa2c					      ENDIF
     76  fa2c		       4c de f9 	      JMP	.noSprite_ret
     77  fa2f
     78  fa2f				   .noSprite_2
     79  fa2f				  -	      IF	>.branchPoint_2 == >.noSprite_2
     80  fa2f				  -	      DELAY	4
     81  fa2f					      ELSE
      0  fa2f					      DELAY	3
      1  fa2f				   .CYCLES    SET	3
      2  fa2f
      3  fa2f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa2f				  -	      NOP
      5  fa2f				  -.CYCLES    SET	.CYCLES - 2
      6  fa2f					      ENDIF
      7  fa2f
      8  fa2f				  -	      IF	[.CYCLES - 2] / 5
      9  fa2f				  -	      REPEAT	.CYCLES / 5
     10  fa2f				  -	      INC	DUMP
     11  fa2f				  -	      REPEND
     12  fa2f				  -.CYCLES    SET	.CYCLES % 5
     13  fa2f					      ENDIF
     14  fa2f
     15  fa2f				  -	      IF	.CYCLES % 3 == 1
     16  fa2f				  -	      NOP
     17  fa2f				  -.CYCLES    SET	.CYCLES - 2
     18  fa2f					      ENDIF
     19  fa2f
     20  fa2f					      REPEAT	.CYCLES / 3
     21  fa2f		       85 30		      STA	DUMP
     22  fa31					      REPEND
     23  fa31
     24  fa31				   .CYCLES    SET	.CYCLES % 3
     25  fa31
     26  fa31				  -	      REPEAT	.CYCLES / 2
     27  fa31				  -	      NOP
     28  fa31					      REPEND
     29  fa31
     30  fa31				   .CYCLES    SET	.CYCLES % 2
     31  fa31
     32  fa31				  -	      IF	.CYCLES
     33  fa31				  -	      ERR
     34  fa31					      ENDIF
     35  fa31
     83  fa31					      ENDIF
     84  fa31		       4c de f9 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fa34					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fa34							; The third wall and it's second shadow
      2  fa34							; See GLOSSARY.TXT for definitions of vague words
      3  fa34
      4  fa34				   dc_w3s2_delayed
      0  fa34					      DELAY	2
      1  fa34				   .CYCLES    SET	2
      2  fa34
      3  fa34				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa34				  -	      NOP
      5  fa34				  -.CYCLES    SET	.CYCLES - 2
      6  fa34					      ENDIF
      7  fa34
      8  fa34				  -	      IF	[.CYCLES - 2] / 5
      9  fa34				  -	      REPEAT	.CYCLES / 5
     10  fa34				  -	      INC	DUMP
     11  fa34				  -	      REPEND
     12  fa34				  -.CYCLES    SET	.CYCLES % 5
     13  fa34					      ENDIF
     14  fa34
     15  fa34				  -	      IF	.CYCLES % 3 == 1
     16  fa34				  -	      NOP
     17  fa34				  -.CYCLES    SET	.CYCLES - 2
     18  fa34					      ENDIF
     19  fa34
     20  fa34				  -	      REPEAT	.CYCLES / 3
     21  fa34				  -	      STA	DUMP
     22  fa34					      REPEND
     23  fa34
     24  fa34				   .CYCLES    SET	.CYCLES % 3
     25  fa34
     26  fa34					      REPEAT	.CYCLES / 2
     27  fa34		       ea		      NOP
     28  fa35					      REPEND
     29  fa35
     30  fa35				   .CYCLES    SET	.CYCLES % 2
     31  fa35
     32  fa35				  -	      IF	.CYCLES
     33  fa35				  -	      ERR
     34  fa35					      ENDIF
     35  fa35
      6  fa35				   dc_w3s2    SUBROUTINE
      7  fa35
      8  fa35		       a2 03		      LDX	#PIXH
      9  fa37
     10  fa37				   .loop
     11  fa37		       a5 b1		      LDA	wallColour
     12  fa39		       85 02		      STA	WSYNC
     13  fa3b				   .joinIn
     14  fa3b		       85 08		      STA	COLUPF
     15  fa3d		       a5 8a		      LDA	wall3a
     16  fa3f		       85 0e		      STA	PF1
     17  fa41		       98		      TYA
     18  fa42
     19  fa42		       f0 53		      BEQ	.noSprite_1
     20  fa44				   .branchPoint_1
     21  fa44		       88		      DEY
     22  fa45		       c4 ba		      CPY	spriteHeight
     23  fa47
     24  fa47		       b0 56		      BCS	.noSprite_2
     25  fa49				   .branchPoint_2
     26  fa49		       b1 b8		      LDA	(sprite),Y
     27  fa4b		       85 1b		      STA	GRP0
     28  fa4d
     29  fa4d				   .noSprite_ret
     30  fa4d		       a5 8b		      LDA	wall3b
     31  fa4f		       85 0f		      STA	PF2
     32  fa51
     33  fa51		       a5 8c		      LDA	wall3c
     34  fa53		       85 0d		      STA	PF0
     35  fa55		       a5 8d		      LDA	wall3d
     36  fa57		       85 0e		      STA	PF1
     37  fa59		       a5 8e		      LDA	wall3e
     38  fa5b		       85 0f		      STA	PF2
     39  fa5d		       a9 00		      LDA	#NULL
      0  fa5f					      DELAY	10
      1  fa5f				   .CYCLES    SET	10
      2  fa5f
      3  fa5f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa5f				  -	      NOP
      5  fa5f				  -.CYCLES    SET	.CYCLES - 2
      6  fa5f					      ENDIF
      7  fa5f
      8  fa5f					      IF	[.CYCLES - 2] / 5
      9  fa5f					      REPEAT	.CYCLES / 5
     10  fa5f		       e6 30		      INC	DUMP
      9  fa5f					      REPEND
     10  fa61		       e6 30		      INC	DUMP
     11  fa63					      REPEND
     12  fa63				   .CYCLES    SET	.CYCLES % 5
     13  fa63					      ENDIF
     14  fa63
     15  fa63				  -	      IF	.CYCLES % 3 == 1
     16  fa63				  -	      NOP
     17  fa63				  -.CYCLES    SET	.CYCLES - 2
     18  fa63					      ENDIF
     19  fa63
     20  fa63				  -	      REPEAT	.CYCLES / 3
     21  fa63				  -	      STA	DUMP
     22  fa63					      REPEND
     23  fa63
     24  fa63				   .CYCLES    SET	.CYCLES % 3
     25  fa63
     26  fa63				  -	      REPEAT	.CYCLES / 2
     27  fa63				  -	      NOP
     28  fa63					      REPEND
     29  fa63
     30  fa63				   .CYCLES    SET	.CYCLES % 2
     31  fa63
     32  fa63				  -	      IF	.CYCLES
     33  fa63				  -	      ERR
     34  fa63					      ENDIF
     35  fa63
     41  fa63		       85 0f		      STA	PF2
     42  fa65		       85 0d		      STA	PF0
     43  fa67
     44  fa67		       85 02		      STA	WSYNC	; Draw the shadow
     45  fa69		       a5 b2		      LDA	shadowColour
     46  fa6b		       85 08		      STA	COLUPF
     47  fa6d		       a5 a5		      LDA	shadow3ab
     48  fa6f		       05 a0		      ORA	shadow2ab
     49  fa71		       85 0e		      STA	PF1
     50  fa73		       a5 a6		      LDA	shadow3bb
     51  fa75		       05 a1		      ORA	shadow2bb
     52  fa77		       85 0f		      STA	PF2
     53  fa79		       a5 a7		      LDA	shadow3cb
     54  fa7b		       05 a2		      ORA	shadow2cb
     55  fa7d		       85 0d		      STA	PF0
     56  fa7f		       a5 a8		      LDA	shadow3db
     57  fa81		       05 a3		      ORA	shadow2db
     58  fa83		       85 0e		      STA	PF1
     59  fa85		       a5 a9		      LDA	shadow3eb
     60  fa87		       05 a4		      ORA	shadow2eb
     61  fa89		       85 0f		      STA	PF2
     62  fa8b		       a9 00		      LDA	#NULL
     63  fa8d		       85 0d		      STA	PF0
     64  fa8f
     65  fa8f		       ca		      DEX
     66  fa90		       d0 a5		      BNE	.loop
     67  fa92
     68  fa92		       50 10		      BVC	dc_w4s0_delayed
     69  fa94		       4c c6 f9 	      JMP	dc_w3s1
     70  fa97
     71  fa97				   .noSprite_1
     72  fa97					      IF	>.branchPoint_1 == >.noSprite_1
      0  fa97					      DELAY	11
      1  fa97				   .CYCLES    SET	11
      2  fa97
      3  fa97					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa97		       ea		      NOP
      5  fa97				   .CYCLES    SET	.CYCLES - 2
      6  fa98					      ENDIF
      7  fa98
      8  fa98					      IF	[.CYCLES - 2] / 5
      9  fa98					      REPEAT	.CYCLES / 5
     10  fa98		       e6 30		      INC	DUMP
     11  fa9a					      REPEND
     12  fa9a				   .CYCLES    SET	.CYCLES % 5
     13  fa9a					      ENDIF
     14  fa9a
     15  fa9a					      IF	.CYCLES % 3 == 1
     16  fa9a		       ea		      NOP
     17  fa9a				   .CYCLES    SET	.CYCLES - 2
     18  fa9b					      ENDIF
     19  fa9b
     20  fa9b				  -	      REPEAT	.CYCLES / 3
     21  fa9b				  -	      STA	DUMP
     22  fa9b					      REPEND
     23  fa9b
     24  fa9b				   .CYCLES    SET	.CYCLES % 3
     25  fa9b
     26  fa9b					      REPEAT	.CYCLES / 2
     27  fa9b		       ea		      NOP
     28  fa9c					      REPEND
     29  fa9c
     30  fa9c				   .CYCLES    SET	.CYCLES % 2
     31  fa9c
     32  fa9c				  -	      IF	.CYCLES
     33  fa9c				  -	      ERR
     34  fa9c					      ENDIF
     35  fa9c
     74  fa9c				  -	      ELSE
     75  fa9c				  -	      DELAY	10
     76  fa9c					      ENDIF
     77  fa9c		       4c 4d fa 	      JMP	.noSprite_ret
     78  fa9f
     79  fa9f				   .noSprite_2
     80  fa9f
     81  fa9f					      IF	>.branchPoint_2 == >.noSprite_2
      0  fa9f					      DELAY	4
      1  fa9f				   .CYCLES    SET	4
      2  fa9f
      3  fa9f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa9f				  -	      NOP
      5  fa9f				  -.CYCLES    SET	.CYCLES - 2
      6  fa9f					      ENDIF
      7  fa9f
      8  fa9f				  -	      IF	[.CYCLES - 2] / 5
      9  fa9f				  -	      REPEAT	.CYCLES / 5
     10  fa9f				  -	      INC	DUMP
     11  fa9f				  -	      REPEND
     12  fa9f				  -.CYCLES    SET	.CYCLES % 5
     13  fa9f					      ENDIF
     14  fa9f
     15  fa9f					      IF	.CYCLES % 3 == 1
     16  fa9f		       ea		      NOP
     17  fa9f				   .CYCLES    SET	.CYCLES - 2
     18  faa0					      ENDIF
     19  faa0
     20  faa0				  -	      REPEAT	.CYCLES / 3
     21  faa0				  -	      STA	DUMP
     22  faa0					      REPEND
     23  faa0
     24  faa0				   .CYCLES    SET	.CYCLES % 3
     25  faa0
     26  faa0					      REPEAT	.CYCLES / 2
     27  faa0		       ea		      NOP
     28  faa1					      REPEND
     29  faa1
     30  faa1				   .CYCLES    SET	.CYCLES % 2
     31  faa1
     32  faa1				  -	      IF	.CYCLES
     33  faa1				  -	      ERR
     34  faa1					      ENDIF
     35  faa1
     83  faa1				  -	      ELSE
     84  faa1				  -	      DELAY	3
     85  faa1					      ENDIF
     86  faa1		       4c 4d fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  faa4					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  faa4							; The fourth wall
      2  faa4
      3  faa4				   dc_w4s0_delayed
      4  faa4		       4c ab fa 	      JMP	dc_w4s0
      5  faa7
      6  faa7				   dc_w4s0_switch
      7  faa7		       a9 7f		      LDA	#$7F
      8  faa9		       69 01		      ADC	#$01
      9  faab
     10  faab				   dc_w4s0    SUBROUTINE
     11  faab
     12  faab		       a2 03		      LDX	#PIXH
     13  faad
     14  faad				   .loop
     15  faad		       a5 b1		      LDA	wallColour
     16  faaf		       85 02		      STA	WSYNC
     17  fab1				   .joinIn
     18  fab1		       85 08		      STA	COLUPF
     19  fab3		       a5 8f		      LDA	wall4a
     20  fab5		       85 0e		      STA	PF1
     21  fab7		       98		      TYA
     22  fab8
     23  fab8		       f0 57		      BEQ	.noSprite_1
     24  faba				   .branchPoint_1
     25  faba		       88		      DEY
     26  fabb		       c4 ba		      CPY	spriteHeight
     27  fabd
     28  fabd		       b0 59		      BCS	.noSprite_2
     29  fabf				   .branchPoint_2
     30  fabf		       b1 b8		      LDA	(sprite),Y
     31  fac1		       85 1b		      STA	GRP0
     32  fac3
     33  fac3				   .noSprite_ret
     34  fac3		       a5 90		      LDA	wall4b
     35  fac5		       85 0f		      STA	PF2
     36  fac7
     37  fac7		       a9 ff		      LDA	#FULLWALL
     38  fac9		       45 a7		      EOR	shadow3cb
     39  facb		       85 0d		      STA	PF0
     40  facd		       a9 ff		      LDA	#FULLWALL
     41  facf		       45 a8		      EOR	shadow3db
     42  fad1		       85 0e		      STA	PF1
     43  fad3		       a9 ff		      LDA	#FULLWALL
     44  fad5		       45 a9		      EOR	shadow3eb
     45  fad7		       85 0f		      STA	PF2
     46  fad9		       a9 00		      LDA	#NULL
      0  fadb					      DELAY	4
      1  fadb				   .CYCLES    SET	4
      2  fadb
      3  fadb				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fadb				  -	      NOP
      5  fadb				  -.CYCLES    SET	.CYCLES - 2
      6  fadb					      ENDIF
      7  fadb
      8  fadb				  -	      IF	[.CYCLES - 2] / 5
      9  fadb				  -	      REPEAT	.CYCLES / 5
     10  fadb				  -	      INC	DUMP
     11  fadb				  -	      REPEND
     12  fadb				  -.CYCLES    SET	.CYCLES % 5
     13  fadb					      ENDIF
     14  fadb
     15  fadb					      IF	.CYCLES % 3 == 1
     16  fadb		       ea		      NOP
     17  fadb				   .CYCLES    SET	.CYCLES - 2
     18  fadc					      ENDIF
     19  fadc
     20  fadc				  -	      REPEAT	.CYCLES / 3
     21  fadc				  -	      STA	DUMP
     22  fadc					      REPEND
     23  fadc
     24  fadc				   .CYCLES    SET	.CYCLES % 3
     25  fadc
     26  fadc					      REPEAT	.CYCLES / 2
     27  fadc		       ea		      NOP
     28  fadd					      REPEND
     29  fadd
     30  fadd				   .CYCLES    SET	.CYCLES % 2
     31  fadd
     32  fadd				  -	      IF	.CYCLES
     33  fadd				  -	      ERR
     34  fadd					      ENDIF
     35  fadd
     48  fadd		       85 0f		      STA	PF2
     49  fadf		       85 0d		      STA	PF0
     50  fae1
     51  fae1		       85 02		      STA	WSYNC	; Draw the shadow
     52  fae3		       a5 b2		      LDA	shadowColour
     53  fae5		       85 08		      STA	COLUPF
     54  fae7		       a5 a5		      LDA	shadow3ab
     55  fae9		       05 a0		      ORA	shadow2ab
     56  faeb		       85 0e		      STA	PF1
     57  faed		       a5 a6		      LDA	shadow3bb
     58  faef		       05 a1		      ORA	shadow2bb
     59  faf1		       85 0f		      STA	PF2
     60  faf3		       a5 a7		      LDA	shadow3cb
     61  faf5		       05 a2		      ORA	shadow2cb
     62  faf7		       85 0d		      STA	PF0
     63  faf9		       a5 a8		      LDA	shadow3db
     64  fafb		       05 a3		      ORA	shadow2db
     65  fafd		       85 0e		      STA	PF1
     66  faff		       a5 a9		      LDA	shadow3eb
     67  fb01		       05 a4		      ORA	shadow2eb
     68  fb03		       85 0f		      STA	PF2
     69  fb05		       a9 00		      LDA	#NULL
     70  fb07		       85 0d		      STA	PF0
     71  fb09
     72  fb09		       ca		      DEX
     73  fb0a		       d0 a1		      BNE	.loop
     74  fb0c
     75  fb0c		       50 99		      BVC	dc_w4s0_switch
     76  fb0e		       4c 35 fa 	      JMP	dc_w3s2
     77  fb11
     78  fb11				   .noSprite_1
     79  fb11				  -	      IF	>.branchPoint_1 == >.noSprite_1
     80  fb11				  -	      DELAY	11
     81  fb11					      ELSE
      0  fb11					      DELAY	10
      1  fb11				   .CYCLES    SET	10
      2  fb11
      3  fb11				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb11				  -	      NOP
      5  fb11				  -.CYCLES    SET	.CYCLES - 2
      6  fb11					      ENDIF
      7  fb11
      8  fb11					      IF	[.CYCLES - 2] / 5
      9  fb11					      REPEAT	.CYCLES / 5
     10  fb11		       e6 30		      INC	DUMP
      9  fb11					      REPEND
     10  fb13		       e6 30		      INC	DUMP
     11  fb15					      REPEND
     12  fb15				   .CYCLES    SET	.CYCLES % 5
     13  fb15					      ENDIF
     14  fb15
     15  fb15				  -	      IF	.CYCLES % 3 == 1
     16  fb15				  -	      NOP
     17  fb15				  -.CYCLES    SET	.CYCLES - 2
     18  fb15					      ENDIF
     19  fb15
     20  fb15				  -	      REPEAT	.CYCLES / 3
     21  fb15				  -	      STA	DUMP
     22  fb15					      REPEND
     23  fb15
     24  fb15				   .CYCLES    SET	.CYCLES % 3
     25  fb15
     26  fb15				  -	      REPEAT	.CYCLES / 2
     27  fb15				  -	      NOP
     28  fb15					      REPEND
     29  fb15
     30  fb15				   .CYCLES    SET	.CYCLES % 2
     31  fb15
     32  fb15				  -	      IF	.CYCLES
     33  fb15				  -	      ERR
     34  fb15					      ENDIF
     35  fb15
     83  fb15					      ENDIF
     84  fb15		       4c c3 fa 	      JMP	.noSprite_ret
     85  fb18
     86  fb18				   .noSprite_2
     87  fb18				  -	      IF	>.branchPoint_2 == >.noSprite_2
     88  fb18				  -	      DELAY	4
     89  fb18					      ELSE
      0  fb18					      DELAY	3
      1  fb18				   .CYCLES    SET	3
      2  fb18
      3  fb18				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb18				  -	      NOP
      5  fb18				  -.CYCLES    SET	.CYCLES - 2
      6  fb18					      ENDIF
      7  fb18
      8  fb18				  -	      IF	[.CYCLES - 2] / 5
      9  fb18				  -	      REPEAT	.CYCLES / 5
     10  fb18				  -	      INC	DUMP
     11  fb18				  -	      REPEND
     12  fb18				  -.CYCLES    SET	.CYCLES % 5
     13  fb18					      ENDIF
     14  fb18
     15  fb18				  -	      IF	.CYCLES % 3 == 1
     16  fb18				  -	      NOP
     17  fb18				  -.CYCLES    SET	.CYCLES - 2
     18  fb18					      ENDIF
     19  fb18
     20  fb18					      REPEAT	.CYCLES / 3
     21  fb18		       85 30		      STA	DUMP
     22  fb1a					      REPEND
     23  fb1a
     24  fb1a				   .CYCLES    SET	.CYCLES % 3
     25  fb1a
     26  fb1a				  -	      REPEAT	.CYCLES / 2
     27  fb1a				  -	      NOP
     28  fb1a					      REPEND
     29  fb1a
     30  fb1a				   .CYCLES    SET	.CYCLES % 2
     31  fb1a
     32  fb1a				  -	      IF	.CYCLES
     33  fb1a				  -	      ERR
     34  fb1a					      ENDIF
     35  fb1a
     91  fb1a					      ENDIF
     92  fb1a		       4c c3 fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     36  fb1d
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fb1d					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fb1d							; The draw code for the 1st wall and  it's second shadow
      2  fb1d
      3  fb1d				   dc_w1s2    SUBROUTINE
      4  fb1d
      5  fb1d		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fb1f
      7  fb1f				   .loop
      8  fb1f		       a5 b1		      LDA	wallColour
      9  fb21		       85 02		      STA	WSYNC
     10  fb23		       85 08		      STA	COLUPF
     11  fb25		       a5 80		      LDA	wall1
     12  fb27		       85 0e		      STA	PF1
     13  fb29		       98		      TYA
     14  fb2a
     15  fb2a		       f0 53		      BEQ	.noSprite_1
     16  fb2c				   .branchPoint_1
     17  fb2c		       88		      DEY
     18  fb2d		       c4 ba		      CPY	spriteHeight
     19  fb2f
     20  fb2f		       b0 56		      BCS	.noSprite_2
     21  fb31				   .branchPoint_2
     22  fb31		       b1 b8		      LDA	(sprite),Y
     23  fb33		       85 1b		      STA	GRP0
     24  fb35
     25  fb35				   .noSprite_ret
     26  fb35		       a5 80		      LDA	wall1
     27  fb37		       85 0f		      STA	PF2
      0  fb39					      DELAY	6
      1  fb39				   .CYCLES    SET	6
      2  fb39
      3  fb39				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb39				  -	      NOP
      5  fb39				  -.CYCLES    SET	.CYCLES - 2
      6  fb39					      ENDIF
      7  fb39
      8  fb39				  -	      IF	[.CYCLES - 2] / 5
      9  fb39				  -	      REPEAT	.CYCLES / 5
     10  fb39				  -	      INC	DUMP
     11  fb39				  -	      REPEND
     12  fb39				  -.CYCLES    SET	.CYCLES % 5
     13  fb39					      ENDIF
     14  fb39
     15  fb39				  -	      IF	.CYCLES % 3 == 1
     16  fb39				  -	      NOP
     17  fb39				  -.CYCLES    SET	.CYCLES - 2
     18  fb39					      ENDIF
     19  fb39
     20  fb39					      REPEAT	.CYCLES / 3
     21  fb39		       85 30		      STA	DUMP
     20  fb39					      REPEND
     21  fb3b		       85 30		      STA	DUMP
     22  fb3d					      REPEND
     23  fb3d
     24  fb3d				   .CYCLES    SET	.CYCLES % 3
     25  fb3d
     26  fb3d				  -	      REPEAT	.CYCLES / 2
     27  fb3d				  -	      NOP
     28  fb3d					      REPEND
     29  fb3d
     30  fb3d				   .CYCLES    SET	.CYCLES % 2
     31  fb3d
     32  fb3d				  -	      IF	.CYCLES
     33  fb3d				  -	      ERR
     34  fb3d					      ENDIF
     35  fb3d
     29  fb3d		       85 0d		      STA	PF0
      0  fb3f					      DELAY	19
      1  fb3f				   .CYCLES    SET	19
      2  fb3f
      3  fb3f				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb3f				  -	      NOP
      5  fb3f				  -.CYCLES    SET	.CYCLES - 2
      6  fb3f					      ENDIF
      7  fb3f
      8  fb3f					      IF	[.CYCLES - 2] / 5
      9  fb3f					      REPEAT	.CYCLES / 5
     10  fb3f		       e6 30		      INC	DUMP
      9  fb3f					      REPEND
     10  fb41		       e6 30		      INC	DUMP
      9  fb41					      REPEND
     10  fb43		       e6 30		      INC	DUMP
     11  fb45					      REPEND
     12  fb45				   .CYCLES    SET	.CYCLES % 5
     13  fb45					      ENDIF
     14  fb45
     15  fb45					      IF	.CYCLES % 3 == 1
     16  fb45		       ea		      NOP
     17  fb45				   .CYCLES    SET	.CYCLES - 2
     18  fb46					      ENDIF
     19  fb46
     20  fb46				  -	      REPEAT	.CYCLES / 3
     21  fb46				  -	      STA	DUMP
     22  fb46					      REPEND
     23  fb46
     24  fb46				   .CYCLES    SET	.CYCLES % 3
     25  fb46
     26  fb46					      REPEAT	.CYCLES / 2
     27  fb46		       ea		      NOP
     28  fb47					      REPEND
     29  fb47
     30  fb47				   .CYCLES    SET	.CYCLES % 2
     31  fb47
     32  fb47				  -	      IF	.CYCLES
     33  fb47				  -	      ERR
     34  fb47					      ENDIF
     35  fb47
     31  fb47		       a9 00		      LDA	#NULL
     32  fb49		       85 0f		      STA	PF2
     33  fb4b		       85 0d		      STA	PF0
     34  fb4d
     35  fb4d		       85 02		      STA	WSYNC
     36  fb4f		       a5 b2		      LDA	shadowColour
     37  fb51		       85 08		      STA	COLUPF
     38  fb53		       a5 9b		      LDA	shadow1a
     39  fb55		       3d 00 f6 	      AND	and_1a,X
     40  fb58		       85 0e		      STA	PF1
     41  fb5a		       a5 9c		      LDA	shadow1b
     42  fb5c		       3d 1e f6 	      AND	and_1b,X
     43  fb5f		       85 0f		      STA	PF2
      0  fb61					      DELAY	9
      1  fb61				   .CYCLES    SET	9
      2  fb61
      3  fb61				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb61				  -	      NOP
      5  fb61				  -.CYCLES    SET	.CYCLES - 2
      6  fb61					      ENDIF
      7  fb61
      8  fb61					      IF	[.CYCLES - 2] / 5
      9  fb61					      REPEAT	.CYCLES / 5
     10  fb61		       e6 30		      INC	DUMP
     11  fb63					      REPEND
     12  fb63				   .CYCLES    SET	.CYCLES % 5
     13  fb63					      ENDIF
     14  fb63
     15  fb63					      IF	.CYCLES % 3 == 1
     16  fb63		       ea		      NOP
     17  fb63				   .CYCLES    SET	.CYCLES - 2
     18  fb64					      ENDIF
     19  fb64
     20  fb64				  -	      REPEAT	.CYCLES / 3
     21  fb64				  -	      STA	DUMP
     22  fb64					      REPEND
     23  fb64
     24  fb64				   .CYCLES    SET	.CYCLES % 3
     25  fb64
     26  fb64					      REPEAT	.CYCLES / 2
     27  fb64		       ea		      NOP
     28  fb65					      REPEND
     29  fb65
     30  fb65				   .CYCLES    SET	.CYCLES % 2
     31  fb65
     32  fb65				  -	      IF	.CYCLES
     33  fb65				  -	      ERR
     34  fb65					      ENDIF
     35  fb65
     45  fb65		       a5 9e		      LDA	shadow1d
     46  fb67		       3d 3c f6 	      AND	and_1c,X
     47  fb6a		       85 0e		      STA	PF1
     48  fb6c		       a5 9f		      LDA	shadow1e
     49  fb6e		       3d 5a f6 	      AND	and_1d,X
     50  fb71		       85 0f		      STA	PF2
     51  fb73
     52  fb73		       a9 00		      LDA	#NULL
     53  fb75		       85 1b		      STA	GRP0
     54  fb77
     55  fb77		       ca		      DEX
     56  fb78		       e0 06		      CPX	#LOWRWALL_S
     57  fb7a		       d0 a3		      BNE	.loop
     58  fb7c
     59  fb7c		       4c 8c fb 	      JMP	dc_wallsEnd
     60  fb7f
     61  fb7f				   .noSprite_1
     62  fb7f					      IF	>.branchPoint_1 == >.noSprite_1
      0  fb7f					      DELAY	11
      1  fb7f				   .CYCLES    SET	11
      2  fb7f
      3  fb7f					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb7f		       ea		      NOP
      5  fb7f				   .CYCLES    SET	.CYCLES - 2
      6  fb80					      ENDIF
      7  fb80
      8  fb80					      IF	[.CYCLES - 2] / 5
      9  fb80					      REPEAT	.CYCLES / 5
     10  fb80		       e6 30		      INC	DUMP
     11  fb82					      REPEND
     12  fb82				   .CYCLES    SET	.CYCLES % 5
     13  fb82					      ENDIF
     14  fb82
     15  fb82					      IF	.CYCLES % 3 == 1
     16  fb82		       ea		      NOP
     17  fb82				   .CYCLES    SET	.CYCLES - 2
     18  fb83					      ENDIF
     19  fb83
     20  fb83				  -	      REPEAT	.CYCLES / 3
     21  fb83				  -	      STA	DUMP
     22  fb83					      REPEND
     23  fb83
     24  fb83				   .CYCLES    SET	.CYCLES % 3
     25  fb83
     26  fb83					      REPEAT	.CYCLES / 2
     27  fb83		       ea		      NOP
     28  fb84					      REPEND
     29  fb84
     30  fb84				   .CYCLES    SET	.CYCLES % 2
     31  fb84
     32  fb84				  -	      IF	.CYCLES
     33  fb84				  -	      ERR
     34  fb84					      ENDIF
     35  fb84
     64  fb84				  -	      ELSE
     65  fb84				  -	      DELAY	10
     66  fb84					      ENDIF
     67  fb84		       4c 35 fb 	      JMP	.noSprite_ret
     68  fb87
     69  fb87				   .noSprite_2
     70  fb87					      IF	>.branchPoint_2 == >.noSprite_2
      0  fb87					      DELAY	4
      1  fb87				   .CYCLES    SET	4
      2  fb87
      3  fb87				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb87				  -	      NOP
      5  fb87				  -.CYCLES    SET	.CYCLES - 2
      6  fb87					      ENDIF
      7  fb87
      8  fb87				  -	      IF	[.CYCLES - 2] / 5
      9  fb87				  -	      REPEAT	.CYCLES / 5
     10  fb87				  -	      INC	DUMP
     11  fb87				  -	      REPEND
     12  fb87				  -.CYCLES    SET	.CYCLES % 5
     13  fb87					      ENDIF
     14  fb87
     15  fb87					      IF	.CYCLES % 3 == 1
     16  fb87		       ea		      NOP
     17  fb87				   .CYCLES    SET	.CYCLES - 2
     18  fb88					      ENDIF
     19  fb88
     20  fb88				  -	      REPEAT	.CYCLES / 3
     21  fb88				  -	      STA	DUMP
     22  fb88					      REPEND
     23  fb88
     24  fb88				   .CYCLES    SET	.CYCLES % 3
     25  fb88
     26  fb88					      REPEAT	.CYCLES / 2
     27  fb88		       ea		      NOP
     28  fb89					      REPEND
     29  fb89
     30  fb89				   .CYCLES    SET	.CYCLES % 2
     31  fb89
     32  fb89				  -	      IF	.CYCLES
     33  fb89				  -	      ERR
     34  fb89					      ENDIF
     35  fb89
     72  fb89				  -	      ELSE
     73  fb89				  -	      DELAY	3
     74  fb89					      ENDIF
     75  fb89		       4c 35 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     38  fb8c
     39  fb8c				   dc_wallsEnd		; once we've finished drawing the walls we draw the minimap ( or
     40  fb8c							; hud, if that feature is added any time soon).
     41  fb8c
     42  fb8c		       b8		      CLV		; always best to leave the overflow flag at zero...
     43  fb8d
     44  fb8d		       a9 00		      LDA	#NULL	; Also nice to make sure the playfields are clear...
     45  fb8f		       85 0e		      STA	PF1
     46  fb91		       85 0f		      STA	PF2
     47  fb93
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fb93					      INCLUDE	"drawCode/mmDraw.asm"
      1  fb93							; Draws the compass to the screen
      2  fb93							; See GLOSSARY.TXT for definitions of vague words
      3  fb93
      4  fb93				   mmDraw
      5  fb93
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fb93					      INCLUDE	"drawCode/mmRender.asm"
      1  fb93							; Render the minimap
      2  fb93
      3  fb93				   mmRender   SUBROUTINE
      4  fb93		       a9 00		      LDA	#NULL
      5  fb95							; Set the colour of the player
      6  fb95		       a9 cc		      LDA	#PLYRCOLU
      7  fb97		       85 08		      STA	COLUPF
      8  fb99							; Set the colour of the map
      9  fb99		       a9 0e		      LDA	#MAPCOLU
     10  fb9b		       85 06		      STA	COLUP0
     11  fb9d		       85 07		      STA	COLUP1
     12  fb9f							; Get the player's position and translate it into horizontal movement
     13  fb9f		       a9 08		      LDA	#%00001000
     14  fba1		       18		      CLC
     15  fba2		       38		      SEC
     16  fba3		       e5 aa		      SBC	playerPos
     17  fba5		       0a		      ASL
     18  fba6		       0a		      ASL
     19  fba7		       0a		      ASL
     20  fba8		       0a		      ASL
     21  fba9		       85 24		      STA	HMBL
     22  fbab
     23  fbab							; Set the map's position to the right values
     24  fbab		       a9 00		      LDA	#HADJ_A
     25  fbad		       85 20		      STA	HMP0
     26  fbaf		       a9 10		      LDA	#HADJ_B
     27  fbb1		       85 21		      STA	HMP1
     28  fbb3
     29  fbb3		       85 02		      STA	WSYNC
     30  fbb5		       a2 07		      LDX	#HWAIT
     31  fbb7
     32  fbb7				   .wait1
     33  fbb7		       ca		      DEX
     34  fbb8		       d0 fd		      BNE	.wait1
      0  fbba					      DELAY	HDELAY1
      1  fbba				   .CYCLES    SET	HDELAY1
      2  fbba
      3  fbba				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbba				  -	      NOP
      5  fbba				  -.CYCLES    SET	.CYCLES - 2
      6  fbba					      ENDIF
      7  fbba
      8  fbba				  -	      IF	[.CYCLES - 2] / 5
      9  fbba				  -	      REPEAT	.CYCLES / 5
     10  fbba				  -	      INC	DUMP
     11  fbba				  -	      REPEND
     12  fbba				  -.CYCLES    SET	.CYCLES % 5
     13  fbba					      ENDIF
     14  fbba
     15  fbba				  -	      IF	.CYCLES % 3 == 1
     16  fbba				  -	      NOP
     17  fbba				  -.CYCLES    SET	.CYCLES - 2
     18  fbba					      ENDIF
     19  fbba
     20  fbba					      REPEAT	.CYCLES / 3
     21  fbba		       85 30		      STA	DUMP
     22  fbbc					      REPEND
     23  fbbc
     24  fbbc				   .CYCLES    SET	.CYCLES % 3
     25  fbbc
     26  fbbc					      REPEAT	.CYCLES / 2
     27  fbbc		       ea		      NOP
     28  fbbd					      REPEND
     29  fbbd
     30  fbbd				   .CYCLES    SET	.CYCLES % 2
     31  fbbd
     32  fbbd				  -	      IF	.CYCLES
     33  fbbd				  -	      ERR
     34  fbbd					      ENDIF
     35  fbbd
     36  fbbd		       85 10		      STA	RESP0
     37  fbbf		       85 11		      STA	RESP1
     38  fbc1
     39  fbc1		       a5 aa		      LDA	playerPos
     40  fbc3
     41  fbc3		       85 02		      STA	WSYNC
     42  fbc5		       a2 07		      LDX	#HWAIT
     43  fbc7
     44  fbc7				   .wait2
     45  fbc7		       ca		      DEX
     46  fbc8		       d0 fd		      BNE	.wait2
      0  fbca					      DELAY	HDELAY2
      1  fbca				   .CYCLES    SET	HDELAY2
      2  fbca
      3  fbca				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbca				  -	      NOP
      5  fbca				  -.CYCLES    SET	.CYCLES - 2
      6  fbca					      ENDIF
      7  fbca
      8  fbca					      IF	[.CYCLES - 2] / 5
      9  fbca					      REPEAT	.CYCLES / 5
     10  fbca		       e6 30		      INC	DUMP
     11  fbcc					      REPEND
     12  fbcc				   .CYCLES    SET	.CYCLES % 5
     13  fbcc					      ENDIF
     14  fbcc
     15  fbcc				  -	      IF	.CYCLES % 3 == 1
     16  fbcc				  -	      NOP
     17  fbcc				  -.CYCLES    SET	.CYCLES - 2
     18  fbcc					      ENDIF
     19  fbcc
     20  fbcc					      REPEAT	.CYCLES / 3
     21  fbcc		       85 30		      STA	DUMP
     22  fbce					      REPEND
     23  fbce
     24  fbce				   .CYCLES    SET	.CYCLES % 3
     25  fbce
     26  fbce				  -	      REPEAT	.CYCLES / 2
     27  fbce				  -	      NOP
     28  fbce					      REPEND
     29  fbce
     30  fbce				   .CYCLES    SET	.CYCLES % 2
     31  fbce
     32  fbce				  -	      IF	.CYCLES
     33  fbce				  -	      ERR
     34  fbce					      ENDIF
     35  fbce
     48  fbce		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      7  fbd0
      8  fbd0					      SUBROUTINE		; The preceeding code declares it's own subroutine
      9  fbd0
     10  fbd0		       a0 00		      LDY	#NULL
     11  fbd2		       84 1b		      STY	GRP0
     12  fbd4		       84 1c		      STY	GRP1
     13  fbd6		       84 02		      STY	WSYNC
     14  fbd8		       84 2a		      STY	HMOVE
     15  fbda
     16  fbda		       a6 aa		      LDX	playerPos
     17  fbdc
     18  fbdc				   .loop
     19  fbdc		       85 02		      STA	WSYNC
     20  fbde
     21  fbde		       b1 b4		      LDA	(miniMapPtr),Y
     22  fbe0		       85 1b		      STA	GRP0
     23  fbe2		       c8		      INY
     24  fbe3		       b1 b4		      LDA	(miniMapPtr),Y
     25  fbe5		       85 1c		      STA	GRP1
     26  fbe7		       c8		      INY
     27  fbe8
     28  fbe8		       8a		      TXA
     29  fbe9		       38		      SEC
     30  fbea		       e5 ab		      SBC	mapWidth
     31  fbec		       aa		      TAX
     32  fbed		       29 f0		      AND	#$F0
     33  fbef
     34  fbef		       d0 0a		      BNE	.noDraw
     35  fbf1
     36  fbf1		       a9 02		      LDA	#2
     37  fbf3		       85 1f		      STA	ENABL
     38  fbf5		       85 b3		      STA	drawingPlyr
     39  fbf7		       a9 01		      LDA	#1
     40  fbf9		       85 27		      STA	VDELBL
     41  fbfb
     42  fbfb				   .noDraw
     43  fbfb
     44  fbfb		       a5 b3		      LDA	drawingPlyr
     45  fbfd		       85 1f		      STA	ENABL
     46  fbff		       a9 00		      LDA	#NULL
     47  fc01		       85 b3		      STA	drawingPlyr
     48  fc03		       c0 20		      CPY	#MMSIZE
     49  fc05		       d0 d5		      BNE	.loop
     50  fc07
     51  fc07		       a9 00		      LDA	#NULL
     52  fc09		       85 1f		      STA	ENABL
     53  fc0b
     54  fc0b		       85 02		      STA	WSYNC
     55  fc0d
     56  fc0d		       a9 00		      LDA	#NULL
     57  fc0f		       85 1b		      STA	GRP0
     58  fc11		       85 1c		      STA	GRP1
     59  fc13		       85 06		      STA	COLUP0
     60  fc15		       85 07		      STA	COLUP1
------- FILE dispkern.asm
------- FILE main.asm
     54  fc17
     55  fc17							; Start VBLANK
     56  fc17
     57  fc17		       a9 c2		      LDA	#VBLANK_SET
     58  fc19		       85 01		      STA	VBLANK
     59  fc1b
     60  fc1b							; Make sounds 'n' stuff
     61  fc1b
------- FILE sound.asm LEVEL 2 PASS 4
      0  fc1b					      INCLUDE	"sound.asm"
      1  fc1b							; sounds.asm - makes sounds 'n' stuff
      2  fc1b
      3  fc1b					      SUBROUTINE
      4  fc1b
      5  fc1b		       a5 bc		      LDA	stepVol
      6  fc1d		       85 19		      STA	AUDV0
      7  fc1f		       a5 bd		      LDA	stepSnd
      8  fc21		       85 15		      STA	AUDC0
      9  fc23		       a9 00		      LDA	#NULL
     10  fc25		       85 bc		      STA	stepVol
     11  fc27
------- FILE main.asm
     63  fc27
     64  fc27							; Process input
     65  fc27
------- FILE input.asm LEVEL 2 PASS 4
      0  fc27					      INCLUDE	"input.asm"
      1  fc27							; VePseu's controller input
      2  fc27
      3  fc27		       85 02		      STA	WSYNC
      4  fc29
      5  fc29		       a5 b0		      LDA	frameNum
      6  fc2b		       29 1f		      AND	#$1F
      7  fc2d		       c9 10		      CMP	#$10
      8  fc2f		       d0 03		      BNE	CENDJMP
      9  fc31
     10  fc31		       4c 37 fc 	      JMP	CSTART
     11  fc34
     12  fc34				   CENDJMP
     13  fc34		       4c cf fc 	      JMP	CEND
     14  fc37
     15  fc37				   CSTART
     16  fc37
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fc37					      INCLUDE	"ctrlCode/cin1.asm"
      1  fc37					      SUBROUTINE
      2  fc37
      3  fc37		       ad 80 02 	      LDA	SWCHA
      4  fc3a		       29 10		      AND	#FFORD
      5  fc3c		       d0 19		      BNE	.end
      6  fc3e
      7  fc3e		       a5 aa		      LDA	playerPos
      8  fc40		       38		      SEC
      9  fc41		       e5 af		      SBC	yLoss
     10  fc43		       18		      CLC
     11  fc44		       65 ae		      ADC	yGain
     12  fc46		       a8		      TAY
     13  fc47
     14  fc47		       b1 b6		      LDA	(mapPtr),Y
     15  fc49		       d0 0c		      BNE	.end
     16  fc4b		       84 aa		      STY	playerPos
     17  fc4d
     18  fc4d		       a9 07		      LDA	#PLAYER_STEPV
     19  fc4f		       05 bc		      ORA	stepVol
     20  fc51		       85 bc		      STA	stepVol
     21  fc53		       a9 02		      LDA	#PLAYER_STEPS
     22  fc55		       85 bd		      STA	stepSnd
     23  fc57
     24  fc57				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fc57					      INCLUDE	"ctrlCode/cin2.asm"
      1  fc57					      SUBROUTINE
      2  fc57
      3  fc57		       85 02		      STA	WSYNC
      4  fc59		       ad 80 02 	      LDA	SWCHA
      5  fc5c		       29 20		      AND	#FBACK
      6  fc5e		       d0 19		      BNE	.end
      7  fc60
      8  fc60		       a5 aa		      LDA	playerPos
      9  fc62		       38		      SEC
     10  fc63		       e5 ae		      SBC	yGain
     11  fc65		       18		      CLC
     12  fc66		       65 af		      ADC	yLoss
     13  fc68		       a8		      TAY
     14  fc69
     15  fc69		       b1 b6		      LDA	(mapPtr),Y
     16  fc6b		       d0 0c		      BNE	.end
     17  fc6d		       84 aa		      STY	playerPos
     18  fc6f
     19  fc6f		       a9 07		      LDA	#PLAYER_STEPV
     20  fc71		       05 bc		      ORA	stepVol
     21  fc73		       85 bc		      STA	stepVol
     22  fc75		       a9 02		      LDA	#PLAYER_STEPS
     23  fc77		       85 bd		      STA	stepSnd
     24  fc79
     25  fc79				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fc79					      INCLUDE	"ctrlCode/cin3.asm"
      1  fc79					      SUBROUTINE
      2  fc79
      3  fc79		       85 02		      STA	WSYNC
      4  fc7b
      5  fc7b		       ad 80 02 	      LDA	SWCHA
      6  fc7e		       29 80		      AND	#FLEFT
      7  fc80		       d0 22		      BNE	.end
      8  fc82
      9  fc82		       a6 b2		      LDX	shadowColour
     10  fc84		       a5 b1		      LDA	wallColour
     11  fc86		       86 b1		      STX	wallColour
     12  fc88		       85 b2		      STA	shadowColour
     13  fc8a
     14  fc8a		       a5 af		      LDA	yLoss
     15  fc8c		       a6 ac		      LDX	xGain
     16  fc8e		       85 ac		      STA	xGain
     17  fc90		       a5 ae		      LDA	yGain
     18  fc92		       86 ae		      STX	yGain
     19  fc94		       a6 ad		      LDX	xLoss
     20  fc96		       85 ad		      STA	xLoss
     21  fc98		       86 af		      STX	yLoss
     22  fc9a
     23  fc9a		       a9 07		      LDA	#PLAYER_STEPV
     24  fc9c		       05 bc		      ORA	stepVol
     25  fc9e		       85 bc		      STA	stepVol
     26  fca0		       a9 06		      LDA	#PLAYER_TURNS
     27  fca2		       85 bd		      STA	stepSnd
     28  fca4
     29  fca4				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fca4					      INCLUDE	"ctrlCode/cin4.asm"
      1  fca4					      SUBROUTINE
      2  fca4
      3  fca4		       85 02		      STA	WSYNC
      4  fca6
      5  fca6		       ad 80 02 	      LDA	SWCHA
      6  fca9		       29 40		      AND	#FRIGT
      7  fcab		       d0 22		      BNE	.end
      8  fcad
      9  fcad		       a6 b2		      LDX	shadowColour
     10  fcaf		       a5 b1		      LDA	wallColour
     11  fcb1		       86 b1		      STX	wallColour
     12  fcb3		       85 b2		      STA	shadowColour
     13  fcb5
     14  fcb5		       a5 ac		      LDA	xGain
     15  fcb7		       a6 af		      LDX	yLoss
     16  fcb9		       85 af		      STA	yLoss
     17  fcbb		       a5 ad		      LDA	xLoss
     18  fcbd		       86 ad		      STX	xLoss
     19  fcbf		       a6 ae		      LDX	yGain
     20  fcc1		       85 ae		      STA	yGain
     21  fcc3		       86 ac		      STX	xGain
     22  fcc5
     23  fcc5		       a9 07		      LDA	#PLAYER_STEPV
     24  fcc7		       05 bc		      ORA	stepVol
     25  fcc9		       85 bc		      STA	stepVol
     26  fccb		       a9 06		      LDA	#PLAYER_TURNS
     27  fccd		       85 bd		      STA	stepSnd
     28  fccf
     29  fccf				   .end
------- FILE input.asm
     21  fccf
     22  fccf				   CEND
     23  fccf		       85 02		      STA	WSYNC
------- FILE main.asm
     67  fcd1
     68  fcd1							; Pad again!
     69  fcd1
      0  fcd1					      PAD	LOPAD_LIMIT
      1  fcd1
      2  fcd1				   .SCANLINES SET	LOPAD_LIMIT
      3  fcd1
      4  fcd1		       a2 1c		      LDX	#.SCANLINES
      5  fcd3
      6  fcd3				   .loop
      7  fcd3		       85 02		      STA	WSYNC
      8  fcd5
      9  fcd5		       ca		      DEX
     10  fcd6		       d0 fb		      BNE	.loop
     11  fcd8
     71  fcd8
     72  fcd8							; Get everything ready for VSYNC
     73  fcd8
     74  fcd8		       86 01		      STX	VBLANK
     75  fcda		       a9 02		      LDA	#VSYNC_SET
     76  fcdc		       85 02		      STA	WSYNC
     77  fcde		       4c 9b f6 	      JMP	screenStart	; And start all over again!
     78  fce1
     79  fce1							; Tell us how many bytes we've used up
     80  fce1
      0  fce1					      USAGE_REPORT	"ROM", $F600, $FFFA
      1  fce1
      2  fce1				   NAM	      SET	"ROM"
      3  fce1				   SPOS       SET	$F600
      4  fce1				   EPOS       SET	$FFFA
      5  fce1				   CPOS       SET	.
      6  fce1
      7  fce1				   CAP	      SET	EPOS - SPOS
      8  fce1				   TKUP       SET	CPOS - SPOS
      9  fce1
     10  fce1				   PCNT       SET	[TKUP * 100 / CAP]d
     11  fce1
     12  fce1
     13  fce1
 68 % of your ROM is used up ( 1761 / 2554  bytes )
     14  fce1					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, " bytes )"
     In  ROM ,  793 bytes are free
     15  fce1					      ECHO	"    In ", NAM, ", ", [CAP - TKUP]d, "bytes are free"
 
     16  fce1					      ECHO	""
     17  fce1
     82  fce1
     83  fffa					      ORG	$FFFA
     84  fffa
     85  fffa		       83 f6		      DC.W	start	; Something
     86  fffc		       83 f6		      DC.W	start	; Entrypoint
     87  fffe		       9b f6		      DC.W	screenStart	; Something else
     88  10000
     89  10000					       END
