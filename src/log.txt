------- FILE main.asm LEVEL 1 PASS 4
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 4
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
------- FILE include/defs.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/defs.h"
      1  10000 ????						; VePseu's definitions
      2  10000 ????
      3  10000 ????		00 00	    NULL       =	0	; The value of NULL
      4  10000 ????		00 01	    ONE        =	1	; The value of one
      5  10000 ????
      6  10000 ????		00 0a	    WALLCNT    =	10	; The number of walls to render in scrend
      7  10000 ????
      8  10000 ????		00 03	    PIXH       =	3	; The height of each pixel, in scanlines (x2)
      9  10000 ????
     10  10000 ????		00 20	    MMSIZE     =	32	; The size of the minimap in bytes
     11  10000 ????
     12  10000 ????		00 1e	    UPPRWALL_S =	30
     13  10000 ????		00 06	    LOWRWALL_S =	6
     14  10000 ????
     15  10000 ????		00 00	    HADJ_A     =	$00	; The horizontal adjustment of each minimap sprite
     16  10000 ????		00 10	    HADJ_B     =	$10
     17  10000 ????
     18  10000 ????		00 07	    HWAIT      =	7	; The horizontal wait for the minimap
     19  10000 ????		00 05	    HDELAY1    =	5	; The amount of clocks for horizontal correction (minimap)
     20  10000 ????		00 08	    HDELAY2    =	8	; The amount of clocks for horizontal correction (player blip)
     21  10000 ????
     22  10000 ????		00 86	    WCOLU      =	$86	; The initial colour of walls
     23  10000 ????		00 82	    SCOLU      =	$82	; The initial colour of shadows
     24  10000 ????		00 0e	    MAPCOLU    =	$0E	; The colour of the map on the minimap
     25  10000 ????		00 cc	    PLYRCOLU   =	$CC	; The colour of the player on the minimap
     26  10000 ????
     27  10000 ????		00 c2	    VBLANK_SET =	%11000010	; The value to push to the vblank register
     28  10000 ????		00 02	    VSYNC_SET  =	2	; The value to push to the vsync register
     29  10000 ????
     30  10000 ????		00 00	    INDEXINIT  =	0	; The value to initialize indexes to
     31  10000 ????
     32  10000 ????		00 0f	    UPPAD_LIMIT =	15	; The upper pad amount
     33  10000 ????		00 1c	    LOPAD_LIMIT =	28	; The lower pad amount
     34  10000 ????
     35  10000 ????		00 ff	    FULLWALL   =	$FF
     36  10000 ????
     37  10000 ????		00 10	    FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     38  10000 ????		00 20	    FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     39  10000 ????		00 80	    FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     40  10000 ????		00 40	    FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     41  10000 ????		00 80	    ITRIG      =	%10000000	; The bit set when the trigger is set
     42  10000 ????
     43  10000 ????		00 01	    LOWSHAD_LIMIT =	1	; The limited size of the shadow at the bottem of the screen
     44  10000 ????
     45  10000 ????		00 00	    cleanStart =	0	; The value to initialize X to in clearLoop
     46  10000 ????		00 00	    cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     47  10000 ????
     48  10000 ????		00 ff	    stack      =	$FF	; The address of the stack
     49  10000 ????
     50  10000 ????		00 0f	    CWAITCNT   =	15	; The amount of frames to wait before input is repeated
     51  10000 ????
     52  10000 ????		00 00	    DNORTH     =	0	; The possible directions
     53  10000 ????		00 02	    DSOUTH     =	2
     54  10000 ????		00 01	    DWEST      =	1
     55  10000 ????		00 03	    DEAST      =	3
     56  10000 ????
     57  10000 ????		00 07	    PLAYER_STEPV =	7	; The volume of the player's steps
     58  10000 ????		00 02	    PLAYER_STEPS =	2
     59  10000 ????		00 06	    PLAYER_TURNS =	6
------- FILE include/vepseu.h
------- FILE include/macros.h LEVEL 3 PASS 4
      0  10000 ????				       INCLUDE	"include/macros.h"
      1  10000 ????						; VePseu's macros & stuff
      2  10000 ????
      3  10000 ????						; Scanline padding macro
      4  10000 ????				       MAC	pad
      5  10000 ????
      6  10000 ????			    .SCANLINES SET	{1}	; Scanlines to essentially skip
      7  10000 ????
      8  10000 ????				       LDX	#.SCANLINES
      9  10000 ????
     10  10000 ????			    .loop
     11  10000 ????				       STA	WSYNC
     12  10000 ????
     13  10000 ????				       DEX
     14  10000 ????				       BNE	.loop
     15  10000 ????
     16  10000 ????				       ENDM
     17  10000 ????
     18  10000 ????						; Precision delay macro
     19  10000 ????
     20  10000 ????				       MAC	delay
     21  10000 ????			    .CYCLES    SET	{1}
     22  10000 ????
     23  10000 ????				       IF	.CYCLES % 5 == 1 && .CYCLES % 3
     24  10000 ????				       NOP
     25  10000 ????			    .CYCLES    SET	.CYCLES - 2
     26  10000 ????				       ENDIF
     27  10000 ????
     28  10000 ????				       IF	[.CYCLES - 2] / 5
     29  10000 ????				       REPEAT	.CYCLES / 5
     30  10000 ????				       INC	DUMP
     31  10000 ????				       REPEND
     32  10000 ????			    .CYCLES    SET	.CYCLES % 5
     33  10000 ????				       ENDIF
     34  10000 ????
     35  10000 ????				       IF	.CYCLES % 3 == 1
     36  10000 ????				       NOP
     37  10000 ????			    .CYCLES    SET	.CYCLES - 2
     38  10000 ????				       ENDIF
     39  10000 ????
     40  10000 ????				       REPEAT	.CYCLES / 3
     41  10000 ????				       STA	DUMP
     42  10000 ????				       REPEND
     43  10000 ????
     44  10000 ????			    .CYCLES    SET	.CYCLES % 3
     45  10000 ????
     46  10000 ????				       REPEAT	.CYCLES / 2
     47  10000 ????				       NOP
     48  10000 ????				       REPEND
     49  10000 ????
     50  10000 ????			    .CYCLES    SET	.CYCLES % 2
     51  10000 ????
     52  10000 ????				       IF	.CYCLES
     53  10000 ????				       ERR
     54  10000 ????				       ENDIF
     55  10000 ????
     56  10000 ????				       ENDM
     57  10000 ????
     58  10000 ????						; Macro used to find the space used up in a certain section of ram
     59  10000 ????
     60  10000 ????				       MAC	usage_report
     61  10000 ????
     62  10000 ????			    NAM        SET	{1}	; Name of the section
     63  10000 ????			    SPOS       SET	{2}	; Start address of the section
     64  10000 ????			    EPOS       SET	{3}	; End address of the section
     65  10000 ????			    CPOS       SET	.	; The current position of the macro in the section
     66  10000 ????
     67  10000 ????			    CAP        SET	EPOS - SPOS	; Space that exists
     68  10000 ????			    TKUP       SET	CPOS - SPOS	; Space taken up by data
     69  10000 ????
     70  10000 ????			    PCNT       SET	[TKUP * 100 / CAP]d	; Percent of space taken by data, converted to
     71  10000 ????						; a string so the following line doesn't exceed
     72  10000 ????						; 80 characters
     73  10000 ????
     74  10000 ????				       ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     75  10000 ????
     76  10000 ????				       ENDM
------- FILE include/vepseu.h
      5  10000 ????
      6 U028a ????				      SEG.U	addresses
      7 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	y_pos_adv_ag
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	yGain
     17 U028a ????				      ADC	xGain
     18 U028a ????				      SEC
     19 U028a ????				      SBC	yLoss
     20 U028a ????				      SBC	xLoss
     21 U028a ????				      TAY
     22 U028a ????
     23 U028a ????				      ENDM		; 20 cycles
     24 U028a ????
     25 U028a ????				      MAC	y_pos_adv_al
     26 U028a ????
     27 U028a ????				      TYA
     28 U028a ????				      CLC
     29 U028a ????				      ADC	yGain
     30 U028a ????				      ADC	xLoss
     31 U028a ????				      SEC
     32 U028a ????				      SBC	yLoss
     33 U028a ????				      SBC	xGain
     34 U028a ????				      TAY
     35 U028a ????
     36 U028a ????				      ENDM		; 20 cycles
     37 U028a ????
     38 U028a ????				      MAC	x_pos_gan
     39 U028a ????
     40 U028a ????				      TYA
     41 U028a ????				      CLC
     42 U028a ????				      ADC	xGain
     43 U028a ????				      SEC
     44 U028a ????				      SBC	xLoss
     45 U028a ????				      TAY
     46 U028a ????
     47 U028a ????				      ENDM		; 14 cycles
     48 U028a ????
     49 U028a ????				      MAC	x_pos_los
     50 U028a ????
     51 U028a ????				      TYA
     52 U028a ????				      CLC
     53 U028a ????				      ADC	xLoss
     54 U028a ????				      SEC
     55 U028a ????				      SBC	xGain
     56 U028a ????				      TAY
     57 U028a ????
     58 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 4
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 4
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00 30	   DUMP       =	$30
      6 U0080
      7 U0080		       00 00 00 00*wall1      DS	5
      8 U0085		       00	   wall2a     DC	0
      9 U0086		       00	   wall2b     DC	0
     10 U0087		       00	   wall2c     DC	0
     11 U0088		       00	   wall2d     DC	0
     12 U0089		       00	   wall2e     DC	0
     13 U008a		       00	   wall3a     DC	0
     14 U008b		       00	   wall3b     DC	0
     15 U008c		       00	   wall3c     DC	0
     16 U008d		       00	   wall3d     DC	0
     17 U008e		       00	   wall3e     DC	0
     18 U008f		       00	   wall4a     DC	0
     19 U0090		       00	   wall4b     DC	0
     20 U0091
     21 U0091		       00	   shadow2aa  DC	0
     22 U0092		       00	   shadow2ba  DC	0
     23 U0093		       00	   shadow2ca  DC	0
     24 U0094		       00	   shadow2da  DC	0
     25 U0095		       00	   shadow2ea  DC	0
     26 U0096		       00	   shadow3aa  DC	0
     27 U0097		       00	   shadow3ba  DC	0
     28 U0098		       00	   shadow3ca  DC	0
     29 U0099		       00	   shadow3da  DC	0
     30 U009a		       00	   shadow3ea  DC	0
     31 U009b
     32 U009b		       00	   shadow1a   DC	0
     33 U009c		       00	   shadow1b   DC	0
     34 U009d		       00	   shadow1c   DC	0
     35 U009e		       00	   shadow1d   DC	0
     36 U009f		       00	   shadow1e   DC	0
     37 U00a0		       00	   shadow2ab  DC	0
     38 U00a1		       00	   shadow2bb  DC	0
     39 U00a2		       00	   shadow2cb  DC	0
     40 U00a3		       00	   shadow2db  DC	0
     41 U00a4		       00	   shadow2eb  DC	0
     42 U00a5		       00	   shadow3ab  DC	0
     43 U00a6		       00	   shadow3bb  DC	0
     44 U00a7		       00	   shadow3cb  DC	0
     45 U00a8		       00	   shadow3db  DC	0
     46 U00a9		       00	   shadow3eb  DC	0
     47 U00aa
     48 U00aa		       00	   playerPos  DC	0
     49 U00ab		       00	   mapWidth   DC	0
     50 U00ac
     51 U00ac		       00	   xGain      DC	0
     52 U00ad		       00	   xLoss      DC	0
     53 U00ae		       00	   yGain      DC	0
     54 U00af		       00	   yLoss      DC	0
     55 U00b0
     56 U00b0		       00	   fordPressed DC	0
     57 U00b1		       00	   backPressed DC	0
     58 U00b2		       00	   leftPressed DC	0
     59 U00b3		       00	   rigtPressed DC	0
     60 U00b4
     61 U00b4		       00	   wallColour DC	0
     62 U00b5		       00	   shadowColour DC	0
     63 U00b6		       00	   drawingPlyr DC	0
     64 U00b7		       00	   direction  DC	0
     65 U00b8
     66 U00b8		       00 00	   miniMapPtr DC.W	0
     67 U00ba		       00 00	   mapPtr     DC.W	0
     68 U00bc
     69 U00bc				   sprite
     70 U00bc		       00	   spriteAddrH DC	0
     71 U00bd		       00	   spriteAddrL DC	0
     72 U00be
     73 U00be		       00	   spriteHeight DC	0
     74 U00bf		       00	   spritePosY DC	0
     75 U00c0
     76 U00c0		       00	   stepVol    DC	0
     77 U00c1		       00	   stepSnd    DC	0
     78 U00c2
      0 U00c2					      USAGE_REPORT	"RAM", $80, $100
      1 U00c2
      2 U00c2				   NAM	      SET	"RAM"
      3 U00c2				   SPOS       SET	$80
      4 U00c2				   EPOS       SET	$100
      5 U00c2				   CPOS       SET	.
      6 U00c2
      7 U00c2				   CAP	      SET	EPOS - SPOS
      8 U00c2				   TKUP       SET	CPOS - SPOS
      9 U00c2
     10 U00c2				   PCNT       SET	[TKUP * 100 / CAP]d
     11 U00c2
     12 U00c2
     13 U00c2
 51 % of your RAM is used up ( 66 / 128 ) bytes
     14 U00c2					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15 U00c2
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 4
      0 U00c2					      INCLUDE	"include/pia_addr.h"
      1 U00c2							; PIA addresses
      2 U00c2
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
     13 U028a
     14 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE map.asm LEVEL 2 PASS 4
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1	; Player's position
      4  f000		       00 10	   MAP_01_WDTH =	$10	; Map 1's width
      5  f000		       01 00	   MAP_01_SZ  =	$100	; Map 1's size in bytes
      6  f000
      7  f000				   miniMap_01
      8  f000		       e0 07		      DC.W	%0000011111100000
      9  f002		       bf fd		      DC.W	%1111110110111111
     10  f004		       80 01		      DC.W	%0000000110000000
     11  f006		       80 01		      DC.W	%0000000110000000
     12  f008		       be bd		      DC.W	%1011110110111110
     13  f00a		       a2 a5		      DC.W	%1010010110100010
     14  f00c		       a2 a7		      DC.W	%1010011110100010
     15  f00e		       e2 a7		      DC.W	%1010011111100010
     16  f010		       e2 a5		      DC.W	%1010010111100010
     17  f012		       be bd		      DC.W	%1011110110111110
     18  f014		       80 81		      DC.W	%1000000110000000
     19  f016		       80 81		      DC.W	%1000000110000000
     20  f018		       bf fd		      DC.W	%1111110110111111
     21  f01a		       a0 05		      DC.W	%0000010110100000
     22  f01c		       a0 05		      DC.W	%0000010110100000
     23  f01e		       e0 07		      DC.W	%0000011111100000
     24  f020
     25  f020				   map_01_load
     26  f020		       a9 d1		      LDA	#MAP_01_POS
     27  f022		       85 aa		      STA	playerPos
     28  f024		       a9 10		      LDA	#MAP_01_WDTH
     29  f026		       85 ab		      STA	mapWidth
     30  f028
     31  f028		       a9 00		      LDA	#<map_01
     32  f02a		       85 ba		      STA	mapPtr
     33  f02c		       a9 f1		      LDA	#>map_01
     34  f02e		       85 bb		      STA	mapPtr + 1
     35  f030
     36  f030		       a9 00		      LDA	#<miniMap_01
     37  f032		       85 b8		      STA	miniMapPtr
     38  f034		       a9 f0		      LDA	#>miniMap_01
     39  f036		       85 b9		      STA	miniMapPtr + 1
     40  f038		       60		      RTS
     41  f039
     42  f039
     43  f100		       00 00 00 00*	      ALIGN	256
     44  f100
     45  f100				   map_01
     46  f100		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     47  f110		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     48  f120		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     49  f130		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     50  f140		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     51  f150		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     52  f160		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     53  f170		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     54  f180		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     55  f190		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     56  f1a0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     57  f1b0		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     58  f1c0		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     59  f1d0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     60  f1e0		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     61  f1f0		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
------- FILE main.asm
     12  f200
      0  f200					      USAGE_REPORT	"map space", $F000, $F600
      1  f200
      2  f200				   NAM	      SET	"map space"
      3  f200				   SPOS       SET	$F000
      4  f200				   EPOS       SET	$F600
      5  f200				   CPOS       SET	.
      6  f200
      7  f200				   CAP	      SET	EPOS - SPOS
      8  f200				   TKUP       SET	CPOS - SPOS
      9  f200
     10  f200				   PCNT       SET	[TKUP * 100 / CAP]d
     11  f200
     12  f200
     13  f200
 33 % of your map space is used up ( 512 / 1536 ) bytes
     14  f200					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15  f200
     14  f200
     15  f600					      ORG	$F600
     16  f600
------- FILE andtable.asm LEVEL 2 PASS 4
      0  f600					      INCLUDE	"andtable.asm"
      1  f600							; The AND-tables for the shadows
      2  f600
      3  f600				   and_1a
      4  f600		       80		      DC	%10000000
      5  f601		       80		      DC	%10000000
      6  f602		       80		      DC	%10000000
      7  f603		       c0		      DC	%11000000
      8  f604		       c0		      DC	%11000000
      9  f605		       c0		      DC	%11000000
     10  f606		       e0		      DC	%11100000
     11  f607		       e0		      DC	%11100000
     12  f608		       e0		      DC	%11100000
     13  f609		       f0		      DC	%11110000
     14  f60a		       f0		      DC	%11110000
     15  f60b		       f0		      DC	%11110000
     16  f60c		       f8		      DC	%11111000
     17  f60d		       f8		      DC	%11111000
     18  f60e		       f8		      DC	%11111000
     19  f60f		       fc		      DC	%11111100
     20  f610		       fc		      DC	%11111100
     21  f611		       fc		      DC	%11111100
     22  f612		       fe		      DC	%11111110
     23  f613		       fe		      DC	%11111110
     24  f614		       fe		      DC	%11111110
     25  f615		       ff		      DC	%11111111
     26  f616		       ff		      DC	%11111111
     27  f617		       ff		      DC	%11111111
     28  f618		       ff		      DC	%11111111
     29  f619		       ff		      DC	%11111111
     30  f61a		       ff		      DC	%11111111
     31  f61b		       ff		      DC	%11111111
     32  f61c		       ff		      DC	%11111111
     33  f61d		       ff		      DC	%11111111
     34  f61e
     35  f61e				   and_1b
     36  f61e		       00		      DC	%00000000
     37  f61f		       00		      DC	%00000000
     38  f620		       00		      DC	%00000000
     39  f621		       00		      DC	%00000000
     40  f622		       00		      DC	%00000000
     41  f623		       00		      DC	%00000000
     42  f624		       00		      DC	%00000000
     43  f625		       00		      DC	%00000000
     44  f626		       00		      DC	%00000000
     45  f627		       00		      DC	%00000000
     46  f628		       00		      DC	%00000000
     47  f629		       00		      DC	%00000000
     48  f62a		       00		      DC	%00000000
     49  f62b		       00		      DC	%00000000
     50  f62c		       00		      DC	%00000000
     51  f62d		       00		      DC	%00000000
     52  f62e		       00		      DC	%00000000
     53  f62f		       00		      DC	%00000000
     54  f630		       00		      DC	%00000000
     55  f631		       00		      DC	%00000000
     56  f632		       00		      DC	%00000000
     57  f633		       00		      DC	%00000000
     58  f634		       00		      DC	%00000000
     59  f635		       00		      DC	%00000000
     60  f636		       01		      DC	%00000001
     61  f637		       01		      DC	%00000001
     62  f638		       01		      DC	%00000001
     63  f639		       03		      DC	%00000011
     64  f63a		       03		      DC	%00000011
     65  f63b		       03		      DC	%00000011
     66  f63c
     67  f63c				   and_1c
     68  f63c		       00		      DC	%00000000
     69  f63d		       00		      DC	%00000000
     70  f63e		       00		      DC	%00000000
     71  f63f		       00		      DC	%00000000
     72  f640		       00		      DC	%00000000
     73  f641		       00		      DC	%00000000
     74  f642		       01		      DC	%00000001
     75  f643		       01		      DC	%00000001
     76  f644		       01		      DC	%00000001
     77  f645		       03		      DC	%00000011
     78  f646		       03		      DC	%00000011
     79  f647		       03		      DC	%00000011
     80  f648		       07		      DC	%00000111
     81  f649		       07		      DC	%00000111
     82  f64a		       07		      DC	%00000111
     83  f64b		       0f		      DC	%00001111
     84  f64c		       0f		      DC	%00001111
     85  f64d		       0f		      DC	%00001111
     86  f64e		       1f		      DC	%00011111
     87  f64f		       1f		      DC	%00011111
     88  f650		       1f		      DC	%00011111
     89  f651		       3f		      DC	%00111111
     90  f652		       3f		      DC	%00111111
     91  f653		       3f		      DC	%00111111
     92  f654		       7f		      DC	%01111111
     93  f655		       7f		      DC	%01111111
     94  f656		       7f		      DC	%01111111
     95  f657		       ff		      DC	%11111111
     96  f658		       ff		      DC	%11111111
     97  f659		       ff		      DC	%11111111
     98  f65a
     99  f65a				   and_1d
    100  f65a		       02		      DC	%00000010
    101  f65b		       02		      DC	%00000010
    102  f65c		       02		      DC	%00000010
    103  f65d		       03		      DC	%00000011
    104  f65e		       03		      DC	%00000011
    105  f65f		       03		      DC	%00000011
    106  f660		       03		      DC	%00000011
    107  f661		       03		      DC	%00000011
    108  f662		       03		      DC	%00000011
    109  f663		       03		      DC	%00000011
    110  f664		       03		      DC	%00000011
    111  f665		       03		      DC	%00000011
    112  f666		       03		      DC	%00000011
    113  f667		       03		      DC	%00000011
    114  f668		       03		      DC	%00000011
    115  f669		       03		      DC	%00000011
    116  f66a		       03		      DC	%00000011
    117  f66b		       03		      DC	%00000011
    118  f66c		       03		      DC	%00000011
    119  f66d		       03		      DC	%00000011
    120  f66e		       03		      DC	%00000011
    121  f66f		       03		      DC	%00000011
    122  f670		       03		      DC	%00000011
    123  f671		       03		      DC	%00000011
    124  f672		       03		      DC	%00000011
    125  f673		       03		      DC	%00000011
    126  f674		       03		      DC	%00000011
    127  f675		       03		      DC	%00000011
    128  f676		       03		      DC	%00000011
    129  f677		       03		      DC	%00000011
------- FILE main.asm
------- FILE gamecode.asm LEVEL 2 PASS 4
      0  f678					      INCLUDE	"gamecode.asm"
      1  f678				   carl
      2  f678		       00		      DC	%00000000
      3  f679		       66		      DC	%01100110
      4  f67a		       24		      DC	%00100100
      5  f67b		       3c		      DC	%00111100
      6  f67c		       42		      DC	%01000010
      7  f67d		       bd		      DC	%10111101
      8  f67e		       c3		      DC	%11000011
      9  f67f		       81		      DC	%10000001
     10  f680		       a5		      DC	%10100101
     11  f681		       42		      DC	%01000010
     12  f682		       3c		      DC	%00111100
     13  f683
     14  f683				   carlH      SET	. - carl
------- FILE main.asm
     19  f683
     20  f683				   start
     21  f683
     22  f683							; Initialize everything
     23  f683
------- FILE init.asm LEVEL 2 PASS 4
      0  f683					      INCLUDE	"init.asm"
      1  f683							; VePseu's init file
      2  f683
      3  f683					      SUBROUTINE
      4  f683
      5  f683		       a2 ff		      LDX	#stack
      6  f685		       9a		      TXS
      7  f686
      8  f686		       a9 00		      LDA	#NULL
      9  f688		       aa		      TAX
     10  f689
     11  f689		       d8		      CLD
     12  f68a		       18		      CLC
     13  f68b		       58		      CLI
     14  f68c		       b8		      CLV
     15  f68d
     16  f68d				   .loop
     17  f68d
     18  f68d		       95 00		      STA	cleanStart,X
     19  f68f		       ca		      DEX
     20  f690
     21  f690		       d0 fb		      BNE	.loop
     22  f692
     23  f692		       20 20 f0 	      JSR	map_01_load
     24  f695
     25  f695		       a5 ab		      LDA	mapWidth
     26  f697		       85 af		      STA	yLoss
     27  f699		       a9 01		      LDA	#ONE
     28  f69b		       85 ac		      STA	xGain
     29  f69d
     30  f69d		       a9 86		      LDA	#WCOLU
     31  f69f		       85 b4		      STA	wallColour
     32  f6a1		       a9 82		      LDA	#SCOLU
     33  f6a3		       85 b5		      STA	shadowColour
     34  f6a5
     35  f6a5		       a9 02		      LDA	#2
     36  f6a7		       85 17		      STA	AUDF0
------- FILE main.asm
     25  f6a9
     26  f6a9		       a9 02		      LDA	#VSYNC_SET
     27  f6ab
     28  f6ab				   screenStart
     29  f6ab
     30  f6ab							; Start vsync (3 scanlines)
     31  f6ab		       85 00		      STA	VSYNC
     32  f6ad
     33  f6ad		       85 02		      STA	WSYNC
     34  f6af		       85 02		      STA	WSYNC
     35  f6b1		       a9 00		      LDA	#NULL
     36  f6b3		       85 02		      STA	WSYNC
     37  f6b5
     38  f6b5		       85 00		      STA	VSYNC
     39  f6b7
     40  f6b7							; Render everything
     41  f6b7
     42  f6b7
------- FILE walrend.asm LEVEL 2 PASS 4
      0  f6b7					      INCLUDE	"walrend.asm"
      1  f6b7							; VePseu's wall renderer
      2  f6b7
      3  f6b7		       a4 aa		      LDY	playerPos
      4  f6b9
------- FILE r_layers/layer0.asm LEVEL 3 PASS 4
      0  f6b9					      INCLUDE	"r_layers/layer0.asm"	; 54 cycles
      1  f6b9							; Peripheral vision rendering (54 cycles)
      2  f6b9
------- FILE include/ands_0.h LEVEL 4 PASS 4
      0  f6b9					      INCLUDE	"include/ands_0.h"
      1  f6b9							; The AND constants for peripheral vision
      2  f6b9
      3  f6b9		       00 c0	   AND_W0S1P1 =	%11000000
      4  f6b9		       00 03	   AND_W0S1P2 =	%00000011
------- FILE r_layers/layer0.asm
      4  f6b9
      0  f6b9					      X_POS_LOS		; 24 cycles
      1  f6b9
      2  f6b9		       98		      TYA
      3  f6ba		       18		      CLC
      4  f6bb		       65 ad		      ADC	xLoss
      5  f6bd		       38		      SEC
      6  f6be		       e5 ac		      SBC	xGain
      7  f6c0		       a8		      TAY
      8  f6c1
      6  f6c1		       b1 ba		      LDA	(mapPtr),Y
      7  f6c3		       29 c0		      AND	#AND_W0S1P1
      8  f6c5		       85 9b		      STA	shadow1a
      9  f6c7
     10  f6c7		       98		      TYA		; Move twice the amount of a normal X_POS_GAIN (20 cycles)
     11  f6c8		       18		      CLC
     12  f6c9		       65 ac		      ADC	xGain
     13  f6cb		       65 ac		      ADC	xGain
     14  f6cd		       38		      SEC
     15  f6ce		       e5 ad		      SBC	xLoss
     16  f6d0		       e5 ad		      SBC	xLoss
     17  f6d2		       a8		      TAY
     18  f6d3
     19  f6d3		       b1 ba		      LDA	(mapPtr),Y	; 10 cycles
     20  f6d5		       29 03		      AND	#AND_W0S1P2
     21  f6d7		       85 9f		      STA	shadow1e
------- FILE walrend.asm
      6  f6d9
------- FILE r_layers/layer1.asm LEVEL 3 PASS 4
      0  f6d9					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f6d9							; Render the first layer (not that ugly) (86 cycles)
      2  f6d9
------- FILE include/ands_1.h LEVEL 4 PASS 4
      0  f6d9					      INCLUDE	"include/ands_1.h"
      1  f6d9							; The AND constants for layer 1
      2  f6d9
      3  f6d9		       00 03	   AND_W1S1P1 =	%00000011
      4  f6d9		       00 03	   AND_W1S1P2 =	%00000011
------- FILE r_layers/layer1.asm
      4  f6d9
      0  f6d9					      Y_POS_ADV		; 30 cycles
      1  f6d9
      2  f6d9		       98		      TYA
      3  f6da		       18		      CLC
      4  f6db		       65 ae		      ADC	yGain
      5  f6dd		       38		      SEC
      6  f6de		       e5 af		      SBC	yLoss
      7  f6e0		       a8		      TAY
      8  f6e1
      6  f6e1		       b1 ba		      LDA	(mapPtr),Y
      7  f6e3		       85 9e		      STA	shadow1d
      8  f6e5
      0  f6e5					      X_POS_LOS		; 22 cycles
      1  f6e5
      2  f6e5		       98		      TYA
      3  f6e6		       18		      CLC
      4  f6e7		       65 ad		      ADC	xLoss
      5  f6e9		       38		      SEC
      6  f6ea		       e5 ac		      SBC	xGain
      7  f6ec		       a8		      TAY
      8  f6ed
     10  f6ed		       b1 ba		      LDA	(mapPtr),Y
     11  f6ef		       85 80		      STA	wall1
     12  f6f1		       85 81		      STA	wall1+1
     13  f6f3		       85 82		      STA	wall1+2
     14  f6f5		       85 83		      STA	wall1+3
     15  f6f7		       85 84		      STA	wall1+4
     16  f6f9
     17  f6f9		       a5 9e		      LDA	shadow1d
     18  f6fb		       aa		      TAX
     19  f6fc		       05 80		      ORA	wall1
     20  f6fe		       45 80		      EOR	wall1
     21  f700		       85 9e		      STA	shadow1d
     22  f702		       8a		      TXA
     23  f703		       05 9f		      ORA	shadow1e
     24  f705		       05 80		      ORA	wall1
     25  f707		       45 80		      EOR	wall1
     26  f709		       29 03		      AND	#AND_W1S1P2
     27  f70b		       85 9f		      STA	shadow1e
     28  f70d
      0  f70d					      X_POS_LOS		; 34 cycles
      1  f70d
      2  f70d		       98		      TYA
      3  f70e		       18		      CLC
      4  f70f		       65 ad		      ADC	xLoss
      5  f711		       38		      SEC
      6  f712		       e5 ac		      SBC	xGain
      7  f714		       a8		      TAY
      8  f715
     30  f715		       b1 ba		      LDA	(mapPtr),Y
     31  f717		       05 80		      ORA	wall1
     32  f719		       aa		      TAX
     33  f71a		       05 9b		      ORA	shadow1a
     34  f71c		       45 80		      EOR	wall1
     35  f71e		       85 9b		      STA	shadow1a
     36  f720		       8a		      TXA
     37  f721		       45 80		      EOR	wall1
     38  f723		       29 03		      AND	#AND_W1S1P2
     39  f725		       85 9c		      STA	shadow1b
------- FILE walrend.asm
      8  f727
------- FILE r_layers/layer2.asm LEVEL 3 PASS 4
      0  f727					      INCLUDE	"r_layers/layer2.asm"	; 186 cycles
      1  f727							; Render the second layer (186 cycles)
      2  f727
------- FILE include/ands_2.h LEVEL 4 PASS 4
      0  f727					      INCLUDE	"include/ands_2.h"
      1  f727							; The AND constants for layer 2
      2  f727
      3  f727		       00 e0	   AND_W2S1P1 =	%11100000
      4  f727		       00 fc	   AND_W2S2P1 =	%11111100
      5  f727
      6  f727		       00 03	   AND_W2S0P1 =	%00000011
      7  f727		       00 04	   AND_W2S1P2 =	%00000100
      8  f727		       00 0c	   AND_W2S2P2 =	%00001100
      9  f727
     10  f727		       00 fc	   AND_W2S0P2 =	%11111100
     11  f727
     12  f727		       00 80	   AND_W2S1P3 =	%10000000
     13  f727		       00 c0	   AND_W2S2P3 =	%11000000
     14  f727
     15  f727		       00 01	   AND_W2S1P4 =	%00000001
     16  f727		       00 0f	   AND_W2S2P4 =	%00001111
     17  f727		       00 03	   AND_W2S1P5 =	%00000011
     18  f727		       00 03	   AND_W2S2P5 =	%00000011
------- FILE r_layers/layer2.asm
      4  f727
      0  f727					      Y_POS_ADV_AL		; 35 cycles
      1  f727
      2  f727		       98		      TYA
      3  f728		       18		      CLC
      4  f729		       65 ae		      ADC	yGain
      5  f72b		       65 ad		      ADC	xLoss
      6  f72d		       38		      SEC
      7  f72e		       e5 af		      SBC	yLoss
      8  f730		       e5 ac		      SBC	xGain
      9  f732		       a8		      TAY
     10  f733
      6  f733		       b1 ba		      LDA	(mapPtr),Y
      7  f735		       29 fc		      AND	#AND_W2S2P1
      8  f737		       85 a0		      STA	shadow2ab
      9  f739		       29 e0		      AND	#AND_W2S1P1
     10  f73b		       85 91		      STA	shadow2aa
     11  f73d
      0  f73d					      X_POS_GAN		; 41 cycles
      1  f73d
      2  f73d		       98		      TYA
      3  f73e		       18		      CLC
      4  f73f		       65 ac		      ADC	xGain
      5  f741		       38		      SEC
      6  f742		       e5 ad		      SBC	xLoss
      7  f744		       a8		      TAY
      8  f745
     13  f745		       b1 ba		      LDA	(mapPtr),Y
     14  f747		       aa		      TAX
     15  f748		       85 85		      STA	wall2a
     16  f74a		       29 03		      AND	#AND_W2S0P1
     17  f74c		       85 86		      STA	wall2b
     18  f74e		       8a		      TXA
     19  f74f		       29 0c		      AND	#AND_W2S2P2
     20  f751		       85 a1		      STA	shadow2bb
     21  f753		       29 04		      AND	#AND_W2S1P2
     22  f755		       85 92		      STA	shadow2ba
     23  f757
      0  f757					      X_POS_GAN		; 30 cycles
      1  f757
      2  f757		       98		      TYA
      3  f758		       18		      CLC
      4  f759		       65 ac		      ADC	xGain
      5  f75b		       38		      SEC
      6  f75c		       e5 ad		      SBC	xLoss
      7  f75e		       a8		      TAY
      8  f75f
     25  f75f		       b1 ba		      LDA	(mapPtr),Y
     26  f761		       85 87		      STA	wall2c
     27  f763		       29 fc		      AND	#AND_W2S0P2
     28  f765		       05 86		      ORA	wall2b
     29  f767		       85 86		      STA	wall2b
     30  f769
      0  f769					      X_POS_GAN		; 35 cycles
      1  f769
      2  f769		       98		      TYA
      3  f76a		       18		      CLC
      4  f76b		       65 ac		      ADC	xGain
      5  f76d		       38		      SEC
      6  f76e		       e5 ad		      SBC	xLoss
      7  f770		       a8		      TAY
      8  f771
     32  f771		       b1 ba		      LDA	(mapPtr),Y
     33  f773		       85 88		      STA	wall2d
     34  f775		       85 89		      STA	wall2e
     35  f777		       29 c0		      AND	#AND_W2S2P3
     36  f779		       85 a2		      STA	shadow2cb
     37  f77b		       29 80		      AND	#AND_W2S1P3
     38  f77d		       85 93		      STA	shadow2ca
     39  f77f
      0  f77f					      X_POS_GAN		; 37 cycles
      1  f77f
      2  f77f		       98		      TYA
      3  f780		       18		      CLC
      4  f781		       65 ac		      ADC	xGain
      5  f783		       38		      SEC
      6  f784		       e5 ad		      SBC	xLoss
      7  f786		       a8		      TAY
      8  f787
     41  f787		       b1 ba		      LDA	(mapPtr),Y
     42  f789		       29 0f		      AND	#AND_W2S2P4
     43  f78b		       85 a3		      STA	shadow2db
     44  f78d		       29 03		      AND	#AND_W2S1P5
     45  f78f		       85 95		      STA	shadow2ea
     46  f791		       85 a4		      STA	shadow2eb
     47  f793		       29 01		      AND	#AND_W2S1P4
     48  f795		       85 94		      STA	shadow2da
------- FILE walrend.asm
     10  f797
------- FILE r_layers/layer3.asm LEVEL 3 PASS 4
      0  f797					      INCLUDE	"r_layers/layer3.asm"	; 281 cycles
      1  f797							; Render the third layer (it's really ugly, at 281 cycles)
      2  f797
------- FILE include/ands_3.h LEVEL 4 PASS 4
      0  f797					      INCLUDE	"include/ands_3.h"
      1  f797							; The AND constants for render layer 3
      2  f797
      3  f797		       00 80	   AND_W3S1P1 =	%10000000
      4  f797		       00 c0	   AND_W3S2P1 =	%11000000
      5  f797
      6  f797		       00 fc	   AND_W3S0P1 =	%11111100
      7  f797		       00 02	   AND_W3S1P2 =	%00000010
      8  f797		       00 03	   AND_W3S2P2 =	%00000011
      9  f797
     10  f797		       00 03	   AND_W3S0P2 =	%00000011
     11  f797		       00 0f	   AND_W3S0P3 =	%00001111
     12  f797		       00 10	   AND_W3S1P3 =	%00010000
     13  f797		       00 30	   AND_W3S2P3 =	%00110000
     14  f797
     15  f797		       00 f0	   AND_W3S0P4 =	%11110000
     16  f797		       00 30	   AND_W3S0P5 =	%00110000
     17  f797
     18  f797		       00 c0	   AND_W3S0P6 =	%11000000
     19  f797		       00 f0	   AND_W3S0P7 =	%11110000
     20  f797		       00 20	   AND_W3S1P4 =	%00100000
     21  f797		       00 30	   AND_W3S2P4 =	%00110000
     22  f797
     23  f797		       00 0f	   AND_W3S0P8 =	%00001111
     24  f797		       00 03	   AND_W3S0P9 =	%00000011
     25  f797		       00 10	   AND_W3S1P5 =	%00010000
     26  f797		       00 30	   AND_W3S2P5 =	%00110000
     27  f797
     28  f797		       00 02	   AND_W3S1P6 =	%00000010
     29  f797		       00 03	   AND_W3S2P6 =	%00000011
------- FILE r_layers/layer3.asm
      4  f797
      0  f797					      Y_POS_ADV_AG		; 35 cycles
      1  f797
      2  f797		       98		      TYA
      3  f798		       18		      CLC
      4  f799		       65 ae		      ADC	yGain
      5  f79b		       65 ac		      ADC	xGain
      6  f79d		       38		      SEC
      7  f79e		       e5 af		      SBC	yLoss
      8  f7a0		       e5 ad		      SBC	xLoss
      9  f7a2		       a8		      TAY
     10  f7a3
      6  f7a3		       b1 ba		      LDA	(mapPtr),Y
      7  f7a5		       29 03		      AND	#AND_W3S2P6
      8  f7a7		       85 a9		      STA	shadow3eb
      9  f7a9		       29 02		      AND	#AND_W3S1P6
     10  f7ab		       85 9a		      STA	shadow3ea
     11  f7ad
      0  f7ad					      X_POS_LOS		; 38 cycles
      1  f7ad
      2  f7ad		       98		      TYA
      3  f7ae		       18		      CLC
      4  f7af		       65 ad		      ADC	xLoss
      5  f7b1		       38		      SEC
      6  f7b2		       e5 ac		      SBC	xGain
      7  f7b4		       a8		      TAY
      8  f7b5
     13  f7b5		       b1 ba		      LDA	(mapPtr),Y
     14  f7b7		       aa		      TAX
     15  f7b8		       29 0f		      AND	#AND_W3S0P8
     16  f7ba		       85 8d		      STA	wall3d
     17  f7bc		       29 03		      AND	#AND_W3S0P9
     18  f7be		       85 8e		      STA	wall3e
     19  f7c0		       8a		      TXA
     20  f7c1		       29 30		      AND	#AND_W3S2P5
     21  f7c3		       85 a8		      STA	shadow3db
     22  f7c5		       29 10		      AND	#AND_W3S1P5
     23  f7c7		       85 99		      STA	shadow3da
     24  f7c9
      0  f7c9					      X_POS_LOS		; 46 cycles
      1  f7c9
      2  f7c9		       98		      TYA
      3  f7ca		       18		      CLC
      4  f7cb		       65 ad		      ADC	xLoss
      5  f7cd		       38		      SEC
      6  f7ce		       e5 ac		      SBC	xGain
      7  f7d0		       a8		      TAY
      8  f7d1
     26  f7d1		       b1 ba		      LDA	(mapPtr),Y
     27  f7d3		       aa		      TAX
     28  f7d4		       29 f0		      AND	#AND_W3S0P7
     29  f7d6		       05 8d		      ORA	wall3d
     30  f7d8		       85 8d		      STA	wall3d
     31  f7da		       29 c0		      AND	#AND_W3S0P6
     32  f7dc		       85 8c		      STA	wall3c
     33  f7de		       8a		      TXA
     34  f7df		       29 30		      AND	#AND_W3S2P4
     35  f7e1		       85 a7		      STA	shadow3cb
     36  f7e3		       29 20		      AND	#AND_W3S1P4
     37  f7e5		       85 98		      STA	shadow3ca
     38  f7e7
      0  f7e7					      X_POS_LOS		; 32 cycles
      1  f7e7
      2  f7e7		       98		      TYA
      3  f7e8		       18		      CLC
      4  f7e9		       65 ad		      ADC	xLoss
      5  f7eb		       38		      SEC
      6  f7ec		       e5 ac		      SBC	xGain
      7  f7ee		       a8		      TAY
      8  f7ef
     40  f7ef		       b1 ba		      LDA	(mapPtr),Y
     41  f7f1		       29 f0		      AND	#AND_W3S0P4
     42  f7f3		       85 8b		      STA	wall3b
     43  f7f5		       29 30		      AND	#AND_W3S0P5
     44  f7f7		       05 8c		      ORA	wall3c
     45  f7f9		       85 8c		      STA	wall3c
     46  f7fb
      0  f7fb					      X_POS_LOS		; 46 cycles
      1  f7fb
      2  f7fb		       98		      TYA
      3  f7fc		       18		      CLC
      4  f7fd		       65 ad		      ADC	xLoss
      5  f7ff		       38		      SEC
      6  f800		       e5 ac		      SBC	xGain
      7  f802		       a8		      TAY
      8  f803
     48  f803		       b1 ba		      LDA	(mapPtr),Y
     49  f805		       aa		      TAX
     50  f806		       29 0f		      AND	#AND_W3S0P3
     51  f808		       05 8b		      ORA	wall3b
     52  f80a		       85 8b		      STA	wall3b
     53  f80c		       29 03		      AND	#AND_W3S0P2
     54  f80e		       85 8a		      STA	wall3a
     55  f810		       8a		      TXA
     56  f811		       29 30		      AND	#AND_W3S2P3
     57  f813		       85 a6		      STA	shadow3bb
     58  f815		       29 10		      AND	#AND_W3S1P3
     59  f817		       85 97		      STA	shadow3ba
     60  f819
      0  f819					      X_POS_LOS		; 41 cycles
      1  f819
      2  f819		       98		      TYA
      3  f81a		       18		      CLC
      4  f81b		       65 ad		      ADC	xLoss
      5  f81d		       38		      SEC
      6  f81e		       e5 ac		      SBC	xGain
      7  f820		       a8		      TAY
      8  f821
     62  f821		       b1 ba		      LDA	(mapPtr),Y
     63  f823		       aa		      TAX
     64  f824		       29 fc		      AND	#AND_W3S0P1
     65  f826		       05 8a		      ORA	wall3a
     66  f828		       85 8a		      STA	wall3a
     67  f82a		       8a		      TXA
     68  f82b		       29 03		      AND	#AND_W3S2P2
     69  f82d		       85 a5		      STA	shadow3ab
     70  f82f		       29 02		      AND	#AND_W3S1P2
     71  f831		       85 96		      STA	shadow3aa
     72  f833
      0  f833					      X_POS_LOS		; 35 cycles
      1  f833
      2  f833		       98		      TYA
      3  f834		       18		      CLC
      4  f835		       65 ad		      ADC	xLoss
      5  f837		       38		      SEC
      6  f838		       e5 ac		      SBC	xGain
      7  f83a		       a8		      TAY
      8  f83b
     74  f83b		       b1 ba		      LDA	(mapPtr),Y
     75  f83d		       29 c0		      AND	#AND_W3S2P1
     76  f83f		       05 a5		      ORA	shadow3ab
     77  f841		       85 a5		      STA	shadow3ab
     78  f843		       29 80		      AND	#AND_W3S1P1
     79  f845		       05 96		      ORA	shadow3aa
     80  f847		       85 96		      STA	shadow3aa
------- FILE walrend.asm
     12  f849
     13  f849		       85 02		      STA	WSYNC	; At the end, we've consumed 9 scanlines
------- FILE main.asm
------- FILE scrend.asm LEVEL 2 PASS 4
      0  f84b					      INCLUDE	"scrend.asm"
      1  f84b							; VePseu's screen renderer
      2  f84b
      3  f84b					      SUBROUTINE
      4  f84b
      5  f84b		       a2 00		      LDX	#INDEXINIT	; 2 cycles
      6  f84d
      7  f84d				   .loop		; Totals at 909 cycles
      8  f84d
      9  f84d		       b5 85		      LDA	wall2a,X	; Merge walls (12 cycles)
     10  f84f		       15 80		      ORA	wall1,X
     11  f851		       15 9b		      ORA	shadow1a,X
     12  f853		       55 9b		      EOR	shadow1a,X
     13  f855		       95 85		      STA	wall2a,X
     14  f857
     15  f857		       b5 91		      LDA	shadow2aa,X	; Merge A shadows (12 cycles)
     16  f859		       15 9b		      ORA	shadow1a,X
     17  f85b		       15 85		      ORA	wall2a,X
     18  f85d		       55 85		      EOR	wall2a,X
     19  f85f		       95 91		      STA	shadow2aa,X
     20  f861
     21  f861		       b5 a0		      LDA	shadow2ab,X	; Merge B shadows (12 cycles)
     22  f863		       15 9b		      ORA	shadow1a,X
     23  f865		       15 85		      ORA	wall2a,X
     24  f867		       55 85		      EOR	wall2a,X
     25  f869		       95 a0		      STA	shadow2ab,X
     26  f86b
     27  f86b		       e8		      INX		; Loop if we haven't rendered all the walls (6 or 7 cycles)
     28  f86c		       e0 0a		      CPX	#WALLCNT
     29  f86e		       d0 dd		      BNE	.loop
     30  f870
     31  f870		       a2 ff		      LDX	#FULLWALL
     32  f872
     33  f872		       8a		      TXA
     34  f873		       45 a5		      EOR	shadow3ab
     35  f875		       85 8f		      STA	wall4a
     36  f877
     37  f877		       8a		      TXA
     38  f878		       45 a6		      EOR	shadow3bb
     39  f87a		       85 90		      STA	wall4b
     40  f87c
     41  f87c		       85 02		      STA	WSYNC	; by the end of this we have used 14 scanlines
------- FILE main.asm
     45  f87e
     46  f87e
     47  f87e							; Tell the draw code to draw carl...
     48  f87e
     49  f87e		       a9 78		      LDA	#<carl
     50  f880		       85 bc		      STA	spriteAddrH
     51  f882		       a9 f6		      LDA	#>carl
     52  f884		       85 bd		      STA	spriteAddrL
     53  f886		       a9 0b		      LDA	#carlH
     54  f888		       85 be		      STA	spriteHeight
     55  f88a
     56  f88a		       a9 0e		      LDA	#14	; Color him...
     57  f88c		       85 06		      STA	COLUP0
     58  f88e
     59  f88e		       a6 bf		      LDX	spritePosY	; And roll him accross the screen for some reason
     60  f890		       e8		      INX
     61  f891							;STX spritePosY
     62  f891
     63  f891							; Pad!
     64  f891
      0  f891					      PAD	UPPAD_LIMIT + 2
      1  f891
      2  f891				   .SCANLINES SET	UPPAD_LIMIT + 2
      3  f891
      4  f891		       a2 11		      LDX	#.SCANLINES
      5  f893
      6  f893				   .loop
      7  f893		       85 02		      STA	WSYNC
      8  f895
      9  f895		       ca		      DEX
     10  f896		       d0 fb		      BNE	.loop
     11  f898
     66  f898
     67  f898							; Draw everything
     68  f898
------- FILE dispkern.asm LEVEL 2 PASS 4
      0  f898					      INCLUDE	"dispkern.asm"
      1  f898							; VePseu's display kernel
      2  f898
      3  f898		       4c 9b f8 	      JMP	drawStart
      4  f89b
      5  f89b							;			  FILE/SUBROUTINE NAMING SCHEME:
      6  f89b							;
      7  f89b							; dc_w1s1.asm
      8  f89b							; |   | |
      9  f89b							; |   | |- The shadow variant it draws (A or B, 1 or 2)
     10  f89b							; |   |
     11  f89b							; |   |- The wall it draws
     12  f89b							; |
     13  f89b							; |- Draw-code identifies
     14  f89b							;
     15  f89b							; See GLOSSARY.TXT for definitions of vague words
     16  f89b
     17  f89b				   drawStart
     18  f89b
     19  f89b		       a4 bf		      LDY	spritePosY	; The Y register is expected to hold the sprite's Y position
     20  f89d
     21  f89d							; Also note that if the sprite position = 0 then the sprite
     22  f89d							; will not be drawn
     23  f89d
     24  f89d
     25  f89d		       b8		      CLV		; The overflow flag is used to determine which half of the screen is
     26  f89e							; being drawn, allowing code to be easily re-used. This requires that
     27  f89e							; the overflow flag be set to zero at start, otherwise things won't turn
     28  f89e							; out so well...
     29  f89e
------- FILE drawCode/dc_w1s1.asm LEVEL 3 PASS 4
      0  f89e					      INCLUDE	"drawCode/dc_w1s1.asm"
      1  f89e							; The draw code for the 1st wall and shadow
      2  f89e
      3  f89e				   dc_w1s1    SUBROUTINE
      4  f89e
      5  f89e		       a2 00		      LDX	#INDEXINIT
      6  f8a0		       4c b0 f8 	      JMP	.loop
      7  f8a3
      8  f8a3				   .noSprite_1
      9  f8a3							; Depending on the location in the program the branch here might cross a
     10  f8a3							; page boundry, causing it to take an extra clock cycle. To choose the right
     11  f8a3							; delay simply check if the page number (the MSB of the address) is
     12  f8a3							; different between the branch and it's destination
     13  f8a3					      IF	>.branchPoint_1 == >.noSprite_1
      0  f8a3					      DELAY	11
      1  f8a3				   .CYCLES    SET	11
      2  f8a3
      3  f8a3					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8a3		       ea		      NOP
      5  f8a3				   .CYCLES    SET	.CYCLES - 2
      6  f8a4					      ENDIF
      7  f8a4
      8  f8a4					      IF	[.CYCLES - 2] / 5
      9  f8a4					      REPEAT	.CYCLES / 5
     10  f8a4		       e6 30		      INC	DUMP
     11  f8a6					      REPEND
     12  f8a6				   .CYCLES    SET	.CYCLES % 5
     13  f8a6					      ENDIF
     14  f8a6
     15  f8a6					      IF	.CYCLES % 3 == 1
     16  f8a6		       ea		      NOP
     17  f8a6				   .CYCLES    SET	.CYCLES - 2
     18  f8a7					      ENDIF
     19  f8a7
     20  f8a7				  -	      REPEAT	.CYCLES / 3
     21  f8a7				  -	      STA	DUMP
     22  f8a7					      REPEND
     23  f8a7
     24  f8a7				   .CYCLES    SET	.CYCLES % 3
     25  f8a7
     26  f8a7					      REPEAT	.CYCLES / 2
     27  f8a7		       ea		      NOP
     28  f8a8					      REPEND
     29  f8a8
     30  f8a8				   .CYCLES    SET	.CYCLES % 2
     31  f8a8
     32  f8a8				  -	      IF	.CYCLES
     33  f8a8				  -	      ERR
     34  f8a8					      ENDIF
     35  f8a8
     15  f8a8				  -	      ELSE
     16  f8a8				  -	      DELAY	10
     17  f8a8					      ENDIF
     18  f8a8		       4c c6 f8 	      JMP	.noSprite_ret
     19  f8ab
     20  f8ab				   .noSprite_2
     21  f8ab					      IF	>.branchPoint_2 == >.noSprite_2
      0  f8ab					      DELAY	4
      1  f8ab				   .CYCLES    SET	4
      2  f8ab
      3  f8ab				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8ab				  -	      NOP
      5  f8ab				  -.CYCLES    SET	.CYCLES - 2
      6  f8ab					      ENDIF
      7  f8ab
      8  f8ab				  -	      IF	[.CYCLES - 2] / 5
      9  f8ab				  -	      REPEAT	.CYCLES / 5
     10  f8ab				  -	      INC	DUMP
     11  f8ab				  -	      REPEND
     12  f8ab				  -.CYCLES    SET	.CYCLES % 5
     13  f8ab					      ENDIF
     14  f8ab
     15  f8ab					      IF	.CYCLES % 3 == 1
     16  f8ab		       ea		      NOP
     17  f8ab				   .CYCLES    SET	.CYCLES - 2
     18  f8ac					      ENDIF
     19  f8ac
     20  f8ac				  -	      REPEAT	.CYCLES / 3
     21  f8ac				  -	      STA	DUMP
     22  f8ac					      REPEND
     23  f8ac
     24  f8ac				   .CYCLES    SET	.CYCLES % 3
     25  f8ac
     26  f8ac					      REPEAT	.CYCLES / 2
     27  f8ac		       ea		      NOP
     28  f8ad					      REPEND
     29  f8ad
     30  f8ad				   .CYCLES    SET	.CYCLES % 2
     31  f8ad
     32  f8ad				  -	      IF	.CYCLES
     33  f8ad				  -	      ERR
     34  f8ad					      ENDIF
     35  f8ad
     23  f8ad				  -	      ELSE
     24  f8ad				  -	      DELAY	3
     25  f8ad					      ENDIF
     26  f8ad		       4c c6 f8 	      JMP	.noSprite_ret
     27  f8b0
     28  f8b0				   .loop
     29  f8b0		       a5 b4		      LDA	wallColour
     30  f8b2		       85 02		      STA	WSYNC
     31  f8b4		       85 08		      STA	COLUPF
     32  f8b6		       a5 80		      LDA	wall1
     33  f8b8		       85 0e		      STA	PF1
     34  f8ba		       98		      TYA
     35  f8bb
     36  f8bb		       f0 e6		      BEQ	.noSprite_1
     37  f8bd				   .branchPoint_1
     38  f8bd		       88		      DEY
     39  f8be		       c4 be		      CPY	spriteHeight
     40  f8c0
     41  f8c0		       b0 e9		      BCS	.noSprite_2
     42  f8c2				   .branchPoint_2
     43  f8c2		       b1 bc		      LDA	(sprite),Y
     44  f8c4		       85 1b		      STA	GRP0
     45  f8c6
     46  f8c6				   .noSprite_ret
     47  f8c6		       a5 80		      LDA	wall1
     48  f8c8		       85 0f		      STA	PF2
      0  f8ca					      DELAY	6
      1  f8ca				   .CYCLES    SET	6
      2  f8ca
      3  f8ca				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8ca				  -	      NOP
      5  f8ca				  -.CYCLES    SET	.CYCLES - 2
      6  f8ca					      ENDIF
      7  f8ca
      8  f8ca				  -	      IF	[.CYCLES - 2] / 5
      9  f8ca				  -	      REPEAT	.CYCLES / 5
     10  f8ca				  -	      INC	DUMP
     11  f8ca				  -	      REPEND
     12  f8ca				  -.CYCLES    SET	.CYCLES % 5
     13  f8ca					      ENDIF
     14  f8ca
     15  f8ca				  -	      IF	.CYCLES % 3 == 1
     16  f8ca				  -	      NOP
     17  f8ca				  -.CYCLES    SET	.CYCLES - 2
     18  f8ca					      ENDIF
     19  f8ca
     20  f8ca					      REPEAT	.CYCLES / 3
     21  f8ca		       85 30		      STA	DUMP
     20  f8ca					      REPEND
     21  f8cc		       85 30		      STA	DUMP
     22  f8ce					      REPEND
     23  f8ce
     24  f8ce				   .CYCLES    SET	.CYCLES % 3
     25  f8ce
     26  f8ce				  -	      REPEAT	.CYCLES / 2
     27  f8ce				  -	      NOP
     28  f8ce					      REPEND
     29  f8ce
     30  f8ce				   .CYCLES    SET	.CYCLES % 2
     31  f8ce
     32  f8ce				  -	      IF	.CYCLES
     33  f8ce				  -	      ERR
     34  f8ce					      ENDIF
     35  f8ce
     50  f8ce		       85 0d		      STA	PF0
      0  f8d0					      DELAY	19
      1  f8d0				   .CYCLES    SET	19
      2  f8d0
      3  f8d0				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8d0				  -	      NOP
      5  f8d0				  -.CYCLES    SET	.CYCLES - 2
      6  f8d0					      ENDIF
      7  f8d0
      8  f8d0					      IF	[.CYCLES - 2] / 5
      9  f8d0					      REPEAT	.CYCLES / 5
     10  f8d0		       e6 30		      INC	DUMP
      9  f8d0					      REPEND
     10  f8d2		       e6 30		      INC	DUMP
      9  f8d2					      REPEND
     10  f8d4		       e6 30		      INC	DUMP
     11  f8d6					      REPEND
     12  f8d6				   .CYCLES    SET	.CYCLES % 5
     13  f8d6					      ENDIF
     14  f8d6
     15  f8d6					      IF	.CYCLES % 3 == 1
     16  f8d6		       ea		      NOP
     17  f8d6				   .CYCLES    SET	.CYCLES - 2
     18  f8d7					      ENDIF
     19  f8d7
     20  f8d7				  -	      REPEAT	.CYCLES / 3
     21  f8d7				  -	      STA	DUMP
     22  f8d7					      REPEND
     23  f8d7
     24  f8d7				   .CYCLES    SET	.CYCLES % 3
     25  f8d7
     26  f8d7					      REPEAT	.CYCLES / 2
     27  f8d7		       ea		      NOP
     28  f8d8					      REPEND
     29  f8d8
     30  f8d8				   .CYCLES    SET	.CYCLES % 2
     31  f8d8
     32  f8d8				  -	      IF	.CYCLES
     33  f8d8				  -	      ERR
     34  f8d8					      ENDIF
     35  f8d8
     52  f8d8		       a9 00		      LDA	#NULL
     53  f8da		       85 0f		      STA	PF2
     54  f8dc		       85 0d		      STA	PF0
     55  f8de
     56  f8de		       85 02		      STA	WSYNC
     57  f8e0		       a5 b5		      LDA	shadowColour
     58  f8e2		       85 08		      STA	COLUPF
     59  f8e4		       a5 9b		      LDA	shadow1a
     60  f8e6		       3d 00 f6 	      AND	and_1a,X
     61  f8e9		       85 0e		      STA	PF1
     62  f8eb		       a5 9c		      LDA	shadow1b
     63  f8ed		       3d 1e f6 	      AND	and_1b,X
     64  f8f0		       85 0f		      STA	PF2
      0  f8f2					      DELAY	9
      1  f8f2				   .CYCLES    SET	9
      2  f8f2
      3  f8f2				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f8f2				  -	      NOP
      5  f8f2				  -.CYCLES    SET	.CYCLES - 2
      6  f8f2					      ENDIF
      7  f8f2
      8  f8f2					      IF	[.CYCLES - 2] / 5
      9  f8f2					      REPEAT	.CYCLES / 5
     10  f8f2		       e6 30		      INC	DUMP
     11  f8f4					      REPEND
     12  f8f4				   .CYCLES    SET	.CYCLES % 5
     13  f8f4					      ENDIF
     14  f8f4
     15  f8f4					      IF	.CYCLES % 3 == 1
     16  f8f4		       ea		      NOP
     17  f8f4				   .CYCLES    SET	.CYCLES - 2
     18  f8f5					      ENDIF
     19  f8f5
     20  f8f5				  -	      REPEAT	.CYCLES / 3
     21  f8f5				  -	      STA	DUMP
     22  f8f5					      REPEND
     23  f8f5
     24  f8f5				   .CYCLES    SET	.CYCLES % 3
     25  f8f5
     26  f8f5					      REPEAT	.CYCLES / 2
     27  f8f5		       ea		      NOP
     28  f8f6					      REPEND
     29  f8f6
     30  f8f6				   .CYCLES    SET	.CYCLES % 2
     31  f8f6
     32  f8f6				  -	      IF	.CYCLES
     33  f8f6				  -	      ERR
     34  f8f6					      ENDIF
     35  f8f6
     66  f8f6		       a5 9e		      LDA	shadow1d
     67  f8f8		       3d 3c f6 	      AND	and_1c,X
     68  f8fb		       85 0e		      STA	PF1
     69  f8fd		       a5 9f		      LDA	shadow1e
     70  f8ff		       3d 5a f6 	      AND	and_1d,X
     71  f902		       85 0f		      STA	PF2
     72  f904
     73  f904		       e8		      INX
     74  f905		       e0 1e		      CPX	#UPPRWALL_S
     75  f907		       d0 a7		      BNE	.loop
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s1.asm LEVEL 3 PASS 4
      0  f909					      INCLUDE	"drawCode/dc_w2s1.asm"
      1  f909							; The second wall and it's first shadow
      2  f909
      3  f909				   dc_w2s1    SUBROUTINE
      4  f909
      5  f909		       a2 03		      LDX	#PIXH
      6  f90b		       4c 1b f9 	      JMP	.loop
      7  f90e
      8  f90e				   .noSprite_1
      9  f90e					      IF	>.branchPoint_1 == >.noSprite_1
      0  f90e					      DELAY	11
      1  f90e				   .CYCLES    SET	11
      2  f90e
      3  f90e					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f90e		       ea		      NOP
      5  f90e				   .CYCLES    SET	.CYCLES - 2
      6  f90f					      ENDIF
      7  f90f
      8  f90f					      IF	[.CYCLES - 2] / 5
      9  f90f					      REPEAT	.CYCLES / 5
     10  f90f		       e6 30		      INC	DUMP
     11  f911					      REPEND
     12  f911				   .CYCLES    SET	.CYCLES % 5
     13  f911					      ENDIF
     14  f911
     15  f911					      IF	.CYCLES % 3 == 1
     16  f911		       ea		      NOP
     17  f911				   .CYCLES    SET	.CYCLES - 2
     18  f912					      ENDIF
     19  f912
     20  f912				  -	      REPEAT	.CYCLES / 3
     21  f912				  -	      STA	DUMP
     22  f912					      REPEND
     23  f912
     24  f912				   .CYCLES    SET	.CYCLES % 3
     25  f912
     26  f912					      REPEAT	.CYCLES / 2
     27  f912		       ea		      NOP
     28  f913					      REPEND
     29  f913
     30  f913				   .CYCLES    SET	.CYCLES % 2
     31  f913
     32  f913				  -	      IF	.CYCLES
     33  f913				  -	      ERR
     34  f913					      ENDIF
     35  f913
     11  f913				  -	      ELSE
     12  f913				  -	      DELAY	10
     13  f913					      ENDIF
     14  f913		       4c 31 f9 	      JMP	.noSprite_ret
     15  f916
     16  f916				   .noSprite_2
     17  f916					      IF	>.branchPoint_2 == >.noSprite_2
      0  f916					      DELAY	4
      1  f916				   .CYCLES    SET	4
      2  f916
      3  f916				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f916				  -	      NOP
      5  f916				  -.CYCLES    SET	.CYCLES - 2
      6  f916					      ENDIF
      7  f916
      8  f916				  -	      IF	[.CYCLES - 2] / 5
      9  f916				  -	      REPEAT	.CYCLES / 5
     10  f916				  -	      INC	DUMP
     11  f916				  -	      REPEND
     12  f916				  -.CYCLES    SET	.CYCLES % 5
     13  f916					      ENDIF
     14  f916
     15  f916					      IF	.CYCLES % 3 == 1
     16  f916		       ea		      NOP
     17  f916				   .CYCLES    SET	.CYCLES - 2
     18  f917					      ENDIF
     19  f917
     20  f917				  -	      REPEAT	.CYCLES / 3
     21  f917				  -	      STA	DUMP
     22  f917					      REPEND
     23  f917
     24  f917				   .CYCLES    SET	.CYCLES % 3
     25  f917
     26  f917					      REPEAT	.CYCLES / 2
     27  f917		       ea		      NOP
     28  f918					      REPEND
     29  f918
     30  f918				   .CYCLES    SET	.CYCLES % 2
     31  f918
     32  f918				  -	      IF	.CYCLES
     33  f918				  -	      ERR
     34  f918					      ENDIF
     35  f918
     19  f918				  -	      ELSE
     20  f918				  -	      DELAY	3
     21  f918					      ENDIF
     22  f918		       4c 31 f9 	      JMP	.noSprite_ret
     23  f91b
     24  f91b				   .loop
     25  f91b		       a5 b4		      LDA	wallColour
     26  f91d		       85 02		      STA	WSYNC
     27  f91f				   .joinIn
     28  f91f		       85 08		      STA	COLUPF
     29  f921		       a5 85		      LDA	wall2a
     30  f923		       85 0e		      STA	PF1
     31  f925		       98		      TYA
     32  f926
     33  f926		       f0 e6		      BEQ	.noSprite_1
     34  f928				   .branchPoint_1
     35  f928		       88		      DEY
     36  f929		       c4 be		      CPY	spriteHeight
     37  f92b
     38  f92b		       b0 e9		      BCS	.noSprite_2
     39  f92d				   .branchPoint_2
     40  f92d		       b1 bc		      LDA	(sprite),Y
     41  f92f		       85 1b		      STA	GRP0
     42  f931
     43  f931				   .noSprite_ret
     44  f931		       a5 86		      LDA	wall2b
     45  f933		       85 0f		      STA	PF2
     46  f935
     47  f935		       a5 87		      LDA	wall2c
     48  f937		       85 0d		      STA	PF0
     49  f939		       a5 88		      LDA	wall2d
     50  f93b		       85 0e		      STA	PF1
     51  f93d		       a5 89		      LDA	wall2e
     52  f93f		       85 0f		      STA	PF2
     53  f941		       a9 00		      LDA	#NULL
      0  f943					      DELAY	10
      1  f943				   .CYCLES    SET	10
      2  f943
      3  f943				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f943				  -	      NOP
      5  f943				  -.CYCLES    SET	.CYCLES - 2
      6  f943					      ENDIF
      7  f943
      8  f943					      IF	[.CYCLES - 2] / 5
      9  f943					      REPEAT	.CYCLES / 5
     10  f943		       e6 30		      INC	DUMP
      9  f943					      REPEND
     10  f945		       e6 30		      INC	DUMP
     11  f947					      REPEND
     12  f947				   .CYCLES    SET	.CYCLES % 5
     13  f947					      ENDIF
     14  f947
     15  f947				  -	      IF	.CYCLES % 3 == 1
     16  f947				  -	      NOP
     17  f947				  -.CYCLES    SET	.CYCLES - 2
     18  f947					      ENDIF
     19  f947
     20  f947				  -	      REPEAT	.CYCLES / 3
     21  f947				  -	      STA	DUMP
     22  f947					      REPEND
     23  f947
     24  f947				   .CYCLES    SET	.CYCLES % 3
     25  f947
     26  f947				  -	      REPEAT	.CYCLES / 2
     27  f947				  -	      NOP
     28  f947					      REPEND
     29  f947
     30  f947				   .CYCLES    SET	.CYCLES % 2
     31  f947
     32  f947				  -	      IF	.CYCLES
     33  f947				  -	      ERR
     34  f947					      ENDIF
     35  f947
     55  f947		       85 0f		      STA	PF2
     56  f949		       85 0d		      STA	PF0
     57  f94b
     58  f94b		       85 02		      STA	WSYNC	; Draw the shadow
     59  f94d		       a5 b5		      LDA	shadowColour
     60  f94f		       85 08		      STA	COLUPF
     61  f951		       a5 91		      LDA	shadow2aa
     62  f953		       05 9b		      ORA	shadow1a
     63  f955		       85 0e		      STA	PF1
     64  f957		       a5 92		      LDA	shadow2ba
     65  f959		       05 9c		      ORA	shadow1b
     66  f95b		       85 0f		      STA	PF2
     67  f95d		       a5 93		      LDA	shadow2ca
     68  f95f		       85 0d		      STA	PF0
     69  f961		       a5 94		      LDA	shadow2da
     70  f963		       05 9e		      ORA	shadow1d
     71  f965		       85 0e		      STA	PF1
     72  f967		       a5 95		      LDA	shadow2ea
     73  f969		       05 9f		      ORA	shadow1e
     74  f96b		       85 0f		      STA	PF2
     75  f96d		       a9 00		      LDA	#NULL
     76  f96f		       85 0d		      STA	PF0
     77  f971
     78  f971		       ca		      DEX
     79  f972		       d0 a7		      BNE	.loop
     80  f974
     81  f974		       50 03		      BVC	dc_w2s2_delayed
     82  f976		       4c 3f fb 	      JMP	dc_w1s2
------- FILE dispkern.asm
------- FILE drawCode/dc_w2s2.asm LEVEL 3 PASS 4
      0  f979					      INCLUDE	"drawCode/dc_w2s2.asm"
      1  f979							; The second wall and it's second shadow
      2  f979
      3  f979				   dc_w2s2_delayed
      0  f979					      DELAY	2
      1  f979				   .CYCLES    SET	2
      2  f979
      3  f979				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f979				  -	      NOP
      5  f979				  -.CYCLES    SET	.CYCLES - 2
      6  f979					      ENDIF
      7  f979
      8  f979				  -	      IF	[.CYCLES - 2] / 5
      9  f979				  -	      REPEAT	.CYCLES / 5
     10  f979				  -	      INC	DUMP
     11  f979				  -	      REPEND
     12  f979				  -.CYCLES    SET	.CYCLES % 5
     13  f979					      ENDIF
     14  f979
     15  f979				  -	      IF	.CYCLES % 3 == 1
     16  f979				  -	      NOP
     17  f979				  -.CYCLES    SET	.CYCLES - 2
     18  f979					      ENDIF
     19  f979
     20  f979				  -	      REPEAT	.CYCLES / 3
     21  f979				  -	      STA	DUMP
     22  f979					      REPEND
     23  f979
     24  f979				   .CYCLES    SET	.CYCLES % 3
     25  f979
     26  f979					      REPEAT	.CYCLES / 2
     27  f979		       ea		      NOP
     28  f97a					      REPEND
     29  f97a
     30  f97a				   .CYCLES    SET	.CYCLES % 2
     31  f97a
     32  f97a				  -	      IF	.CYCLES
     33  f97a				  -	      ERR
     34  f97a					      ENDIF
     35  f97a
      5  f97a				   dc_w2s2    SUBROUTINE
      6  f97a
      7  f97a		       a2 03		      LDX	#PIXH
      8  f97c
      9  f97c				   .loop
     10  f97c		       a5 b4		      LDA	wallColour
     11  f97e		       85 02		      STA	WSYNC
     12  f980		       85 08		      STA	COLUPF
     13  f982		       a5 85		      LDA	wall2a
     14  f984		       85 0e		      STA	PF1
     15  f986		       98		      TYA
     16  f987
     17  f987		       f0 51		      BEQ	.noSprite_1
     18  f989				   .branchPoint_1
     19  f989		       88		      DEY
     20  f98a		       c4 be		      CPY	spriteHeight
     21  f98c
     22  f98c		       b0 54		      BCS	.noSprite_2
     23  f98e				   .branchPoint_2
     24  f98e		       b1 bc		      LDA	(sprite),Y
     25  f990		       85 1b		      STA	GRP0
     26  f992
     27  f992				   .noSprite_ret
     28  f992		       a5 86		      LDA	wall2b
     29  f994		       85 0f		      STA	PF2
     30  f996
     31  f996		       a5 87		      LDA	wall2c
     32  f998		       85 0d		      STA	PF0
     33  f99a		       a5 88		      LDA	wall2d
     34  f99c		       85 0e		      STA	PF1
     35  f99e		       a5 89		      LDA	wall2e
     36  f9a0		       85 0f		      STA	PF2
     37  f9a2		       a9 00		      LDA	#NULL
      0  f9a4					      DELAY	10
      1  f9a4				   .CYCLES    SET	10
      2  f9a4
      3  f9a4				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9a4				  -	      NOP
      5  f9a4				  -.CYCLES    SET	.CYCLES - 2
      6  f9a4					      ENDIF
      7  f9a4
      8  f9a4					      IF	[.CYCLES - 2] / 5
      9  f9a4					      REPEAT	.CYCLES / 5
     10  f9a4		       e6 30		      INC	DUMP
      9  f9a4					      REPEND
     10  f9a6		       e6 30		      INC	DUMP
     11  f9a8					      REPEND
     12  f9a8				   .CYCLES    SET	.CYCLES % 5
     13  f9a8					      ENDIF
     14  f9a8
     15  f9a8				  -	      IF	.CYCLES % 3 == 1
     16  f9a8				  -	      NOP
     17  f9a8				  -.CYCLES    SET	.CYCLES - 2
     18  f9a8					      ENDIF
     19  f9a8
     20  f9a8				  -	      REPEAT	.CYCLES / 3
     21  f9a8				  -	      STA	DUMP
     22  f9a8					      REPEND
     23  f9a8
     24  f9a8				   .CYCLES    SET	.CYCLES % 3
     25  f9a8
     26  f9a8				  -	      REPEAT	.CYCLES / 2
     27  f9a8				  -	      NOP
     28  f9a8					      REPEND
     29  f9a8
     30  f9a8				   .CYCLES    SET	.CYCLES % 2
     31  f9a8
     32  f9a8				  -	      IF	.CYCLES
     33  f9a8				  -	      ERR
     34  f9a8					      ENDIF
     35  f9a8
     39  f9a8		       85 0f		      STA	PF2
     40  f9aa		       85 0d		      STA	PF0
     41  f9ac
     42  f9ac		       85 02		      STA	WSYNC	; Draw the shadow
     43  f9ae		       a5 b5		      LDA	shadowColour
     44  f9b0		       85 08		      STA	COLUPF
     45  f9b2		       a5 a0		      LDA	shadow2ab
     46  f9b4		       05 9b		      ORA	shadow1a
     47  f9b6		       85 0e		      STA	PF1
     48  f9b8		       a5 a1		      LDA	shadow2bb
     49  f9ba		       05 9c		      ORA	shadow1b
     50  f9bc		       85 0f		      STA	PF2
     51  f9be		       a5 a2		      LDA	shadow2cb
     52  f9c0		       85 0d		      STA	PF0
     53  f9c2		       a5 a3		      LDA	shadow2db
     54  f9c4		       05 9e		      ORA	shadow1d
     55  f9c6		       85 0e		      STA	PF1
     56  f9c8		       a5 a4		      LDA	shadow2eb
     57  f9ca		       05 9f		      ORA	shadow1e
     58  f9cc		       85 0f		      STA	PF2
     59  f9ce		       a9 00		      LDA	#NULL
     60  f9d0		       85 0d		      STA	PF0
     61  f9d2
     62  f9d2		       ca		      DEX
     63  f9d3		       d0 a7		      BNE	.loop
     64  f9d5
     65  f9d5		       50 10		      BVC	dc_w3s1_delayed
     66  f9d7		       4c 09 f9 	      JMP	dc_w2s1
     67  f9da
     68  f9da				   .noSprite_1
     69  f9da					      IF	>.branchPoint_1 == >.noSprite_1
      0  f9da					      DELAY	11
      1  f9da				   .CYCLES    SET	11
      2  f9da
      3  f9da					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9da		       ea		      NOP
      5  f9da				   .CYCLES    SET	.CYCLES - 2
      6  f9db					      ENDIF
      7  f9db
      8  f9db					      IF	[.CYCLES - 2] / 5
      9  f9db					      REPEAT	.CYCLES / 5
     10  f9db		       e6 30		      INC	DUMP
     11  f9dd					      REPEND
     12  f9dd				   .CYCLES    SET	.CYCLES % 5
     13  f9dd					      ENDIF
     14  f9dd
     15  f9dd					      IF	.CYCLES % 3 == 1
     16  f9dd		       ea		      NOP
     17  f9dd				   .CYCLES    SET	.CYCLES - 2
     18  f9de					      ENDIF
     19  f9de
     20  f9de				  -	      REPEAT	.CYCLES / 3
     21  f9de				  -	      STA	DUMP
     22  f9de					      REPEND
     23  f9de
     24  f9de				   .CYCLES    SET	.CYCLES % 3
     25  f9de
     26  f9de					      REPEAT	.CYCLES / 2
     27  f9de		       ea		      NOP
     28  f9df					      REPEND
     29  f9df
     30  f9df				   .CYCLES    SET	.CYCLES % 2
     31  f9df
     32  f9df				  -	      IF	.CYCLES
     33  f9df				  -	      ERR
     34  f9df					      ENDIF
     35  f9df
     71  f9df				  -	      ELSE
     72  f9df				  -	      DELAY	10
     73  f9df					      ENDIF
     74  f9df		       4c 92 f9 	      JMP	.noSprite_ret
     75  f9e2
     76  f9e2				   .noSprite_2
     77  f9e2					      IF	>.branchPoint_2 == >.noSprite_2
      0  f9e2					      DELAY	4
      1  f9e2				   .CYCLES    SET	4
      2  f9e2
      3  f9e2				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9e2				  -	      NOP
      5  f9e2				  -.CYCLES    SET	.CYCLES - 2
      6  f9e2					      ENDIF
      7  f9e2
      8  f9e2				  -	      IF	[.CYCLES - 2] / 5
      9  f9e2				  -	      REPEAT	.CYCLES / 5
     10  f9e2				  -	      INC	DUMP
     11  f9e2				  -	      REPEND
     12  f9e2				  -.CYCLES    SET	.CYCLES % 5
     13  f9e2					      ENDIF
     14  f9e2
     15  f9e2					      IF	.CYCLES % 3 == 1
     16  f9e2		       ea		      NOP
     17  f9e2				   .CYCLES    SET	.CYCLES - 2
     18  f9e3					      ENDIF
     19  f9e3
     20  f9e3				  -	      REPEAT	.CYCLES / 3
     21  f9e3				  -	      STA	DUMP
     22  f9e3					      REPEND
     23  f9e3
     24  f9e3				   .CYCLES    SET	.CYCLES % 3
     25  f9e3
     26  f9e3					      REPEAT	.CYCLES / 2
     27  f9e3		       ea		      NOP
     28  f9e4					      REPEND
     29  f9e4
     30  f9e4				   .CYCLES    SET	.CYCLES % 2
     31  f9e4
     32  f9e4				  -	      IF	.CYCLES
     33  f9e4				  -	      ERR
     34  f9e4					      ENDIF
     35  f9e4
     79  f9e4				  -	      ELSE
     80  f9e4				  -	      DELAY	3
     81  f9e4					      ENDIF
     82  f9e4		       4c 92 f9 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s1.asm LEVEL 3 PASS 4
      0  f9e7					      INCLUDE	"drawCode/dc_w3s1.asm"
      1  f9e7							; The third wall and it's first shadow
      2  f9e7							; See GLOSSARY.TXT for definitions of vague words
      3  f9e7
      4  f9e7				   dc_w3s1_delayed
      0  f9e7					      DELAY	2
      1  f9e7				   .CYCLES    SET	2
      2  f9e7
      3  f9e7				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  f9e7				  -	      NOP
      5  f9e7				  -.CYCLES    SET	.CYCLES - 2
      6  f9e7					      ENDIF
      7  f9e7
      8  f9e7				  -	      IF	[.CYCLES - 2] / 5
      9  f9e7				  -	      REPEAT	.CYCLES / 5
     10  f9e7				  -	      INC	DUMP
     11  f9e7				  -	      REPEND
     12  f9e7				  -.CYCLES    SET	.CYCLES % 5
     13  f9e7					      ENDIF
     14  f9e7
     15  f9e7				  -	      IF	.CYCLES % 3 == 1
     16  f9e7				  -	      NOP
     17  f9e7				  -.CYCLES    SET	.CYCLES - 2
     18  f9e7					      ENDIF
     19  f9e7
     20  f9e7				  -	      REPEAT	.CYCLES / 3
     21  f9e7				  -	      STA	DUMP
     22  f9e7					      REPEND
     23  f9e7
     24  f9e7				   .CYCLES    SET	.CYCLES % 3
     25  f9e7
     26  f9e7					      REPEAT	.CYCLES / 2
     27  f9e7		       ea		      NOP
     28  f9e8					      REPEND
     29  f9e8
     30  f9e8				   .CYCLES    SET	.CYCLES % 2
     31  f9e8
     32  f9e8				  -	      IF	.CYCLES
     33  f9e8				  -	      ERR
     34  f9e8					      ENDIF
     35  f9e8
      6  f9e8				   dc_w3s1    SUBROUTINE
      7  f9e8
      8  f9e8		       a2 03		      LDX	#PIXH
      9  f9ea
     10  f9ea				   .loop
     11  f9ea		       a5 b4		      LDA	wallColour
     12  f9ec		       85 02		      STA	WSYNC
     13  f9ee		       85 08		      STA	COLUPF
     14  f9f0		       a5 8a		      LDA	wall3a
     15  f9f2		       85 0e		      STA	PF1
     16  f9f4		       98		      TYA
     17  f9f5
     18  f9f5		       f0 53		      BEQ	.noSprite_1
     19  f9f7				   .branchPoint_1
     20  f9f7		       88		      DEY
     21  f9f8		       c4 be		      CPY	spriteHeight
     22  f9fa
     23  f9fa		       b0 55		      BCS	.noSprite_2
     24  f9fc				   .branchPoint_2
     25  f9fc		       b1 bc		      LDA	(sprite),Y
     26  f9fe		       85 1b		      STA	GRP0
     27  fa00
     28  fa00				   .noSprite_ret
     29  fa00		       a5 8b		      LDA	wall3b
     30  fa02		       85 0f		      STA	PF2
     31  fa04
     32  fa04		       a5 8c		      LDA	wall3c
     33  fa06		       85 0d		      STA	PF0
     34  fa08		       a5 8d		      LDA	wall3d
     35  fa0a		       85 0e		      STA	PF1
     36  fa0c		       a5 8e		      LDA	wall3e
     37  fa0e		       85 0f		      STA	PF2
     38  fa10		       a9 00		      LDA	#NULL
      0  fa12					      DELAY	10
      1  fa12				   .CYCLES    SET	10
      2  fa12
      3  fa12				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa12				  -	      NOP
      5  fa12				  -.CYCLES    SET	.CYCLES - 2
      6  fa12					      ENDIF
      7  fa12
      8  fa12					      IF	[.CYCLES - 2] / 5
      9  fa12					      REPEAT	.CYCLES / 5
     10  fa12		       e6 30		      INC	DUMP
      9  fa12					      REPEND
     10  fa14		       e6 30		      INC	DUMP
     11  fa16					      REPEND
     12  fa16				   .CYCLES    SET	.CYCLES % 5
     13  fa16					      ENDIF
     14  fa16
     15  fa16				  -	      IF	.CYCLES % 3 == 1
     16  fa16				  -	      NOP
     17  fa16				  -.CYCLES    SET	.CYCLES - 2
     18  fa16					      ENDIF
     19  fa16
     20  fa16				  -	      REPEAT	.CYCLES / 3
     21  fa16				  -	      STA	DUMP
     22  fa16					      REPEND
     23  fa16
     24  fa16				   .CYCLES    SET	.CYCLES % 3
     25  fa16
     26  fa16				  -	      REPEAT	.CYCLES / 2
     27  fa16				  -	      NOP
     28  fa16					      REPEND
     29  fa16
     30  fa16				   .CYCLES    SET	.CYCLES % 2
     31  fa16
     32  fa16				  -	      IF	.CYCLES
     33  fa16				  -	      ERR
     34  fa16					      ENDIF
     35  fa16
     40  fa16		       85 0f		      STA	PF2
     41  fa18		       85 0d		      STA	PF0
     42  fa1a
     43  fa1a		       85 02		      STA	WSYNC	; Draw the shadow
     44  fa1c		       a5 b5		      LDA	shadowColour
     45  fa1e		       85 08		      STA	COLUPF
     46  fa20		       a5 96		      LDA	shadow3aa
     47  fa22		       05 a0		      ORA	shadow2ab
     48  fa24		       85 0e		      STA	PF1
     49  fa26		       a5 97		      LDA	shadow3ba
     50  fa28		       05 a1		      ORA	shadow2bb
     51  fa2a		       85 0f		      STA	PF2
     52  fa2c		       a5 98		      LDA	shadow3ca
     53  fa2e		       05 a2		      ORA	shadow2cb
     54  fa30		       85 0d		      STA	PF0
     55  fa32		       a5 99		      LDA	shadow3da
     56  fa34		       05 a3		      ORA	shadow2db
     57  fa36		       85 0e		      STA	PF1
     58  fa38		       a5 9a		      LDA	shadow3ea
     59  fa3a		       05 a4		      ORA	shadow2eb
     60  fa3c		       85 0f		      STA	PF2
     61  fa3e		       a9 00		      LDA	#NULL
     62  fa40		       85 0d		      STA	PF0
     63  fa42
     64  fa42		       ca		      DEX
     65  fa43		       d0 a5		      BNE	.loop
     66  fa45
     67  fa45		       50 0f		      BVC	dc_w3s2_delayed
     68  fa47		       4c 7a f9 	      JMP	dc_w2s2
     69  fa4a
     70  fa4a				   .noSprite_1
     71  fa4a				  -	      IF	>.branchPoint_1 == >.noSprite_1
     72  fa4a				  -	      DELAY	11
     73  fa4a					      ELSE
      0  fa4a					      DELAY	10
      1  fa4a				   .CYCLES    SET	10
      2  fa4a
      3  fa4a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa4a				  -	      NOP
      5  fa4a				  -.CYCLES    SET	.CYCLES - 2
      6  fa4a					      ENDIF
      7  fa4a
      8  fa4a					      IF	[.CYCLES - 2] / 5
      9  fa4a					      REPEAT	.CYCLES / 5
     10  fa4a		       e6 30		      INC	DUMP
      9  fa4a					      REPEND
     10  fa4c		       e6 30		      INC	DUMP
     11  fa4e					      REPEND
     12  fa4e				   .CYCLES    SET	.CYCLES % 5
     13  fa4e					      ENDIF
     14  fa4e
     15  fa4e				  -	      IF	.CYCLES % 3 == 1
     16  fa4e				  -	      NOP
     17  fa4e				  -.CYCLES    SET	.CYCLES - 2
     18  fa4e					      ENDIF
     19  fa4e
     20  fa4e				  -	      REPEAT	.CYCLES / 3
     21  fa4e				  -	      STA	DUMP
     22  fa4e					      REPEND
     23  fa4e
     24  fa4e				   .CYCLES    SET	.CYCLES % 3
     25  fa4e
     26  fa4e				  -	      REPEAT	.CYCLES / 2
     27  fa4e				  -	      NOP
     28  fa4e					      REPEND
     29  fa4e
     30  fa4e				   .CYCLES    SET	.CYCLES % 2
     31  fa4e
     32  fa4e				  -	      IF	.CYCLES
     33  fa4e				  -	      ERR
     34  fa4e					      ENDIF
     35  fa4e
     75  fa4e					      ENDIF
     76  fa4e		       4c 00 fa 	      JMP	.noSprite_ret
     77  fa51
     78  fa51				   .noSprite_2
     79  fa51				  -	      IF	>.branchPoint_2 == >.noSprite_2
     80  fa51				  -	      DELAY	4
     81  fa51					      ELSE
      0  fa51					      DELAY	3
      1  fa51				   .CYCLES    SET	3
      2  fa51
      3  fa51				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa51				  -	      NOP
      5  fa51				  -.CYCLES    SET	.CYCLES - 2
      6  fa51					      ENDIF
      7  fa51
      8  fa51				  -	      IF	[.CYCLES - 2] / 5
      9  fa51				  -	      REPEAT	.CYCLES / 5
     10  fa51				  -	      INC	DUMP
     11  fa51				  -	      REPEND
     12  fa51				  -.CYCLES    SET	.CYCLES % 5
     13  fa51					      ENDIF
     14  fa51
     15  fa51				  -	      IF	.CYCLES % 3 == 1
     16  fa51				  -	      NOP
     17  fa51				  -.CYCLES    SET	.CYCLES - 2
     18  fa51					      ENDIF
     19  fa51
     20  fa51					      REPEAT	.CYCLES / 3
     21  fa51		       85 30		      STA	DUMP
     22  fa53					      REPEND
     23  fa53
     24  fa53				   .CYCLES    SET	.CYCLES % 3
     25  fa53
     26  fa53				  -	      REPEAT	.CYCLES / 2
     27  fa53				  -	      NOP
     28  fa53					      REPEND
     29  fa53
     30  fa53				   .CYCLES    SET	.CYCLES % 2
     31  fa53
     32  fa53				  -	      IF	.CYCLES
     33  fa53				  -	      ERR
     34  fa53					      ENDIF
     35  fa53
     83  fa53					      ENDIF
     84  fa53		       4c 00 fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w3s2.asm LEVEL 3 PASS 4
      0  fa56					      INCLUDE	"drawCode/dc_w3s2.asm"
      1  fa56							; The third wall and it's second shadow
      2  fa56							; See GLOSSARY.TXT for definitions of vague words
      3  fa56
      4  fa56				   dc_w3s2_delayed
      0  fa56					      DELAY	2
      1  fa56				   .CYCLES    SET	2
      2  fa56
      3  fa56				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa56				  -	      NOP
      5  fa56				  -.CYCLES    SET	.CYCLES - 2
      6  fa56					      ENDIF
      7  fa56
      8  fa56				  -	      IF	[.CYCLES - 2] / 5
      9  fa56				  -	      REPEAT	.CYCLES / 5
     10  fa56				  -	      INC	DUMP
     11  fa56				  -	      REPEND
     12  fa56				  -.CYCLES    SET	.CYCLES % 5
     13  fa56					      ENDIF
     14  fa56
     15  fa56				  -	      IF	.CYCLES % 3 == 1
     16  fa56				  -	      NOP
     17  fa56				  -.CYCLES    SET	.CYCLES - 2
     18  fa56					      ENDIF
     19  fa56
     20  fa56				  -	      REPEAT	.CYCLES / 3
     21  fa56				  -	      STA	DUMP
     22  fa56					      REPEND
     23  fa56
     24  fa56				   .CYCLES    SET	.CYCLES % 3
     25  fa56
     26  fa56					      REPEAT	.CYCLES / 2
     27  fa56		       ea		      NOP
     28  fa57					      REPEND
     29  fa57
     30  fa57				   .CYCLES    SET	.CYCLES % 2
     31  fa57
     32  fa57				  -	      IF	.CYCLES
     33  fa57				  -	      ERR
     34  fa57					      ENDIF
     35  fa57
      6  fa57				   dc_w3s2    SUBROUTINE
      7  fa57
      8  fa57		       a2 03		      LDX	#PIXH
      9  fa59
     10  fa59				   .loop
     11  fa59		       a5 b4		      LDA	wallColour
     12  fa5b		       85 02		      STA	WSYNC
     13  fa5d				   .joinIn
     14  fa5d		       85 08		      STA	COLUPF
     15  fa5f		       a5 8a		      LDA	wall3a
     16  fa61		       85 0e		      STA	PF1
     17  fa63		       98		      TYA
     18  fa64
     19  fa64		       f0 53		      BEQ	.noSprite_1
     20  fa66				   .branchPoint_1
     21  fa66		       88		      DEY
     22  fa67		       c4 be		      CPY	spriteHeight
     23  fa69
     24  fa69		       b0 56		      BCS	.noSprite_2
     25  fa6b				   .branchPoint_2
     26  fa6b		       b1 bc		      LDA	(sprite),Y
     27  fa6d		       85 1b		      STA	GRP0
     28  fa6f
     29  fa6f				   .noSprite_ret
     30  fa6f		       a5 8b		      LDA	wall3b
     31  fa71		       85 0f		      STA	PF2
     32  fa73
     33  fa73		       a5 8c		      LDA	wall3c
     34  fa75		       85 0d		      STA	PF0
     35  fa77		       a5 8d		      LDA	wall3d
     36  fa79		       85 0e		      STA	PF1
     37  fa7b		       a5 8e		      LDA	wall3e
     38  fa7d		       85 0f		      STA	PF2
     39  fa7f		       a9 00		      LDA	#NULL
      0  fa81					      DELAY	10
      1  fa81				   .CYCLES    SET	10
      2  fa81
      3  fa81				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fa81				  -	      NOP
      5  fa81				  -.CYCLES    SET	.CYCLES - 2
      6  fa81					      ENDIF
      7  fa81
      8  fa81					      IF	[.CYCLES - 2] / 5
      9  fa81					      REPEAT	.CYCLES / 5
     10  fa81		       e6 30		      INC	DUMP
      9  fa81					      REPEND
     10  fa83		       e6 30		      INC	DUMP
     11  fa85					      REPEND
     12  fa85				   .CYCLES    SET	.CYCLES % 5
     13  fa85					      ENDIF
     14  fa85
     15  fa85				  -	      IF	.CYCLES % 3 == 1
     16  fa85				  -	      NOP
     17  fa85				  -.CYCLES    SET	.CYCLES - 2
     18  fa85					      ENDIF
     19  fa85
     20  fa85				  -	      REPEAT	.CYCLES / 3
     21  fa85				  -	      STA	DUMP
     22  fa85					      REPEND
     23  fa85
     24  fa85				   .CYCLES    SET	.CYCLES % 3
     25  fa85
     26  fa85				  -	      REPEAT	.CYCLES / 2
     27  fa85				  -	      NOP
     28  fa85					      REPEND
     29  fa85
     30  fa85				   .CYCLES    SET	.CYCLES % 2
     31  fa85
     32  fa85				  -	      IF	.CYCLES
     33  fa85				  -	      ERR
     34  fa85					      ENDIF
     35  fa85
     41  fa85		       85 0f		      STA	PF2
     42  fa87		       85 0d		      STA	PF0
     43  fa89
     44  fa89		       85 02		      STA	WSYNC	; Draw the shadow
     45  fa8b		       a5 b5		      LDA	shadowColour
     46  fa8d		       85 08		      STA	COLUPF
     47  fa8f		       a5 a5		      LDA	shadow3ab
     48  fa91		       05 a0		      ORA	shadow2ab
     49  fa93		       85 0e		      STA	PF1
     50  fa95		       a5 a6		      LDA	shadow3bb
     51  fa97		       05 a1		      ORA	shadow2bb
     52  fa99		       85 0f		      STA	PF2
     53  fa9b		       a5 a7		      LDA	shadow3cb
     54  fa9d		       05 a2		      ORA	shadow2cb
     55  fa9f		       85 0d		      STA	PF0
     56  faa1		       a5 a8		      LDA	shadow3db
     57  faa3		       05 a3		      ORA	shadow2db
     58  faa5		       85 0e		      STA	PF1
     59  faa7		       a5 a9		      LDA	shadow3eb
     60  faa9		       05 a4		      ORA	shadow2eb
     61  faab		       85 0f		      STA	PF2
     62  faad		       a9 00		      LDA	#NULL
     63  faaf		       85 0d		      STA	PF0
     64  fab1
     65  fab1		       ca		      DEX
     66  fab2		       d0 a5		      BNE	.loop
     67  fab4
     68  fab4		       50 10		      BVC	dc_w4s0_delayed
     69  fab6		       4c e8 f9 	      JMP	dc_w3s1
     70  fab9
     71  fab9				   .noSprite_1
     72  fab9					      IF	>.branchPoint_1 == >.noSprite_1
      0  fab9					      DELAY	11
      1  fab9				   .CYCLES    SET	11
      2  fab9
      3  fab9					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fab9		       ea		      NOP
      5  fab9				   .CYCLES    SET	.CYCLES - 2
      6  faba					      ENDIF
      7  faba
      8  faba					      IF	[.CYCLES - 2] / 5
      9  faba					      REPEAT	.CYCLES / 5
     10  faba		       e6 30		      INC	DUMP
     11  fabc					      REPEND
     12  fabc				   .CYCLES    SET	.CYCLES % 5
     13  fabc					      ENDIF
     14  fabc
     15  fabc					      IF	.CYCLES % 3 == 1
     16  fabc		       ea		      NOP
     17  fabc				   .CYCLES    SET	.CYCLES - 2
     18  fabd					      ENDIF
     19  fabd
     20  fabd				  -	      REPEAT	.CYCLES / 3
     21  fabd				  -	      STA	DUMP
     22  fabd					      REPEND
     23  fabd
     24  fabd				   .CYCLES    SET	.CYCLES % 3
     25  fabd
     26  fabd					      REPEAT	.CYCLES / 2
     27  fabd		       ea		      NOP
     28  fabe					      REPEND
     29  fabe
     30  fabe				   .CYCLES    SET	.CYCLES % 2
     31  fabe
     32  fabe				  -	      IF	.CYCLES
     33  fabe				  -	      ERR
     34  fabe					      ENDIF
     35  fabe
     74  fabe				  -	      ELSE
     75  fabe				  -	      DELAY	10
     76  fabe					      ENDIF
     77  fabe		       4c 6f fa 	      JMP	.noSprite_ret
     78  fac1
     79  fac1				   .noSprite_2
     80  fac1
     81  fac1					      IF	>.branchPoint_2 == >.noSprite_2
      0  fac1					      DELAY	4
      1  fac1				   .CYCLES    SET	4
      2  fac1
      3  fac1				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fac1				  -	      NOP
      5  fac1				  -.CYCLES    SET	.CYCLES - 2
      6  fac1					      ENDIF
      7  fac1
      8  fac1				  -	      IF	[.CYCLES - 2] / 5
      9  fac1				  -	      REPEAT	.CYCLES / 5
     10  fac1				  -	      INC	DUMP
     11  fac1				  -	      REPEND
     12  fac1				  -.CYCLES    SET	.CYCLES % 5
     13  fac1					      ENDIF
     14  fac1
     15  fac1					      IF	.CYCLES % 3 == 1
     16  fac1		       ea		      NOP
     17  fac1				   .CYCLES    SET	.CYCLES - 2
     18  fac2					      ENDIF
     19  fac2
     20  fac2				  -	      REPEAT	.CYCLES / 3
     21  fac2				  -	      STA	DUMP
     22  fac2					      REPEND
     23  fac2
     24  fac2				   .CYCLES    SET	.CYCLES % 3
     25  fac2
     26  fac2					      REPEAT	.CYCLES / 2
     27  fac2		       ea		      NOP
     28  fac3					      REPEND
     29  fac3
     30  fac3				   .CYCLES    SET	.CYCLES % 2
     31  fac3
     32  fac3				  -	      IF	.CYCLES
     33  fac3				  -	      ERR
     34  fac3					      ENDIF
     35  fac3
     83  fac3				  -	      ELSE
     84  fac3				  -	      DELAY	3
     85  fac3					      ENDIF
     86  fac3		       4c 6f fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
------- FILE drawCode/dc_w4s0.asm LEVEL 3 PASS 4
      0  fac6					      INCLUDE	"drawCode/dc_w4s0.asm"
      1  fac6							; The fourth wall
      2  fac6
      3  fac6				   dc_w4s0_delayed
      4  fac6		       4c cd fa 	      JMP	dc_w4s0
      5  fac9
      6  fac9				   dc_w4s0_switch
      7  fac9		       a9 7f		      LDA	#$7F
      8  facb		       69 01		      ADC	#$01
      9  facd
     10  facd				   dc_w4s0    SUBROUTINE
     11  facd
     12  facd		       a2 03		      LDX	#PIXH
     13  facf
     14  facf				   .loop
     15  facf		       a5 b4		      LDA	wallColour
     16  fad1		       85 02		      STA	WSYNC
     17  fad3				   .joinIn
     18  fad3		       85 08		      STA	COLUPF
     19  fad5		       a5 8f		      LDA	wall4a
     20  fad7		       85 0e		      STA	PF1
     21  fad9		       98		      TYA
     22  fada
     23  fada		       f0 57		      BEQ	.noSprite_1
     24  fadc				   .branchPoint_1
     25  fadc		       88		      DEY
     26  fadd		       c4 be		      CPY	spriteHeight
     27  fadf
     28  fadf		       b0 59		      BCS	.noSprite_2
     29  fae1				   .branchPoint_2
     30  fae1		       b1 bc		      LDA	(sprite),Y
     31  fae3		       85 1b		      STA	GRP0
     32  fae5
     33  fae5				   .noSprite_ret
     34  fae5		       a5 90		      LDA	wall4b
     35  fae7		       85 0f		      STA	PF2
     36  fae9
     37  fae9		       a9 ff		      LDA	#FULLWALL
     38  faeb		       45 a7		      EOR	shadow3cb
     39  faed		       85 0d		      STA	PF0
     40  faef		       a9 ff		      LDA	#FULLWALL
     41  faf1		       45 a8		      EOR	shadow3db
     42  faf3		       85 0e		      STA	PF1
     43  faf5		       a9 ff		      LDA	#FULLWALL
     44  faf7		       45 a9		      EOR	shadow3eb
     45  faf9		       85 0f		      STA	PF2
     46  fafb		       a9 00		      LDA	#NULL
      0  fafd					      DELAY	4
      1  fafd				   .CYCLES    SET	4
      2  fafd
      3  fafd				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fafd				  -	      NOP
      5  fafd				  -.CYCLES    SET	.CYCLES - 2
      6  fafd					      ENDIF
      7  fafd
      8  fafd				  -	      IF	[.CYCLES - 2] / 5
      9  fafd				  -	      REPEAT	.CYCLES / 5
     10  fafd				  -	      INC	DUMP
     11  fafd				  -	      REPEND
     12  fafd				  -.CYCLES    SET	.CYCLES % 5
     13  fafd					      ENDIF
     14  fafd
     15  fafd					      IF	.CYCLES % 3 == 1
     16  fafd		       ea		      NOP
     17  fafd				   .CYCLES    SET	.CYCLES - 2
     18  fafe					      ENDIF
     19  fafe
     20  fafe				  -	      REPEAT	.CYCLES / 3
     21  fafe				  -	      STA	DUMP
     22  fafe					      REPEND
     23  fafe
     24  fafe				   .CYCLES    SET	.CYCLES % 3
     25  fafe
     26  fafe					      REPEAT	.CYCLES / 2
     27  fafe		       ea		      NOP
     28  faff					      REPEND
     29  faff
     30  faff				   .CYCLES    SET	.CYCLES % 2
     31  faff
     32  faff				  -	      IF	.CYCLES
     33  faff				  -	      ERR
     34  faff					      ENDIF
     35  faff
     48  faff		       85 0f		      STA	PF2
     49  fb01		       85 0d		      STA	PF0
     50  fb03
     51  fb03		       85 02		      STA	WSYNC	; Draw the shadow
     52  fb05		       a5 b5		      LDA	shadowColour
     53  fb07		       85 08		      STA	COLUPF
     54  fb09		       a5 a5		      LDA	shadow3ab
     55  fb0b		       05 a0		      ORA	shadow2ab
     56  fb0d		       85 0e		      STA	PF1
     57  fb0f		       a5 a6		      LDA	shadow3bb
     58  fb11		       05 a1		      ORA	shadow2bb
     59  fb13		       85 0f		      STA	PF2
     60  fb15		       a5 a7		      LDA	shadow3cb
     61  fb17		       05 a2		      ORA	shadow2cb
     62  fb19		       85 0d		      STA	PF0
     63  fb1b		       a5 a8		      LDA	shadow3db
     64  fb1d		       05 a3		      ORA	shadow2db
     65  fb1f		       85 0e		      STA	PF1
     66  fb21		       a5 a9		      LDA	shadow3eb
     67  fb23		       05 a4		      ORA	shadow2eb
     68  fb25		       85 0f		      STA	PF2
     69  fb27		       a9 00		      LDA	#NULL
     70  fb29		       85 0d		      STA	PF0
     71  fb2b
     72  fb2b		       ca		      DEX
     73  fb2c		       d0 a1		      BNE	.loop
     74  fb2e
     75  fb2e		       50 99		      BVC	dc_w4s0_switch
     76  fb30		       4c 57 fa 	      JMP	dc_w3s2
     77  fb33
     78  fb33				   .noSprite_1
     79  fb33				  -	      IF	>.branchPoint_1 == >.noSprite_1
     80  fb33				  -	      DELAY	11
     81  fb33					      ELSE
      0  fb33					      DELAY	10
      1  fb33				   .CYCLES    SET	10
      2  fb33
      3  fb33				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb33				  -	      NOP
      5  fb33				  -.CYCLES    SET	.CYCLES - 2
      6  fb33					      ENDIF
      7  fb33
      8  fb33					      IF	[.CYCLES - 2] / 5
      9  fb33					      REPEAT	.CYCLES / 5
     10  fb33		       e6 30		      INC	DUMP
      9  fb33					      REPEND
     10  fb35		       e6 30		      INC	DUMP
     11  fb37					      REPEND
     12  fb37				   .CYCLES    SET	.CYCLES % 5
     13  fb37					      ENDIF
     14  fb37
     15  fb37				  -	      IF	.CYCLES % 3 == 1
     16  fb37				  -	      NOP
     17  fb37				  -.CYCLES    SET	.CYCLES - 2
     18  fb37					      ENDIF
     19  fb37
     20  fb37				  -	      REPEAT	.CYCLES / 3
     21  fb37				  -	      STA	DUMP
     22  fb37					      REPEND
     23  fb37
     24  fb37				   .CYCLES    SET	.CYCLES % 3
     25  fb37
     26  fb37				  -	      REPEAT	.CYCLES / 2
     27  fb37				  -	      NOP
     28  fb37					      REPEND
     29  fb37
     30  fb37				   .CYCLES    SET	.CYCLES % 2
     31  fb37
     32  fb37				  -	      IF	.CYCLES
     33  fb37				  -	      ERR
     34  fb37					      ENDIF
     35  fb37
     83  fb37					      ENDIF
     84  fb37		       4c e5 fa 	      JMP	.noSprite_ret
     85  fb3a
     86  fb3a				   .noSprite_2
     87  fb3a				  -	      IF	>.branchPoint_2 == >.noSprite_2
     88  fb3a				  -	      DELAY	4
     89  fb3a					      ELSE
      0  fb3a					      DELAY	3
      1  fb3a				   .CYCLES    SET	3
      2  fb3a
      3  fb3a				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb3a				  -	      NOP
      5  fb3a				  -.CYCLES    SET	.CYCLES - 2
      6  fb3a					      ENDIF
      7  fb3a
      8  fb3a				  -	      IF	[.CYCLES - 2] / 5
      9  fb3a				  -	      REPEAT	.CYCLES / 5
     10  fb3a				  -	      INC	DUMP
     11  fb3a				  -	      REPEND
     12  fb3a				  -.CYCLES    SET	.CYCLES % 5
     13  fb3a					      ENDIF
     14  fb3a
     15  fb3a				  -	      IF	.CYCLES % 3 == 1
     16  fb3a				  -	      NOP
     17  fb3a				  -.CYCLES    SET	.CYCLES - 2
     18  fb3a					      ENDIF
     19  fb3a
     20  fb3a					      REPEAT	.CYCLES / 3
     21  fb3a		       85 30		      STA	DUMP
     22  fb3c					      REPEND
     23  fb3c
     24  fb3c				   .CYCLES    SET	.CYCLES % 3
     25  fb3c
     26  fb3c				  -	      REPEAT	.CYCLES / 2
     27  fb3c				  -	      NOP
     28  fb3c					      REPEND
     29  fb3c
     30  fb3c				   .CYCLES    SET	.CYCLES % 2
     31  fb3c
     32  fb3c				  -	      IF	.CYCLES
     33  fb3c				  -	      ERR
     34  fb3c					      ENDIF
     35  fb3c
     91  fb3c					      ENDIF
     92  fb3c		       4c e5 fa 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     36  fb3f
------- FILE drawCode/dc_w1s2.asm LEVEL 3 PASS 4
      0  fb3f					      INCLUDE	"drawCode/dc_w1s2.asm"
      1  fb3f							; The draw code for the 1st wall and  it's second shadow
      2  fb3f
      3  fb3f				   dc_w1s2    SUBROUTINE
      4  fb3f
      5  fb3f		       a2 1d		      LDX	#UPPRWALL_S - 1
      6  fb41
      7  fb41				   .loop
      8  fb41		       a5 b4		      LDA	wallColour
      9  fb43		       85 02		      STA	WSYNC
     10  fb45		       85 08		      STA	COLUPF
     11  fb47		       a5 80		      LDA	wall1
     12  fb49		       85 0e		      STA	PF1
     13  fb4b		       98		      TYA
     14  fb4c
     15  fb4c		       f0 53		      BEQ	.noSprite_1
     16  fb4e				   .branchPoint_1
     17  fb4e		       88		      DEY
     18  fb4f		       c4 be		      CPY	spriteHeight
     19  fb51
     20  fb51		       b0 56		      BCS	.noSprite_2
     21  fb53				   .branchPoint_2
     22  fb53		       b1 bc		      LDA	(sprite),Y
     23  fb55		       85 1b		      STA	GRP0
     24  fb57
     25  fb57				   .noSprite_ret
     26  fb57		       a5 80		      LDA	wall1
     27  fb59		       85 0f		      STA	PF2
      0  fb5b					      DELAY	6
      1  fb5b				   .CYCLES    SET	6
      2  fb5b
      3  fb5b				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb5b				  -	      NOP
      5  fb5b				  -.CYCLES    SET	.CYCLES - 2
      6  fb5b					      ENDIF
      7  fb5b
      8  fb5b				  -	      IF	[.CYCLES - 2] / 5
      9  fb5b				  -	      REPEAT	.CYCLES / 5
     10  fb5b				  -	      INC	DUMP
     11  fb5b				  -	      REPEND
     12  fb5b				  -.CYCLES    SET	.CYCLES % 5
     13  fb5b					      ENDIF
     14  fb5b
     15  fb5b				  -	      IF	.CYCLES % 3 == 1
     16  fb5b				  -	      NOP
     17  fb5b				  -.CYCLES    SET	.CYCLES - 2
     18  fb5b					      ENDIF
     19  fb5b
     20  fb5b					      REPEAT	.CYCLES / 3
     21  fb5b		       85 30		      STA	DUMP
     20  fb5b					      REPEND
     21  fb5d		       85 30		      STA	DUMP
     22  fb5f					      REPEND
     23  fb5f
     24  fb5f				   .CYCLES    SET	.CYCLES % 3
     25  fb5f
     26  fb5f				  -	      REPEAT	.CYCLES / 2
     27  fb5f				  -	      NOP
     28  fb5f					      REPEND
     29  fb5f
     30  fb5f				   .CYCLES    SET	.CYCLES % 2
     31  fb5f
     32  fb5f				  -	      IF	.CYCLES
     33  fb5f				  -	      ERR
     34  fb5f					      ENDIF
     35  fb5f
     29  fb5f		       85 0d		      STA	PF0
      0  fb61					      DELAY	19
      1  fb61				   .CYCLES    SET	19
      2  fb61
      3  fb61				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb61				  -	      NOP
      5  fb61				  -.CYCLES    SET	.CYCLES - 2
      6  fb61					      ENDIF
      7  fb61
      8  fb61					      IF	[.CYCLES - 2] / 5
      9  fb61					      REPEAT	.CYCLES / 5
     10  fb61		       e6 30		      INC	DUMP
      9  fb61					      REPEND
     10  fb63		       e6 30		      INC	DUMP
      9  fb63					      REPEND
     10  fb65		       e6 30		      INC	DUMP
     11  fb67					      REPEND
     12  fb67				   .CYCLES    SET	.CYCLES % 5
     13  fb67					      ENDIF
     14  fb67
     15  fb67					      IF	.CYCLES % 3 == 1
     16  fb67		       ea		      NOP
     17  fb67				   .CYCLES    SET	.CYCLES - 2
     18  fb68					      ENDIF
     19  fb68
     20  fb68				  -	      REPEAT	.CYCLES / 3
     21  fb68				  -	      STA	DUMP
     22  fb68					      REPEND
     23  fb68
     24  fb68				   .CYCLES    SET	.CYCLES % 3
     25  fb68
     26  fb68					      REPEAT	.CYCLES / 2
     27  fb68		       ea		      NOP
     28  fb69					      REPEND
     29  fb69
     30  fb69				   .CYCLES    SET	.CYCLES % 2
     31  fb69
     32  fb69				  -	      IF	.CYCLES
     33  fb69				  -	      ERR
     34  fb69					      ENDIF
     35  fb69
     31  fb69		       a9 00		      LDA	#NULL
     32  fb6b		       85 0f		      STA	PF2
     33  fb6d		       85 0d		      STA	PF0
     34  fb6f
     35  fb6f		       85 02		      STA	WSYNC
     36  fb71		       a5 b5		      LDA	shadowColour
     37  fb73		       85 08		      STA	COLUPF
     38  fb75		       a5 9b		      LDA	shadow1a
     39  fb77		       3d 00 f6 	      AND	and_1a,X
     40  fb7a		       85 0e		      STA	PF1
     41  fb7c		       a5 9c		      LDA	shadow1b
     42  fb7e		       3d 1e f6 	      AND	and_1b,X
     43  fb81		       85 0f		      STA	PF2
      0  fb83					      DELAY	9
      1  fb83				   .CYCLES    SET	9
      2  fb83
      3  fb83				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fb83				  -	      NOP
      5  fb83				  -.CYCLES    SET	.CYCLES - 2
      6  fb83					      ENDIF
      7  fb83
      8  fb83					      IF	[.CYCLES - 2] / 5
      9  fb83					      REPEAT	.CYCLES / 5
     10  fb83		       e6 30		      INC	DUMP
     11  fb85					      REPEND
     12  fb85				   .CYCLES    SET	.CYCLES % 5
     13  fb85					      ENDIF
     14  fb85
     15  fb85					      IF	.CYCLES % 3 == 1
     16  fb85		       ea		      NOP
     17  fb85				   .CYCLES    SET	.CYCLES - 2
     18  fb86					      ENDIF
     19  fb86
     20  fb86				  -	      REPEAT	.CYCLES / 3
     21  fb86				  -	      STA	DUMP
     22  fb86					      REPEND
     23  fb86
     24  fb86				   .CYCLES    SET	.CYCLES % 3
     25  fb86
     26  fb86					      REPEAT	.CYCLES / 2
     27  fb86		       ea		      NOP
     28  fb87					      REPEND
     29  fb87
     30  fb87				   .CYCLES    SET	.CYCLES % 2
     31  fb87
     32  fb87				  -	      IF	.CYCLES
     33  fb87				  -	      ERR
     34  fb87					      ENDIF
     35  fb87
     45  fb87		       a5 9e		      LDA	shadow1d
     46  fb89		       3d 3c f6 	      AND	and_1c,X
     47  fb8c		       85 0e		      STA	PF1
     48  fb8e		       a5 9f		      LDA	shadow1e
     49  fb90		       3d 5a f6 	      AND	and_1d,X
     50  fb93		       85 0f		      STA	PF2
     51  fb95
     52  fb95		       a9 00		      LDA	#NULL
     53  fb97		       85 1b		      STA	GRP0
     54  fb99
     55  fb99		       ca		      DEX
     56  fb9a		       e0 06		      CPX	#LOWRWALL_S
     57  fb9c		       d0 a3		      BNE	.loop
     58  fb9e
     59  fb9e		       4c ae fb 	      JMP	dc_wallsEnd
     60  fba1
     61  fba1				   .noSprite_1
     62  fba1					      IF	>.branchPoint_1 == >.noSprite_1
      0  fba1					      DELAY	11
      1  fba1				   .CYCLES    SET	11
      2  fba1
      3  fba1					      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fba1		       ea		      NOP
      5  fba1				   .CYCLES    SET	.CYCLES - 2
      6  fba2					      ENDIF
      7  fba2
      8  fba2					      IF	[.CYCLES - 2] / 5
      9  fba2					      REPEAT	.CYCLES / 5
     10  fba2		       e6 30		      INC	DUMP
     11  fba4					      REPEND
     12  fba4				   .CYCLES    SET	.CYCLES % 5
     13  fba4					      ENDIF
     14  fba4
     15  fba4					      IF	.CYCLES % 3 == 1
     16  fba4		       ea		      NOP
     17  fba4				   .CYCLES    SET	.CYCLES - 2
     18  fba5					      ENDIF
     19  fba5
     20  fba5				  -	      REPEAT	.CYCLES / 3
     21  fba5				  -	      STA	DUMP
     22  fba5					      REPEND
     23  fba5
     24  fba5				   .CYCLES    SET	.CYCLES % 3
     25  fba5
     26  fba5					      REPEAT	.CYCLES / 2
     27  fba5		       ea		      NOP
     28  fba6					      REPEND
     29  fba6
     30  fba6				   .CYCLES    SET	.CYCLES % 2
     31  fba6
     32  fba6				  -	      IF	.CYCLES
     33  fba6				  -	      ERR
     34  fba6					      ENDIF
     35  fba6
     64  fba6				  -	      ELSE
     65  fba6				  -	      DELAY	10
     66  fba6					      ENDIF
     67  fba6		       4c 57 fb 	      JMP	.noSprite_ret
     68  fba9
     69  fba9				   .noSprite_2
     70  fba9					      IF	>.branchPoint_2 == >.noSprite_2
      0  fba9					      DELAY	4
      1  fba9				   .CYCLES    SET	4
      2  fba9
      3  fba9				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fba9				  -	      NOP
      5  fba9				  -.CYCLES    SET	.CYCLES - 2
      6  fba9					      ENDIF
      7  fba9
      8  fba9				  -	      IF	[.CYCLES - 2] / 5
      9  fba9				  -	      REPEAT	.CYCLES / 5
     10  fba9				  -	      INC	DUMP
     11  fba9				  -	      REPEND
     12  fba9				  -.CYCLES    SET	.CYCLES % 5
     13  fba9					      ENDIF
     14  fba9
     15  fba9					      IF	.CYCLES % 3 == 1
     16  fba9		       ea		      NOP
     17  fba9				   .CYCLES    SET	.CYCLES - 2
     18  fbaa					      ENDIF
     19  fbaa
     20  fbaa				  -	      REPEAT	.CYCLES / 3
     21  fbaa				  -	      STA	DUMP
     22  fbaa					      REPEND
     23  fbaa
     24  fbaa				   .CYCLES    SET	.CYCLES % 3
     25  fbaa
     26  fbaa					      REPEAT	.CYCLES / 2
     27  fbaa		       ea		      NOP
     28  fbab					      REPEND
     29  fbab
     30  fbab				   .CYCLES    SET	.CYCLES % 2
     31  fbab
     32  fbab				  -	      IF	.CYCLES
     33  fbab				  -	      ERR
     34  fbab					      ENDIF
     35  fbab
     72  fbab				  -	      ELSE
     73  fbab				  -	      DELAY	3
     74  fbab					      ENDIF
     75  fbab		       4c 57 fb 	      JMP	.noSprite_ret
------- FILE dispkern.asm
     38  fbae
     39  fbae				   dc_wallsEnd		; once we've finished drawing the walls we draw the minimap ( or
     40  fbae							; hud, if that feature is added any time soon).
     41  fbae
     42  fbae		       b8		      CLV		; always best to leave the overflow flag at zero...
     43  fbaf
     44  fbaf		       a9 00		      LDA	#NULL	; Also nice to make sure the playfields are clear...
     45  fbb1		       85 0e		      STA	PF1
     46  fbb3		       85 0f		      STA	PF2
     47  fbb5
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 4
      0  fbb5					      INCLUDE	"drawCode/mmDraw.asm"
      1  fbb5							; Draws the compass to the screen
      2  fbb5							; See GLOSSARY.TXT for definitions of vague words
      3  fbb5
      4  fbb5				   mmDraw
      5  fbb5
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 4
      0  fbb5					      INCLUDE	"drawCode/mmRender.asm"
      1  fbb5							; Render the minimap
      2  fbb5
      3  fbb5				   mmRender   SUBROUTINE
      4  fbb5		       a9 00		      LDA	#NULL
      5  fbb7							; Set the colour of the player
      6  fbb7		       a9 cc		      LDA	#PLYRCOLU
      7  fbb9		       85 08		      STA	COLUPF
      8  fbbb							; Set the colour of the map
      9  fbbb		       a9 0e		      LDA	#MAPCOLU
     10  fbbd		       85 06		      STA	COLUP0
     11  fbbf		       85 07		      STA	COLUP1
     12  fbc1							; Get the player's position and translate it into horizontal movement
     13  fbc1		       a9 08		      LDA	#%00001000
     14  fbc3		       18		      CLC
     15  fbc4		       38		      SEC
     16  fbc5		       e5 aa		      SBC	playerPos
     17  fbc7		       0a		      ASL
     18  fbc8		       0a		      ASL
     19  fbc9		       0a		      ASL
     20  fbca		       0a		      ASL
     21  fbcb		       85 24		      STA	HMBL
     22  fbcd
     23  fbcd							; Set the map's position to the right values
     24  fbcd		       a9 00		      LDA	#HADJ_A
     25  fbcf		       85 20		      STA	HMP0
     26  fbd1		       a9 10		      LDA	#HADJ_B
     27  fbd3		       85 21		      STA	HMP1
     28  fbd5
     29  fbd5		       85 02		      STA	WSYNC
     30  fbd7		       a2 07		      LDX	#HWAIT
     31  fbd9
     32  fbd9				   .wait1
     33  fbd9		       ca		      DEX
     34  fbda		       d0 fd		      BNE	.wait1
      0  fbdc					      DELAY	HDELAY1
      1  fbdc				   .CYCLES    SET	HDELAY1
      2  fbdc
      3  fbdc				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbdc				  -	      NOP
      5  fbdc				  -.CYCLES    SET	.CYCLES - 2
      6  fbdc					      ENDIF
      7  fbdc
      8  fbdc				  -	      IF	[.CYCLES - 2] / 5
      9  fbdc				  -	      REPEAT	.CYCLES / 5
     10  fbdc				  -	      INC	DUMP
     11  fbdc				  -	      REPEND
     12  fbdc				  -.CYCLES    SET	.CYCLES % 5
     13  fbdc					      ENDIF
     14  fbdc
     15  fbdc				  -	      IF	.CYCLES % 3 == 1
     16  fbdc				  -	      NOP
     17  fbdc				  -.CYCLES    SET	.CYCLES - 2
     18  fbdc					      ENDIF
     19  fbdc
     20  fbdc					      REPEAT	.CYCLES / 3
     21  fbdc		       85 30		      STA	DUMP
     22  fbde					      REPEND
     23  fbde
     24  fbde				   .CYCLES    SET	.CYCLES % 3
     25  fbde
     26  fbde					      REPEAT	.CYCLES / 2
     27  fbde		       ea		      NOP
     28  fbdf					      REPEND
     29  fbdf
     30  fbdf				   .CYCLES    SET	.CYCLES % 2
     31  fbdf
     32  fbdf				  -	      IF	.CYCLES
     33  fbdf				  -	      ERR
     34  fbdf					      ENDIF
     35  fbdf
     36  fbdf		       85 10		      STA	RESP0
     37  fbe1		       85 11		      STA	RESP1
     38  fbe3
     39  fbe3		       a5 aa		      LDA	playerPos
     40  fbe5
     41  fbe5		       85 02		      STA	WSYNC
     42  fbe7		       a2 07		      LDX	#HWAIT
     43  fbe9
     44  fbe9				   .wait2
     45  fbe9		       ca		      DEX
     46  fbea		       d0 fd		      BNE	.wait2
      0  fbec					      DELAY	HDELAY2
      1  fbec				   .CYCLES    SET	HDELAY2
      2  fbec
      3  fbec				  -	      IF	.CYCLES % 5 == 1 && .CYCLES % 3
      4  fbec				  -	      NOP
      5  fbec				  -.CYCLES    SET	.CYCLES - 2
      6  fbec					      ENDIF
      7  fbec
      8  fbec					      IF	[.CYCLES - 2] / 5
      9  fbec					      REPEAT	.CYCLES / 5
     10  fbec		       e6 30		      INC	DUMP
     11  fbee					      REPEND
     12  fbee				   .CYCLES    SET	.CYCLES % 5
     13  fbee					      ENDIF
     14  fbee
     15  fbee				  -	      IF	.CYCLES % 3 == 1
     16  fbee				  -	      NOP
     17  fbee				  -.CYCLES    SET	.CYCLES - 2
     18  fbee					      ENDIF
     19  fbee
     20  fbee					      REPEAT	.CYCLES / 3
     21  fbee		       85 30		      STA	DUMP
     22  fbf0					      REPEND
     23  fbf0
     24  fbf0				   .CYCLES    SET	.CYCLES % 3
     25  fbf0
     26  fbf0				  -	      REPEAT	.CYCLES / 2
     27  fbf0				  -	      NOP
     28  fbf0					      REPEND
     29  fbf0
     30  fbf0				   .CYCLES    SET	.CYCLES % 2
     31  fbf0
     32  fbf0				  -	      IF	.CYCLES
     33  fbf0				  -	      ERR
     34  fbf0					      ENDIF
     35  fbf0
     48  fbf0		       85 14		      STA	RESBL
------- FILE drawCode/mmDraw.asm
      7  fbf2
      8  fbf2					      SUBROUTINE		; The preceeding code declares it's own subroutine
      9  fbf2
     10  fbf2		       a0 00		      LDY	#NULL
     11  fbf4		       84 1b		      STY	GRP0
     12  fbf6		       84 1c		      STY	GRP1
     13  fbf8		       84 02		      STY	WSYNC
     14  fbfa		       84 2a		      STY	HMOVE
     15  fbfc
     16  fbfc		       a6 aa		      LDX	playerPos
     17  fbfe
     18  fbfe				   .loop
     19  fbfe		       85 02		      STA	WSYNC
     20  fc00
     21  fc00		       b1 b8		      LDA	(miniMapPtr),Y
     22  fc02		       85 1b		      STA	GRP0
     23  fc04		       c8		      INY
     24  fc05		       b1 b8		      LDA	(miniMapPtr),Y
     25  fc07		       85 1c		      STA	GRP1
     26  fc09		       c8		      INY
     27  fc0a
     28  fc0a		       8a		      TXA
     29  fc0b		       38		      SEC
     30  fc0c		       e5 ab		      SBC	mapWidth
     31  fc0e		       aa		      TAX
     32  fc0f		       29 f0		      AND	#$F0
     33  fc11
     34  fc11		       d0 0a		      BNE	.noDraw
     35  fc13
     36  fc13		       a9 02		      LDA	#2
     37  fc15		       85 1f		      STA	ENABL
     38  fc17		       85 b6		      STA	drawingPlyr
     39  fc19		       a9 01		      LDA	#1
     40  fc1b		       85 27		      STA	VDELBL
     41  fc1d
     42  fc1d				   .noDraw
     43  fc1d
     44  fc1d		       a5 b6		      LDA	drawingPlyr
     45  fc1f		       85 1f		      STA	ENABL
     46  fc21		       a9 00		      LDA	#NULL
     47  fc23		       85 b6		      STA	drawingPlyr
     48  fc25		       c0 20		      CPY	#MMSIZE
     49  fc27		       d0 d5		      BNE	.loop
     50  fc29
     51  fc29		       a9 00		      LDA	#NULL
     52  fc2b		       85 1f		      STA	ENABL
     53  fc2d
     54  fc2d		       85 02		      STA	WSYNC
     55  fc2f
     56  fc2f		       a9 00		      LDA	#NULL
     57  fc31		       85 1b		      STA	GRP0
     58  fc33		       85 1c		      STA	GRP1
     59  fc35		       85 06		      STA	COLUP0
     60  fc37		       85 07		      STA	COLUP1
------- FILE dispkern.asm
------- FILE main.asm
     70  fc39
     71  fc39							; Start VBLANK
     72  fc39
     73  fc39		       a9 c2		      LDA	#VBLANK_SET
     74  fc3b		       85 01		      STA	VBLANK
     75  fc3d
     76  fc3d							; Make sounds 'n' stuff
     77  fc3d
------- FILE sound.asm LEVEL 2 PASS 4
      0  fc3d					      INCLUDE	"sound.asm"
      1  fc3d							; sounds.asm - makes sounds 'n' stuff
      2  fc3d
      3  fc3d					      SUBROUTINE
      4  fc3d
      5  fc3d		       a5 c0		      LDA	stepVol
      6  fc3f		       85 19		      STA	AUDV0
      7  fc41		       a5 c1		      LDA	stepSnd
      8  fc43		       85 15		      STA	AUDC0
      9  fc45		       a9 00		      LDA	#NULL
     10  fc47		       85 c0		      STA	stepVol
     11  fc49
------- FILE main.asm
     79  fc49
     80  fc49							; Process input
     81  fc49
------- FILE input.asm LEVEL 2 PASS 4
      0  fc49					      INCLUDE	"input.asm"
      1  fc49							; VePseu's controller input
      2  fc49
      3  fc49		       85 02		      STA	WSYNC
      4  fc4b
------- FILE ctrlCode/cin1.asm LEVEL 3 PASS 4
      0  fc4b					      INCLUDE	"ctrlCode/cin1.asm"
      1  fc4b					      SUBROUTINE
      2  fc4b
      3  fc4b		       ad 80 02 	      LDA	SWCHA
      4  fc4e		       29 10		      AND	#FFORD
      5  fc50		       d0 2a		      BNE	.noPress
      6  fc52
      7  fc52		       a5 aa		      LDA	playerPos
      8  fc54		       38		      SEC
      9  fc55		       e5 af		      SBC	yLoss
     10  fc57		       18		      CLC
     11  fc58		       65 ae		      ADC	yGain
     12  fc5a		       a8		      TAY
     13  fc5b
     14  fc5b		       b1 ba		      LDA	(mapPtr),Y
     15  fc5d		       d0 21		      BNE	.end
     16  fc5f
     17  fc5f		       a6 b0		      LDX	fordPressed
     18  fc61		       d0 13		      BNE	.wait
     19  fc63		       84 aa		      STY	playerPos
     20  fc65		       a9 0f		      LDA	#CWAITCNT
     21  fc67		       85 b0		      STA	fordPressed
     22  fc69
     23  fc69		       a9 07		      LDA	#PLAYER_STEPV
     24  fc6b		       05 c0		      ORA	stepVol
     25  fc6d		       85 c0		      STA	stepVol
     26  fc6f		       a9 02		      LDA	#PLAYER_STEPS
     27  fc71		       85 c1		      STA	stepSnd
     28  fc73
     29  fc73		       4c 80 fc 	      JMP	.end
     30  fc76
     31  fc76				   .wait
     32  fc76		       ca		      DEX
     33  fc77		       86 b0		      STX	fordPressed
     34  fc79		       4c 80 fc 	      JMP	.end
     35  fc7c
     36  fc7c				   .noPress
     37  fc7c		       a9 00		      LDA	#NULL
     38  fc7e		       85 b0		      STA	fordPressed
     39  fc80
     40  fc80				   .end
------- FILE input.asm
------- FILE ctrlCode/cin2.asm LEVEL 3 PASS 4
      0  fc80					      INCLUDE	"ctrlCode/cin2.asm"
      1  fc80					      SUBROUTINE
      2  fc80
      3  fc80		       85 02		      STA	WSYNC
      4  fc82		       ad 80 02 	      LDA	SWCHA
      5  fc85		       29 20		      AND	#FBACK
      6  fc87		       d0 2a		      BNE	.noPress
      7  fc89
      8  fc89		       a5 aa		      LDA	playerPos
      9  fc8b		       38		      SEC
     10  fc8c		       e5 ae		      SBC	yGain
     11  fc8e		       18		      CLC
     12  fc8f		       65 af		      ADC	yLoss
     13  fc91		       a8		      TAY
     14  fc92
     15  fc92		       b1 ba		      LDA	(mapPtr),Y
     16  fc94		       d0 21		      BNE	.end
     17  fc96
     18  fc96		       a6 b1		      LDX	backPressed
     19  fc98		       d0 13		      BNE	.wait
     20  fc9a
     21  fc9a		       84 aa		      STY	playerPos
     22  fc9c		       a9 0f		      LDA	#CWAITCNT
     23  fc9e		       85 b1		      STA	backPressed
     24  fca0
     25  fca0		       a9 07		      LDA	#PLAYER_STEPV
     26  fca2		       05 c0		      ORA	stepVol
     27  fca4		       85 c0		      STA	stepVol
     28  fca6		       a9 02		      LDA	#PLAYER_STEPS
     29  fca8		       85 c1		      STA	stepSnd
     30  fcaa
     31  fcaa		       4c b7 fc 	      JMP	.end
     32  fcad
     33  fcad				   .wait
     34  fcad		       ca		      DEX
     35  fcae		       86 b1		      STX	backPressed
     36  fcb0		       4c b7 fc 	      JMP	.end
     37  fcb3
     38  fcb3				   .noPress
     39  fcb3		       a9 00		      LDA	#NULL
     40  fcb5		       85 b1		      STA	backPressed
     41  fcb7
     42  fcb7				   .end
------- FILE input.asm
------- FILE ctrlCode/cin3.asm LEVEL 3 PASS 4
      0  fcb7					      INCLUDE	"ctrlCode/cin3.asm"
      1  fcb7					      SUBROUTINE
      2  fcb7
      3  fcb7		       85 02		      STA	WSYNC
      4  fcb9
      5  fcb9		       a6 b3		      LDX	rigtPressed
      6  fcbb		       d0 20		      BNE	.wait
      7  fcbd
      8  fcbd		       ad 80 02 	      LDA	SWCHA
      9  fcc0		       29 80		      AND	#FLEFT
     10  fcc2		       d0 1f		      BNE	.noPress
     11  fcc4
     12  fcc4		       a6 b7		      LDX	direction
     13  fcc6		       e8		      INX
     14  fcc7		       8a		      TXA
     15  fcc8		       29 03		      AND	#%11
     16  fcca
     17  fcca		       85 b7		      STA	direction
     18  fccc
     19  fccc		       a9 0f		      LDA	#CWAITCNT
     20  fcce		       85 b3		      STA	rigtPressed
     21  fcd0
     22  fcd0		       a9 07		      LDA	#PLAYER_STEPV
     23  fcd2		       05 c0		      ORA	stepVol
     24  fcd4		       85 c0		      STA	stepVol
     25  fcd6		       a9 06		      LDA	#PLAYER_TURNS
     26  fcd8		       85 c1		      STA	stepSnd
     27  fcda
     28  fcda		       4c e5 fc 	      JMP	.end
     29  fcdd
     30  fcdd				   .wait
     31  fcdd		       ca		      DEX
     32  fcde		       86 b3		      STX	rigtPressed
     33  fce0		       4c e5 fc 	      JMP	.end
     34  fce3
     35  fce3				   .noPress
     36  fce3		       86 b3		      STX	rigtPressed
     37  fce5
     38  fce5				   .end
------- FILE input.asm
------- FILE ctrlCode/cin4.asm LEVEL 3 PASS 4
      0  fce5					      INCLUDE	"ctrlCode/cin4.asm"
      1  fce5					      SUBROUTINE
      2  fce5
      3  fce5		       85 02		      STA	WSYNC
      4  fce7
      5  fce7		       a6 b2		      LDX	leftPressed
      6  fce9		       d0 20		      BNE	.wait
      7  fceb
      8  fceb		       ad 80 02 	      LDA	SWCHA
      9  fcee		       29 40		      AND	#FRIGT
     10  fcf0		       d0 1f		      BNE	.noPress
     11  fcf2
     12  fcf2		       a6 b7		      LDX	direction
     13  fcf4		       ca		      DEX
     14  fcf5		       8a		      TXA
     15  fcf6		       29 03		      AND	#%11
     16  fcf8
     17  fcf8		       85 b7		      STA	direction
     18  fcfa
     19  fcfa		       a9 0f		      LDA	#CWAITCNT
     20  fcfc		       85 b2		      STA	leftPressed
     21  fcfe
     22  fcfe		       a9 07		      LDA	#PLAYER_STEPV
     23  fd00		       05 c0		      ORA	stepVol
     24  fd02		       85 c0		      STA	stepVol
     25  fd04		       a9 06		      LDA	#PLAYER_TURNS
     26  fd06		       85 c1		      STA	stepSnd
     27  fd08
     28  fd08		       4c 13 fd 	      JMP	.end
     29  fd0b
     30  fd0b				   .wait
     31  fd0b		       ca		      DEX
     32  fd0c		       86 b2		      STX	leftPressed
     33  fd0e		       4c 13 fd 	      JMP	CDIR1
     34  fd11
     35  fd11				   .noPress
     36  fd11		       86 b2		      STX	leftPressed
     37  fd13
     38  fd13				   .end
------- FILE input.asm
      9  fd13
     10  fd13				   CDIR1
     11  fd13		       85 02		      STA	WSYNC
     12  fd15		       a5 b7		      LDA	direction
     13  fd17		       c9 00		      CMP	#DNORTH
     14  fd19		       d0 15		      BNE	CDIR2
     15  fd1b
     16  fd1b		       a9 86		      LDA	#WCOLU
     17  fd1d		       85 b4		      STA	wallColour
     18  fd1f		       a9 82		      LDA	#SCOLU
     19  fd21		       85 b5		      STA	shadowColour
     20  fd23
     21  fd23		       a5 ab		      LDA	mapWidth
     22  fd25		       85 af		      STA	yLoss
     23  fd27		       a2 01		      LDX	#ONE
     24  fd29		       86 ac		      STX	xGain
     25  fd2b		       ca		      DEX
     26  fd2c		       86 ae		      STX	yGain
     27  fd2e		       86 ad		      STX	xLoss
     28  fd30
     29  fd30				   CDIR2
     30  fd30		       a5 b7		      LDA	direction
     31  fd32		       c9 02		      CMP	#DSOUTH
     32  fd34		       d0 15		      BNE	CDIR3
     33  fd36
     34  fd36		       a9 86		      LDA	#WCOLU
     35  fd38		       85 b4		      STA	wallColour
     36  fd3a		       a9 82		      LDA	#SCOLU
     37  fd3c		       85 b5		      STA	shadowColour
     38  fd3e
     39  fd3e		       a5 ab		      LDA	mapWidth
     40  fd40		       85 ae		      STA	yGain
     41  fd42		       a2 01		      LDX	#ONE
     42  fd44		       86 ad		      STX	xLoss
     43  fd46		       ca		      DEX
     44  fd47		       86 af		      STX	yLoss
     45  fd49		       86 ac		      STX	xGain
     46  fd4b
     47  fd4b				   CDIR3
     48  fd4b		       a5 b7		      LDA	direction
     49  fd4d		       c9 01		      CMP	#DWEST
     50  fd4f		       d0 15		      BNE	CDIR4
     51  fd51
     52  fd51		       a9 82		      LDA	#SCOLU
     53  fd53		       85 b4		      STA	wallColour
     54  fd55		       a9 86		      LDA	#WCOLU
     55  fd57		       85 b5		      STA	shadowColour
     56  fd59
     57  fd59		       a5 ab		      LDA	mapWidth
     58  fd5b		       85 ac		      STA	xGain
     59  fd5d		       a2 01		      LDX	#ONE
     60  fd5f		       86 ae		      STX	yGain
     61  fd61		       ca		      DEX
     62  fd62		       86 af		      STX	yLoss
     63  fd64		       86 ad		      STX	xLoss
     64  fd66
     65  fd66				   CDIR4
     66  fd66		       a5 b7		      LDA	direction
     67  fd68		       c9 03		      CMP	#DEAST
     68  fd6a		       d0 15		      BNE	CEND
     69  fd6c
     70  fd6c		       a9 82		      LDA	#SCOLU
     71  fd6e		       85 b4		      STA	wallColour
     72  fd70		       a9 86		      LDA	#WCOLU
     73  fd72		       85 b5		      STA	shadowColour
     74  fd74
     75  fd74		       a5 ab		      LDA	mapWidth
     76  fd76		       85 ad		      STA	xLoss
     77  fd78		       a2 01		      LDX	#ONE
     78  fd7a		       86 af		      STX	yLoss
     79  fd7c		       ca		      DEX
     80  fd7d		       86 ae		      STX	yGain
     81  fd7f		       86 ac		      STX	xGain
     82  fd81
     83  fd81				   CEND
     84  fd81		       85 02		      STA	WSYNC
------- FILE main.asm
     83  fd83
     84  fd83							; Pad again!
     85  fd83
      0  fd83					      PAD	LOPAD_LIMIT
      1  fd83
      2  fd83				   .SCANLINES SET	LOPAD_LIMIT
      3  fd83
      4  fd83		       a2 1c		      LDX	#.SCANLINES
      5  fd85
      6  fd85				   .loop
      7  fd85		       85 02		      STA	WSYNC
      8  fd87
      9  fd87		       ca		      DEX
     10  fd88		       d0 fb		      BNE	.loop
     11  fd8a
     87  fd8a
     88  fd8a							; Get everything ready for VSYNC
     89  fd8a
     90  fd8a		       86 01		      STX	VBLANK
     91  fd8c		       a9 02		      LDA	#VSYNC_SET
     92  fd8e		       85 02		      STA	WSYNC
     93  fd90		       4c ab f6 	      JMP	screenStart	; And start all over again!
     94  fd93
     95  fd93							; Tell us how many bytes we've used up
     96  fd93
      0  fd93					      USAGE_REPORT	"ROM", $F600, $FFFA
      1  fd93
      2  fd93				   NAM	      SET	"ROM"
      3  fd93				   SPOS       SET	$F600
      4  fd93				   EPOS       SET	$FFFA
      5  fd93				   CPOS       SET	.
      6  fd93
      7  fd93				   CAP	      SET	EPOS - SPOS
      8  fd93				   TKUP       SET	CPOS - SPOS
      9  fd93
     10  fd93				   PCNT       SET	[TKUP * 100 / CAP]d
     11  fd93
     12  fd93
     13  fd93
 75 % of your ROM is used up ( 1939 / 2554 ) bytes
     14  fd93					      ECHO	PCNT, "% of your", NAM, "is used up (", [TKUP]d, "/", [CAP]d, ") bytes"
     15  fd93
     98  fd93
     99  fffa					      ORG	$FFFA
    100  fffa
    101  fffa		       83 f6		      DC.W	start	; Something
    102  fffc		       83 f6		      DC.W	start	; Entrypoint
    103  fffe		       ab f6		      DC.W	screenStart	; Something else
    104  10000
    105  10000					       END
