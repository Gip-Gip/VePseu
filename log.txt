------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
      3 U028a ????				      SEG.U	addresses
      4 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	x_pos_gan
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	xGain
     17 U028a ????				      SEC
     18 U028a ????				      SBC	xLoss
     19 U028a ????				      TAY
     20 U028a ????
     21 U028a ????				      ENDM		; 14 cycles
     22 U028a ????
     23 U028a ????				      MAC	x_pos_los
     24 U028a ????
     25 U028a ????				      TYA
     26 U028a ????				      CLC
     27 U028a ????				      ADC	xLoss
     28 U028a ????				      SEC
     29 U028a ????				      SBC	xGain
     30 U028a ????				      TAY
     31 U028a ????
     32 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 2
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00	   wall1a     DC	0
      6 U0081		       00	   wall2a     DC	0
      7 U0082		       00	   wall3a     DC	0
      8 U0083		       00	   wall4a     DC	0
      9 U0084		       00	   wall1b     DC	0
     10 U0085		       00	   wall2b     DC	0
     11 U0086		       00	   wall3b     DC	0
     12 U0087		       00	   wall4b     DC	0
     13 U0088		       00	   shadow1a   DC	0
     14 U0089		       00	   shadow2a   DC	0
     15 U008a		       00	   shadow3a   DC	0
     16 U008b		       00	   shadow4a   DC	0
     17 U008c		       00	   shadow1b   DC	0
     18 U008d		       00	   shadow2b   DC	0
     19 U008e		       00	   shadow3b   DC	0
     20 U008f		       00	   shadow4b   DC	0
     21 U0090
     22 U0090		       00	   shift      DC	0
     23 U0091		       00	   playerPos  DC	0
     24 U0092		       00	   mapWidth   DC	0
     25 U0093		       00	   xGain      DC	0
     26 U0094		       00	   xLoss      DC	0
     27 U0095		       00	   yGain      DC	0
     28 U0096		       00	   yLoss      DC	0
     29 U0097		       00	   trigPressed DC	0
     30 U0098		       00	   wallColour DC	0
     31 U0099		       00	   shadowColour DC	0
     32 U009a		       00 00	   mapPtr     DC.W	0
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 2
      0 U009c					      INCLUDE	"include/pia_addr.h"
      1 U009c							; PIA addresses
      2 U009c
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
------- FILE include/defs.h LEVEL 3 PASS 2
      0 U028a					      INCLUDE	"include/defs.h"
      1 U028a		       00 00	   NULL       =	0	; The value of NULL
      2 U028a		       00 01	   ONE	      =	1	; The value of one
      3 U028a
      4 U028a		       00 04	   PIXH       =	4	; The height of each pixel in scanlines (x2)
      5 U028a
      6 U028a		       00 0e	   WCOLU      =	$0E	; The initial colour of walls
      7 U028a		       00 06	   SCOLU      =	$06	; The initial colour of shadows
      8 U028a
      9 U028a		       00 c2	   VBLANK_SET =	%11000010	; The value to push to the vblank register
     10 U028a		       00 02	   VSYNC_SET  =	2	; The value to push to the vsync register
     11 U028a
     12 U028a		       00 00	   INDEXINIT  =	0	; The value to initialize indexes to
     13 U028a
     14 U028a		       00 18	   UPPAD_LIMIT =	24	; The upper pad amount
     15 U028a		       00 61	   LOPAD_LIMIT =	97	; The lower pad amount
     16 U028a
     17 U028a		       00 e0	   LAYER2_AND_0 =	%11100000	; The pattern layer 2's shadow takes on
     18 U028a		       00 f8	   LAYER2_AND_1 =	%11111000	; The pattern layer 2's first wall takes on
     19 U028a		       00 07	   LAYER2_AND_2 =	%00000111	; The pattern layer 2's second wall takes on
     20 U028a
     21 U028a		       00 80	   LAYER3_AND_0 =	%10000000	; The pattern layer 3's shadow takes on
     22 U028a		       00 e0	   LAYER3_AND_1 =	%11100000	; The pattern layer 3's first wall takes on
     23 U028a		       00 1c	   LAYER3_AND_2 =	%00011100	; The pattern layer 3's second wall takes on
     24 U028a		       00 03	   LAYER3_AND_3 =	%00000011	; The pattern layer 3's third wall takes on
     25 U028a
     26 U028a		       00 80	   SHAD_AND_0 =	%10000000	; Patterns of the 1st shadow
     27 U028a		       00 c0	   SHAD_AND_1 =	%11000000
     28 U028a		       00 e0	   SHAD_AND_2 =	%11100000
     29 U028a		       00 f0	   SHAD_AND_3 =	%11110000
     30 U028a		       00 f8	   SHAD_AND_4 =	%11111000
     31 U028a
     32 U028a		       00 10	   FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     33 U028a		       00 20	   FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     34 U028a		       00 80	   FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     35 U028a		       00 40	   FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     36 U028a		       00 80	   ITRIG      =	%10000000	; The bit set when the trigger is set
     37 U028a
     38 U028a		       00 00	   cleanStart =	0	; The value to initialize X to in clearLoop
     39 U028a		       00 00	   cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     40 U028a
     41 U028a		       00 ff	   stack      =	$FF	; The address of the stack
------- FILE include/vepseu.h
     11 U028a
     12 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE map.asm LEVEL 2 PASS 2
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1
      4  f000		       00 10	   MAP_01_WDTH =	$10
      5  f000		       01 00	   MAP_01_SZ  =	$100
      6  f000
      7  f000				   mapList
      8  f000		       02 f0		      DC.W	map_01
      9  f002
     10  f002				   map_01
     11  f002		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     12  f012		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     13  f022		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     14  f032		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     15  f042		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     16  f052		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     17  f062		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     18  f072		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     19  f082		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     20  f092		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     21  f0a2		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     22  f0b2		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     23  f0c2		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     24  f0d2		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     25  f0e2		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     26  f0f2		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     27  f102
     28  f102				   map_01_load
     29  f102		       a9 d1		      LDA	#MAP_01_POS
     30  f104		       85 91		      STA	playerPos
     31  f106		       a9 10		      LDA	#MAP_01_WDTH
     32  f108		       85 92		      STA	mapWidth
     33  f10a		       ad 00 f0 	      LDA	mapList
     34  f10d		       85 9a		      STA	mapPtr
     35  f10f		       e8		      INX
     36  f110		       ad 01 f0 	      LDA	mapList + 1
     37  f113		       85 9b		      STA	mapPtr + 1
     38  f115		       60		      RTS
------- FILE main.asm
     12  f116
     13  f800					      ORG	$F800
     14  f800
     15  f800				   start
     16  f800
     17  f800							; Initialize everything
     18  f800
------- FILE init.asm LEVEL 2 PASS 2
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800		       a2 ff		      LDX	#stack
      4  f802		       9a		      TXS
      5  f803
      6  f803		       a9 00		      LDA	#NULL
      7  f805
      8  f805		       d8		      CLD
      9  f806		       18		      CLC
     10  f807		       58		      CLI
     11  f808		       b8		      CLV
     12  f809
     13  f809		       a2 00		      LDX	#INDEXINIT
     14  f80b
     15  f80b				   cleanLoop
     16  f80b
     17  f80b		       95 00		      STA	cleanStart,X
     18  f80d		       e8		      INX
     19  f80e
     20  f80e		       e0 00		      CPX	#cleanEnd
     21  f810		       d0 f9		      BNE	cleanLoop
     22  f812
     23  f812		       20 02 f1 	      JSR	map_01_load
     24  f815
     25  f815		       a5 92		      LDA	mapWidth
     26  f817		       85 96		      STA	yLoss
     27  f819		       a9 01		      LDA	#ONE
     28  f81b		       85 93		      STA	xGain
     29  f81d		       a9 00		      LDA	#NULL
     30  f81f		       85 95		      STA	yGain
     31  f821		       85 94		      STA	xLoss
     32  f823
     33  f823		       a9 0e		      LDA	#WCOLU
     34  f825		       85 98		      STA	wallColour
     35  f827		       a9 06		      LDA	#SCOLU
     36  f829		       85 99		      STA	shadowColour
------- FILE main.asm
     20  f82b
     21  f82b		       a9 02		      LDA	#VSYNC_SET
     22  f82d
     23  f82d				   screenStart
     24  f82d
     25  f82d							; Start vsync (3 scanlines)
     26  f82d		       85 00		      STA	VSYNC
     27  f82f
     28  f82f		       85 02		      STA	WSYNC
     29  f831		       85 02		      STA	WSYNC
     30  f833		       a9 00		      LDA	#NULL
     31  f835		       85 02		      STA	WSYNC
     32  f837
     33  f837		       85 00		      STA	VSYNC
     34  f839
     35  f839							; Render everything (12 scanlines)
     36  f839
------- FILE walrend.asm LEVEL 2 PASS 2
      0  f839					      INCLUDE	"walrend.asm"	; 6 scanlines
      1  f839							; VePseu's wall renderer
      2  f839
      3  f839		       a4 91		      LDY	playerPos	; 3 cycles
      4  f83b
------- FILE r_layers/layer1.asm LEVEL 3 PASS 2
      0  f83b					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f83b							; First layer of rendering (86 cycles)
      2  f83b
      0  f83b					      Y_POS_ADV		; 14 cycles
      1  f83b
      2  f83b		       98		      TYA
      3  f83c		       18		      CLC
      4  f83d		       65 95		      ADC	yGain
      5  f83f		       38		      SEC
      6  f840		       e5 96		      SBC	yLoss
      7  f842		       a8		      TAY
      8  f843
      4  f843
      0  f843					      X_POS_GAN		; 23 cycles
      1  f843
      2  f843		       98		      TYA
      3  f844		       18		      CLC
      4  f845		       65 93		      ADC	xGain
      5  f847		       38		      SEC
      6  f848		       e5 94		      SBC	xLoss
      7  f84a		       a8		      TAY
      8  f84b
      6  f84b		       b1 9a		      LDA	(mapPtr),Y
      7  f84d		       85 8c		      STA	shadow1b
      8  f84f
      0  f84f					      X_POS_LOS		; 26 cycles
      1  f84f
      2  f84f		       98		      TYA
      3  f850		       18		      CLC
      4  f851		       65 94		      ADC	xLoss
      5  f853		       38		      SEC
      6  f854		       e5 93		      SBC	xGain
      7  f856		       a8		      TAY
      8  f857
     10  f857		       b1 9a		      LDA	(mapPtr),Y
     11  f859		       85 80		      STA	wall1a
     12  f85b		       85 84		      STA	wall1b
     13  f85d
      0  f85d					      X_POS_LOS		; 23 cycles
      1  f85d
      2  f85d		       98		      TYA
      3  f85e		       18		      CLC
      4  f85f		       65 94		      ADC	xLoss
      5  f861		       38		      SEC
      6  f862		       e5 93		      SBC	xGain
      7  f864		       a8		      TAY
      8  f865
     15  f865		       b1 9a		      LDA	(mapPtr),Y
     16  f867		       85 88		      STA	shadow1a
------- FILE walrend.asm
      6  f869
------- FILE r_layers/layer2.asm LEVEL 3 PASS 2
      0  f869					      INCLUDE	"r_layers/layer2.asm"	; 148 cycles
      1  f869							; Second Layer (148 cycles)
      2  f869
      0  f869					      Y_POS_ADV		; 14 cycles
      1  f869
      2  f869		       98		      TYA
      3  f86a		       18		      CLC
      4  f86b		       65 95		      ADC	yGain
      5  f86d		       38		      SEC
      6  f86e		       e5 96		      SBC	yLoss
      7  f870		       a8		      TAY
      8  f871
      4  f871
      0  f871					      X_POS_LOS		; 25 cycles
      1  f871
      2  f871		       98		      TYA
      3  f872		       18		      CLC
      4  f873		       65 94		      ADC	xLoss
      5  f875		       38		      SEC
      6  f876		       e5 93		      SBC	xGain
      7  f878		       a8		      TAY
      8  f879
      6  f879		       b1 9a		      LDA	(mapPtr),Y
      7  f87b		       29 e0		      AND	#LAYER2_AND_0
      8  f87d		       85 89		      STA	shadow2a
      9  f87f
      0  f87f					      X_POS_GAN		; 25 cycles
      1  f87f
      2  f87f		       98		      TYA
      3  f880		       18		      CLC
      4  f881		       65 93		      ADC	xGain
      5  f883		       38		      SEC
      6  f884		       e5 94		      SBC	xLoss
      7  f886		       a8		      TAY
      8  f887
     11  f887		       b1 9a		      LDA	(mapPtr),Y
     12  f889		       29 f8		      AND	#LAYER2_AND_1
     13  f88b		       85 81		      STA	wall2a
     14  f88d
      0  f88d					      X_POS_GAN		; 31 cycles
      1  f88d
      2  f88d		       98		      TYA
      3  f88e		       18		      CLC
      4  f88f		       65 93		      ADC	xGain
      5  f891		       38		      SEC
      6  f892		       e5 94		      SBC	xLoss
      7  f894		       a8		      TAY
      8  f895
     16  f895		       b1 9a		      LDA	(mapPtr),Y
     17  f897		       29 07		      AND	#LAYER2_AND_2
     18  f899		       85 85		      STA	wall2b
     19  f89b		       05 81		      ORA	wall2a
     20  f89d		       85 81		      STA	wall2a
     21  f89f
      0  f89f					      X_POS_GAN		; 28 cycles
      1  f89f
      2  f89f		       98		      TYA
      3  f8a0		       18		      CLC
      4  f8a1		       65 93		      ADC	xGain
      5  f8a3		       38		      SEC
      6  f8a4		       e5 94		      SBC	xLoss
      7  f8a6		       a8		      TAY
      8  f8a7
     23  f8a7		       b1 9a		      LDA	(mapPtr),Y
     24  f8a9		       29 f8		      AND	#LAYER2_AND_1
     25  f8ab		       05 85		      ORA	wall2b
     26  f8ad		       85 85		      STA	wall2b
     27  f8af
      0  f8af					      X_POS_GAN		; 25 cycles
      1  f8af
      2  f8af		       98		      TYA
      3  f8b0		       18		      CLC
      4  f8b1		       65 93		      ADC	xGain
      5  f8b3		       38		      SEC
      6  f8b4		       e5 94		      SBC	xLoss
      7  f8b6		       a8		      TAY
      8  f8b7
     29  f8b7		       b1 9a		      LDA	(mapPtr),Y
     30  f8b9		       29 e0		      AND	#LAYER2_AND_0
     31  f8bb		       85 8d		      STA	shadow2b
------- FILE walrend.asm
      8  f8bd
------- FILE r_layers/layer3.asm LEVEL 3 PASS 2
      0  f8bd					      INCLUDE	"r_layers/layer3.asm"	; 182 cycles
      1  f8bd							; Third layer (104 cycles)
      2  f8bd
      0  f8bd					      Y_POS_ADV		; 14 cycles
      1  f8bd
      2  f8bd		       98		      TYA
      3  f8be		       18		      CLC
      4  f8bf		       65 95		      ADC	yGain
      5  f8c1		       38		      SEC
      6  f8c2		       e5 96		      SBC	yLoss
      7  f8c4		       a8		      TAY
      8  f8c5
      4  f8c5
      0  f8c5					      X_POS_GAN		; 25
      1  f8c5
      2  f8c5		       98		      TYA
      3  f8c6		       18		      CLC
      4  f8c7		       65 93		      ADC	xGain
      5  f8c9		       38		      SEC
      6  f8ca		       e5 94		      SBC	xLoss
      7  f8cc		       a8		      TAY
      8  f8cd
      6  f8cd		       b1 9a		      LDA	(mapPtr),Y
      7  f8cf		       29 80		      AND	#LAYER3_AND_0
      8  f8d1		       85 8e		      STA	shadow3b
      9  f8d3
      0  f8d3					      X_POS_LOS		; 25
      1  f8d3
      2  f8d3		       98		      TYA
      3  f8d4		       18		      CLC
      4  f8d5		       65 94		      ADC	xLoss
      5  f8d7		       38		      SEC
      6  f8d8		       e5 93		      SBC	xGain
      7  f8da		       a8		      TAY
      8  f8db
     11  f8db		       b1 9a		      LDA	(mapPtr),Y
     12  f8dd		       29 e0		      AND	#LAYER3_AND_1
     13  f8df		       85 86		      STA	wall3b
     14  f8e1
      0  f8e1					      X_POS_LOS		; 29
      1  f8e1
      2  f8e1		       98		      TYA
      3  f8e2		       18		      CLC
      4  f8e3		       65 94		      ADC	xLoss
      5  f8e5		       38		      SEC
      6  f8e6		       e5 93		      SBC	xGain
      7  f8e8		       a8		      TAY
      8  f8e9
     16  f8e9		       b1 9a		      LDA	(mapPtr),Y
     17  f8eb		       29 1c		      AND	#LAYER3_AND_2
     18  f8ed		       05 86		      ORA	wall3b
     19  f8ef		       85 86		      STA	wall3b
     20  f8f1
      0  f8f1					      X_POS_LOS		; 31
      1  f8f1
      2  f8f1		       98		      TYA
      3  f8f2		       18		      CLC
      4  f8f3		       65 94		      ADC	xLoss
      5  f8f5		       38		      SEC
      6  f8f6		       e5 93		      SBC	xGain
      7  f8f8		       a8		      TAY
      8  f8f9
     22  f8f9		       b1 9a		      LDA	(mapPtr),Y
     23  f8fb		       29 03		      AND	#LAYER3_AND_3
     24  f8fd		       85 82		      STA	wall3a
     25  f8ff		       05 86		      ORA	wall3b
     26  f901		       85 86		      STA	wall3b
     27  f903
      0  f903					      X_POS_LOS		; 29
      1  f903
      2  f903		       98		      TYA
      3  f904		       18		      CLC
      4  f905		       65 94		      ADC	xLoss
      5  f907		       38		      SEC
      6  f908		       e5 93		      SBC	xGain
      7  f90a		       a8		      TAY
      8  f90b
     29  f90b		       b1 9a		      LDA	(mapPtr),Y
     30  f90d		       29 1c		      AND	#LAYER3_AND_2
     31  f90f		       05 82		      ORA	wall3a
     32  f911		       85 82		      STA	wall3a
     33  f913
      0  f913					      X_POS_LOS		; 29
      1  f913
      2  f913		       98		      TYA
      3  f914		       18		      CLC
      4  f915		       65 94		      ADC	xLoss
      5  f917		       38		      SEC
      6  f918		       e5 93		      SBC	xGain
      7  f91a		       a8		      TAY
      8  f91b
     35  f91b		       b1 9a		      LDA	(mapPtr),Y
     36  f91d		       29 e0		      AND	#LAYER3_AND_1
     37  f91f		       05 82		      ORA	wall3a
     38  f921		       85 82		      STA	wall3a
     39  f923
      0  f923					      X_POS_LOS		; 25
      1  f923
      2  f923		       98		      TYA
      3  f924		       18		      CLC
      4  f925		       65 94		      ADC	xLoss
      5  f927		       38		      SEC
      6  f928		       e5 93		      SBC	xGain
      7  f92a		       a8		      TAY
      8  f92b
     41  f92b		       b1 9a		      LDA	(mapPtr),Y
     42  f92d		       29 80		      AND	#LAYER3_AND_0
     43  f92f		       85 8a		      STA	shadow3a
------- FILE walrend.asm
     10  f931
------- FILE r_layers/layer4.asm LEVEL 3 PASS 2
      0  f931					      INCLUDE	"r_layers/layer4.asm"	; 8 cycles
      1  f931							; Since layer four is the last layer, it is always set to full(it looks better)
      2  f931
      3  f931		       a9 ff		      LDA	#$FF
      4  f933		       85 83		      STA	wall4a
      5  f935		       85 87		      STA	wall4b
------- FILE walrend.asm
     12  f937
     13  f937		       85 02		      STA	WSYNC	; By this time 6 scanlines have passed
------- FILE main.asm
     38  f939
------- FILE scrend.asm LEVEL 2 PASS 2
      0  f939					      INCLUDE	"scrend.asm"	; 6 Scanlines
      1  f939							; VePseu's screen renderer
      2  f939
      3  f939							; Remove the shadows incase only 1 wall is drawn (22 cycles)
      4  f939		       a5 88		      LDA	shadow1a
      5  f93b		       05 80		      ORA	wall1a
      6  f93d		       45 80		      EOR	wall1a
      7  f93f		       29 f8		      AND	#%11111000
      8  f941		       85 88		      STA	shadow1a
      9  f943
     10  f943		       a5 8c		      LDA	shadow1b
     11  f945		       05 84		      ORA	wall1b
     12  f947		       45 84		      EOR	wall1b
     13  f949		       29 f8		      AND	#%11111000
     14  f94b		       85 8c		      STA	shadow1b
     15  f94d
     16  f94d
     17  f94d							; Merge walls (approx 381 cycles)
     18  f94d
     19  f94d		       a2 01		      LDX	#1
     20  f94f
     21  f94f				   mergeLoop
     22  f94f
     23  f94f							; Merge wall a
     24  f94f
      0  f94f					      MRGWLL	wall1a	; 17 cycles
      1  f94f		       b5 80		      LDA	wall1a,X
      2  f951		       ca		      DEX
      3  f952		       15 80		      ORA	wall1a,X
      4  f954		       e8		      INX
      5  f955		       95 80		      STA	wall1a,X
     26  f957
     27  f957							; Make shadow a
     28  f957
      0  f957					      MKSHAD	shadow1a	; 21 cycles
      1  f957		       4a		      LSR
      2  f958		       ca		      DEX
      3  f959		       15 88		      ORA	shadow1a,X
      4  f95b		       e8		      INX
      5  f95c		       15 88		      ORA	shadow1a,X
      6  f95e		       95 88		      STA	shadow1a,X
     30  f960
     31  f960							; Overlap wall a
     32  f960
      0  f960					      OVLWLL	wall1a, shadow1a	; 22 cycles
      1  f960		       b5 80		      LDA	wall1a,X
      2  f962		       ca		      DEX
      3  f963		       15 88		      ORA	shadow1a,X
      4  f965		       55 88		      EOR	shadow1a,X
      5  f967		       e8		      INX
      6  f968		       95 80		      STA	wall1a,X
     34  f96a
     35  f96a							; Overlap shadow a
     36  f96a
      0  f96a					      OVLSHD	wall1a, shadow1a	; 21 cycles
      1  f96a		       b5 88		      LDA	shadow1a,X
      2  f96c		       15 80		      ORA	wall1a,X
      3  f96e		       55 80		      EOR	wall1a,X
      4  f970		       95 88		      STA	shadow1a,X
     38  f972
     39  f972							; Merge wall b
     40  f972
      0  f972					      MRGWLL	wall1b	; 17 cycles
      1  f972		       b5 84		      LDA	wall1b,X
      2  f974		       ca		      DEX
      3  f975		       15 84		      ORA	wall1b,X
      4  f977		       e8		      INX
      5  f978		       95 84		      STA	wall1b,X
     42  f97a
     43  f97a							; Make shadow b
     44  f97a
      0  f97a					      MKSHAD	shadow1b	; 21 cycles
      1  f97a		       4a		      LSR
      2  f97b		       ca		      DEX
      3  f97c		       15 8c		      ORA	shadow1b,X
      4  f97e		       e8		      INX
      5  f97f		       15 8c		      ORA	shadow1b,X
      6  f981		       95 8c		      STA	shadow1b,X
     46  f983
     47  f983							; Overlap wall b
     48  f983
      0  f983					      OVLWLL	wall1b, shadow1b	; 22 cycles
      1  f983		       b5 84		      LDA	wall1b,X
      2  f985		       ca		      DEX
      3  f986		       15 8c		      ORA	shadow1b,X
      4  f988		       55 8c		      EOR	shadow1b,X
      5  f98a		       e8		      INX
      6  f98b		       95 84		      STA	wall1b,X
     50  f98d
     51  f98d							; Overlap shadow b
     52  f98d
      0  f98d					      OVLSHD	wall1b, shadow1b	; 20 cycles
      1  f98d		       b5 8c		      LDA	shadow1b,X
      2  f98f		       15 84		      ORA	wall1b,X
      3  f991		       55 84		      EOR	wall1b,X
      4  f993		       95 8c		      STA	shadow1b,X
     54  f995
     55  f995							; Loop if not done
     56  f995
     57  f995		       e8		      INX		; 7 or 6 cycles
     58  f996		       e0 04		      CPX	#4
     59  f998		       d0 b5		      BNE	mergeLoop
     60  f99a
     61  f99a		       85 02		      STA	WSYNC
     62  f99c
     63  f99c							; By this time, we know approx 6 scanlines have passed
------- FILE main.asm
     40  f99c
     41  f99c							; Pad!
     42  f99c
     43  f99c		       a2 00		      LDX	#INDEXINIT
     44  f99e
     45  f99e				   upperPad
     46  f99e		       85 02		      STA	WSYNC
     47  f9a0
     48  f9a0		       e8		      INX
     49  f9a1		       e0 18		      CPX	#UPPAD_LIMIT
     50  f9a3		       d0 f9		      BNE	upperPad
     51  f9a5
     52  f9a5		       85 02		      STA	WSYNC
     53  f9a7
     54  f9a7							; Draw everything
     55  f9a7
------- FILE dispkern.asm LEVEL 2 PASS 2
      0  f9a7					      INCLUDE	"dispkern.asm"	; 121 Scanlines
      1  f9a7							; VePseu's display kernel
      2  f9a7
      3  f9a7							; This actually draws 121 lines to the screen instead of the usual 196. The
      4  f9a7							; only reason being it looks better with the small horizontal size of the
      5  f9a7							; picture
      6  f9a7
      7  f9a7		       4c b0 f9 	      JMP	drawStart
      8  f9aa
      9  f9aa				   wait 		; Waits the right amount of time to blank the mirrored playfield
     10  f9aa		       ea		      NOP
     11  f9ab		       ea		      NOP
     12  f9ac		       ea		      NOP
     13  f9ad		       ea		      NOP
     14  f9ae		       60		      RTS
     15  f9af
     16  f9af				   wait2		; Waits the right amount of time to blank the mirrored playfield
     17  f9af		       60		      RTS
     18  f9b0
     19  f9b0
     20  f9b0				   drawStart
     21  f9b0
     22  f9b0		       a0 80		      LDY	#SHAD_AND_0
     23  f9b2		       20 fe f9 	      JSR	otherWall
     24  f9b5		       a0 c0		      LDY	#SHAD_AND_1
     25  f9b7		       20 fe f9 	      JSR	otherWall
     26  f9ba		       a0 e0		      LDY	#SHAD_AND_2
     27  f9bc		       20 fe f9 	      JSR	otherWall
     28  f9bf		       a0 f0		      LDY	#SHAD_AND_3
     29  f9c1		       20 fe f9 	      JSR	otherWall
     30  f9c4		       a0 f8		      LDY	#SHAD_AND_4
     31  f9c6		       20 fe f9 	      JSR	otherWall
     32  f9c9		       a2 00		      LDX	#0
     33  f9cb		       20 3e fa 	      JSR	medWall
     34  f9ce		       a2 01		      LDX	#1
     35  f9d0		       20 3e fa 	      JSR	medWall
     36  f9d3		       a2 02		      LDX	#2
     37  f9d5		       20 3e fa 	      JSR	medWall
     38  f9d8		       a2 01		      LDX	#1
     39  f9da		       20 3e fa 	      JSR	medWall
     40  f9dd		       a2 00		      LDX	#0
     41  f9df		       20 3e fa 	      JSR	medWall
     42  f9e2		       a0 f8		      LDY	#SHAD_AND_4
     43  f9e4		       20 fe f9 	      JSR	otherWall
     44  f9e7		       a0 f0		      LDY	#SHAD_AND_3
     45  f9e9		       20 fe f9 	      JSR	otherWall
     46  f9ec		       a0 e0		      LDY	#SHAD_AND_2
     47  f9ee		       20 fe f9 	      JSR	otherWall
     48  f9f1		       a0 c0		      LDY	#SHAD_AND_1
     49  f9f3		       20 fe f9 	      JSR	otherWall
     50  f9f6		       a0 80		      LDY	#SHAD_AND_0
     51  f9f8		       20 fe f9 	      JSR	otherWall
     52  f9fb
     53  f9fb		       4c 76 fa 	      JMP	stop
     54  f9fe
     55  f9fe							; Draws only the first wall and it's shadow
     56  f9fe
     57  f9fe				   otherWall
     58  f9fe
     59  f9fe		       a2 00		      LDX	#INDEXINIT
     60  fa00
     61  fa00				   _otherWall_loop
     62  fa00
     63  fa00		       85 02		      STA	WSYNC
     64  fa02
     65  fa02		       a5 98		      LDA	wallColour
     66  fa04		       85 08		      STA	COLUPF
     67  fa06		       a5 80		      LDA	wall1a
     68  fa08		       85 0e		      STA	PF1
     69  fa0a		       a5 84		      LDA	wall1b
     70  fa0c		       4a		      LSR
     71  fa0d		       85 0f		      STA	PF2
     72  fa0f
     73  fa0f		       20 aa f9 	      JSR	wait
     74  fa12
     75  fa12		       a9 00		      LDA	#NULL
     76  fa14		       85 0e		      STA	PF1
     77  fa16		       85 0f		      STA	PF2
     78  fa18
     79  fa18		       84 90		      STY	shift
     80  fa1a
     81  fa1a		       85 02		      STA	WSYNC
     82  fa1c
     83  fa1c		       a5 99		      LDA	shadowColour
     84  fa1e		       85 08		      STA	COLUPF
     85  fa20		       a5 88		      LDA	shadow1a
     86  fa22		       25 90		      AND	shift
     87  fa24		       85 0e		      STA	PF1
     88  fa26		       85 0e		      STA	PF1
     89  fa28		       a5 8c		      LDA	shadow1b
     90  fa2a		       25 90		      AND	shift
     91  fa2c		       4a		      LSR
     92  fa2d		       85 0f		      STA	PF2
     93  fa2f
     94  fa2f		       20 af f9 	      JSR	wait2
     95  fa32
     96  fa32		       a9 00		      LDA	#NULL
     97  fa34		       85 0e		      STA	PF1
     98  fa36		       85 0f		      STA	PF2
     99  fa38
    100  fa38		       e8		      INX
    101  fa39		       e0 04		      CPX	#PIXH
    102  fa3b		       d0 c3		      BNE	_otherWall_loop
    103  fa3d
    104  fa3d		       60		      RTS
    105  fa3e
    106  fa3e							; Can draw every wall and it's shadow
    107  fa3e
    108  fa3e				   medWall
    109  fa3e
    110  fa3e		       a0 00		      LDY	#INDEXINIT
    111  fa40
    112  fa40				   _medWall_loop
    113  fa40
    114  fa40		       85 02		      STA	WSYNC
    115  fa42		       a5 98		      LDA	wallColour
    116  fa44		       85 08		      STA	COLUPF
    117  fa46		       b5 81		      LDA	wall2a,X
    118  fa48		       85 0e		      STA	PF1
    119  fa4a		       b5 85		      LDA	wall2b,X
    120  fa4c		       4a		      LSR
    121  fa4d		       85 0f		      STA	PF2
    122  fa4f
    123  fa4f		       20 aa f9 	      JSR	wait
    124  fa52
    125  fa52		       a9 00		      LDA	#NULL
    126  fa54		       85 0e		      STA	PF1
    127  fa56		       85 0f		      STA	PF2
    128  fa58		       85 02		      STA	WSYNC
    129  fa5a
    130  fa5a		       a5 99		      LDA	shadowColour
    131  fa5c		       85 08		      STA	COLUPF
    132  fa5e		       b5 89		      LDA	shadow2a,X
    133  fa60		       85 0e		      STA	PF1
    134  fa62		       b5 8d		      LDA	shadow2b,X
    135  fa64		       4a		      LSR
    136  fa65		       85 0f		      STA	PF2
    137  fa67
    138  fa67		       20 aa f9 	      JSR	wait
    139  fa6a
    140  fa6a		       a9 00		      LDA	#NULL
    141  fa6c		       85 0e		      STA	PF1
    142  fa6e		       85 0f		      STA	PF2
    143  fa70
    144  fa70		       c8		      INY
    145  fa71
    146  fa71		       c0 04		      CPY	#PIXH
    147  fa73		       d0 cb		      BNE	_medWall_loop
    148  fa75
    149  fa75		       60		      RTS
    150  fa76
    151  fa76				   stop
    152  fa76
    153  fa76		       85 02		      STA	WSYNC
    154  fa78
    155  fa78		       a9 00		      LDA	#NULL
    156  fa7a		       85 0e		      STA	PF1
    157  fa7c		       85 0f		      STA	PF2
------- FILE main.asm
     57  fa7e
     58  fa7e
     59  fa7e							; Start VBLANK
     60  fa7e
     61  fa7e		       a9 c2		      LDA	#VBLANK_SET
     62  fa80		       85 01		      STA	VBLANK
     63  fa82
     64  fa82							; Process input
     65  fa82
------- FILE input.asm LEVEL 2 PASS 2
      0  fa82					      INCLUDE	"input.asm"
      1  fa82							; VePseu's controller input
      2  fa82
      3  fa82		       ad 80 02 	      LDA	SWCHA
      4  fa85		       29 10		      AND	#FFORD
      5  fa87		       c9 10		      CMP	#FFORD
      6  fa89		       f0 16		      BEQ	CIN2
      7  fa8b
      8  fa8b		       a5 92		      LDA	mapWidth
      9  fa8d		       85 96		      STA	yLoss
     10  fa8f		       a9 01		      LDA	#ONE
     11  fa91		       85 93		      STA	xGain
     12  fa93		       a9 0e		      LDA	#WCOLU
     13  fa95		       85 98		      STA	wallColour
     14  fa97		       a9 06		      LDA	#SCOLU
     15  fa99		       85 99		      STA	shadowColour
     16  fa9b		       a9 00		      LDA	#NULL
     17  fa9d		       85 95		      STA	yGain
     18  fa9f		       85 94		      STA	xLoss
     19  faa1
     20  faa1				   CIN2
     21  faa1		       ad 80 02 	      LDA	SWCHA
     22  faa4		       29 20		      AND	#FBACK
     23  faa6		       c9 20		      CMP	#FBACK
     24  faa8		       f0 16		      BEQ	CIN3
     25  faaa
     26  faaa		       a5 92		      LDA	mapWidth
     27  faac		       85 95		      STA	yGain
     28  faae		       a9 01		      LDA	#ONE
     29  fab0		       85 94		      STA	xLoss
     30  fab2		       a9 0e		      LDA	#WCOLU
     31  fab4		       85 98		      STA	wallColour
     32  fab6		       a9 06		      LDA	#SCOLU
     33  fab8		       85 99		      STA	shadowColour
     34  faba		       a9 00		      LDA	#NULL
     35  fabc		       85 96		      STA	yLoss
     36  fabe		       85 93		      STA	xGain
     37  fac0
     38  fac0				   CIN3
     39  fac0		       ad 80 02 	      LDA	SWCHA
     40  fac3		       29 80		      AND	#FLEFT
     41  fac5		       c9 80		      CMP	#FLEFT
     42  fac7		       f0 16		      BEQ	CIN4
     43  fac9
     44  fac9		       a5 92		      LDA	mapWidth
     45  facb		       85 94		      STA	xLoss
     46  facd		       a9 01		      LDA	#ONE
     47  facf		       85 95		      STA	yGain
     48  fad1		       a9 06		      LDA	#SCOLU
     49  fad3		       85 98		      STA	wallColour
     50  fad5		       a9 0e		      LDA	#WCOLU
     51  fad7		       85 99		      STA	shadowColour
     52  fad9		       a9 00		      LDA	#NULL
     53  fadb		       85 96		      STA	yLoss
     54  fadd		       85 93		      STA	xGain
     55  fadf
     56  fadf				   CIN4
     57  fadf		       ad 80 02 	      LDA	SWCHA
     58  fae2		       29 40		      AND	#FRIGT
     59  fae4		       c9 40		      CMP	#FRIGT
     60  fae6		       f0 16		      BEQ	CTRIG
     61  fae8
     62  fae8		       a5 92		      LDA	mapWidth
     63  faea		       85 93		      STA	xGain
     64  faec		       a9 01		      LDA	#ONE
     65  faee		       85 96		      STA	yLoss
     66  faf0		       a9 06		      LDA	#SCOLU
     67  faf2		       85 98		      STA	wallColour
     68  faf4		       a9 0e		      LDA	#WCOLU
     69  faf6		       85 99		      STA	shadowColour
     70  faf8		       a9 00		      LDA	#NULL
     71  fafa		       85 95		      STA	yGain
     72  fafc		       85 94		      STA	xLoss
     73  fafe
     74  fafe				   CTRIG
     75  fafe
     76  fafe		       a5 3c		      LDA	INPT4
     77  fb00		       29 80		      AND	#ITRIG
     78  fb02		       c9 80		      CMP	#ITRIG
     79  fb04		       f0 1e		      BEQ	CNOTRIG
     80  fb06
     81  fb06		       a5 91		      LDA	playerPos
     82  fb08		       38		      SEC
     83  fb09		       e5 96		      SBC	yLoss
     84  fb0b		       18		      CLC
     85  fb0c		       65 95		      ADC	yGain
     86  fb0e		       a8		      TAY
     87  fb0f		       b1 9a		      LDA	(mapPtr),Y
     88  fb11		       c9 00		      CMP	#NULL
     89  fb13		       d0 08		      BNE	COLL
     90  fb15		       a5 97		      LDA	trigPressed
     91  fb17		       c9 00		      CMP	#NULL
     92  fb19		       d0 02		      BNE	COLL
     93  fb1b		       84 91		      STY	playerPos
     94  fb1d
     95  fb1d				   COLL
     96  fb1d
     97  fb1d		       a9 ff		      LDA	#$FF
     98  fb1f		       85 97		      STA	trigPressed
     99  fb21		       4c 28 fb 	      JMP	CEND
    100  fb24
    101  fb24				   CNOTRIG
    102  fb24		       a9 00		      LDA	#NULL
    103  fb26		       85 97		      STA	trigPressed
    104  fb28
    105  fb28				   CEND
    106  fb28		       85 02		      STA	WSYNC
------- FILE main.asm
     67  fb2a
     68  fb2a							; Pad again
     69  fb2a
     70  fb2a		       a2 00		      LDX	#INDEXINIT
     71  fb2c
     72  fb2c				   lowerPad
     73  fb2c		       85 02		      STA	WSYNC
     74  fb2e
     75  fb2e		       e8		      INX
     76  fb2f		       e0 61		      CPX	#LOPAD_LIMIT
     77  fb31		       d0 f9		      BNE	lowerPad
     78  fb33
     79  fb33							; Get everything ready for VSYNC
     80  fb33
     81  fb33		       a9 00		      LDA	#NULL
     82  fb35		       85 01		      STA	VBLANK
     83  fb37		       a9 02		      LDA	#VSYNC_SET
     84  fb39		       85 02		      STA	WSYNC
     85  fb3b		       4c 2d f8 	      JMP	screenStart
     86  fb3e
     87  fffa					      ORG	$FFFA
     88  fffa
     89  fffa		       00 f8		      DC.W	start	; Something
     90  fffc		       00 f8		      DC.W	start	; Entrypoint
     91  fffe		       2d f8		      DC.W	screenStart	; Something else
     92  10000
     93  10000					       END
