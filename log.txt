------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE include/vepseu.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"include/vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
      3 U028a ????				      SEG.U	addresses
      4 U028a ????
------- FILE include/walrend.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/walrend.h"
      1 U028a ????				      MAC	y_pos_adv
      2 U028a ????
      3 U028a ????				      TYA
      4 U028a ????				      CLC
      5 U028a ????				      ADC	yGain
      6 U028a ????				      SEC
      7 U028a ????				      SBC	yLoss
      8 U028a ????				      TAY
      9 U028a ????
     10 U028a ????				      ENDM		; 14 cycles
     11 U028a ????
     12 U028a ????				      MAC	x_pos_gan
     13 U028a ????
     14 U028a ????				      TYA
     15 U028a ????				      CLC
     16 U028a ????				      ADC	xGain
     17 U028a ????				      SEC
     18 U028a ????				      SBC	xLoss
     19 U028a ????				      TAY
     20 U028a ????
     21 U028a ????				      ENDM		; 14 cycles
     22 U028a ????
     23 U028a ????				      MAC	x_pos_los
     24 U028a ????
     25 U028a ????				      TYA
     26 U028a ????				      CLC
     27 U028a ????				      ADC	xLoss
     28 U028a ????				      SEC
     29 U028a ????				      SBC	xGain
     30 U028a ????				      TAY
     31 U028a ????
     32 U028a ????				      ENDM		; 14 cycles
------- FILE include/vepseu.h
------- FILE include/scrend.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/scrend.h"
      1 U028a ????						; Argument 1 is wall1X
      2 U028a ????				      MAC	mrgwll
      3 U028a ????				      LDA	{1},X
      4 U028a ????				      DEX
      5 U028a ????				      ORA	{1},X
      6 U028a ????				      INX
      7 U028a ????				      STA	{1},X
      8 U028a ????				      ENDM		; 17 cycles
      9 U028a ????
     10 U028a ????						; Argument 1 is shadow1X
     11 U028a ????				      MAC	mkshad
     12 U028a ????				      LSR
     13 U028a ????				      DEX
     14 U028a ????				      ORA	{1},X
     15 U028a ????				      INX
     16 U028a ????				      ORA	{1},X
     17 U028a ????				      STA	{1},X
     18 U028a ????				      ENDM		; 21 cycles
     19 U028a ????
     20 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     21 U028a ????				      MAC	ovlwll
     22 U028a ????				      LDA	{1},X
     23 U028a ????				      DEX
     24 U028a ????				      ORA	{2},X
     25 U028a ????				      EOR	{2},X
     26 U028a ????				      INX
     27 U028a ????				      STA	{1},X
     28 U028a ????				      ENDM		; 22 cycles
     29 U028a ????
     30 U028a ????						; Argument 1 is wall1X, 2 is shadow1X
     31 U028a ????				      MAC	ovlshd
     32 U028a ????				      LDA	{2},X
     33 U028a ????				      ORA	{1},X
     34 U028a ????				      EOR	{1},X
     35 U028a ????				      STA	{2},X
     36 U028a ????				      ENDM		; 20 cycles
------- FILE include/vepseu.h
------- FILE include/tia_addr.h LEVEL 3 PASS 2
      0 U028a ????				      INCLUDE	"include/tia_addr.h"
      1 U028a ????						; Write only addresses
      2 U028a ????
      3 U0000					      ORG	$0000
      4 U0000
      5 U0000		       00	   VSYNC      DC	0
      6 U0001		       00	   VBLANK     DC	0
      7 U0002		       00	   WSYNC      DC	0
      8 U0003		       00	   RSYNC      DC	0
      9 U0004		       00	   NUSIZ0     DC	0
     10 U0005		       00	   NUSIZ1     DC	0
     11 U0006		       00	   COLUP0     DC	0
     12 U0007		       00	   COLUP1     DC	0
     13 U0008		       00	   COLUPF     DC	0
     14 U0009		       00	   COLUBK     DC	0
     15 U000a		       00	   CTRLPF     DC	0
     16 U000b		       00	   REFP0      DC	0
     17 U000c		       00	   REFP1      DC	0
     18 U000d		       00	   PF0	      DC	0
     19 U000e		       00	   PF1	      DC	0
     20 U000f		       00	   PF2	      DC	0
     21 U0010		       00	   RESP0      DC	0
     22 U0011		       00	   RESP1      DC	0
     23 U0012		       00	   RESM0      DC	0
     24 U0013		       00	   RESM1      DC	0
     25 U0014		       00	   RESBL      DC	0
     26 U0015		       00	   AUDC0      DC	0
     27 U0016		       00	   AUDC1      DC	0
     28 U0017		       00	   AUDF0      DC	0
     29 U0018		       00	   AUDF1      DC	0
     30 U0019		       00	   AUDV0      DC	0
     31 U001a		       00	   AUDV1      DC	0
     32 U001b		       00	   GRP0       DC	0
     33 U001c		       00	   GRP1       DC	0
     34 U001d		       00	   ENAM0      DC	0
     35 U001e		       00	   ENAM1      DC	0
     36 U001f		       00	   ENABL      DC	0
     37 U0020		       00	   HMP0       DC	0
     38 U0021		       00	   HMP1       DC	0
     39 U0022		       00	   HMM0       DC	0
     40 U0023		       00	   HMM1       DC	0
     41 U0024		       00	   HMBL       DC	0
     42 U0025		       00	   VDELP0     DC	0
     43 U0026		       00	   VDELP1     DC	0
     44 U0027		       00	   VDELBL     DC	0
     45 U0028		       00	   RESMP0     DC	0
     46 U0029		       00	   RESMP1     DC	0
     47 U002a		       00	   HMOVE      DC	0
     48 U002b		       00	   HMCLR      DC	0
     49 U002c		       00	   CXCLR      DC	0
     50 U002d
     51 U002d							; Read only addresses
     52 U002d
     53 U0030					      ORG	$0030
     54 U0030
     55 U0030		       00	   CXM0P      DC	0
     56 U0031		       00	   CXM1P      DC	0
     57 U0032		       00	   CXP0FB     DC	0
     58 U0033		       00	   CXP1FB     DC	0
     59 U0034		       00	   CXM0FB     DC	0
     60 U0035		       00	   CXM1FB     DC	0
     61 U0036		       00	   CXBLPF     DC	0
     62 U0037		       00	   CXPPMM     DC	0
     63 U0038		       00	   INPT0      DC	0
     64 U0039		       00	   INPT1      DC	0
     65 U003a		       00	   INPT2      DC	0
     66 U003b		       00	   INPT3      DC	0
     67 U003c		       00	   INPT4      DC	0
     68 U003d		       00	   INPT5      DC	0
------- FILE include/vepseu.h
------- FILE include/vars.h LEVEL 3 PASS 2
      0 U003e					      INCLUDE	"include/vars.h"
      1 U003e							; Variables
      2 U003e
      3 U0080					      ORG	$0080
      4 U0080
      5 U0080		       00	   wall1a     DC	0
      6 U0081		       00	   wall2a     DC	0
      7 U0082		       00	   wall3a     DC	0
      8 U0083		       00	   wall4a     DC	0
      9 U0084		       00	   wall1b     DC	0
     10 U0085		       00	   wall2b     DC	0
     11 U0086		       00	   wall3b     DC	0
     12 U0087		       00	   wall4b     DC	0
     13 U0088		       00	   shadow1a   DC	0
     14 U0089		       00	   shadow2a   DC	0
     15 U008a		       00	   shadow3a   DC	0
     16 U008b		       00	   shadow4a   DC	0
     17 U008c		       00	   shadow1b   DC	0
     18 U008d		       00	   shadow2b   DC	0
     19 U008e		       00	   shadow3b   DC	0
     20 U008f		       00	   shadow4b   DC	0
     21 U0090
     22 U0090		       00	   shift      DC	0
     23 U0091		       00	   playerPos  DC	0
     24 U0092		       00	   mapWidth   DC	0
     25 U0093		       00	   xGain      DC	0
     26 U0094		       00	   xLoss      DC	0
     27 U0095		       00	   yGain      DC	0
     28 U0096		       00	   yLoss      DC	0
     29 U0097		       00	   fordPressed DC	0
     30 U0098		       00	   backPressed DC	0
     31 U0099		       00	   leftPressed DC	0
     32 U009a		       00	   rigtPressed DC	0
     33 U009b		       00	   wallColour DC	0
     34 U009c		       00	   shadowColour DC	0
     35 U009d		       00	   horzPos_mA DC	0
     36 U009e		       00	   horzPos_mB DC	0
     37 U009f		       00	   horzPos_plyr DC	0
     38 U00a0		       00	   drawingPlyr DC	0
     39 U00a1		       00	   direction  DC	0
     40 U00a2		       00 00	   miniMapPtr DC.W	0
     41 U00a4		       00 00	   mapPtr     DC.W	0
------- FILE include/vepseu.h
------- FILE include/pia_addr.h LEVEL 3 PASS 2
      0 U00a6					      INCLUDE	"include/pia_addr.h"
      1 U00a6							; PIA addresses
      2 U00a6
      3 U0280					      ORG	$0280
      4 U0280
      5 U0280		       00	   SWCHA      DC	0
      6 U0281		       00	   SWACNT     DC	0
      7 U0282		       00	   SWCHB      DC	0
      8 U0283		       00	   SWBCNT     DC	0
      9 U0284		       00	   INTIM      DC	0
     10 U0285		       00	   INSTAT     DC	0
     11 U0286		       00	   TIM1T      DC	0
     12 U0287		       00	   TIM8T      DC	0
     13 U0288		       00	   TIM64T     DC	0
     14 U0289		       00	   T1024T     DC	0
------- FILE include/vepseu.h
------- FILE include/defs.h LEVEL 3 PASS 2
      0 U028a					      INCLUDE	"include/defs.h"
      1 U028a					      MAC	ina
      2 U028a					      CLC
      3 U028a					      ADC	#1
      4 U028a					      ENDM
      5 U028a
      6 U028a					      MAC	dea
      7 U028a					      SEC
      8 U028a					      SBC	#1
      9 U028a					      ENDM
     10 U028a
     11 U028a		       00 00	   NULL       =	0	; The value of NULL
     12 U028a		       00 01	   ONE	      =	1	; The value of one
     13 U028a
     14 U028a		       00 04	   PIXH       =	4	; The height of each pixel in scanlines (x2)
     15 U028a
     16 U028a		       00 00	   HADJ_A     =	$00
     17 U028a		       00 10	   HADJ_B     =	$10
     18 U028a
     19 U028a		       00 86	   WCOLU      =	$86	; The initial colour of walls
     20 U028a		       00 82	   SCOLU      =	$82	; The initial colour of shadows
     21 U028a		       00 0e	   MAPCOLU    =	$0E	; The colour of the map on the minimap
     22 U028a		       00 cc	   PLYRCOLU   =	$CC	; The colour of the player on the minimap
     23 U028a
     24 U028a		       00 c2	   VBLANK_SET =	%11000010	; The value to push to the vblank register
     25 U028a		       00 02	   VSYNC_SET  =	2	; The value to push to the vsync register
     26 U028a
     27 U028a		       00 00	   INDEXINIT  =	0	; The value to initialize indexes to
     28 U028a
     29 U028a		       00 18	   UPPAD_LIMIT =	24	; The upper pad amount
     30 U028a		       00 4d	   LOPAD_LIMIT =	77	; The lower pad amount
     31 U028a
     32 U028a		       00 e0	   LAYER2_AND_0 =	%11100000	; The pattern layer 2's shadow takes on
     33 U028a		       00 f8	   LAYER2_AND_1 =	%11111000	; The pattern layer 2's first wall takes on
     34 U028a		       00 07	   LAYER2_AND_2 =	%00000111	; The pattern layer 2's second wall takes on
     35 U028a
     36 U028a		       00 80	   LAYER3_AND_0 =	%10000000	; The pattern layer 3's shadow takes on
     37 U028a		       00 e0	   LAYER3_AND_1 =	%11100000	; The pattern layer 3's first wall takes on
     38 U028a		       00 1c	   LAYER3_AND_2 =	%00011100	; The pattern layer 3's second wall takes on
     39 U028a		       00 03	   LAYER3_AND_3 =	%00000011	; The pattern layer 3's third wall takes on
     40 U028a
     41 U028a		       00 80	   SHAD_AND_0 =	%10000000	; Patterns of the 1st shadow
     42 U028a		       00 c0	   SHAD_AND_1 =	%11000000
     43 U028a		       00 e0	   SHAD_AND_2 =	%11100000
     44 U028a		       00 f0	   SHAD_AND_3 =	%11110000
     45 U028a		       00 f8	   SHAD_AND_4 =	%11111000
     46 U028a
     47 U028a		       00 10	   FFORD      =	%00010000	; The bit set when the joystick is in the forward position
     48 U028a		       00 20	   FBACK      =	%00100000	; The bit set when the joystick is in the backward position
     49 U028a		       00 80	   FLEFT      =	%10000000	; The bit set when the joystick is in the left position
     50 U028a		       00 40	   FRIGT      =	%01000000	; The bit set when the joystick is in the right position
     51 U028a		       00 80	   ITRIG      =	%10000000	; The bit set when the trigger is set
     52 U028a
     53 U028a		       00 00	   cleanStart =	0	; The value to initialize X to in clearLoop
     54 U028a		       00 00	   cleanEnd   =	0	; The value of X to stop the loop at in clearLoop
     55 U028a
     56 U028a		       00 ff	   stack      =	$FF	; The address of the stack
     57 U028a
     58 U028a		       00 00	   DNORTH     =	0
     59 U028a		       00 02	   DSOUTH     =	2
     60 U028a		       00 01	   DWEST      =	1
     61 U028a		       00 03	   DEAST      =	3
------- FILE include/vepseu.h
     11 U028a
     12 U028a
------- FILE main.asm
      6 U028a
      7  10000 ????				       SEG
      8  10000 ????
      9  f000					      ORG	$F000
     10  f000
------- FILE map.asm LEVEL 2 PASS 2
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1
      4  f000		       00 10	   MAP_01_WDTH =	$10
      5  f000		       01 00	   MAP_01_SZ  =	$100
      6  f000
      7  f000				   mapList
      8  f000		       04 f0		      DC.W	map_01
      9  f002
     10  f002				   miniMapList
     11  f002		       04 f1		      DC.W	map_01_miniMap
     12  f004
     13  f004				   map_01
     14  f004		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     15  f014		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     16  f024		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     17  f034		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     18  f044		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     19  f054		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     20  f064		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     21  f074		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     22  f084		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     23  f094		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     24  f0a4		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     25  f0b4		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     26  f0c4		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     27  f0d4		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     28  f0e4		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     29  f0f4		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     30  f104
     31  f104				   map_01_miniMap
     32  f104		       e0 07		      DC.W	%0000011111100000
     33  f106		       bf fd		      DC.W	%1111110110111111
     34  f108		       80 01		      DC.W	%0000000110000000
     35  f10a		       80 01		      DC.W	%0000000110000000
     36  f10c		       be bd		      DC.W	%1011110110111110
     37  f10e		       a2 a5		      DC.W	%1010010110100010
     38  f110		       a2 a7		      DC.W	%1010011110100010
     39  f112		       e2 a7		      DC.W	%1010011111100010
     40  f114		       e2 a5		      DC.W	%1010010111100010
     41  f116		       be bd		      DC.W	%1011110110111110
     42  f118		       80 81		      DC.W	%1000000110000000
     43  f11a		       80 81		      DC.W	%1000000110000000
     44  f11c		       bf fd		      DC.W	%1111110110111111
     45  f11e		       a0 05		      DC.W	%0000010110100000
     46  f120		       a0 05		      DC.W	%0000010110100000
     47  f122		       e0 07		      DC.W	%0000011111100000
     48  f124
     49  f124
     50  f124				   map_01_load
     51  f124		       a9 d1		      LDA	#MAP_01_POS
     52  f126		       85 91		      STA	playerPos
     53  f128		       a9 10		      LDA	#MAP_01_WDTH
     54  f12a		       85 92		      STA	mapWidth
     55  f12c
     56  f12c		       ad 00 f0 	      LDA	mapList
     57  f12f		       85 a4		      STA	mapPtr
     58  f131		       ad 01 f0 	      LDA	mapList + 1
     59  f134		       85 a5		      STA	mapPtr + 1
     60  f136
     61  f136		       ad 02 f0 	      LDA	miniMapList
     62  f139		       85 a2		      STA	miniMapPtr
     63  f13b		       ad 03 f0 	      LDA	miniMapList + 1
     64  f13e		       85 a3		      STA	miniMapPtr + 1
     65  f140		       60		      RTS
------- FILE main.asm
     12  f141
     13  f800					      ORG	$F800
     14  f800
     15  f800				   start
     16  f800
     17  f800							; Initialize everything
     18  f800
------- FILE init.asm LEVEL 2 PASS 2
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800		       a2 ff		      LDX	#stack
      4  f802		       9a		      TXS
      5  f803
      6  f803		       a9 00		      LDA	#NULL
      7  f805
      8  f805		       d8		      CLD
      9  f806		       18		      CLC
     10  f807		       58		      CLI
     11  f808		       b8		      CLV
     12  f809
     13  f809		       a2 00		      LDX	#INDEXINIT
     14  f80b
     15  f80b				   cleanLoop
     16  f80b
     17  f80b		       95 00		      STA	cleanStart,X
     18  f80d		       e8		      INX
     19  f80e
     20  f80e		       e0 00		      CPX	#cleanEnd
     21  f810		       d0 f9		      BNE	cleanLoop
     22  f812
     23  f812		       20 24 f1 	      JSR	map_01_load
     24  f815
     25  f815		       a5 92		      LDA	mapWidth
     26  f817		       85 96		      STA	yLoss
     27  f819		       a9 01		      LDA	#ONE
     28  f81b		       85 93		      STA	xGain
     29  f81d		       a9 00		      LDA	#NULL
     30  f81f		       85 95		      STA	yGain
     31  f821		       85 94		      STA	xLoss
     32  f823
     33  f823		       a9 86		      LDA	#WCOLU
     34  f825		       85 9b		      STA	wallColour
     35  f827		       a9 82		      LDA	#SCOLU
     36  f829		       85 9c		      STA	shadowColour
------- FILE main.asm
     20  f82b
     21  f82b		       a9 02		      LDA	#VSYNC_SET
     22  f82d
     23  f82d				   screenStart
     24  f82d
     25  f82d							; Start vsync (3 scanlines)
     26  f82d		       85 00		      STA	VSYNC
     27  f82f
     28  f82f		       85 02		      STA	WSYNC
     29  f831		       85 02		      STA	WSYNC
     30  f833		       a9 00		      LDA	#NULL
     31  f835		       85 02		      STA	WSYNC
     32  f837
     33  f837		       85 00		      STA	VSYNC
     34  f839
     35  f839							; Render everything (12 scanlines)
     36  f839
------- FILE walrend.asm LEVEL 2 PASS 2
      0  f839					      INCLUDE	"walrend.asm"	; 6 scanlines
      1  f839							; VePseu's wall renderer
      2  f839
      3  f839		       a4 91		      LDY	playerPos	; 3 cycles
      4  f83b
------- FILE r_layers/layer1.asm LEVEL 3 PASS 2
      0  f83b					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f83b							; First layer of rendering (86 cycles)
      2  f83b
      0  f83b					      Y_POS_ADV		; 14 cycles
      1  f83b
      2  f83b		       98		      TYA
      3  f83c		       18		      CLC
      4  f83d		       65 95		      ADC	yGain
      5  f83f		       38		      SEC
      6  f840		       e5 96		      SBC	yLoss
      7  f842		       a8		      TAY
      8  f843
      4  f843
      0  f843					      X_POS_GAN		; 23 cycles
      1  f843
      2  f843		       98		      TYA
      3  f844		       18		      CLC
      4  f845		       65 93		      ADC	xGain
      5  f847		       38		      SEC
      6  f848		       e5 94		      SBC	xLoss
      7  f84a		       a8		      TAY
      8  f84b
      6  f84b		       b1 a4		      LDA	(mapPtr),Y
      7  f84d		       85 8c		      STA	shadow1b
      8  f84f
      0  f84f					      X_POS_LOS		; 26 cycles
      1  f84f
      2  f84f		       98		      TYA
      3  f850		       18		      CLC
      4  f851		       65 94		      ADC	xLoss
      5  f853		       38		      SEC
      6  f854		       e5 93		      SBC	xGain
      7  f856		       a8		      TAY
      8  f857
     10  f857		       b1 a4		      LDA	(mapPtr),Y
     11  f859		       85 80		      STA	wall1a
     12  f85b		       85 84		      STA	wall1b
     13  f85d
      0  f85d					      X_POS_LOS		; 23 cycles
      1  f85d
      2  f85d		       98		      TYA
      3  f85e		       18		      CLC
      4  f85f		       65 94		      ADC	xLoss
      5  f861		       38		      SEC
      6  f862		       e5 93		      SBC	xGain
      7  f864		       a8		      TAY
      8  f865
     15  f865		       b1 a4		      LDA	(mapPtr),Y
     16  f867		       85 88		      STA	shadow1a
------- FILE walrend.asm
      6  f869
------- FILE r_layers/layer2.asm LEVEL 3 PASS 2
      0  f869					      INCLUDE	"r_layers/layer2.asm"	; 148 cycles
      1  f869							; Second Layer (148 cycles)
      2  f869
      0  f869					      Y_POS_ADV		; 14 cycles
      1  f869
      2  f869		       98		      TYA
      3  f86a		       18		      CLC
      4  f86b		       65 95		      ADC	yGain
      5  f86d		       38		      SEC
      6  f86e		       e5 96		      SBC	yLoss
      7  f870		       a8		      TAY
      8  f871
      4  f871
      0  f871					      X_POS_LOS		; 25 cycles
      1  f871
      2  f871		       98		      TYA
      3  f872		       18		      CLC
      4  f873		       65 94		      ADC	xLoss
      5  f875		       38		      SEC
      6  f876		       e5 93		      SBC	xGain
      7  f878		       a8		      TAY
      8  f879
      6  f879		       b1 a4		      LDA	(mapPtr),Y
      7  f87b		       29 e0		      AND	#LAYER2_AND_0
      8  f87d		       85 89		      STA	shadow2a
      9  f87f
      0  f87f					      X_POS_GAN		; 25 cycles
      1  f87f
      2  f87f		       98		      TYA
      3  f880		       18		      CLC
      4  f881		       65 93		      ADC	xGain
      5  f883		       38		      SEC
      6  f884		       e5 94		      SBC	xLoss
      7  f886		       a8		      TAY
      8  f887
     11  f887		       b1 a4		      LDA	(mapPtr),Y
     12  f889		       29 f8		      AND	#LAYER2_AND_1
     13  f88b		       85 81		      STA	wall2a
     14  f88d
      0  f88d					      X_POS_GAN		; 31 cycles
      1  f88d
      2  f88d		       98		      TYA
      3  f88e		       18		      CLC
      4  f88f		       65 93		      ADC	xGain
      5  f891		       38		      SEC
      6  f892		       e5 94		      SBC	xLoss
      7  f894		       a8		      TAY
      8  f895
     16  f895		       b1 a4		      LDA	(mapPtr),Y
     17  f897		       29 07		      AND	#LAYER2_AND_2
     18  f899		       85 85		      STA	wall2b
     19  f89b		       05 81		      ORA	wall2a
     20  f89d		       85 81		      STA	wall2a
     21  f89f
      0  f89f					      X_POS_GAN		; 28 cycles
      1  f89f
      2  f89f		       98		      TYA
      3  f8a0		       18		      CLC
      4  f8a1		       65 93		      ADC	xGain
      5  f8a3		       38		      SEC
      6  f8a4		       e5 94		      SBC	xLoss
      7  f8a6		       a8		      TAY
      8  f8a7
     23  f8a7		       b1 a4		      LDA	(mapPtr),Y
     24  f8a9		       29 f8		      AND	#LAYER2_AND_1
     25  f8ab		       05 85		      ORA	wall2b
     26  f8ad		       85 85		      STA	wall2b
     27  f8af
      0  f8af					      X_POS_GAN		; 25 cycles
      1  f8af
      2  f8af		       98		      TYA
      3  f8b0		       18		      CLC
      4  f8b1		       65 93		      ADC	xGain
      5  f8b3		       38		      SEC
      6  f8b4		       e5 94		      SBC	xLoss
      7  f8b6		       a8		      TAY
      8  f8b7
     29  f8b7		       b1 a4		      LDA	(mapPtr),Y
     30  f8b9		       29 e0		      AND	#LAYER2_AND_0
     31  f8bb		       85 8d		      STA	shadow2b
------- FILE walrend.asm
      8  f8bd
------- FILE r_layers/layer3.asm LEVEL 3 PASS 2
      0  f8bd					      INCLUDE	"r_layers/layer3.asm"	; 182 cycles
      1  f8bd							; Third layer (104 cycles)
      2  f8bd
      0  f8bd					      Y_POS_ADV		; 14 cycles
      1  f8bd
      2  f8bd		       98		      TYA
      3  f8be		       18		      CLC
      4  f8bf		       65 95		      ADC	yGain
      5  f8c1		       38		      SEC
      6  f8c2		       e5 96		      SBC	yLoss
      7  f8c4		       a8		      TAY
      8  f8c5
      4  f8c5
      0  f8c5					      X_POS_GAN		; 25
      1  f8c5
      2  f8c5		       98		      TYA
      3  f8c6		       18		      CLC
      4  f8c7		       65 93		      ADC	xGain
      5  f8c9		       38		      SEC
      6  f8ca		       e5 94		      SBC	xLoss
      7  f8cc		       a8		      TAY
      8  f8cd
      6  f8cd		       b1 a4		      LDA	(mapPtr),Y
      7  f8cf		       29 80		      AND	#LAYER3_AND_0
      8  f8d1		       85 8e		      STA	shadow3b
      9  f8d3
      0  f8d3					      X_POS_LOS		; 25
      1  f8d3
      2  f8d3		       98		      TYA
      3  f8d4		       18		      CLC
      4  f8d5		       65 94		      ADC	xLoss
      5  f8d7		       38		      SEC
      6  f8d8		       e5 93		      SBC	xGain
      7  f8da		       a8		      TAY
      8  f8db
     11  f8db		       b1 a4		      LDA	(mapPtr),Y
     12  f8dd		       29 e0		      AND	#LAYER3_AND_1
     13  f8df		       85 86		      STA	wall3b
     14  f8e1
      0  f8e1					      X_POS_LOS		; 29
      1  f8e1
      2  f8e1		       98		      TYA
      3  f8e2		       18		      CLC
      4  f8e3		       65 94		      ADC	xLoss
      5  f8e5		       38		      SEC
      6  f8e6		       e5 93		      SBC	xGain
      7  f8e8		       a8		      TAY
      8  f8e9
     16  f8e9		       b1 a4		      LDA	(mapPtr),Y
     17  f8eb		       29 1c		      AND	#LAYER3_AND_2
     18  f8ed		       05 86		      ORA	wall3b
     19  f8ef		       85 86		      STA	wall3b
     20  f8f1
      0  f8f1					      X_POS_LOS		; 31
      1  f8f1
      2  f8f1		       98		      TYA
      3  f8f2		       18		      CLC
      4  f8f3		       65 94		      ADC	xLoss
      5  f8f5		       38		      SEC
      6  f8f6		       e5 93		      SBC	xGain
      7  f8f8		       a8		      TAY
      8  f8f9
     22  f8f9		       b1 a4		      LDA	(mapPtr),Y
     23  f8fb		       29 03		      AND	#LAYER3_AND_3
     24  f8fd		       85 82		      STA	wall3a
     25  f8ff		       05 86		      ORA	wall3b
     26  f901		       85 86		      STA	wall3b
     27  f903
      0  f903					      X_POS_LOS		; 29
      1  f903
      2  f903		       98		      TYA
      3  f904		       18		      CLC
      4  f905		       65 94		      ADC	xLoss
      5  f907		       38		      SEC
      6  f908		       e5 93		      SBC	xGain
      7  f90a		       a8		      TAY
      8  f90b
     29  f90b		       b1 a4		      LDA	(mapPtr),Y
     30  f90d		       29 1c		      AND	#LAYER3_AND_2
     31  f90f		       05 82		      ORA	wall3a
     32  f911		       85 82		      STA	wall3a
     33  f913
      0  f913					      X_POS_LOS		; 29
      1  f913
      2  f913		       98		      TYA
      3  f914		       18		      CLC
      4  f915		       65 94		      ADC	xLoss
      5  f917		       38		      SEC
      6  f918		       e5 93		      SBC	xGain
      7  f91a		       a8		      TAY
      8  f91b
     35  f91b		       b1 a4		      LDA	(mapPtr),Y
     36  f91d		       29 e0		      AND	#LAYER3_AND_1
     37  f91f		       05 82		      ORA	wall3a
     38  f921		       85 82		      STA	wall3a
     39  f923
      0  f923					      X_POS_LOS		; 25
      1  f923
      2  f923		       98		      TYA
      3  f924		       18		      CLC
      4  f925		       65 94		      ADC	xLoss
      5  f927		       38		      SEC
      6  f928		       e5 93		      SBC	xGain
      7  f92a		       a8		      TAY
      8  f92b
     41  f92b		       b1 a4		      LDA	(mapPtr),Y
     42  f92d		       29 80		      AND	#LAYER3_AND_0
     43  f92f		       85 8a		      STA	shadow3a
------- FILE walrend.asm
     10  f931
------- FILE r_layers/layer4.asm LEVEL 3 PASS 2
      0  f931					      INCLUDE	"r_layers/layer4.asm"	; 8 cycles
      1  f931							; Since layer four is the last layer, it is always set to full(it looks better)
      2  f931
      3  f931		       a9 ff		      LDA	#$FF
      4  f933		       85 83		      STA	wall4a
      5  f935		       85 87		      STA	wall4b
------- FILE walrend.asm
     12  f937
     13  f937		       85 02		      STA	WSYNC	; By this time 6 scanlines have passed
------- FILE main.asm
     38  f939
------- FILE scrend.asm LEVEL 2 PASS 2
      0  f939					      INCLUDE	"scrend.asm"	; 6 Scanlines
      1  f939							; VePseu's screen renderer
      2  f939
      3  f939							; Remove the shadows incase only 1 wall is drawn (22 cycles)
      4  f939		       a5 88		      LDA	shadow1a
      5  f93b		       05 80		      ORA	wall1a
      6  f93d		       45 80		      EOR	wall1a
      7  f93f		       29 f8		      AND	#%11111000
      8  f941		       85 88		      STA	shadow1a
      9  f943
     10  f943		       a5 8c		      LDA	shadow1b
     11  f945		       05 84		      ORA	wall1b
     12  f947		       45 84		      EOR	wall1b
     13  f949		       29 f8		      AND	#%11111000
     14  f94b		       85 8c		      STA	shadow1b
     15  f94d
     16  f94d
     17  f94d							; Merge walls (approx 381 cycles)
     18  f94d
     19  f94d		       a2 01		      LDX	#1
     20  f94f
     21  f94f				   mergeLoop
     22  f94f
     23  f94f							; Merge wall a
     24  f94f
      0  f94f					      MRGWLL	wall1a	; 17 cycles
      1  f94f		       b5 80		      LDA	wall1a,X
      2  f951		       ca		      DEX
      3  f952		       15 80		      ORA	wall1a,X
      4  f954		       e8		      INX
      5  f955		       95 80		      STA	wall1a,X
     26  f957
     27  f957							; Make shadow a
     28  f957
      0  f957					      MKSHAD	shadow1a	; 21 cycles
      1  f957		       4a		      LSR
      2  f958		       ca		      DEX
      3  f959		       15 88		      ORA	shadow1a,X
      4  f95b		       e8		      INX
      5  f95c		       15 88		      ORA	shadow1a,X
      6  f95e		       95 88		      STA	shadow1a,X
     30  f960
     31  f960							; Overlap wall a
     32  f960
      0  f960					      OVLWLL	wall1a, shadow1a	; 22 cycles
      1  f960		       b5 80		      LDA	wall1a,X
      2  f962		       ca		      DEX
      3  f963		       15 88		      ORA	shadow1a,X
      4  f965		       55 88		      EOR	shadow1a,X
      5  f967		       e8		      INX
      6  f968		       95 80		      STA	wall1a,X
     34  f96a
     35  f96a							; Overlap shadow a
     36  f96a
      0  f96a					      OVLSHD	wall1a, shadow1a	; 21 cycles
      1  f96a		       b5 88		      LDA	shadow1a,X
      2  f96c		       15 80		      ORA	wall1a,X
      3  f96e		       55 80		      EOR	wall1a,X
      4  f970		       95 88		      STA	shadow1a,X
     38  f972
     39  f972							; Merge wall b
     40  f972
      0  f972					      MRGWLL	wall1b	; 17 cycles
      1  f972		       b5 84		      LDA	wall1b,X
      2  f974		       ca		      DEX
      3  f975		       15 84		      ORA	wall1b,X
      4  f977		       e8		      INX
      5  f978		       95 84		      STA	wall1b,X
     42  f97a
     43  f97a							; Make shadow b
     44  f97a
      0  f97a					      MKSHAD	shadow1b	; 21 cycles
      1  f97a		       4a		      LSR
      2  f97b		       ca		      DEX
      3  f97c		       15 8c		      ORA	shadow1b,X
      4  f97e		       e8		      INX
      5  f97f		       15 8c		      ORA	shadow1b,X
      6  f981		       95 8c		      STA	shadow1b,X
     46  f983
     47  f983							; Overlap wall b
     48  f983
      0  f983					      OVLWLL	wall1b, shadow1b	; 22 cycles
      1  f983		       b5 84		      LDA	wall1b,X
      2  f985		       ca		      DEX
      3  f986		       15 8c		      ORA	shadow1b,X
      4  f988		       55 8c		      EOR	shadow1b,X
      5  f98a		       e8		      INX
      6  f98b		       95 84		      STA	wall1b,X
     50  f98d
     51  f98d							; Overlap shadow b
     52  f98d
      0  f98d					      OVLSHD	wall1b, shadow1b	; 20 cycles
      1  f98d		       b5 8c		      LDA	shadow1b,X
      2  f98f		       15 84		      ORA	wall1b,X
      3  f991		       55 84		      EOR	wall1b,X
      4  f993		       95 8c		      STA	shadow1b,X
     54  f995
     55  f995							; Loop if not done
     56  f995
     57  f995		       e8		      INX		; 7 or 6 cycles
     58  f996		       e0 04		      CPX	#4
     59  f998		       d0 b5		      BNE	mergeLoop
     60  f99a
     61  f99a		       85 02		      STA	WSYNC
     62  f99c
     63  f99c							; By this time, we know approx 6 scanlines have passed
------- FILE main.asm
     40  f99c
     41  f99c							; Pad!
     42  f99c
     43  f99c		       a2 00		      LDX	#INDEXINIT
     44  f99e
     45  f99e				   upperPad
     46  f99e		       85 02		      STA	WSYNC
     47  f9a0
     48  f9a0		       e8		      INX
     49  f9a1		       e0 18		      CPX	#UPPAD_LIMIT
     50  f9a3		       d0 f9		      BNE	upperPad
     51  f9a5
     52  f9a5		       85 02		      STA	WSYNC
     53  f9a7
     54  f9a7							; Draw everything
     55  f9a7
------- FILE dispkern.asm LEVEL 2 PASS 2
      0  f9a7					      INCLUDE	"dispkern.asm"	; 121 Scanlines
      1  f9a7							; VePseu's display kernel
      2  f9a7
      3  f9a7							; This actually draws 121 lines to the screen instead of the usual 196. The
      4  f9a7							; only reason being it looks better with the small horizontal size of the
      5  f9a7							; picture
      6  f9a7
      7  f9a7		       4c b0 f9 	      JMP	drawStart
      8  f9aa
      9  f9aa				   wait 		; Waits the right amount of time to blank the mirrored playfield
     10  f9aa		       ea		      NOP
     11  f9ab		       ea		      NOP
     12  f9ac		       ea		      NOP
     13  f9ad		       ea		      NOP
     14  f9ae		       60		      RTS
     15  f9af
     16  f9af				   wait2		; Waits the right amount of time to blank the mirrored playfield
     17  f9af		       60		      RTS
     18  f9b0
     19  f9b0
     20  f9b0				   drawStart
     21  f9b0		       a0 80		      LDY	#SHAD_AND_0
     22  f9b2		       20 09 fa 	      JSR	firstWall
     23  f9b5		       a0 c0		      LDY	#SHAD_AND_1
     24  f9b7		       20 09 fa 	      JSR	firstWall
     25  f9ba		       a0 e0		      LDY	#SHAD_AND_2
     26  f9bc		       20 09 fa 	      JSR	firstWall
     27  f9bf		       a0 f0		      LDY	#SHAD_AND_3
     28  f9c1		       20 09 fa 	      JSR	firstWall
     29  f9c4		       a0 f8		      LDY	#SHAD_AND_4
     30  f9c6		       20 09 fa 	      JSR	firstWall
     31  f9c9		       a2 00		      LDX	#0
     32  f9cb		       20 49 fa 	      JSR	otherWall
     33  f9ce		       a2 01		      LDX	#1
     34  f9d0		       20 49 fa 	      JSR	otherWall
     35  f9d3		       a2 02		      LDX	#2
     36  f9d5		       20 49 fa 	      JSR	otherWall
     37  f9d8		       a2 01		      LDX	#1
     38  f9da		       20 49 fa 	      JSR	otherWall
     39  f9dd		       a2 00		      LDX	#0
     40  f9df		       20 49 fa 	      JSR	otherWall
     41  f9e2		       a0 f8		      LDY	#SHAD_AND_4
     42  f9e4		       20 09 fa 	      JSR	firstWall
     43  f9e7		       a0 f0		      LDY	#SHAD_AND_3
     44  f9e9		       20 09 fa 	      JSR	firstWall
     45  f9ec		       a0 e0		      LDY	#SHAD_AND_2
     46  f9ee		       20 09 fa 	      JSR	firstWall
     47  f9f1		       a0 c0		      LDY	#SHAD_AND_1
     48  f9f3		       20 09 fa 	      JSR	firstWall
     49  f9f6		       a0 80		      LDY	#SHAD_AND_0
     50  f9f8		       20 09 fa 	      JSR	firstWall
     51  f9fb
     52  f9fb		       a9 00		      LDA	#NULL
     53  f9fd		       85 0e		      STA	PF1
     54  f9ff		       85 0f		      STA	PF2
     55  fa01
     56  fa01		       85 02		      STA	WSYNC
     57  fa03
     58  fa03		       20 be fa 	      JSR	mmDraw
     59  fa06
     60  fa06		       4c 19 fb 	      JMP	stop
     61  fa09
------- FILE drawCode/1stWall.asm LEVEL 3 PASS 2
      0  fa09					      INCLUDE	"drawCode/1stWall.asm"
      1  fa09							; The draw code for the 1st wall and shadow
      2  fa09
      3  fa09				   firstWall
      4  fa09
      5  fa09		       a2 00		      LDX	#INDEXINIT
      6  fa0b
      7  fa0b				   _firstWall_loop
      8  fa0b
      9  fa0b		       85 02		      STA	WSYNC
     10  fa0d
     11  fa0d		       a5 9b		      LDA	wallColour
     12  fa0f		       85 08		      STA	COLUPF
     13  fa11		       a5 80		      LDA	wall1a
     14  fa13		       85 0e		      STA	PF1
     15  fa15		       a5 84		      LDA	wall1b
     16  fa17		       4a		      LSR
     17  fa18		       85 0f		      STA	PF2
     18  fa1a
     19  fa1a		       20 aa f9 	      JSR	wait
     20  fa1d
     21  fa1d		       a9 00		      LDA	#NULL
     22  fa1f		       85 0e		      STA	PF1
     23  fa21		       85 0f		      STA	PF2
     24  fa23
     25  fa23		       84 90		      STY	shift
     26  fa25
     27  fa25		       85 02		      STA	WSYNC
     28  fa27
     29  fa27		       a5 9c		      LDA	shadowColour
     30  fa29		       85 08		      STA	COLUPF
     31  fa2b		       a5 88		      LDA	shadow1a
     32  fa2d		       25 90		      AND	shift
     33  fa2f		       85 0e		      STA	PF1
     34  fa31		       85 0e		      STA	PF1
     35  fa33		       a5 8c		      LDA	shadow1b
     36  fa35		       25 90		      AND	shift
     37  fa37		       4a		      LSR
     38  fa38		       85 0f		      STA	PF2
     39  fa3a
     40  fa3a		       20 af f9 	      JSR	wait2
     41  fa3d
     42  fa3d		       a9 00		      LDA	#NULL
     43  fa3f		       85 0e		      STA	PF1
     44  fa41		       85 0f		      STA	PF2
     45  fa43
     46  fa43		       e8		      INX
     47  fa44		       e0 04		      CPX	#PIXH
     48  fa46		       d0 c3		      BNE	_firstWall_loop
     49  fa48
     50  fa48		       60		      RTS
     51  fa49
------- FILE dispkern.asm
------- FILE drawCode/othrWall.asm LEVEL 3 PASS 2
      0  fa49					      INCLUDE	"drawCode/othrWall.asm"
      1  fa49							; Can draw any wall
      2  fa49
      3  fa49				   otherWall
      4  fa49
      5  fa49		       a0 00		      LDY	#INDEXINIT
      6  fa4b
      7  fa4b				   _otherWall_loop
      8  fa4b
      9  fa4b		       85 02		      STA	WSYNC
     10  fa4d		       a5 9b		      LDA	wallColour
     11  fa4f		       85 08		      STA	COLUPF
     12  fa51		       b5 81		      LDA	wall2a,X
     13  fa53		       85 0e		      STA	PF1
     14  fa55		       b5 85		      LDA	wall2b,X
     15  fa57		       4a		      LSR
     16  fa58		       85 0f		      STA	PF2
     17  fa5a
     18  fa5a		       20 aa f9 	      JSR	wait
     19  fa5d
     20  fa5d		       a9 00		      LDA	#NULL
     21  fa5f		       85 0e		      STA	PF1
     22  fa61		       85 0f		      STA	PF2
     23  fa63		       85 02		      STA	WSYNC
     24  fa65
     25  fa65		       a5 9c		      LDA	shadowColour
     26  fa67		       85 08		      STA	COLUPF
     27  fa69		       b5 89		      LDA	shadow2a,X
     28  fa6b		       85 0e		      STA	PF1
     29  fa6d		       b5 8d		      LDA	shadow2b,X
     30  fa6f		       4a		      LSR
     31  fa70		       85 0f		      STA	PF2
     32  fa72
     33  fa72		       20 aa f9 	      JSR	wait
     34  fa75
     35  fa75		       a9 00		      LDA	#NULL
     36  fa77		       85 0e		      STA	PF1
     37  fa79		       85 0f		      STA	PF2
     38  fa7b
     39  fa7b		       c8		      INY
     40  fa7c
     41  fa7c		       c0 04		      CPY	#PIXH
     42  fa7e		       d0 cb		      BNE	_otherWall_loop
     43  fa80
     44  fa80		       60		      RTS
------- FILE dispkern.asm
------- FILE drawCode/mmDraw.asm LEVEL 3 PASS 2
      0  fa81					      INCLUDE	"drawCode/mmDraw.asm"
      1  fa81							; Draws the compass to the screen
      2  fa81
------- FILE drawCode/mmRender.asm LEVEL 4 PASS 2
      0  fa81					      INCLUDE	"drawCode/mmRender.asm"
      1  fa81							; Render the minimap
      2  fa81
      3  fa81				   mmRender
      4  fa81							; Set the colour of the player
      5  fa81		       a9 cc		      LDA	#PLYRCOLU
      6  fa83		       85 08		      STA	COLUPF
      7  fa85							; Set the colour of the map
      8  fa85		       a9 0e		      LDA	#MAPCOLU
      9  fa87		       85 06		      STA	COLUP0
     10  fa89		       85 07		      STA	COLUP1
     11  fa8b							; Get the player's position and translate it into horizontal movement
     12  fa8b		       a9 08		      LDA	#%00001000
     13  fa8d		       38		      SEC
     14  fa8e		       e5 91		      SBC	playerPos
     15  fa90		       0a		      ASL
     16  fa91		       0a		      ASL
     17  fa92		       0a		      ASL
     18  fa93		       0a		      ASL
     19  fa94		       85 9f		      STA	horzPos_plyr
     20  fa96
     21  fa96							; Set the map's position to the right values
     22  fa96		       a9 00		      LDA	#HADJ_A
     23  fa98		       85 9d		      STA	horzPos_mA
     24  fa9a		       a9 10		      LDA	#HADJ_B
     25  fa9c		       85 9e		      STA	horzPos_mB
     26  fa9e
     27  fa9e		       85 02		      STA	WSYNC
     28  faa0		       a2 00		      LDX	#0
     29  faa2
     30  faa2				   _renderWait_1
     31  faa2		       e8		      INX
     32  faa3		       e0 04		      CPX	#4
     33  faa5		       d0 fb		      BNE	_renderWait_1
     34  faa7		       ea		      NOP
     35  faa8		       ea		      NOP
     36  faa9		       85 10		      STA	RESP0
     37  faab		       85 11		      STA	RESP1
     38  faad
     39  faad		       a5 91		      LDA	playerPos
     40  faaf
     41  faaf		       85 02		      STA	WSYNC
     42  fab1		       a6 00		      LDX	0
     43  fab3
     44  fab3				   _renderWait_2
     45  fab3		       e8		      INX
     46  fab4		       e0 04		      CPX	#4
     47  fab6		       d0 fb		      BNE	_renderWait_2
     48  fab8		       ea		      NOP
     49  fab9		       ea		      NOP
     50  faba		       ea		      NOP
     51  fabb		       85 14		      STA	RESBL
     52  fabd
     53  fabd		       60		      RTS
------- FILE drawCode/mmDraw.asm
      4  fabe
      5  fabe				   mmDraw
      6  fabe		       a9 00		      LDA	#0
      7  fac0
      8  fac0		       20 81 fa 	      JSR	mmRender
      9  fac3
     10  fac3							; Load the player's position
     11  fac3
     12  fac3		       a5 9f		      LDA	horzPos_plyr
     13  fac5		       85 24		      STA	HMBL
     14  fac7		       a5 9d		      LDA	horzPos_mA
     15  fac9		       85 20		      STA	HMP0
     16  facb		       a5 9e		      LDA	horzPos_mB
     17  facd		       85 21		      STA	HMP1
     18  facf
     19  facf		       a9 00		      LDA	#NULL
     20  fad1		       85 1b		      STA	GRP0
     21  fad3		       85 1c		      STA	GRP1
     22  fad5		       85 2a		      STA	HMOVE
     23  fad7
     24  fad7		       a0 00		      LDY	#INDEXINIT
     25  fad9		       a6 91		      LDX	playerPos
     26  fadb
     27  fadb				   _mmLoop
     28  fadb		       85 02		      STA	WSYNC
     29  fadd
     30  fadd		       b1 a2		      LDA	(miniMapPtr),Y
     31  fadf		       85 1b		      STA	GRP0
     32  fae1		       c8		      INY
     33  fae2		       b1 a2		      LDA	(miniMapPtr),Y
     34  fae4		       85 1c		      STA	GRP1
     35  fae6		       c8		      INY
     36  fae7
     37  fae7		       8a		      TXA
     38  fae8		       38		      SEC
     39  fae9		       e5 92		      SBC	mapWidth
     40  faeb		       aa		      TAX
     41  faec		       29 f0		      AND	#%11110000
     42  faee
     43  faee		       c9 00		      CMP	#0
     44  faf0		       d0 0a		      BNE	_noDraw
     45  faf2
     46  faf2		       a9 02		      LDA	#2
     47  faf4		       85 1f		      STA	ENABL
     48  faf6		       85 a0		      STA	drawingPlyr
     49  faf8		       a9 01		      LDA	#1
     50  fafa		       85 27		      STA	VDELBL
     51  fafc
     52  fafc				   _noDraw
     53  fafc
     54  fafc		       a5 a0		      LDA	drawingPlyr
     55  fafe		       85 1f		      STA	ENABL
     56  fb00		       a9 00		      LDA	#0
     57  fb02		       85 a0		      STA	drawingPlyr
     58  fb04		       c0 20		      CPY	#32
     59  fb06		       d0 d3		      BNE	_mmLoop
     60  fb08
     61  fb08		       a9 00		      LDA	#0
     62  fb0a		       85 1f		      STA	ENABL
     63  fb0c
     64  fb0c		       85 02		      STA	WSYNC
     65  fb0e
     66  fb0e		       a9 00		      LDA	#NULL
     67  fb10		       85 1b		      STA	GRP0
     68  fb12		       85 1c		      STA	GRP1
     69  fb14		       85 06		      STA	COLUP0
     70  fb16		       85 07		      STA	COLUP1
     71  fb18
     72  fb18		       60		      RTS
------- FILE dispkern.asm
     65  fb19
     66  fb19				   stop
     67  fb19
     68  fb19
     69  fb19		       85 09		      STA	COLUBK
------- FILE main.asm
     57  fb1b
     58  fb1b
     59  fb1b							; Start VBLANK
     60  fb1b
     61  fb1b		       a9 c2		      LDA	#VBLANK_SET
     62  fb1d		       85 01		      STA	VBLANK
     63  fb1f
     64  fb1f							; Process input
     65  fb1f
------- FILE input.asm LEVEL 2 PASS 2
      0  fb1f					      INCLUDE	"input.asm"
      1  fb1f							; VePseu's controller input
      2  fb1f
      3  fb1f		       ad 80 02 	      LDA	SWCHA
      4  fb22		       29 10		      AND	#FFORD
      5  fb24		       c9 10		      CMP	#FFORD
      6  fb26		       f0 1c		      BEQ	CIN1_NOPRESS
      7  fb28
      8  fb28		       a5 91		      LDA	playerPos
      9  fb2a		       38		      SEC
     10  fb2b		       e5 96		      SBC	yLoss
     11  fb2d		       18		      CLC
     12  fb2e		       65 95		      ADC	yGain
     13  fb30		       a8		      TAY
     14  fb31		       b1 a4		      LDA	(mapPtr),Y
     15  fb33		       c9 00		      CMP	#NULL
     16  fb35		       d0 11		      BNE	CIN2
     17  fb37		       a5 97		      LDA	fordPressed
     18  fb39		       c9 00		      CMP	#NULL
     19  fb3b		       d0 0b		      BNE	CIN2
     20  fb3d		       84 91		      STY	playerPos
     21  fb3f		       84 97		      STY	fordPressed
     22  fb41		       4c 48 fb 	      JMP	CIN2
     23  fb44
     24  fb44				   CIN1_NOPRESS
     25  fb44		       a9 00		      LDA	#NULL
     26  fb46		       85 97		      STA	fordPressed
     27  fb48
     28  fb48				   CIN2
     29  fb48		       ad 80 02 	      LDA	SWCHA
     30  fb4b		       29 20		      AND	#FBACK
     31  fb4d		       c9 20		      CMP	#FBACK
     32  fb4f		       f0 1c		      BEQ	CIN2_NOPRESS
     33  fb51
     34  fb51		       a5 91		      LDA	playerPos
     35  fb53		       38		      SEC
     36  fb54		       e5 95		      SBC	yGain
     37  fb56		       18		      CLC
     38  fb57		       65 96		      ADC	yLoss
     39  fb59		       a8		      TAY
     40  fb5a		       b1 a4		      LDA	(mapPtr),Y
     41  fb5c		       c9 00		      CMP	#NULL
     42  fb5e		       d0 11		      BNE	CIN3
     43  fb60		       a5 98		      LDA	backPressed
     44  fb62		       c9 00		      CMP	#NULL
     45  fb64		       d0 0b		      BNE	CIN3
     46  fb66		       84 91		      STY	playerPos
     47  fb68		       84 98		      STY	backPressed
     48  fb6a		       4c 71 fb 	      JMP	CIN3
     49  fb6d
     50  fb6d				   CIN2_NOPRESS
     51  fb6d		       a9 00		      LDA	#NULL
     52  fb6f		       85 98		      STA	backPressed
     53  fb71
     54  fb71				   CIN3
     55  fb71		       ad 80 02 	      LDA	SWCHA
     56  fb74		       29 80		      AND	#FLEFT
     57  fb76		       c9 80		      CMP	#FLEFT
     58  fb78		       f0 16		      BEQ	CIN3_NOPRESS
     59  fb7a
     60  fb7a		       a5 9a		      LDA	rigtPressed
     61  fb7c		       c9 00		      CMP	#NULL
     62  fb7e		       d0 14		      BNE	CIN4
     63  fb80		       a5 a1		      LDA	direction
      0  fb82					      INA
      1  fb82		       18		      CLC
      2  fb83		       69 01		      ADC	#1
     65  fb85		       29 03		      AND	#%00000011
     66  fb87		       85 a1		      STA	direction
     67  fb89		       a9 01		      LDA	#1
     68  fb8b		       85 9a		      STA	rigtPressed
     69  fb8d		       4c 94 fb 	      JMP	CIN4
     70  fb90
     71  fb90				   CIN3_NOPRESS
     72  fb90		       a9 00		      LDA	#NULL
     73  fb92		       85 9a		      STA	rigtPressed
     74  fb94
     75  fb94				   CIN4
     76  fb94		       ad 80 02 	      LDA	SWCHA
     77  fb97		       29 40		      AND	#FRIGT
     78  fb99		       c9 40		      CMP	#FRIGT
     79  fb9b		       f0 16		      BEQ	CIN4_NOPRESS
     80  fb9d
     81  fb9d		       a5 99		      LDA	leftPressed
     82  fb9f		       c9 00		      CMP	#NULL
     83  fba1		       d0 14		      BNE	CDIR1
     84  fba3		       a5 a1		      LDA	direction
      0  fba5					      DEA
      1  fba5		       38		      SEC
      2  fba6		       e9 01		      SBC	#1
     86  fba8		       29 03		      AND	#%00000011
     87  fbaa		       85 a1		      STA	direction
     88  fbac		       a9 01		      LDA	#1
     89  fbae		       85 99		      STA	leftPressed
     90  fbb0		       4c b7 fb 	      JMP	CDIR1
     91  fbb3
     92  fbb3				   CIN4_NOPRESS
     93  fbb3		       a9 00		      LDA	#NULL
     94  fbb5		       85 99		      STA	leftPressed
     95  fbb7
     96  fbb7				   CDIR1
     97  fbb7		       a5 a1		      LDA	direction
     98  fbb9		       c5 00		      CMP	DNORTH
     99  fbbb		       d0 16		      BNE	CDIR2
    100  fbbd
    101  fbbd		       a5 92		      LDA	mapWidth
    102  fbbf		       85 96		      STA	yLoss
    103  fbc1		       a9 01		      LDA	#ONE
    104  fbc3		       85 93		      STA	xGain
    105  fbc5		       a9 86		      LDA	#WCOLU
    106  fbc7		       85 9b		      STA	wallColour
    107  fbc9		       a9 82		      LDA	#SCOLU
    108  fbcb		       85 9c		      STA	shadowColour
    109  fbcd		       a9 00		      LDA	#NULL
    110  fbcf		       85 95		      STA	yGain
    111  fbd1		       85 94		      STA	xLoss
    112  fbd3
    113  fbd3				   CDIR2
    114  fbd3		       a5 a1		      LDA	direction
    115  fbd5		       c5 02		      CMP	DSOUTH
    116  fbd7		       d0 16		      BNE	CDIR3
    117  fbd9
    118  fbd9		       a5 92		      LDA	mapWidth
    119  fbdb		       85 95		      STA	yGain
    120  fbdd		       a9 01		      LDA	#ONE
    121  fbdf		       85 94		      STA	xLoss
    122  fbe1		       a9 86		      LDA	#WCOLU
    123  fbe3		       85 9b		      STA	wallColour
    124  fbe5		       a9 82		      LDA	#SCOLU
    125  fbe7		       85 9c		      STA	shadowColour
    126  fbe9		       a9 00		      LDA	#NULL
    127  fbeb		       85 96		      STA	yLoss
    128  fbed		       85 93		      STA	xGain
    129  fbef
    130  fbef				   CDIR3
    131  fbef		       a5 a1		      LDA	direction
    132  fbf1		       c5 01		      CMP	DWEST
    133  fbf3		       d0 16		      BNE	CDIR4
    134  fbf5
    135  fbf5		       a5 92		      LDA	mapWidth
    136  fbf7		       85 93		      STA	xGain
    137  fbf9		       a9 01		      LDA	#ONE
    138  fbfb		       85 95		      STA	yGain
    139  fbfd		       a9 82		      LDA	#SCOLU
    140  fbff		       85 9b		      STA	wallColour
    141  fc01		       a9 86		      LDA	#WCOLU
    142  fc03		       85 9c		      STA	shadowColour
    143  fc05		       a9 00		      LDA	#NULL
    144  fc07		       85 96		      STA	yLoss
    145  fc09		       85 94		      STA	xLoss
    146  fc0b
    147  fc0b				   CDIR4
    148  fc0b		       a5 a1		      LDA	direction
    149  fc0d		       c5 03		      CMP	DEAST
    150  fc0f		       d0 16		      BNE	CEND
    151  fc11
    152  fc11		       a5 92		      LDA	mapWidth
    153  fc13		       85 94		      STA	xLoss
    154  fc15		       a9 01		      LDA	#ONE
    155  fc17		       85 96		      STA	yLoss
    156  fc19		       a9 82		      LDA	#SCOLU
    157  fc1b		       85 9b		      STA	wallColour
    158  fc1d		       a9 86		      LDA	#WCOLU
    159  fc1f		       85 9c		      STA	shadowColour
    160  fc21		       a9 00		      LDA	#NULL
    161  fc23		       85 95		      STA	yGain
    162  fc25		       85 93		      STA	xGain
    163  fc27
    164  fc27				   CEND
    165  fc27		       85 02		      STA	WSYNC
------- FILE main.asm
     67  fc29
     68  fc29							; Pad again
     69  fc29
     70  fc29		       a2 00		      LDX	#INDEXINIT
     71  fc2b
     72  fc2b				   lowerPad
     73  fc2b		       85 02		      STA	WSYNC
     74  fc2d
     75  fc2d		       e8		      INX
     76  fc2e		       e0 4d		      CPX	#LOPAD_LIMIT
     77  fc30		       d0 f9		      BNE	lowerPad
     78  fc32
     79  fc32							; Get everything ready for VSYNC
     80  fc32
     81  fc32		       a9 00		      LDA	#NULL
     82  fc34		       85 01		      STA	VBLANK
     83  fc36		       a9 02		      LDA	#VSYNC_SET
     84  fc38		       85 02		      STA	WSYNC
     85  fc3a		       4c 2d f8 	      JMP	screenStart
     86  fc3d
     87  fffa					      ORG	$FFFA
     88  fffa
     89  fffa		       00 f8		      DC.W	start	; Something
     90  fffc		       00 f8		      DC.W	start	; Entrypoint
     91  fffe		       2d f8		      DC.W	screenStart	; Something else
     92  10000
     93  10000					       END
