------- FILE main.asm LEVEL 1 PASS 2
      1  10000 ????						; VePseu's main file
      2  10000 ????
      3  10000 ????				       processor	6502
      4  10000 ????
------- FILE vepseu.h LEVEL 2 PASS 2
      0  10000 ????				       INCLUDE	"vepseu.h"
      1  10000 ????						; VePseu's header file
      2  10000 ????
      3  0000					      ORG	$0000
      4  0000
      5  0000		       00 00	   NULL       =	0
      6  0000
      7  0000		       00 00	   RSHIFT     =	0
      8  0000		       00 01	   LSHIFT     =	1
      9  0000
     10  0000		       00 07	   SHADCNT    =	7
     11  0000		       00 04	   PIXH       =	4
     12  0000		       00 05	   NWH	      =	5
     13  0000
     14  0000		       00 0e	   MCOLU      =	$0E
     15  0000		       00 06	   SCOLU      =	$06
     16  0000
     17  0000		       00 c2	   VBLANK_SET =	%11000010
     18  0000		       00 02	   VSYNC_SET  =	2
     19  0000
     20  0000		       00 01	   ONE	      =	1
     21  0000		       00 00	   INDEXINIT  =	0
     22  0000		       00 04	   WAITTIME   =	4
     23  0000
     24  0000		       00 10	   WALLCNT    =	16
     25  0000
     26  0000		       00 18	   UPPAD_LIMIT =	24
     27  0000		       00 61	   LOPAD_LIMIT =	97
     28  0000
     29  0000		       00 80	   LAYER2_AND_0 =	%10000000
     30  0000		       00 f8	   LAYER2_AND_1 =	%11111000
     31  0000		       00 07	   LAYER2_AND_2 =	%00000111
     32  0000
     33  0000		       00 80	   LAYER3_AND_0 =	%10000000
     34  0000		       00 e0	   LAYER3_AND_1 =	%11100000
     35  0000		       00 1c	   LAYER3_AND_2 =	%00011100
     36  0000		       00 03	   LAYER3_AND_3 =	%00000011
     37  0000
     38  0000		       00 80	   SHAD_AND_0 =	%10000000
     39  0000		       00 c0	   SHAD_AND_1 =	%11000000
     40  0000		       00 e0	   SHAD_AND_2 =	%11100000
     41  0000		       00 f0	   SHAD_AND_3 =	%11110000
     42  0000		       00 f8	   SHAD_AND_4 =	%11111000
     43  0000
     44  0000		       00 00	   NOIN       =	0
     45  0000		       00 10	   FFORD      =	%00010000
     46  0000		       00 20	   FBACK      =	%00100000
     47  0000		       00 80	   FLEFT      =	%10000000
     48  0000		       00 40	   FRIGT      =	%01000000
     49  0000		       00 80	   ITRIG      =	%10000000
     50  0000		       00 ff	   SWGET      =	$FF
     51  0000
     52  0000		       00 00	   VSYNC      =	$00
     53  0000		       00 01	   VBLANK     =	$01
     54  0000		       00 02	   WSYNC      =	$02
     55  0000				   RSYNC
     56  0000				   NUSIZ0
     57  0000				   NUSIZ1
     58  0000				   COLUP0
     59  0000				   COLUP1
     60  0000		       00 08	   COLUPF     =	$08
     61  0000		       00 09	   COLUBK     =	$09
     62  0000				   CTRLPF
     63  0000				   REFP0
     64  0000				   REFP1
     65  0000		       00 0d	   PF0	      =	$0D
     66  0000		       00 0e	   PF1	      =	$0E
     67  0000		       00 0f	   PF2	      =	$0F
     68  0000				   RESP0
     69  0000				   RESP1
     70  0000				   RESM0
     71  0000				   RESM1
     72  0000				   RESBL
     73  0000				   AUDC0
     74  0000				   AUDC1
     75  0000				   AUDF0
     76  0000				   AUDF1
     77  0000				   AUDV0
     78  0000				   AUDV1
     79  0000				   GRP0
     80  0000				   GRP1
     81  0000				   ENAM0
     82  0000				   ENAM1
     83  0000				   ENABL
     84  0000				   HMP0
     85  0000				   HMP1
     86  0000				   HMM0
     87  0000				   HMM1
     88  0000				   HMBL
     89  0000				   VDELP0
     90  0000				   VDELP1
     91  0000				   VDELBL
     92  0000				   RESMP0
     93  0000				   RESMP1
     94  0000				   HMOVE
     95  0000				   HMCLR
     96  0000				   CXCLR
     97  0000
     98  0000		       00 3c	   INPT4      =	$3C
     99  0000
    100  0000		       02 80	   SWCHA      =	$0280
    101  0000		       02 81	   SWACNT     =	$0281
    102  0000
    103  0000		       00 00	   cleanStart =	0
    104  0000		       00 00	   cleanEnd   =	0
    105  0000
    106  0000							; Variables...
    107  0000
    108  0000		       00 80	   wall1a     =	$80
    109  0000		       00 81	   wall2a     =	$81
    110  0000		       00 82	   wall3a     =	$82
    111  0000		       00 83	   wall4a     =	$83
    112  0000		       00 84	   wall1b     =	$84
    113  0000		       00 85	   wall2b     =	$85
    114  0000		       00 86	   wall3b     =	$86
    115  0000		       00 87	   wall4b     =	$87
    116  0000		       00 88	   shadow1a   =	$88
    117  0000		       00 89	   shadow2a   =	$89
    118  0000		       00 8a	   shadow3a   =	$8A
    119  0000		       00 8b	   shadow4a   =	$8B
    120  0000		       00 8c	   shadow1b   =	$8C
    121  0000		       00 8d	   shadow2b   =	$8D
    122  0000		       00 8e	   shadow3b   =	$8E
    123  0000		       00 8f	   shadow4b   =	$8F
    124  0000
    125  0000		       00 90	   shift      =	$90
    126  0000		       00 91	   playerPos  =	$91
    127  0000		       00 92	   mapWidth   =	$92
    128  0000		       00 93	   xGain      =	$93
    129  0000		       00 94	   xLoss      =	$94
    130  0000		       00 95	   yGain      =	$95
    131  0000		       00 96	   yLoss      =	$96
    132  0000		       00 97	   trigPressed =	$97
    133  0000		       00 98	   mapPtr     =	$98
    134  0000
    135  0000		       00 ff	   stack      =	$FF
------- FILE main.asm
      6  0000
      7  0000					      SEG
      8  0000
      9  0000							;Initialize everything
     10  0000
     11  f000					      ORG	$F000
     12  f000
------- FILE map.asm LEVEL 2 PASS 2
      0  f000					      INCLUDE	"map.asm"
      1  f000							; VePseu's maps
      2  f000
      3  f000		       00 d1	   MAP_01_POS =	$D1
      4  f000		       00 10	   MAP_01_WDTH =	$10
      5  f000		       01 00	   MAP_01_SZ  =	$100
      6  f000
      7  f000				   mapList
      8  f000		       02 f0		      DC.W	map_01
      9  f002
     10  f002				   map_01
     11  f002		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     12  f012		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     13  f022		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     14  f032		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 FF
     15  f042		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     16  f052		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     17  f062		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     18  f072		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF FF FF
     19  f082		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 FF 00 FF 00 FF 00 00 FF 00 FF
     20  f092		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF 00 FF 00 FF FF FF FF 00 FF
     21  f0a2		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     22  f0b2		       ff 00 00 00*	      HEX	FF 00 00 00 00 00 00 00 FF 00 00 00 00 00 00 FF
     23  f0c2		       ff 00 ff ff*	      HEX	FF 00 FF FF FF FF FF FF FF FF FF FF FF FF 00 FF
     24  f0d2		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     25  f0e2		       ff 00 ff 00*	      HEX	FF 00 FF 00 00 00 00 00 00 00 00 00 00 FF 00 FF
     26  f0f2		       ff ff ff 00*	      HEX	FF FF FF 00 00 00 00 00 00 00 00 00 00 FF FF FF
     27  f102
     28  f102				   map_01_load
     29  f102		       a9 d1		      LDA	#MAP_01_POS
     30  f104		       85 91		      STA	playerPos
     31  f106		       a9 10		      LDA	#MAP_01_WDTH
     32  f108		       85 92		      STA	mapWidth
     33  f10a		       ad 00 f0 	      LDA	mapList
     34  f10d		       85 98		      STA	mapPtr
     35  f10f		       e8		      INX
     36  f110		       ad 01 f0 	      LDA	mapList + 1
     37  f113		       85 99		      STA	mapPtr + 1
     38  f115		       60		      RTS
------- FILE main.asm
     14  f116
     15  f800					      ORG	$F800
     16  f800
     17  f800				   start
     18  f800
------- FILE init.asm LEVEL 2 PASS 2
      0  f800					      INCLUDE	"init.asm"
      1  f800							; VePseu's init file
      2  f800
      3  f800		       a2 ff		      LDX	#stack
      4  f802		       9a		      TXS
      5  f803
      6  f803		       a9 00		      LDA	#NULL
      7  f805
      8  f805		       d8		      CLD
      9  f806		       18		      CLC
     10  f807		       58		      CLI
     11  f808		       b8		      CLV
     12  f809
     13  f809		       a2 00		      LDX	#INDEXINIT
     14  f80b
     15  f80b				   cleanLoop
     16  f80b
     17  f80b		       95 00		      STA	cleanStart,X
     18  f80d		       e8		      INX
     19  f80e
     20  f80e		       e0 00		      CPX	#cleanEnd
     21  f810		       d0 f9		      BNE	cleanLoop
     22  f812
     23  f812		       20 02 f1 	      JSR	map_01_load
     24  f815
     25  f815		       a5 92		      LDA	mapWidth
     26  f817		       85 96		      STA	yLoss
     27  f819		       a9 01		      LDA	#ONE
     28  f81b		       85 93		      STA	xGain
     29  f81d		       a9 00		      LDA	#NULL
     30  f81f		       85 95		      STA	yGain
     31  f821		       85 94		      STA	xLoss
------- FILE main.asm
     20  f823
     21  f823		       a9 02		      LDA	#VSYNC_SET
     22  f825
     23  f825				   screenStart
     24  f825
     25  f825							; Start vsync (3 scanlines)
     26  f825		       85 00		      STA	VSYNC
     27  f827
     28  f827		       85 02		      STA	WSYNC
     29  f829		       85 02		      STA	WSYNC
     30  f82b		       a9 00		      LDA	#NULL
     31  f82d		       85 02		      STA	WSYNC
     32  f82f
     33  f82f		       85 00		      STA	VSYNC
     34  f831
     35  f831							; Render everything (12 scanlines)
     36  f831
------- FILE walrend.asm LEVEL 2 PASS 2
      0  f831					      INCLUDE	"walrend.asm"	; 6 scanlines
      1  f831							; VePseu's wall renderer
      2  f831
      3  f831					      MAC	y_pos_adv
      4  f831
      5  f831					      TYA
      6  f831					      CLC
      7  f831					      ADC	yGain
      8  f831					      SEC
      9  f831					      SBC	yLoss
     10  f831					      TAY
     11  f831
     12  f831					      ENDM		; 14 cycles
     13  f831
     14  f831					      MAC	x_pos_gan
     15  f831
     16  f831					      TYA
     17  f831					      CLC
     18  f831					      ADC	xGain
     19  f831					      SEC
     20  f831					      SBC	xLoss
     21  f831					      TAY
     22  f831
     23  f831					      ENDM		; 14 cycles
     24  f831
     25  f831					      MAC	x_pos_los
     26  f831
     27  f831					      TYA
     28  f831					      CLC
     29  f831					      ADC	xLoss
     30  f831					      SEC
     31  f831					      SBC	xGain
     32  f831					      TAY
     33  f831
     34  f831					      ENDM		; 14 cycles
     35  f831
     36  f831		       a4 91		      LDY	playerPos	; 3 cycles
     37  f833
------- FILE r_layers/layer1.asm LEVEL 3 PASS 2
      0  f833					      INCLUDE	"r_layers/layer1.asm"	; 86 cycles
      1  f833							; First layer of rendering (86 cycles)
      2  f833
      0  f833					      Y_POS_ADV		; 14 cycles
      1  f833
      2  f833		       98		      TYA
      3  f834		       18		      CLC
      4  f835		       65 95		      ADC	yGain
      5  f837		       38		      SEC
      6  f838		       e5 96		      SBC	yLoss
      7  f83a		       a8		      TAY
      8  f83b
      4  f83b
      0  f83b					      X_POS_GAN		; 23 cycles
      1  f83b
      2  f83b		       98		      TYA
      3  f83c		       18		      CLC
      4  f83d		       65 93		      ADC	xGain
      5  f83f		       38		      SEC
      6  f840		       e5 94		      SBC	xLoss
      7  f842		       a8		      TAY
      8  f843
      6  f843		       b1 98		      LDA	(mapPtr),Y
      7  f845		       85 8c		      STA	shadow1b
      8  f847
      0  f847					      X_POS_LOS		; 26 cycles
      1  f847
      2  f847		       98		      TYA
      3  f848		       18		      CLC
      4  f849		       65 94		      ADC	xLoss
      5  f84b		       38		      SEC
      6  f84c		       e5 93		      SBC	xGain
      7  f84e		       a8		      TAY
      8  f84f
     10  f84f		       b1 98		      LDA	(mapPtr),Y
     11  f851		       85 80		      STA	wall1a
     12  f853		       85 84		      STA	wall1b
     13  f855
      0  f855					      X_POS_LOS		; 23 cycles
      1  f855
      2  f855		       98		      TYA
      3  f856		       18		      CLC
      4  f857		       65 94		      ADC	xLoss
      5  f859		       38		      SEC
      6  f85a		       e5 93		      SBC	xGain
      7  f85c		       a8		      TAY
      8  f85d
     15  f85d		       b1 98		      LDA	(mapPtr),Y
     16  f85f		       85 88		      STA	shadow1a
------- FILE walrend.asm
     39  f861
------- FILE r_layers/layer2.asm LEVEL 3 PASS 2
      0  f861					      INCLUDE	"r_layers/layer2.asm"	; 148 cycles
      1  f861							; Second Layer (148 cycles)
      2  f861
      0  f861					      Y_POS_ADV		; 14 cycles
      1  f861
      2  f861		       98		      TYA
      3  f862		       18		      CLC
      4  f863		       65 95		      ADC	yGain
      5  f865		       38		      SEC
      6  f866		       e5 96		      SBC	yLoss
      7  f868		       a8		      TAY
      8  f869
      4  f869
      0  f869					      X_POS_LOS		; 25 cycles
      1  f869
      2  f869		       98		      TYA
      3  f86a		       18		      CLC
      4  f86b		       65 94		      ADC	xLoss
      5  f86d		       38		      SEC
      6  f86e		       e5 93		      SBC	xGain
      7  f870		       a8		      TAY
      8  f871
      6  f871		       b1 98		      LDA	(mapPtr),Y
      7  f873		       29 80		      AND	#LAYER2_AND_0
      8  f875		       85 89		      STA	shadow2a
      9  f877
      0  f877					      X_POS_GAN		; 25 cycles
      1  f877
      2  f877		       98		      TYA
      3  f878		       18		      CLC
      4  f879		       65 93		      ADC	xGain
      5  f87b		       38		      SEC
      6  f87c		       e5 94		      SBC	xLoss
      7  f87e		       a8		      TAY
      8  f87f
     11  f87f		       b1 98		      LDA	(mapPtr),Y
     12  f881		       29 f8		      AND	#LAYER2_AND_1
     13  f883		       85 81		      STA	wall2a
     14  f885
      0  f885					      X_POS_GAN		; 31 cycles
      1  f885
      2  f885		       98		      TYA
      3  f886		       18		      CLC
      4  f887		       65 93		      ADC	xGain
      5  f889		       38		      SEC
      6  f88a		       e5 94		      SBC	xLoss
      7  f88c		       a8		      TAY
      8  f88d
     16  f88d		       b1 98		      LDA	(mapPtr),Y
     17  f88f		       29 07		      AND	#LAYER2_AND_2
     18  f891		       85 85		      STA	wall2b
     19  f893		       05 81		      ORA	wall2a
     20  f895		       85 81		      STA	wall2a
     21  f897
      0  f897					      X_POS_GAN		; 28 cycles
      1  f897
      2  f897		       98		      TYA
      3  f898		       18		      CLC
      4  f899		       65 93		      ADC	xGain
      5  f89b		       38		      SEC
      6  f89c		       e5 94		      SBC	xLoss
      7  f89e		       a8		      TAY
      8  f89f
     23  f89f		       b1 98		      LDA	(mapPtr),Y
     24  f8a1		       29 f8		      AND	#LAYER2_AND_1
     25  f8a3		       05 85		      ORA	wall2b
     26  f8a5		       85 85		      STA	wall2b
     27  f8a7
      0  f8a7					      X_POS_GAN		; 25 cycles
      1  f8a7
      2  f8a7		       98		      TYA
      3  f8a8		       18		      CLC
      4  f8a9		       65 93		      ADC	xGain
      5  f8ab		       38		      SEC
      6  f8ac		       e5 94		      SBC	xLoss
      7  f8ae		       a8		      TAY
      8  f8af
     29  f8af		       b1 98		      LDA	(mapPtr),Y
     30  f8b1		       29 80		      AND	#LAYER2_AND_0
     31  f8b3		       85 8d		      STA	shadow2b
------- FILE walrend.asm
     41  f8b5
------- FILE r_layers/layer3.asm LEVEL 3 PASS 2
      0  f8b5					      INCLUDE	"r_layers/layer3.asm"	; 182 cycles
      1  f8b5							; Third layer (104 cycles)
      2  f8b5
      0  f8b5					      Y_POS_ADV		; 14 cycles
      1  f8b5
      2  f8b5		       98		      TYA
      3  f8b6		       18		      CLC
      4  f8b7		       65 95		      ADC	yGain
      5  f8b9		       38		      SEC
      6  f8ba		       e5 96		      SBC	yLoss
      7  f8bc		       a8		      TAY
      8  f8bd
      4  f8bd
      0  f8bd					      X_POS_GAN		; 25
      1  f8bd
      2  f8bd		       98		      TYA
      3  f8be		       18		      CLC
      4  f8bf		       65 93		      ADC	xGain
      5  f8c1		       38		      SEC
      6  f8c2		       e5 94		      SBC	xLoss
      7  f8c4		       a8		      TAY
      8  f8c5
      6  f8c5		       b1 98		      LDA	(mapPtr),Y
      7  f8c7		       29 80		      AND	#LAYER3_AND_0
      8  f8c9		       85 8e		      STA	shadow3b
      9  f8cb
      0  f8cb					      X_POS_LOS		; 25
      1  f8cb
      2  f8cb		       98		      TYA
      3  f8cc		       18		      CLC
      4  f8cd		       65 94		      ADC	xLoss
      5  f8cf		       38		      SEC
      6  f8d0		       e5 93		      SBC	xGain
      7  f8d2		       a8		      TAY
      8  f8d3
     11  f8d3		       b1 98		      LDA	(mapPtr),Y
     12  f8d5		       29 e0		      AND	#LAYER3_AND_1
     13  f8d7		       85 86		      STA	wall3b
     14  f8d9
      0  f8d9					      X_POS_LOS		; 29
      1  f8d9
      2  f8d9		       98		      TYA
      3  f8da		       18		      CLC
      4  f8db		       65 94		      ADC	xLoss
      5  f8dd		       38		      SEC
      6  f8de		       e5 93		      SBC	xGain
      7  f8e0		       a8		      TAY
      8  f8e1
     16  f8e1		       b1 98		      LDA	(mapPtr),Y
     17  f8e3		       29 1c		      AND	#LAYER3_AND_2
     18  f8e5		       05 86		      ORA	wall3b
     19  f8e7		       85 86		      STA	wall3b
     20  f8e9
      0  f8e9					      X_POS_LOS		; 31
      1  f8e9
      2  f8e9		       98		      TYA
      3  f8ea		       18		      CLC
      4  f8eb		       65 94		      ADC	xLoss
      5  f8ed		       38		      SEC
      6  f8ee		       e5 93		      SBC	xGain
      7  f8f0		       a8		      TAY
      8  f8f1
     22  f8f1		       b1 98		      LDA	(mapPtr),Y
     23  f8f3		       29 03		      AND	#LAYER3_AND_3
     24  f8f5		       85 82		      STA	wall3a
     25  f8f7		       05 86		      ORA	wall3b
     26  f8f9		       85 86		      STA	wall3b
     27  f8fb
      0  f8fb					      X_POS_LOS		; 29
      1  f8fb
      2  f8fb		       98		      TYA
      3  f8fc		       18		      CLC
      4  f8fd		       65 94		      ADC	xLoss
      5  f8ff		       38		      SEC
      6  f900		       e5 93		      SBC	xGain
      7  f902		       a8		      TAY
      8  f903
     29  f903		       b1 98		      LDA	(mapPtr),Y
     30  f905		       29 1c		      AND	#LAYER3_AND_2
     31  f907		       05 82		      ORA	wall3a
     32  f909		       85 82		      STA	wall3a
     33  f90b
      0  f90b					      X_POS_LOS		; 29
      1  f90b
      2  f90b		       98		      TYA
      3  f90c		       18		      CLC
      4  f90d		       65 94		      ADC	xLoss
      5  f90f		       38		      SEC
      6  f910		       e5 93		      SBC	xGain
      7  f912		       a8		      TAY
      8  f913
     35  f913		       b1 98		      LDA	(mapPtr),Y
     36  f915		       29 e0		      AND	#LAYER3_AND_1
     37  f917		       05 82		      ORA	wall3a
     38  f919		       85 82		      STA	wall3a
     39  f91b
      0  f91b					      X_POS_LOS		; 25
      1  f91b
      2  f91b		       98		      TYA
      3  f91c		       18		      CLC
      4  f91d		       65 94		      ADC	xLoss
      5  f91f		       38		      SEC
      6  f920		       e5 93		      SBC	xGain
      7  f922		       a8		      TAY
      8  f923
     41  f923		       b1 98		      LDA	(mapPtr),Y
     42  f925		       29 80		      AND	#LAYER3_AND_0
     43  f927		       85 8a		      STA	shadow3a
------- FILE walrend.asm
     43  f929
------- FILE r_layers/layer4.asm LEVEL 3 PASS 2
      0  f929					      INCLUDE	"r_layers/layer4.asm"	; 8 cycles
      1  f929							; Since layer four is the last layer, it is always set to full(it looks better)
      2  f929
      3  f929		       a9 ff		      LDA	#$FF
      4  f92b		       85 83		      STA	wall4a
      5  f92d		       85 87		      STA	wall4b
------- FILE walrend.asm
     45  f92f
     46  f92f		       85 02		      STA	WSYNC	; By this time 6 scanlines have passed
------- FILE main.asm
     38  f931
------- FILE scrend.asm LEVEL 2 PASS 2
      0  f931					      INCLUDE	"scrend.asm"	; 6 Scanlines
      1  f931							; VePseu's screen renderer
      2  f931
      3  f931							; Remove the shadows incase only 1 wall is drawn (22 cycles)
      4  f931		       a5 88		      LDA	shadow1a
      5  f933		       05 80		      ORA	wall1a
      6  f935		       45 80		      EOR	wall1a
      7  f937		       29 f8		      AND	#%11111000
      8  f939		       85 88		      STA	shadow1a
      9  f93b
     10  f93b		       a5 8c		      LDA	shadow1b
     11  f93d		       05 84		      ORA	wall1b
     12  f93f		       45 84		      EOR	wall1b
     13  f941		       29 f8		      AND	#%11111000
     14  f943		       85 8c		      STA	shadow1b
     15  f945
     16  f945
     17  f945							; Merge walls (approx 381 cycles)
     18  f945
     19  f945		       a2 01		      LDX	#1
     20  f947
     21  f947				   mergeLoop
     22  f947
     23  f947							; Merge wall a
     24  f947
     25  f947		       b5 80		      LDA	wall1a,X	; 17 cycles
     26  f949		       ca		      DEX
     27  f94a		       15 80		      ORA	wall1a,X
     28  f94c		       e8		      INX
     29  f94d		       95 80		      STA	wall1a,X
     30  f94f
     31  f94f							; Make shadow a
     32  f94f
     33  f94f		       4a		      LSR		; 21 cycles
     34  f950		       ca		      DEX
     35  f951		       15 88		      ORA	shadow1a,X
     36  f953		       e8		      INX
     37  f954		       15 88		      ORA	shadow1a,X
     38  f956		       95 88		      STA	shadow1a,X
     39  f958
     40  f958							; Overlap wall a
     41  f958
     42  f958		       b5 80		      LDA	wall1a,X	; 22 cycles
     43  f95a		       ca		      DEX
     44  f95b		       15 88		      ORA	shadow1a,X
     45  f95d		       55 88		      EOR	shadow1a,X
     46  f95f		       e8		      INX
     47  f960		       95 80		      STA	wall1a,X
     48  f962
     49  f962							; Overlap shadow a
     50  f962
     51  f962		       b5 88		      LDA	shadow1a,X	; 20 cycles
     52  f964		       15 80		      ORA	wall1a,X
     53  f966		       55 80		      EOR	wall1a,X
     54  f968		       95 88		      STA	shadow1a,X
     55  f96a
     56  f96a							; Merge wall b
     57  f96a
     58  f96a		       b5 84		      LDA	wall1b,X	; 17 cycles
     59  f96c		       ca		      DEX
     60  f96d		       15 84		      ORA	wall1b,X
     61  f96f		       e8		      INX
     62  f970		       95 84		      STA	wall1b,X
     63  f972
     64  f972							; Make shadow b
     65  f972
     66  f972		       4a		      LSR		; 31 cycles
     67  f973		       ca		      DEX
     68  f974		       15 8c		      ORA	shadow1b,X
     69  f976		       e8		      INX
     70  f977		       15 8c		      ORA	shadow1b,X
     71  f979		       95 8c		      STA	shadow1b,X
     72  f97b
     73  f97b							; Overlap wall b
     74  f97b
     75  f97b		       b5 84		      LDA	wall1b,X	; 22 cycles
     76  f97d		       ca		      DEX
     77  f97e		       15 8c		      ORA	shadow1b,X
     78  f980		       55 8c		      EOR	shadow1b,X
     79  f982		       e8		      INX
     80  f983		       95 84		      STA	wall1b,X
     81  f985
     82  f985							; Overlap shadow b
     83  f985
     84  f985		       b5 8c		      LDA	shadow1b,X	; 20 cycles
     85  f987		       15 84		      ORA	wall1b,X
     86  f989		       55 84		      EOR	wall1b,X
     87  f98b		       95 8c		      STA	shadow1b,X
     88  f98d
     89  f98d							; Loop if not done
     90  f98d
     91  f98d		       e8		      INX		; 7 or 6 cycles
     92  f98e		       e0 04		      CPX	#4
     93  f990		       d0 b5		      BNE	mergeLoop
     94  f992
     95  f992		       85 02		      STA	WSYNC
     96  f994
     97  f994							; By this time, we know approx 6 scanlines have passed
------- FILE main.asm
     40  f994
     41  f994							; Pad!
     42  f994
     43  f994		       a2 00		      LDX	#INDEXINIT
     44  f996
     45  f996				   upperPad
     46  f996		       85 02		      STA	WSYNC
     47  f998
     48  f998		       e8		      INX
     49  f999		       e0 18		      CPX	#UPPAD_LIMIT
     50  f99b		       d0 f9		      BNE	upperPad
     51  f99d
     52  f99d		       85 02		      STA	WSYNC
     53  f99f
     54  f99f							; Draw everything
     55  f99f
------- FILE dispkern.asm LEVEL 2 PASS 2
      0  f99f					      INCLUDE	"dispkern.asm"	; 121 Scanlines
      1  f99f							; VePseu's display kernel
      2  f99f
      3  f99f							; This actually draws 121 lines to the screen instead of the usual 196. The
      4  f99f							; only reason being it looks better with the small horizontal size of the
      5  f99f							; picture
      6  f99f
      7  f99f		       4c a8 f9 	      JMP	drawStart
      8  f9a2
      9  f9a2				   wait 		; Waits the right amount of time to blank the mirrored playfield
     10  f9a2		       ea		      NOP
     11  f9a3		       ea		      NOP
     12  f9a4		       ea		      NOP
     13  f9a5		       ea		      NOP
     14  f9a6		       60		      RTS
     15  f9a7
     16  f9a7				   wait2		; Waits the right amount of time to blank the mirrored playfield
     17  f9a7		       60		      RTS
     18  f9a8
     19  f9a8
     20  f9a8				   drawStart
     21  f9a8
     22  f9a8		       a0 80		      LDY	#SHAD_AND_0
     23  f9aa		       20 f6 f9 	      JSR	otherWall
     24  f9ad		       a0 c0		      LDY	#SHAD_AND_1
     25  f9af		       20 f6 f9 	      JSR	otherWall
     26  f9b2		       a0 e0		      LDY	#SHAD_AND_2
     27  f9b4		       20 f6 f9 	      JSR	otherWall
     28  f9b7		       a0 f0		      LDY	#SHAD_AND_3
     29  f9b9		       20 f6 f9 	      JSR	otherWall
     30  f9bc		       a0 f8		      LDY	#SHAD_AND_4
     31  f9be		       20 f6 f9 	      JSR	otherWall
     32  f9c1		       a2 00		      LDX	#0
     33  f9c3		       20 36 fa 	      JSR	medWall
     34  f9c6		       a2 01		      LDX	#1
     35  f9c8		       20 36 fa 	      JSR	medWall
     36  f9cb		       a2 02		      LDX	#2
     37  f9cd		       20 36 fa 	      JSR	medWall
     38  f9d0		       a2 01		      LDX	#1
     39  f9d2		       20 36 fa 	      JSR	medWall
     40  f9d5		       a2 00		      LDX	#0
     41  f9d7		       20 36 fa 	      JSR	medWall
     42  f9da		       a0 f8		      LDY	#SHAD_AND_4
     43  f9dc		       20 f6 f9 	      JSR	otherWall
     44  f9df		       a0 f0		      LDY	#SHAD_AND_3
     45  f9e1		       20 f6 f9 	      JSR	otherWall
     46  f9e4		       a0 e0		      LDY	#SHAD_AND_2
     47  f9e6		       20 f6 f9 	      JSR	otherWall
     48  f9e9		       a0 c0		      LDY	#SHAD_AND_1
     49  f9eb		       20 f6 f9 	      JSR	otherWall
     50  f9ee		       a0 80		      LDY	#SHAD_AND_0
     51  f9f0		       20 f6 f9 	      JSR	otherWall
     52  f9f3
     53  f9f3		       4c 6e fa 	      JMP	stop
     54  f9f6
     55  f9f6				   otherWall
     56  f9f6
     57  f9f6		       a2 00		      LDX	#INDEXINIT
     58  f9f8
     59  f9f8				   _otherWall_loop
     60  f9f8
     61  f9f8		       85 02		      STA	WSYNC
     62  f9fa
     63  f9fa		       a9 0e		      LDA	#MCOLU
     64  f9fc		       85 08		      STA	COLUPF
     65  f9fe		       a5 80		      LDA	wall1a
     66  fa00		       85 0e		      STA	PF1
     67  fa02		       a5 84		      LDA	wall1b
     68  fa04		       4a		      LSR
     69  fa05		       85 0f		      STA	PF2
     70  fa07
     71  fa07		       20 a2 f9 	      JSR	wait
     72  fa0a
     73  fa0a		       a9 00		      LDA	#NULL
     74  fa0c		       85 0e		      STA	PF1
     75  fa0e		       85 0f		      STA	PF2
     76  fa10
     77  fa10		       85 02		      STA	WSYNC
     78  fa12
     79  fa12		       a9 06		      LDA	#SCOLU
     80  fa14		       85 08		      STA	COLUPF
     81  fa16		       84 90		      STY	shift
     82  fa18		       a5 88		      LDA	shadow1a
     83  fa1a		       25 90		      AND	shift
     84  fa1c		       85 0e		      STA	PF1
     85  fa1e		       85 0e		      STA	PF1
     86  fa20		       a5 8c		      LDA	shadow1b
     87  fa22		       25 90		      AND	shift
     88  fa24		       4a		      LSR
     89  fa25		       85 0f		      STA	PF2
     90  fa27
     91  fa27		       20 a7 f9 	      JSR	wait2
     92  fa2a
     93  fa2a		       a9 00		      LDA	#NULL
     94  fa2c		       85 0e		      STA	PF1
     95  fa2e		       85 0f		      STA	PF2
     96  fa30
     97  fa30		       e8		      INX
     98  fa31		       e0 04		      CPX	#PIXH
     99  fa33		       d0 c3		      BNE	_otherWall_loop
    100  fa35
    101  fa35		       60		      RTS
    102  fa36
    103  fa36							; Every other wall drawing
    104  fa36
    105  fa36				   medWall
    106  fa36
    107  fa36		       a0 00		      LDY	#INDEXINIT
    108  fa38
    109  fa38				   _medWall_loop
    110  fa38
    111  fa38		       85 02		      STA	WSYNC
    112  fa3a		       a9 0e		      LDA	#MCOLU
    113  fa3c		       85 08		      STA	COLUPF
    114  fa3e		       b5 81		      LDA	wall2a,X
    115  fa40		       85 0e		      STA	PF1
    116  fa42		       b5 85		      LDA	wall2b,X
    117  fa44		       4a		      LSR
    118  fa45		       85 0f		      STA	PF2
    119  fa47
    120  fa47		       20 a2 f9 	      JSR	wait
    121  fa4a
    122  fa4a		       a9 00		      LDA	#NULL
    123  fa4c		       85 0e		      STA	PF1
    124  fa4e		       85 0f		      STA	PF2
    125  fa50		       85 02		      STA	WSYNC
    126  fa52
    127  fa52		       a9 06		      LDA	#SCOLU
    128  fa54		       85 08		      STA	COLUPF
    129  fa56		       b5 89		      LDA	shadow2a,X
    130  fa58		       85 0e		      STA	PF1
    131  fa5a		       b5 8d		      LDA	shadow2b,X
    132  fa5c		       4a		      LSR
    133  fa5d		       85 0f		      STA	PF2
    134  fa5f
    135  fa5f		       20 a2 f9 	      JSR	wait
    136  fa62
    137  fa62		       a9 00		      LDA	#NULL
    138  fa64		       85 0e		      STA	PF1
    139  fa66		       85 0f		      STA	PF2
    140  fa68
    141  fa68		       c8		      INY
    142  fa69
    143  fa69		       c0 04		      CPY	#PIXH
    144  fa6b		       d0 cb		      BNE	_medWall_loop
    145  fa6d
    146  fa6d		       60		      RTS
    147  fa6e
    148  fa6e				   stop
    149  fa6e
    150  fa6e		       85 02		      STA	WSYNC
    151  fa70
    152  fa70		       a9 00		      LDA	#NULL
    153  fa72		       85 0e		      STA	PF1
    154  fa74		       85 0f		      STA	PF2
------- FILE main.asm
     57  fa76
     58  fa76		       a9 c2		      LDA	#VBLANK_SET
     59  fa78		       85 01		      STA	VBLANK
     60  fa7a
------- FILE input.asm LEVEL 2 PASS 2
      0  fa7a					      INCLUDE	"input.asm"
      1  fa7a							; VePseu's controller input
      2  fa7a
      3  fa7a		       ad 80 02 	      LDA	SWCHA
      4  fa7d		       49 ff		      EOR	#SWGET
      5  fa7f		       29 10		      AND	#FFORD
      6  fa81		       c9 00		      CMP	#NOIN
      7  fa83		       f0 0e		      BEQ	CIN2
      8  fa85
      9  fa85		       a5 92		      LDA	mapWidth
     10  fa87		       85 96		      STA	yLoss
     11  fa89		       a9 01		      LDA	#ONE
     12  fa8b		       85 93		      STA	xGain
     13  fa8d		       a9 00		      LDA	#NULL
     14  fa8f		       85 95		      STA	yGain
     15  fa91		       85 94		      STA	xLoss
     16  fa93
     17  fa93				   CIN2
     18  fa93		       ad 80 02 	      LDA	SWCHA
     19  fa96		       49 ff		      EOR	#SWGET
     20  fa98		       29 20		      AND	#FBACK
     21  fa9a		       c9 00		      CMP	#NOIN
     22  fa9c		       f0 0e		      BEQ	CIN3
     23  fa9e
     24  fa9e		       a5 92		      LDA	mapWidth
     25  faa0		       85 95		      STA	yGain
     26  faa2		       a9 01		      LDA	#ONE
     27  faa4		       85 94		      STA	xLoss
     28  faa6		       a9 00		      LDA	#NULL
     29  faa8		       85 96		      STA	yLoss
     30  faaa		       85 93		      STA	xGain
     31  faac
     32  faac				   CIN3
     33  faac		       ad 80 02 	      LDA	SWCHA
     34  faaf		       49 ff		      EOR	#SWGET
     35  fab1		       29 80		      AND	#FLEFT
     36  fab3		       c9 00		      CMP	#NOIN
     37  fab5		       f0 0e		      BEQ	CIN4
     38  fab7
     39  fab7		       a5 92		      LDA	mapWidth
     40  fab9		       85 94		      STA	xLoss
     41  fabb		       a9 01		      LDA	#ONE
     42  fabd		       85 95		      STA	yGain
     43  fabf		       a9 00		      LDA	#NULL
     44  fac1		       85 96		      STA	yLoss
     45  fac3		       85 93		      STA	xGain
     46  fac5
     47  fac5				   CIN4
     48  fac5		       ad 80 02 	      LDA	SWCHA
     49  fac8		       49 ff		      EOR	#SWGET
     50  faca		       29 40		      AND	#FRIGT
     51  facc		       c9 00		      CMP	#NOIN
     52  face		       f0 0e		      BEQ	CTRIG
     53  fad0
     54  fad0		       a5 92		      LDA	mapWidth
     55  fad2		       85 93		      STA	xGain
     56  fad4		       a9 01		      LDA	#ONE
     57  fad6		       85 96		      STA	yLoss
     58  fad8		       a9 00		      LDA	#NULL
     59  fada		       85 95		      STA	yGain
     60  fadc		       85 94		      STA	xLoss
     61  fade
     62  fade				   CTRIG
     63  fade
     64  fade		       a5 3c		      LDA	INPT4
     65  fae0		       49 ff		      EOR	#SWGET
     66  fae2		       29 80		      AND	#ITRIG
     67  fae4		       c9 00		      CMP	#NOIN
     68  fae6		       f0 1e		      BEQ	CNOTRIG
     69  fae8
     70  fae8		       a5 91		      LDA	playerPos
     71  faea		       38		      SEC
     72  faeb		       e5 96		      SBC	yLoss
     73  faed		       18		      CLC
     74  faee		       65 95		      ADC	yGain
     75  faf0		       a8		      TAY
     76  faf1		       b1 98		      LDA	(mapPtr),Y
     77  faf3		       c9 00		      CMP	#NULL
     78  faf5		       d0 08		      BNE	COLL
     79  faf7		       a5 97		      LDA	trigPressed
     80  faf9		       c9 00		      CMP	#NULL
     81  fafb		       d0 02		      BNE	COLL
     82  fafd		       84 91		      STY	playerPos
     83  faff
     84  faff				   COLL
     85  faff
     86  faff		       a9 ff		      LDA	#$FF
     87  fb01		       85 97		      STA	trigPressed
     88  fb03		       4c 0a fb 	      JMP	CEND
     89  fb06
     90  fb06				   CNOTRIG
     91  fb06		       a9 00		      LDA	#NULL
     92  fb08		       85 97		      STA	trigPressed
     93  fb0a
     94  fb0a				   CEND
     95  fb0a		       85 02		      STA	WSYNC
------- FILE main.asm
     62  fb0c
     63  fb0c		       a2 00		      LDX	#INDEXINIT
     64  fb0e
     65  fb0e				   lowerPad		;Pad everything else
     66  fb0e		       85 02		      STA	WSYNC
     67  fb10
     68  fb10		       e8		      INX
     69  fb11		       e0 61		      CPX	#LOPAD_LIMIT
     70  fb13		       d0 f9		      BNE	lowerPad
     71  fb15
     72  fb15		       a9 00		      LDA	#NULL
     73  fb17		       85 01		      STA	VBLANK
     74  fb19		       a9 02		      LDA	#VSYNC_SET
     75  fb1b		       85 02		      STA	WSYNC
     76  fb1d		       4c 25 f8 	      JMP	screenStart
     77  fb20
     78  fffa					      ORG	$FFFA
     79  fffa
     80  fffa		       00 f8		      DC.W	start	; Something
     81  fffc		       00 f8		      DC.W	start	; Entrypoint
     82  fffe		       25 f8		      DC.W	screenStart	; Something else
     83  10000
     84  10000					       END
